
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Relational Database Service
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Relational Database Service</fullname> <p> </p> <p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale a relational database in the cloud. It provides cost-efficient, resizeable capacity for an industry-standard relational database and manages common database administration tasks, freeing up developers to focus on what makes their applications and businesses unique.</p> <p>Amazon RDS gives you access to the capabilities of a MySQL, MariaDB, PostgreSQL, Microsoft SQL Server, Oracle, or Amazon Aurora database server. These capabilities mean that the code, applications, and tools you already use today with your existing databases work with Amazon RDS without modification. Amazon RDS automatically backs up your database and maintains the database software that powers your DB instance. Amazon RDS is flexible: you can scale your DB instance's compute resources and storage capacity to meet your application's demand. As with all Amazon Web Services, there are no up-front investments, and you pay only for the resources you use.</p> <p>This interface reference for Amazon RDS contains documentation for a programming or command line interface you can use to manage Amazon RDS. Amazon RDS is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p> <p> <b>Amazon RDS API Reference</b> </p> <ul> <li> <p>For the alphabetical list of API actions, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html">API Actions</a>.</p> </li> <li> <p>For the alphabetical list of data types, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Types.html">Data Types</a>.</p> </li> <li> <p>For a list of common query parameters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonParameters.html">Common Parameters</a>.</p> </li> <li> <p>For descriptions of the error codes, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonErrors.html">Common Errors</a>.</p> </li> </ul> <p> <b>Amazon RDS User Guide</b> </p> <ul> <li> <p>For a summary of the Amazon RDS interfaces, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html#Welcome.Interfaces">Available RDS Interfaces</a>.</p> </li> <li> <p>For more information about how to use the Query API, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Using_the_Query_API.html">Using the Query API</a>.</p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_612658 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_612658](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_612658): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "rds"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_613269 = ref object of OpenApiRestCall_612658
proc url_PostAddRoleToDBCluster_613271(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBCluster_613270(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613272 = query.getOrDefault("Action")
  valid_613272 = validateParameter(valid_613272, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_613272 != nil:
    section.add "Action", valid_613272
  var valid_613273 = query.getOrDefault("Version")
  valid_613273 = validateParameter(valid_613273, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613273 != nil:
    section.add "Version", valid_613273
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613274 = header.getOrDefault("X-Amz-Signature")
  valid_613274 = validateParameter(valid_613274, JString, required = false,
                                 default = nil)
  if valid_613274 != nil:
    section.add "X-Amz-Signature", valid_613274
  var valid_613275 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613275 = validateParameter(valid_613275, JString, required = false,
                                 default = nil)
  if valid_613275 != nil:
    section.add "X-Amz-Content-Sha256", valid_613275
  var valid_613276 = header.getOrDefault("X-Amz-Date")
  valid_613276 = validateParameter(valid_613276, JString, required = false,
                                 default = nil)
  if valid_613276 != nil:
    section.add "X-Amz-Date", valid_613276
  var valid_613277 = header.getOrDefault("X-Amz-Credential")
  valid_613277 = validateParameter(valid_613277, JString, required = false,
                                 default = nil)
  if valid_613277 != nil:
    section.add "X-Amz-Credential", valid_613277
  var valid_613278 = header.getOrDefault("X-Amz-Security-Token")
  valid_613278 = validateParameter(valid_613278, JString, required = false,
                                 default = nil)
  if valid_613278 != nil:
    section.add "X-Amz-Security-Token", valid_613278
  var valid_613279 = header.getOrDefault("X-Amz-Algorithm")
  valid_613279 = validateParameter(valid_613279, JString, required = false,
                                 default = nil)
  if valid_613279 != nil:
    section.add "X-Amz-Algorithm", valid_613279
  var valid_613280 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613280 = validateParameter(valid_613280, JString, required = false,
                                 default = nil)
  if valid_613280 != nil:
    section.add "X-Amz-SignedHeaders", valid_613280
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  var valid_613281 = formData.getOrDefault("FeatureName")
  valid_613281 = validateParameter(valid_613281, JString, required = false,
                                 default = nil)
  if valid_613281 != nil:
    section.add "FeatureName", valid_613281
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_613282 = formData.getOrDefault("RoleArn")
  valid_613282 = validateParameter(valid_613282, JString, required = true,
                                 default = nil)
  if valid_613282 != nil:
    section.add "RoleArn", valid_613282
  var valid_613283 = formData.getOrDefault("DBClusterIdentifier")
  valid_613283 = validateParameter(valid_613283, JString, required = true,
                                 default = nil)
  if valid_613283 != nil:
    section.add "DBClusterIdentifier", valid_613283
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613284: Call_PostAddRoleToDBCluster_613269; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613284.validator(path, query, header, formData, body)
  let scheme = call_613284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613284.url(scheme.get, call_613284.host, call_613284.base,
                         call_613284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613284, url, valid)

proc call*(call_613285: Call_PostAddRoleToDBCluster_613269; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  var query_613286 = newJObject()
  var formData_613287 = newJObject()
  add(formData_613287, "FeatureName", newJString(FeatureName))
  add(formData_613287, "RoleArn", newJString(RoleArn))
  add(query_613286, "Action", newJString(Action))
  add(query_613286, "Version", newJString(Version))
  add(formData_613287, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_613285.call(nil, query_613286, nil, formData_613287, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_613269(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_613270, base: "/",
    url: url_PostAddRoleToDBCluster_613271, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_612996 = ref object of OpenApiRestCall_612658
proc url_GetAddRoleToDBCluster_612998(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBCluster_612997(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_613110 = query.getOrDefault("RoleArn")
  valid_613110 = validateParameter(valid_613110, JString, required = true,
                                 default = nil)
  if valid_613110 != nil:
    section.add "RoleArn", valid_613110
  var valid_613111 = query.getOrDefault("DBClusterIdentifier")
  valid_613111 = validateParameter(valid_613111, JString, required = true,
                                 default = nil)
  if valid_613111 != nil:
    section.add "DBClusterIdentifier", valid_613111
  var valid_613112 = query.getOrDefault("FeatureName")
  valid_613112 = validateParameter(valid_613112, JString, required = false,
                                 default = nil)
  if valid_613112 != nil:
    section.add "FeatureName", valid_613112
  var valid_613126 = query.getOrDefault("Action")
  valid_613126 = validateParameter(valid_613126, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_613126 != nil:
    section.add "Action", valid_613126
  var valid_613127 = query.getOrDefault("Version")
  valid_613127 = validateParameter(valid_613127, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613127 != nil:
    section.add "Version", valid_613127
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613128 = header.getOrDefault("X-Amz-Signature")
  valid_613128 = validateParameter(valid_613128, JString, required = false,
                                 default = nil)
  if valid_613128 != nil:
    section.add "X-Amz-Signature", valid_613128
  var valid_613129 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613129 = validateParameter(valid_613129, JString, required = false,
                                 default = nil)
  if valid_613129 != nil:
    section.add "X-Amz-Content-Sha256", valid_613129
  var valid_613130 = header.getOrDefault("X-Amz-Date")
  valid_613130 = validateParameter(valid_613130, JString, required = false,
                                 default = nil)
  if valid_613130 != nil:
    section.add "X-Amz-Date", valid_613130
  var valid_613131 = header.getOrDefault("X-Amz-Credential")
  valid_613131 = validateParameter(valid_613131, JString, required = false,
                                 default = nil)
  if valid_613131 != nil:
    section.add "X-Amz-Credential", valid_613131
  var valid_613132 = header.getOrDefault("X-Amz-Security-Token")
  valid_613132 = validateParameter(valid_613132, JString, required = false,
                                 default = nil)
  if valid_613132 != nil:
    section.add "X-Amz-Security-Token", valid_613132
  var valid_613133 = header.getOrDefault("X-Amz-Algorithm")
  valid_613133 = validateParameter(valid_613133, JString, required = false,
                                 default = nil)
  if valid_613133 != nil:
    section.add "X-Amz-Algorithm", valid_613133
  var valid_613134 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613134 = validateParameter(valid_613134, JString, required = false,
                                 default = nil)
  if valid_613134 != nil:
    section.add "X-Amz-SignedHeaders", valid_613134
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613157: Call_GetAddRoleToDBCluster_612996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613157.validator(path, query, header, formData, body)
  let scheme = call_613157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613157.url(scheme.get, call_613157.host, call_613157.base,
                         call_613157.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613157, url, valid)

proc call*(call_613228: Call_GetAddRoleToDBCluster_612996; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613229 = newJObject()
  add(query_613229, "RoleArn", newJString(RoleArn))
  add(query_613229, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613229, "FeatureName", newJString(FeatureName))
  add(query_613229, "Action", newJString(Action))
  add(query_613229, "Version", newJString(Version))
  result = call_613228.call(nil, query_613229, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_612996(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_612997, base: "/",
    url: url_GetAddRoleToDBCluster_612998, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToDBInstance_613306 = ref object of OpenApiRestCall_612658
proc url_PostAddRoleToDBInstance_613308(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBInstance_613307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613309 = query.getOrDefault("Action")
  valid_613309 = validateParameter(valid_613309, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_613309 != nil:
    section.add "Action", valid_613309
  var valid_613310 = query.getOrDefault("Version")
  valid_613310 = validateParameter(valid_613310, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613310 != nil:
    section.add "Version", valid_613310
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613311 = header.getOrDefault("X-Amz-Signature")
  valid_613311 = validateParameter(valid_613311, JString, required = false,
                                 default = nil)
  if valid_613311 != nil:
    section.add "X-Amz-Signature", valid_613311
  var valid_613312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613312 = validateParameter(valid_613312, JString, required = false,
                                 default = nil)
  if valid_613312 != nil:
    section.add "X-Amz-Content-Sha256", valid_613312
  var valid_613313 = header.getOrDefault("X-Amz-Date")
  valid_613313 = validateParameter(valid_613313, JString, required = false,
                                 default = nil)
  if valid_613313 != nil:
    section.add "X-Amz-Date", valid_613313
  var valid_613314 = header.getOrDefault("X-Amz-Credential")
  valid_613314 = validateParameter(valid_613314, JString, required = false,
                                 default = nil)
  if valid_613314 != nil:
    section.add "X-Amz-Credential", valid_613314
  var valid_613315 = header.getOrDefault("X-Amz-Security-Token")
  valid_613315 = validateParameter(valid_613315, JString, required = false,
                                 default = nil)
  if valid_613315 != nil:
    section.add "X-Amz-Security-Token", valid_613315
  var valid_613316 = header.getOrDefault("X-Amz-Algorithm")
  valid_613316 = validateParameter(valid_613316, JString, required = false,
                                 default = nil)
  if valid_613316 != nil:
    section.add "X-Amz-Algorithm", valid_613316
  var valid_613317 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613317 = validateParameter(valid_613317, JString, required = false,
                                 default = nil)
  if valid_613317 != nil:
    section.add "X-Amz-SignedHeaders", valid_613317
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_613318 = formData.getOrDefault("FeatureName")
  valid_613318 = validateParameter(valid_613318, JString, required = true,
                                 default = nil)
  if valid_613318 != nil:
    section.add "FeatureName", valid_613318
  var valid_613319 = formData.getOrDefault("RoleArn")
  valid_613319 = validateParameter(valid_613319, JString, required = true,
                                 default = nil)
  if valid_613319 != nil:
    section.add "RoleArn", valid_613319
  var valid_613320 = formData.getOrDefault("DBInstanceIdentifier")
  valid_613320 = validateParameter(valid_613320, JString, required = true,
                                 default = nil)
  if valid_613320 != nil:
    section.add "DBInstanceIdentifier", valid_613320
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613321: Call_PostAddRoleToDBInstance_613306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_613321.validator(path, query, header, formData, body)
  let scheme = call_613321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613321.url(scheme.get, call_613321.host, call_613321.base,
                         call_613321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613321, url, valid)

proc call*(call_613322: Call_PostAddRoleToDBInstance_613306; FeatureName: string;
          RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613323 = newJObject()
  var formData_613324 = newJObject()
  add(formData_613324, "FeatureName", newJString(FeatureName))
  add(formData_613324, "RoleArn", newJString(RoleArn))
  add(formData_613324, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_613323, "Action", newJString(Action))
  add(query_613323, "Version", newJString(Version))
  result = call_613322.call(nil, query_613323, nil, formData_613324, nil)

var postAddRoleToDBInstance* = Call_PostAddRoleToDBInstance_613306(
    name: "postAddRoleToDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_PostAddRoleToDBInstance_613307, base: "/",
    url: url_PostAddRoleToDBInstance_613308, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBInstance_613288 = ref object of OpenApiRestCall_612658
proc url_GetAddRoleToDBInstance_613290(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBInstance_613289(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_613291 = query.getOrDefault("RoleArn")
  valid_613291 = validateParameter(valid_613291, JString, required = true,
                                 default = nil)
  if valid_613291 != nil:
    section.add "RoleArn", valid_613291
  var valid_613292 = query.getOrDefault("FeatureName")
  valid_613292 = validateParameter(valid_613292, JString, required = true,
                                 default = nil)
  if valid_613292 != nil:
    section.add "FeatureName", valid_613292
  var valid_613293 = query.getOrDefault("DBInstanceIdentifier")
  valid_613293 = validateParameter(valid_613293, JString, required = true,
                                 default = nil)
  if valid_613293 != nil:
    section.add "DBInstanceIdentifier", valid_613293
  var valid_613294 = query.getOrDefault("Action")
  valid_613294 = validateParameter(valid_613294, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_613294 != nil:
    section.add "Action", valid_613294
  var valid_613295 = query.getOrDefault("Version")
  valid_613295 = validateParameter(valid_613295, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613295 != nil:
    section.add "Version", valid_613295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613296 = header.getOrDefault("X-Amz-Signature")
  valid_613296 = validateParameter(valid_613296, JString, required = false,
                                 default = nil)
  if valid_613296 != nil:
    section.add "X-Amz-Signature", valid_613296
  var valid_613297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613297 = validateParameter(valid_613297, JString, required = false,
                                 default = nil)
  if valid_613297 != nil:
    section.add "X-Amz-Content-Sha256", valid_613297
  var valid_613298 = header.getOrDefault("X-Amz-Date")
  valid_613298 = validateParameter(valid_613298, JString, required = false,
                                 default = nil)
  if valid_613298 != nil:
    section.add "X-Amz-Date", valid_613298
  var valid_613299 = header.getOrDefault("X-Amz-Credential")
  valid_613299 = validateParameter(valid_613299, JString, required = false,
                                 default = nil)
  if valid_613299 != nil:
    section.add "X-Amz-Credential", valid_613299
  var valid_613300 = header.getOrDefault("X-Amz-Security-Token")
  valid_613300 = validateParameter(valid_613300, JString, required = false,
                                 default = nil)
  if valid_613300 != nil:
    section.add "X-Amz-Security-Token", valid_613300
  var valid_613301 = header.getOrDefault("X-Amz-Algorithm")
  valid_613301 = validateParameter(valid_613301, JString, required = false,
                                 default = nil)
  if valid_613301 != nil:
    section.add "X-Amz-Algorithm", valid_613301
  var valid_613302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613302 = validateParameter(valid_613302, JString, required = false,
                                 default = nil)
  if valid_613302 != nil:
    section.add "X-Amz-SignedHeaders", valid_613302
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613303: Call_GetAddRoleToDBInstance_613288; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_613303.validator(path, query, header, formData, body)
  let scheme = call_613303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613303.url(scheme.get, call_613303.host, call_613303.base,
                         call_613303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613303, url, valid)

proc call*(call_613304: Call_GetAddRoleToDBInstance_613288; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613305 = newJObject()
  add(query_613305, "RoleArn", newJString(RoleArn))
  add(query_613305, "FeatureName", newJString(FeatureName))
  add(query_613305, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_613305, "Action", newJString(Action))
  add(query_613305, "Version", newJString(Version))
  result = call_613304.call(nil, query_613305, nil, nil, nil)

var getAddRoleToDBInstance* = Call_GetAddRoleToDBInstance_613288(
    name: "getAddRoleToDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_GetAddRoleToDBInstance_613289, base: "/",
    url: url_GetAddRoleToDBInstance_613290, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_613342 = ref object of OpenApiRestCall_612658
proc url_PostAddSourceIdentifierToSubscription_613344(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_613343(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613345 = query.getOrDefault("Action")
  valid_613345 = validateParameter(valid_613345, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_613345 != nil:
    section.add "Action", valid_613345
  var valid_613346 = query.getOrDefault("Version")
  valid_613346 = validateParameter(valid_613346, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613346 != nil:
    section.add "Version", valid_613346
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613347 = header.getOrDefault("X-Amz-Signature")
  valid_613347 = validateParameter(valid_613347, JString, required = false,
                                 default = nil)
  if valid_613347 != nil:
    section.add "X-Amz-Signature", valid_613347
  var valid_613348 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613348 = validateParameter(valid_613348, JString, required = false,
                                 default = nil)
  if valid_613348 != nil:
    section.add "X-Amz-Content-Sha256", valid_613348
  var valid_613349 = header.getOrDefault("X-Amz-Date")
  valid_613349 = validateParameter(valid_613349, JString, required = false,
                                 default = nil)
  if valid_613349 != nil:
    section.add "X-Amz-Date", valid_613349
  var valid_613350 = header.getOrDefault("X-Amz-Credential")
  valid_613350 = validateParameter(valid_613350, JString, required = false,
                                 default = nil)
  if valid_613350 != nil:
    section.add "X-Amz-Credential", valid_613350
  var valid_613351 = header.getOrDefault("X-Amz-Security-Token")
  valid_613351 = validateParameter(valid_613351, JString, required = false,
                                 default = nil)
  if valid_613351 != nil:
    section.add "X-Amz-Security-Token", valid_613351
  var valid_613352 = header.getOrDefault("X-Amz-Algorithm")
  valid_613352 = validateParameter(valid_613352, JString, required = false,
                                 default = nil)
  if valid_613352 != nil:
    section.add "X-Amz-Algorithm", valid_613352
  var valid_613353 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613353 = validateParameter(valid_613353, JString, required = false,
                                 default = nil)
  if valid_613353 != nil:
    section.add "X-Amz-SignedHeaders", valid_613353
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_613354 = formData.getOrDefault("SubscriptionName")
  valid_613354 = validateParameter(valid_613354, JString, required = true,
                                 default = nil)
  if valid_613354 != nil:
    section.add "SubscriptionName", valid_613354
  var valid_613355 = formData.getOrDefault("SourceIdentifier")
  valid_613355 = validateParameter(valid_613355, JString, required = true,
                                 default = nil)
  if valid_613355 != nil:
    section.add "SourceIdentifier", valid_613355
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613356: Call_PostAddSourceIdentifierToSubscription_613342;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_613356.validator(path, query, header, formData, body)
  let scheme = call_613356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613356.url(scheme.get, call_613356.host, call_613356.base,
                         call_613356.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613356, url, valid)

proc call*(call_613357: Call_PostAddSourceIdentifierToSubscription_613342;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613358 = newJObject()
  var formData_613359 = newJObject()
  add(formData_613359, "SubscriptionName", newJString(SubscriptionName))
  add(formData_613359, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_613358, "Action", newJString(Action))
  add(query_613358, "Version", newJString(Version))
  result = call_613357.call(nil, query_613358, nil, formData_613359, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_613342(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_613343, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_613344,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_613325 = ref object of OpenApiRestCall_612658
proc url_GetAddSourceIdentifierToSubscription_613327(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_613326(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_613328 = query.getOrDefault("SourceIdentifier")
  valid_613328 = validateParameter(valid_613328, JString, required = true,
                                 default = nil)
  if valid_613328 != nil:
    section.add "SourceIdentifier", valid_613328
  var valid_613329 = query.getOrDefault("SubscriptionName")
  valid_613329 = validateParameter(valid_613329, JString, required = true,
                                 default = nil)
  if valid_613329 != nil:
    section.add "SubscriptionName", valid_613329
  var valid_613330 = query.getOrDefault("Action")
  valid_613330 = validateParameter(valid_613330, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_613330 != nil:
    section.add "Action", valid_613330
  var valid_613331 = query.getOrDefault("Version")
  valid_613331 = validateParameter(valid_613331, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613331 != nil:
    section.add "Version", valid_613331
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613332 = header.getOrDefault("X-Amz-Signature")
  valid_613332 = validateParameter(valid_613332, JString, required = false,
                                 default = nil)
  if valid_613332 != nil:
    section.add "X-Amz-Signature", valid_613332
  var valid_613333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613333 = validateParameter(valid_613333, JString, required = false,
                                 default = nil)
  if valid_613333 != nil:
    section.add "X-Amz-Content-Sha256", valid_613333
  var valid_613334 = header.getOrDefault("X-Amz-Date")
  valid_613334 = validateParameter(valid_613334, JString, required = false,
                                 default = nil)
  if valid_613334 != nil:
    section.add "X-Amz-Date", valid_613334
  var valid_613335 = header.getOrDefault("X-Amz-Credential")
  valid_613335 = validateParameter(valid_613335, JString, required = false,
                                 default = nil)
  if valid_613335 != nil:
    section.add "X-Amz-Credential", valid_613335
  var valid_613336 = header.getOrDefault("X-Amz-Security-Token")
  valid_613336 = validateParameter(valid_613336, JString, required = false,
                                 default = nil)
  if valid_613336 != nil:
    section.add "X-Amz-Security-Token", valid_613336
  var valid_613337 = header.getOrDefault("X-Amz-Algorithm")
  valid_613337 = validateParameter(valid_613337, JString, required = false,
                                 default = nil)
  if valid_613337 != nil:
    section.add "X-Amz-Algorithm", valid_613337
  var valid_613338 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613338 = validateParameter(valid_613338, JString, required = false,
                                 default = nil)
  if valid_613338 != nil:
    section.add "X-Amz-SignedHeaders", valid_613338
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613339: Call_GetAddSourceIdentifierToSubscription_613325;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_613339.validator(path, query, header, formData, body)
  let scheme = call_613339.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613339.url(scheme.get, call_613339.host, call_613339.base,
                         call_613339.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613339, url, valid)

proc call*(call_613340: Call_GetAddSourceIdentifierToSubscription_613325;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613341 = newJObject()
  add(query_613341, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_613341, "SubscriptionName", newJString(SubscriptionName))
  add(query_613341, "Action", newJString(Action))
  add(query_613341, "Version", newJString(Version))
  result = call_613340.call(nil, query_613341, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_613325(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_613326, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_613327,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_613377 = ref object of OpenApiRestCall_612658
proc url_PostAddTagsToResource_613379(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_613378(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613380 = query.getOrDefault("Action")
  valid_613380 = validateParameter(valid_613380, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_613380 != nil:
    section.add "Action", valid_613380
  var valid_613381 = query.getOrDefault("Version")
  valid_613381 = validateParameter(valid_613381, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613381 != nil:
    section.add "Version", valid_613381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613382 = header.getOrDefault("X-Amz-Signature")
  valid_613382 = validateParameter(valid_613382, JString, required = false,
                                 default = nil)
  if valid_613382 != nil:
    section.add "X-Amz-Signature", valid_613382
  var valid_613383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613383 = validateParameter(valid_613383, JString, required = false,
                                 default = nil)
  if valid_613383 != nil:
    section.add "X-Amz-Content-Sha256", valid_613383
  var valid_613384 = header.getOrDefault("X-Amz-Date")
  valid_613384 = validateParameter(valid_613384, JString, required = false,
                                 default = nil)
  if valid_613384 != nil:
    section.add "X-Amz-Date", valid_613384
  var valid_613385 = header.getOrDefault("X-Amz-Credential")
  valid_613385 = validateParameter(valid_613385, JString, required = false,
                                 default = nil)
  if valid_613385 != nil:
    section.add "X-Amz-Credential", valid_613385
  var valid_613386 = header.getOrDefault("X-Amz-Security-Token")
  valid_613386 = validateParameter(valid_613386, JString, required = false,
                                 default = nil)
  if valid_613386 != nil:
    section.add "X-Amz-Security-Token", valid_613386
  var valid_613387 = header.getOrDefault("X-Amz-Algorithm")
  valid_613387 = validateParameter(valid_613387, JString, required = false,
                                 default = nil)
  if valid_613387 != nil:
    section.add "X-Amz-Algorithm", valid_613387
  var valid_613388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613388 = validateParameter(valid_613388, JString, required = false,
                                 default = nil)
  if valid_613388 != nil:
    section.add "X-Amz-SignedHeaders", valid_613388
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_613389 = formData.getOrDefault("Tags")
  valid_613389 = validateParameter(valid_613389, JArray, required = true, default = nil)
  if valid_613389 != nil:
    section.add "Tags", valid_613389
  var valid_613390 = formData.getOrDefault("ResourceName")
  valid_613390 = validateParameter(valid_613390, JString, required = true,
                                 default = nil)
  if valid_613390 != nil:
    section.add "ResourceName", valid_613390
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613391: Call_PostAddTagsToResource_613377; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_613391.validator(path, query, header, formData, body)
  let scheme = call_613391.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613391.url(scheme.get, call_613391.host, call_613391.base,
                         call_613391.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613391, url, valid)

proc call*(call_613392: Call_PostAddTagsToResource_613377; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  var query_613393 = newJObject()
  var formData_613394 = newJObject()
  add(query_613393, "Action", newJString(Action))
  if Tags != nil:
    formData_613394.add "Tags", Tags
  add(query_613393, "Version", newJString(Version))
  add(formData_613394, "ResourceName", newJString(ResourceName))
  result = call_613392.call(nil, query_613393, nil, formData_613394, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_613377(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_613378, base: "/",
    url: url_PostAddTagsToResource_613379, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_613360 = ref object of OpenApiRestCall_612658
proc url_GetAddTagsToResource_613362(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_613361(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_613363 = query.getOrDefault("Tags")
  valid_613363 = validateParameter(valid_613363, JArray, required = true, default = nil)
  if valid_613363 != nil:
    section.add "Tags", valid_613363
  var valid_613364 = query.getOrDefault("ResourceName")
  valid_613364 = validateParameter(valid_613364, JString, required = true,
                                 default = nil)
  if valid_613364 != nil:
    section.add "ResourceName", valid_613364
  var valid_613365 = query.getOrDefault("Action")
  valid_613365 = validateParameter(valid_613365, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_613365 != nil:
    section.add "Action", valid_613365
  var valid_613366 = query.getOrDefault("Version")
  valid_613366 = validateParameter(valid_613366, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613366 != nil:
    section.add "Version", valid_613366
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613367 = header.getOrDefault("X-Amz-Signature")
  valid_613367 = validateParameter(valid_613367, JString, required = false,
                                 default = nil)
  if valid_613367 != nil:
    section.add "X-Amz-Signature", valid_613367
  var valid_613368 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613368 = validateParameter(valid_613368, JString, required = false,
                                 default = nil)
  if valid_613368 != nil:
    section.add "X-Amz-Content-Sha256", valid_613368
  var valid_613369 = header.getOrDefault("X-Amz-Date")
  valid_613369 = validateParameter(valid_613369, JString, required = false,
                                 default = nil)
  if valid_613369 != nil:
    section.add "X-Amz-Date", valid_613369
  var valid_613370 = header.getOrDefault("X-Amz-Credential")
  valid_613370 = validateParameter(valid_613370, JString, required = false,
                                 default = nil)
  if valid_613370 != nil:
    section.add "X-Amz-Credential", valid_613370
  var valid_613371 = header.getOrDefault("X-Amz-Security-Token")
  valid_613371 = validateParameter(valid_613371, JString, required = false,
                                 default = nil)
  if valid_613371 != nil:
    section.add "X-Amz-Security-Token", valid_613371
  var valid_613372 = header.getOrDefault("X-Amz-Algorithm")
  valid_613372 = validateParameter(valid_613372, JString, required = false,
                                 default = nil)
  if valid_613372 != nil:
    section.add "X-Amz-Algorithm", valid_613372
  var valid_613373 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613373 = validateParameter(valid_613373, JString, required = false,
                                 default = nil)
  if valid_613373 != nil:
    section.add "X-Amz-SignedHeaders", valid_613373
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613374: Call_GetAddTagsToResource_613360; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_613374.validator(path, query, header, formData, body)
  let scheme = call_613374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613374.url(scheme.get, call_613374.host, call_613374.base,
                         call_613374.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613374, url, valid)

proc call*(call_613375: Call_GetAddTagsToResource_613360; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613376 = newJObject()
  if Tags != nil:
    query_613376.add "Tags", Tags
  add(query_613376, "ResourceName", newJString(ResourceName))
  add(query_613376, "Action", newJString(Action))
  add(query_613376, "Version", newJString(Version))
  result = call_613375.call(nil, query_613376, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_613360(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_613361, base: "/",
    url: url_GetAddTagsToResource_613362, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_613413 = ref object of OpenApiRestCall_612658
proc url_PostApplyPendingMaintenanceAction_613415(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_613414(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613416 = query.getOrDefault("Action")
  valid_613416 = validateParameter(valid_613416, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_613416 != nil:
    section.add "Action", valid_613416
  var valid_613417 = query.getOrDefault("Version")
  valid_613417 = validateParameter(valid_613417, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613417 != nil:
    section.add "Version", valid_613417
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613418 = header.getOrDefault("X-Amz-Signature")
  valid_613418 = validateParameter(valid_613418, JString, required = false,
                                 default = nil)
  if valid_613418 != nil:
    section.add "X-Amz-Signature", valid_613418
  var valid_613419 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613419 = validateParameter(valid_613419, JString, required = false,
                                 default = nil)
  if valid_613419 != nil:
    section.add "X-Amz-Content-Sha256", valid_613419
  var valid_613420 = header.getOrDefault("X-Amz-Date")
  valid_613420 = validateParameter(valid_613420, JString, required = false,
                                 default = nil)
  if valid_613420 != nil:
    section.add "X-Amz-Date", valid_613420
  var valid_613421 = header.getOrDefault("X-Amz-Credential")
  valid_613421 = validateParameter(valid_613421, JString, required = false,
                                 default = nil)
  if valid_613421 != nil:
    section.add "X-Amz-Credential", valid_613421
  var valid_613422 = header.getOrDefault("X-Amz-Security-Token")
  valid_613422 = validateParameter(valid_613422, JString, required = false,
                                 default = nil)
  if valid_613422 != nil:
    section.add "X-Amz-Security-Token", valid_613422
  var valid_613423 = header.getOrDefault("X-Amz-Algorithm")
  valid_613423 = validateParameter(valid_613423, JString, required = false,
                                 default = nil)
  if valid_613423 != nil:
    section.add "X-Amz-Algorithm", valid_613423
  var valid_613424 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613424 = validateParameter(valid_613424, JString, required = false,
                                 default = nil)
  if valid_613424 != nil:
    section.add "X-Amz-SignedHeaders", valid_613424
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ResourceIdentifier` field"
  var valid_613425 = formData.getOrDefault("ResourceIdentifier")
  valid_613425 = validateParameter(valid_613425, JString, required = true,
                                 default = nil)
  if valid_613425 != nil:
    section.add "ResourceIdentifier", valid_613425
  var valid_613426 = formData.getOrDefault("ApplyAction")
  valid_613426 = validateParameter(valid_613426, JString, required = true,
                                 default = nil)
  if valid_613426 != nil:
    section.add "ApplyAction", valid_613426
  var valid_613427 = formData.getOrDefault("OptInType")
  valid_613427 = validateParameter(valid_613427, JString, required = true,
                                 default = nil)
  if valid_613427 != nil:
    section.add "OptInType", valid_613427
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613428: Call_PostApplyPendingMaintenanceAction_613413;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_613428.validator(path, query, header, formData, body)
  let scheme = call_613428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613428.url(scheme.get, call_613428.host, call_613428.base,
                         call_613428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613428, url, valid)

proc call*(call_613429: Call_PostApplyPendingMaintenanceAction_613413;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_613430 = newJObject()
  var formData_613431 = newJObject()
  add(formData_613431, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_613431, "ApplyAction", newJString(ApplyAction))
  add(query_613430, "Action", newJString(Action))
  add(formData_613431, "OptInType", newJString(OptInType))
  add(query_613430, "Version", newJString(Version))
  result = call_613429.call(nil, query_613430, nil, formData_613431, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_613413(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_613414, base: "/",
    url: url_PostApplyPendingMaintenanceAction_613415,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_613395 = ref object of OpenApiRestCall_612658
proc url_GetApplyPendingMaintenanceAction_613397(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_613396(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ResourceIdentifier` field"
  var valid_613398 = query.getOrDefault("ResourceIdentifier")
  valid_613398 = validateParameter(valid_613398, JString, required = true,
                                 default = nil)
  if valid_613398 != nil:
    section.add "ResourceIdentifier", valid_613398
  var valid_613399 = query.getOrDefault("ApplyAction")
  valid_613399 = validateParameter(valid_613399, JString, required = true,
                                 default = nil)
  if valid_613399 != nil:
    section.add "ApplyAction", valid_613399
  var valid_613400 = query.getOrDefault("Action")
  valid_613400 = validateParameter(valid_613400, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_613400 != nil:
    section.add "Action", valid_613400
  var valid_613401 = query.getOrDefault("OptInType")
  valid_613401 = validateParameter(valid_613401, JString, required = true,
                                 default = nil)
  if valid_613401 != nil:
    section.add "OptInType", valid_613401
  var valid_613402 = query.getOrDefault("Version")
  valid_613402 = validateParameter(valid_613402, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613402 != nil:
    section.add "Version", valid_613402
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613403 = header.getOrDefault("X-Amz-Signature")
  valid_613403 = validateParameter(valid_613403, JString, required = false,
                                 default = nil)
  if valid_613403 != nil:
    section.add "X-Amz-Signature", valid_613403
  var valid_613404 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613404 = validateParameter(valid_613404, JString, required = false,
                                 default = nil)
  if valid_613404 != nil:
    section.add "X-Amz-Content-Sha256", valid_613404
  var valid_613405 = header.getOrDefault("X-Amz-Date")
  valid_613405 = validateParameter(valid_613405, JString, required = false,
                                 default = nil)
  if valid_613405 != nil:
    section.add "X-Amz-Date", valid_613405
  var valid_613406 = header.getOrDefault("X-Amz-Credential")
  valid_613406 = validateParameter(valid_613406, JString, required = false,
                                 default = nil)
  if valid_613406 != nil:
    section.add "X-Amz-Credential", valid_613406
  var valid_613407 = header.getOrDefault("X-Amz-Security-Token")
  valid_613407 = validateParameter(valid_613407, JString, required = false,
                                 default = nil)
  if valid_613407 != nil:
    section.add "X-Amz-Security-Token", valid_613407
  var valid_613408 = header.getOrDefault("X-Amz-Algorithm")
  valid_613408 = validateParameter(valid_613408, JString, required = false,
                                 default = nil)
  if valid_613408 != nil:
    section.add "X-Amz-Algorithm", valid_613408
  var valid_613409 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613409 = validateParameter(valid_613409, JString, required = false,
                                 default = nil)
  if valid_613409 != nil:
    section.add "X-Amz-SignedHeaders", valid_613409
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613410: Call_GetApplyPendingMaintenanceAction_613395;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_613410.validator(path, query, header, formData, body)
  let scheme = call_613410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613410.url(scheme.get, call_613410.host, call_613410.base,
                         call_613410.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613410, url, valid)

proc call*(call_613411: Call_GetApplyPendingMaintenanceAction_613395;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_613412 = newJObject()
  add(query_613412, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_613412, "ApplyAction", newJString(ApplyAction))
  add(query_613412, "Action", newJString(Action))
  add(query_613412, "OptInType", newJString(OptInType))
  add(query_613412, "Version", newJString(Version))
  result = call_613411.call(nil, query_613412, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_613395(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_613396, base: "/",
    url: url_GetApplyPendingMaintenanceAction_613397,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeDBSecurityGroupIngress_613452 = ref object of OpenApiRestCall_612658
proc url_PostAuthorizeDBSecurityGroupIngress_613454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAuthorizeDBSecurityGroupIngress_613453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613455 = query.getOrDefault("Action")
  valid_613455 = validateParameter(valid_613455, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_613455 != nil:
    section.add "Action", valid_613455
  var valid_613456 = query.getOrDefault("Version")
  valid_613456 = validateParameter(valid_613456, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613456 != nil:
    section.add "Version", valid_613456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613457 = header.getOrDefault("X-Amz-Signature")
  valid_613457 = validateParameter(valid_613457, JString, required = false,
                                 default = nil)
  if valid_613457 != nil:
    section.add "X-Amz-Signature", valid_613457
  var valid_613458 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613458 = validateParameter(valid_613458, JString, required = false,
                                 default = nil)
  if valid_613458 != nil:
    section.add "X-Amz-Content-Sha256", valid_613458
  var valid_613459 = header.getOrDefault("X-Amz-Date")
  valid_613459 = validateParameter(valid_613459, JString, required = false,
                                 default = nil)
  if valid_613459 != nil:
    section.add "X-Amz-Date", valid_613459
  var valid_613460 = header.getOrDefault("X-Amz-Credential")
  valid_613460 = validateParameter(valid_613460, JString, required = false,
                                 default = nil)
  if valid_613460 != nil:
    section.add "X-Amz-Credential", valid_613460
  var valid_613461 = header.getOrDefault("X-Amz-Security-Token")
  valid_613461 = validateParameter(valid_613461, JString, required = false,
                                 default = nil)
  if valid_613461 != nil:
    section.add "X-Amz-Security-Token", valid_613461
  var valid_613462 = header.getOrDefault("X-Amz-Algorithm")
  valid_613462 = validateParameter(valid_613462, JString, required = false,
                                 default = nil)
  if valid_613462 != nil:
    section.add "X-Amz-Algorithm", valid_613462
  var valid_613463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613463 = validateParameter(valid_613463, JString, required = false,
                                 default = nil)
  if valid_613463 != nil:
    section.add "X-Amz-SignedHeaders", valid_613463
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_613464 = formData.getOrDefault("DBSecurityGroupName")
  valid_613464 = validateParameter(valid_613464, JString, required = true,
                                 default = nil)
  if valid_613464 != nil:
    section.add "DBSecurityGroupName", valid_613464
  var valid_613465 = formData.getOrDefault("EC2SecurityGroupName")
  valid_613465 = validateParameter(valid_613465, JString, required = false,
                                 default = nil)
  if valid_613465 != nil:
    section.add "EC2SecurityGroupName", valid_613465
  var valid_613466 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_613466 = validateParameter(valid_613466, JString, required = false,
                                 default = nil)
  if valid_613466 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_613466
  var valid_613467 = formData.getOrDefault("EC2SecurityGroupId")
  valid_613467 = validateParameter(valid_613467, JString, required = false,
                                 default = nil)
  if valid_613467 != nil:
    section.add "EC2SecurityGroupId", valid_613467
  var valid_613468 = formData.getOrDefault("CIDRIP")
  valid_613468 = validateParameter(valid_613468, JString, required = false,
                                 default = nil)
  if valid_613468 != nil:
    section.add "CIDRIP", valid_613468
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613469: Call_PostAuthorizeDBSecurityGroupIngress_613452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_613469.validator(path, query, header, formData, body)
  let scheme = call_613469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613469.url(scheme.get, call_613469.host, call_613469.base,
                         call_613469.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613469, url, valid)

proc call*(call_613470: Call_PostAuthorizeDBSecurityGroupIngress_613452;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613471 = newJObject()
  var formData_613472 = newJObject()
  add(formData_613472, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_613472, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_613472, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_613472, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_613472, "CIDRIP", newJString(CIDRIP))
  add(query_613471, "Action", newJString(Action))
  add(query_613471, "Version", newJString(Version))
  result = call_613470.call(nil, query_613471, nil, formData_613472, nil)

var postAuthorizeDBSecurityGroupIngress* = Call_PostAuthorizeDBSecurityGroupIngress_613452(
    name: "postAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_PostAuthorizeDBSecurityGroupIngress_613453, base: "/",
    url: url_PostAuthorizeDBSecurityGroupIngress_613454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeDBSecurityGroupIngress_613432 = ref object of OpenApiRestCall_612658
proc url_GetAuthorizeDBSecurityGroupIngress_613434(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAuthorizeDBSecurityGroupIngress_613433(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  var valid_613435 = query.getOrDefault("EC2SecurityGroupName")
  valid_613435 = validateParameter(valid_613435, JString, required = false,
                                 default = nil)
  if valid_613435 != nil:
    section.add "EC2SecurityGroupName", valid_613435
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_613436 = query.getOrDefault("DBSecurityGroupName")
  valid_613436 = validateParameter(valid_613436, JString, required = true,
                                 default = nil)
  if valid_613436 != nil:
    section.add "DBSecurityGroupName", valid_613436
  var valid_613437 = query.getOrDefault("EC2SecurityGroupId")
  valid_613437 = validateParameter(valid_613437, JString, required = false,
                                 default = nil)
  if valid_613437 != nil:
    section.add "EC2SecurityGroupId", valid_613437
  var valid_613438 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_613438 = validateParameter(valid_613438, JString, required = false,
                                 default = nil)
  if valid_613438 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_613438
  var valid_613439 = query.getOrDefault("Action")
  valid_613439 = validateParameter(valid_613439, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_613439 != nil:
    section.add "Action", valid_613439
  var valid_613440 = query.getOrDefault("Version")
  valid_613440 = validateParameter(valid_613440, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613440 != nil:
    section.add "Version", valid_613440
  var valid_613441 = query.getOrDefault("CIDRIP")
  valid_613441 = validateParameter(valid_613441, JString, required = false,
                                 default = nil)
  if valid_613441 != nil:
    section.add "CIDRIP", valid_613441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613442 = header.getOrDefault("X-Amz-Signature")
  valid_613442 = validateParameter(valid_613442, JString, required = false,
                                 default = nil)
  if valid_613442 != nil:
    section.add "X-Amz-Signature", valid_613442
  var valid_613443 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613443 = validateParameter(valid_613443, JString, required = false,
                                 default = nil)
  if valid_613443 != nil:
    section.add "X-Amz-Content-Sha256", valid_613443
  var valid_613444 = header.getOrDefault("X-Amz-Date")
  valid_613444 = validateParameter(valid_613444, JString, required = false,
                                 default = nil)
  if valid_613444 != nil:
    section.add "X-Amz-Date", valid_613444
  var valid_613445 = header.getOrDefault("X-Amz-Credential")
  valid_613445 = validateParameter(valid_613445, JString, required = false,
                                 default = nil)
  if valid_613445 != nil:
    section.add "X-Amz-Credential", valid_613445
  var valid_613446 = header.getOrDefault("X-Amz-Security-Token")
  valid_613446 = validateParameter(valid_613446, JString, required = false,
                                 default = nil)
  if valid_613446 != nil:
    section.add "X-Amz-Security-Token", valid_613446
  var valid_613447 = header.getOrDefault("X-Amz-Algorithm")
  valid_613447 = validateParameter(valid_613447, JString, required = false,
                                 default = nil)
  if valid_613447 != nil:
    section.add "X-Amz-Algorithm", valid_613447
  var valid_613448 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613448 = validateParameter(valid_613448, JString, required = false,
                                 default = nil)
  if valid_613448 != nil:
    section.add "X-Amz-SignedHeaders", valid_613448
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613449: Call_GetAuthorizeDBSecurityGroupIngress_613432;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_613449.validator(path, query, header, formData, body)
  let scheme = call_613449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613449.url(scheme.get, call_613449.host, call_613449.base,
                         call_613449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613449, url, valid)

proc call*(call_613450: Call_GetAuthorizeDBSecurityGroupIngress_613432;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  var query_613451 = newJObject()
  add(query_613451, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_613451, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_613451, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_613451, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_613451, "Action", newJString(Action))
  add(query_613451, "Version", newJString(Version))
  add(query_613451, "CIDRIP", newJString(CIDRIP))
  result = call_613450.call(nil, query_613451, nil, nil, nil)

var getAuthorizeDBSecurityGroupIngress* = Call_GetAuthorizeDBSecurityGroupIngress_613432(
    name: "getAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_GetAuthorizeDBSecurityGroupIngress_613433, base: "/",
    url: url_GetAuthorizeDBSecurityGroupIngress_613434,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBacktrackDBCluster_613492 = ref object of OpenApiRestCall_612658
proc url_PostBacktrackDBCluster_613494(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBacktrackDBCluster_613493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613495 = query.getOrDefault("Action")
  valid_613495 = validateParameter(valid_613495, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_613495 != nil:
    section.add "Action", valid_613495
  var valid_613496 = query.getOrDefault("Version")
  valid_613496 = validateParameter(valid_613496, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613496 != nil:
    section.add "Version", valid_613496
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613497 = header.getOrDefault("X-Amz-Signature")
  valid_613497 = validateParameter(valid_613497, JString, required = false,
                                 default = nil)
  if valid_613497 != nil:
    section.add "X-Amz-Signature", valid_613497
  var valid_613498 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613498 = validateParameter(valid_613498, JString, required = false,
                                 default = nil)
  if valid_613498 != nil:
    section.add "X-Amz-Content-Sha256", valid_613498
  var valid_613499 = header.getOrDefault("X-Amz-Date")
  valid_613499 = validateParameter(valid_613499, JString, required = false,
                                 default = nil)
  if valid_613499 != nil:
    section.add "X-Amz-Date", valid_613499
  var valid_613500 = header.getOrDefault("X-Amz-Credential")
  valid_613500 = validateParameter(valid_613500, JString, required = false,
                                 default = nil)
  if valid_613500 != nil:
    section.add "X-Amz-Credential", valid_613500
  var valid_613501 = header.getOrDefault("X-Amz-Security-Token")
  valid_613501 = validateParameter(valid_613501, JString, required = false,
                                 default = nil)
  if valid_613501 != nil:
    section.add "X-Amz-Security-Token", valid_613501
  var valid_613502 = header.getOrDefault("X-Amz-Algorithm")
  valid_613502 = validateParameter(valid_613502, JString, required = false,
                                 default = nil)
  if valid_613502 != nil:
    section.add "X-Amz-Algorithm", valid_613502
  var valid_613503 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613503 = validateParameter(valid_613503, JString, required = false,
                                 default = nil)
  if valid_613503 != nil:
    section.add "X-Amz-SignedHeaders", valid_613503
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  section = newJObject()
  var valid_613504 = formData.getOrDefault("Force")
  valid_613504 = validateParameter(valid_613504, JBool, required = false, default = nil)
  if valid_613504 != nil:
    section.add "Force", valid_613504
  var valid_613505 = formData.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_613505 = validateParameter(valid_613505, JBool, required = false, default = nil)
  if valid_613505 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_613505
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_613506 = formData.getOrDefault("DBClusterIdentifier")
  valid_613506 = validateParameter(valid_613506, JString, required = true,
                                 default = nil)
  if valid_613506 != nil:
    section.add "DBClusterIdentifier", valid_613506
  var valid_613507 = formData.getOrDefault("BacktrackTo")
  valid_613507 = validateParameter(valid_613507, JString, required = true,
                                 default = nil)
  if valid_613507 != nil:
    section.add "BacktrackTo", valid_613507
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613508: Call_PostBacktrackDBCluster_613492; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613508.validator(path, query, header, formData, body)
  let scheme = call_613508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613508.url(scheme.get, call_613508.host, call_613508.base,
                         call_613508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613508, url, valid)

proc call*(call_613509: Call_PostBacktrackDBCluster_613492;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  var query_613510 = newJObject()
  var formData_613511 = newJObject()
  add(formData_613511, "Force", newJBool(Force))
  add(formData_613511, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_613510, "Action", newJString(Action))
  add(query_613510, "Version", newJString(Version))
  add(formData_613511, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_613511, "BacktrackTo", newJString(BacktrackTo))
  result = call_613509.call(nil, query_613510, nil, formData_613511, nil)

var postBacktrackDBCluster* = Call_PostBacktrackDBCluster_613492(
    name: "postBacktrackDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_PostBacktrackDBCluster_613493, base: "/",
    url: url_PostBacktrackDBCluster_613494, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBacktrackDBCluster_613473 = ref object of OpenApiRestCall_612658
proc url_GetBacktrackDBCluster_613475(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBacktrackDBCluster_613474(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: JString (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_613476 = query.getOrDefault("DBClusterIdentifier")
  valid_613476 = validateParameter(valid_613476, JString, required = true,
                                 default = nil)
  if valid_613476 != nil:
    section.add "DBClusterIdentifier", valid_613476
  var valid_613477 = query.getOrDefault("BacktrackTo")
  valid_613477 = validateParameter(valid_613477, JString, required = true,
                                 default = nil)
  if valid_613477 != nil:
    section.add "BacktrackTo", valid_613477
  var valid_613478 = query.getOrDefault("Force")
  valid_613478 = validateParameter(valid_613478, JBool, required = false, default = nil)
  if valid_613478 != nil:
    section.add "Force", valid_613478
  var valid_613479 = query.getOrDefault("Action")
  valid_613479 = validateParameter(valid_613479, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_613479 != nil:
    section.add "Action", valid_613479
  var valid_613480 = query.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_613480 = validateParameter(valid_613480, JBool, required = false, default = nil)
  if valid_613480 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_613480
  var valid_613481 = query.getOrDefault("Version")
  valid_613481 = validateParameter(valid_613481, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613481 != nil:
    section.add "Version", valid_613481
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613482 = header.getOrDefault("X-Amz-Signature")
  valid_613482 = validateParameter(valid_613482, JString, required = false,
                                 default = nil)
  if valid_613482 != nil:
    section.add "X-Amz-Signature", valid_613482
  var valid_613483 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613483 = validateParameter(valid_613483, JString, required = false,
                                 default = nil)
  if valid_613483 != nil:
    section.add "X-Amz-Content-Sha256", valid_613483
  var valid_613484 = header.getOrDefault("X-Amz-Date")
  valid_613484 = validateParameter(valid_613484, JString, required = false,
                                 default = nil)
  if valid_613484 != nil:
    section.add "X-Amz-Date", valid_613484
  var valid_613485 = header.getOrDefault("X-Amz-Credential")
  valid_613485 = validateParameter(valid_613485, JString, required = false,
                                 default = nil)
  if valid_613485 != nil:
    section.add "X-Amz-Credential", valid_613485
  var valid_613486 = header.getOrDefault("X-Amz-Security-Token")
  valid_613486 = validateParameter(valid_613486, JString, required = false,
                                 default = nil)
  if valid_613486 != nil:
    section.add "X-Amz-Security-Token", valid_613486
  var valid_613487 = header.getOrDefault("X-Amz-Algorithm")
  valid_613487 = validateParameter(valid_613487, JString, required = false,
                                 default = nil)
  if valid_613487 != nil:
    section.add "X-Amz-Algorithm", valid_613487
  var valid_613488 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613488 = validateParameter(valid_613488, JString, required = false,
                                 default = nil)
  if valid_613488 != nil:
    section.add "X-Amz-SignedHeaders", valid_613488
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613489: Call_GetBacktrackDBCluster_613473; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613489.validator(path, query, header, formData, body)
  let scheme = call_613489.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613489.url(scheme.get, call_613489.host, call_613489.base,
                         call_613489.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613489, url, valid)

proc call*(call_613490: Call_GetBacktrackDBCluster_613473;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          Action: string = "BacktrackDBCluster";
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: string (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: string (required)
  var query_613491 = newJObject()
  add(query_613491, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613491, "BacktrackTo", newJString(BacktrackTo))
  add(query_613491, "Force", newJBool(Force))
  add(query_613491, "Action", newJString(Action))
  add(query_613491, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_613491, "Version", newJString(Version))
  result = call_613490.call(nil, query_613491, nil, nil, nil)

var getBacktrackDBCluster* = Call_GetBacktrackDBCluster_613473(
    name: "getBacktrackDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_GetBacktrackDBCluster_613474, base: "/",
    url: url_GetBacktrackDBCluster_613475, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCancelExportTask_613528 = ref object of OpenApiRestCall_612658
proc url_PostCancelExportTask_613530(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCancelExportTask_613529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613531 = query.getOrDefault("Action")
  valid_613531 = validateParameter(valid_613531, JString, required = true,
                                 default = newJString("CancelExportTask"))
  if valid_613531 != nil:
    section.add "Action", valid_613531
  var valid_613532 = query.getOrDefault("Version")
  valid_613532 = validateParameter(valid_613532, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613532 != nil:
    section.add "Version", valid_613532
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613533 = header.getOrDefault("X-Amz-Signature")
  valid_613533 = validateParameter(valid_613533, JString, required = false,
                                 default = nil)
  if valid_613533 != nil:
    section.add "X-Amz-Signature", valid_613533
  var valid_613534 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613534 = validateParameter(valid_613534, JString, required = false,
                                 default = nil)
  if valid_613534 != nil:
    section.add "X-Amz-Content-Sha256", valid_613534
  var valid_613535 = header.getOrDefault("X-Amz-Date")
  valid_613535 = validateParameter(valid_613535, JString, required = false,
                                 default = nil)
  if valid_613535 != nil:
    section.add "X-Amz-Date", valid_613535
  var valid_613536 = header.getOrDefault("X-Amz-Credential")
  valid_613536 = validateParameter(valid_613536, JString, required = false,
                                 default = nil)
  if valid_613536 != nil:
    section.add "X-Amz-Credential", valid_613536
  var valid_613537 = header.getOrDefault("X-Amz-Security-Token")
  valid_613537 = validateParameter(valid_613537, JString, required = false,
                                 default = nil)
  if valid_613537 != nil:
    section.add "X-Amz-Security-Token", valid_613537
  var valid_613538 = header.getOrDefault("X-Amz-Algorithm")
  valid_613538 = validateParameter(valid_613538, JString, required = false,
                                 default = nil)
  if valid_613538 != nil:
    section.add "X-Amz-Algorithm", valid_613538
  var valid_613539 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613539 = validateParameter(valid_613539, JString, required = false,
                                 default = nil)
  if valid_613539 != nil:
    section.add "X-Amz-SignedHeaders", valid_613539
  result.add "header", section
  ## parameters in `formData` object:
  ##   ExportTaskIdentifier: JString (required)
  ##                       : The identifier of the snapshot export task to cancel.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ExportTaskIdentifier` field"
  var valid_613540 = formData.getOrDefault("ExportTaskIdentifier")
  valid_613540 = validateParameter(valid_613540, JString, required = true,
                                 default = nil)
  if valid_613540 != nil:
    section.add "ExportTaskIdentifier", valid_613540
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613541: Call_PostCancelExportTask_613528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ## 
  let valid = call_613541.validator(path, query, header, formData, body)
  let scheme = call_613541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613541.url(scheme.get, call_613541.host, call_613541.base,
                         call_613541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613541, url, valid)

proc call*(call_613542: Call_PostCancelExportTask_613528;
          ExportTaskIdentifier: string; Action: string = "CancelExportTask";
          Version: string = "2014-10-31"): Recallable =
  ## postCancelExportTask
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ##   ExportTaskIdentifier: string (required)
  ##                       : The identifier of the snapshot export task to cancel.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613543 = newJObject()
  var formData_613544 = newJObject()
  add(formData_613544, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(query_613543, "Action", newJString(Action))
  add(query_613543, "Version", newJString(Version))
  result = call_613542.call(nil, query_613543, nil, formData_613544, nil)

var postCancelExportTask* = Call_PostCancelExportTask_613528(
    name: "postCancelExportTask", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CancelExportTask",
    validator: validate_PostCancelExportTask_613529, base: "/",
    url: url_PostCancelExportTask_613530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCancelExportTask_613512 = ref object of OpenApiRestCall_612658
proc url_GetCancelExportTask_613514(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCancelExportTask_613513(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExportTaskIdentifier: JString (required)
  ##                       : The identifier of the snapshot export task to cancel.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ExportTaskIdentifier` field"
  var valid_613515 = query.getOrDefault("ExportTaskIdentifier")
  valid_613515 = validateParameter(valid_613515, JString, required = true,
                                 default = nil)
  if valid_613515 != nil:
    section.add "ExportTaskIdentifier", valid_613515
  var valid_613516 = query.getOrDefault("Action")
  valid_613516 = validateParameter(valid_613516, JString, required = true,
                                 default = newJString("CancelExportTask"))
  if valid_613516 != nil:
    section.add "Action", valid_613516
  var valid_613517 = query.getOrDefault("Version")
  valid_613517 = validateParameter(valid_613517, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613517 != nil:
    section.add "Version", valid_613517
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613518 = header.getOrDefault("X-Amz-Signature")
  valid_613518 = validateParameter(valid_613518, JString, required = false,
                                 default = nil)
  if valid_613518 != nil:
    section.add "X-Amz-Signature", valid_613518
  var valid_613519 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613519 = validateParameter(valid_613519, JString, required = false,
                                 default = nil)
  if valid_613519 != nil:
    section.add "X-Amz-Content-Sha256", valid_613519
  var valid_613520 = header.getOrDefault("X-Amz-Date")
  valid_613520 = validateParameter(valid_613520, JString, required = false,
                                 default = nil)
  if valid_613520 != nil:
    section.add "X-Amz-Date", valid_613520
  var valid_613521 = header.getOrDefault("X-Amz-Credential")
  valid_613521 = validateParameter(valid_613521, JString, required = false,
                                 default = nil)
  if valid_613521 != nil:
    section.add "X-Amz-Credential", valid_613521
  var valid_613522 = header.getOrDefault("X-Amz-Security-Token")
  valid_613522 = validateParameter(valid_613522, JString, required = false,
                                 default = nil)
  if valid_613522 != nil:
    section.add "X-Amz-Security-Token", valid_613522
  var valid_613523 = header.getOrDefault("X-Amz-Algorithm")
  valid_613523 = validateParameter(valid_613523, JString, required = false,
                                 default = nil)
  if valid_613523 != nil:
    section.add "X-Amz-Algorithm", valid_613523
  var valid_613524 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613524 = validateParameter(valid_613524, JString, required = false,
                                 default = nil)
  if valid_613524 != nil:
    section.add "X-Amz-SignedHeaders", valid_613524
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613525: Call_GetCancelExportTask_613512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ## 
  let valid = call_613525.validator(path, query, header, formData, body)
  let scheme = call_613525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613525.url(scheme.get, call_613525.host, call_613525.base,
                         call_613525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613525, url, valid)

proc call*(call_613526: Call_GetCancelExportTask_613512;
          ExportTaskIdentifier: string; Action: string = "CancelExportTask";
          Version: string = "2014-10-31"): Recallable =
  ## getCancelExportTask
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ##   ExportTaskIdentifier: string (required)
  ##                       : The identifier of the snapshot export task to cancel.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613527 = newJObject()
  add(query_613527, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(query_613527, "Action", newJString(Action))
  add(query_613527, "Version", newJString(Version))
  result = call_613526.call(nil, query_613527, nil, nil, nil)

var getCancelExportTask* = Call_GetCancelExportTask_613512(
    name: "getCancelExportTask", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CancelExportTask",
    validator: validate_GetCancelExportTask_613513, base: "/",
    url: url_GetCancelExportTask_613514, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_613564 = ref object of OpenApiRestCall_612658
proc url_PostCopyDBClusterParameterGroup_613566(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_613565(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613567 = query.getOrDefault("Action")
  valid_613567 = validateParameter(valid_613567, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_613567 != nil:
    section.add "Action", valid_613567
  var valid_613568 = query.getOrDefault("Version")
  valid_613568 = validateParameter(valid_613568, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613568 != nil:
    section.add "Version", valid_613568
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613569 = header.getOrDefault("X-Amz-Signature")
  valid_613569 = validateParameter(valid_613569, JString, required = false,
                                 default = nil)
  if valid_613569 != nil:
    section.add "X-Amz-Signature", valid_613569
  var valid_613570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613570 = validateParameter(valid_613570, JString, required = false,
                                 default = nil)
  if valid_613570 != nil:
    section.add "X-Amz-Content-Sha256", valid_613570
  var valid_613571 = header.getOrDefault("X-Amz-Date")
  valid_613571 = validateParameter(valid_613571, JString, required = false,
                                 default = nil)
  if valid_613571 != nil:
    section.add "X-Amz-Date", valid_613571
  var valid_613572 = header.getOrDefault("X-Amz-Credential")
  valid_613572 = validateParameter(valid_613572, JString, required = false,
                                 default = nil)
  if valid_613572 != nil:
    section.add "X-Amz-Credential", valid_613572
  var valid_613573 = header.getOrDefault("X-Amz-Security-Token")
  valid_613573 = validateParameter(valid_613573, JString, required = false,
                                 default = nil)
  if valid_613573 != nil:
    section.add "X-Amz-Security-Token", valid_613573
  var valid_613574 = header.getOrDefault("X-Amz-Algorithm")
  valid_613574 = validateParameter(valid_613574, JString, required = false,
                                 default = nil)
  if valid_613574 != nil:
    section.add "X-Amz-Algorithm", valid_613574
  var valid_613575 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613575 = validateParameter(valid_613575, JString, required = false,
                                 default = nil)
  if valid_613575 != nil:
    section.add "X-Amz-SignedHeaders", valid_613575
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupIdentifier` field"
  var valid_613576 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_613576 = validateParameter(valid_613576, JString, required = true,
                                 default = nil)
  if valid_613576 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_613576
  var valid_613577 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_613577 = validateParameter(valid_613577, JString, required = true,
                                 default = nil)
  if valid_613577 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_613577
  var valid_613578 = formData.getOrDefault("Tags")
  valid_613578 = validateParameter(valid_613578, JArray, required = false,
                                 default = nil)
  if valid_613578 != nil:
    section.add "Tags", valid_613578
  var valid_613579 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_613579 = validateParameter(valid_613579, JString, required = true,
                                 default = nil)
  if valid_613579 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_613579
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613580: Call_PostCopyDBClusterParameterGroup_613564;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613580.validator(path, query, header, formData, body)
  let scheme = call_613580.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613580.url(scheme.get, call_613580.host, call_613580.base,
                         call_613580.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613580, url, valid)

proc call*(call_613581: Call_PostCopyDBClusterParameterGroup_613564;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          Action: string = "CopyDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  var query_613582 = newJObject()
  var formData_613583 = newJObject()
  add(formData_613583, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(formData_613583, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_613582, "Action", newJString(Action))
  if Tags != nil:
    formData_613583.add "Tags", Tags
  add(query_613582, "Version", newJString(Version))
  add(formData_613583, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  result = call_613581.call(nil, query_613582, nil, formData_613583, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_613564(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_613565, base: "/",
    url: url_PostCopyDBClusterParameterGroup_613566,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_613545 = ref object of OpenApiRestCall_612658
proc url_GetCopyDBClusterParameterGroup_613547(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_613546(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: JString (required)
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_613548 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_613548 = validateParameter(valid_613548, JString, required = true,
                                 default = nil)
  if valid_613548 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_613548
  var valid_613549 = query.getOrDefault("Tags")
  valid_613549 = validateParameter(valid_613549, JArray, required = false,
                                 default = nil)
  if valid_613549 != nil:
    section.add "Tags", valid_613549
  var valid_613550 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_613550 = validateParameter(valid_613550, JString, required = true,
                                 default = nil)
  if valid_613550 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_613550
  var valid_613551 = query.getOrDefault("Action")
  valid_613551 = validateParameter(valid_613551, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_613551 != nil:
    section.add "Action", valid_613551
  var valid_613552 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_613552 = validateParameter(valid_613552, JString, required = true,
                                 default = nil)
  if valid_613552 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_613552
  var valid_613553 = query.getOrDefault("Version")
  valid_613553 = validateParameter(valid_613553, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613553 != nil:
    section.add "Version", valid_613553
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613554 = header.getOrDefault("X-Amz-Signature")
  valid_613554 = validateParameter(valid_613554, JString, required = false,
                                 default = nil)
  if valid_613554 != nil:
    section.add "X-Amz-Signature", valid_613554
  var valid_613555 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613555 = validateParameter(valid_613555, JString, required = false,
                                 default = nil)
  if valid_613555 != nil:
    section.add "X-Amz-Content-Sha256", valid_613555
  var valid_613556 = header.getOrDefault("X-Amz-Date")
  valid_613556 = validateParameter(valid_613556, JString, required = false,
                                 default = nil)
  if valid_613556 != nil:
    section.add "X-Amz-Date", valid_613556
  var valid_613557 = header.getOrDefault("X-Amz-Credential")
  valid_613557 = validateParameter(valid_613557, JString, required = false,
                                 default = nil)
  if valid_613557 != nil:
    section.add "X-Amz-Credential", valid_613557
  var valid_613558 = header.getOrDefault("X-Amz-Security-Token")
  valid_613558 = validateParameter(valid_613558, JString, required = false,
                                 default = nil)
  if valid_613558 != nil:
    section.add "X-Amz-Security-Token", valid_613558
  var valid_613559 = header.getOrDefault("X-Amz-Algorithm")
  valid_613559 = validateParameter(valid_613559, JString, required = false,
                                 default = nil)
  if valid_613559 != nil:
    section.add "X-Amz-Algorithm", valid_613559
  var valid_613560 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613560 = validateParameter(valid_613560, JString, required = false,
                                 default = nil)
  if valid_613560 != nil:
    section.add "X-Amz-SignedHeaders", valid_613560
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613561: Call_GetCopyDBClusterParameterGroup_613545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613561.validator(path, query, header, formData, body)
  let scheme = call_613561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613561.url(scheme.get, call_613561.host, call_613561.base,
                         call_613561.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613561, url, valid)

proc call*(call_613562: Call_GetCopyDBClusterParameterGroup_613545;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_613563 = newJObject()
  add(query_613563, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    query_613563.add "Tags", Tags
  add(query_613563, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_613563, "Action", newJString(Action))
  add(query_613563, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_613563, "Version", newJString(Version))
  result = call_613562.call(nil, query_613563, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_613545(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_613546, base: "/",
    url: url_GetCopyDBClusterParameterGroup_613547,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_613606 = ref object of OpenApiRestCall_612658
proc url_PostCopyDBClusterSnapshot_613608(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterSnapshot_613607(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613609 = query.getOrDefault("Action")
  valid_613609 = validateParameter(valid_613609, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_613609 != nil:
    section.add "Action", valid_613609
  var valid_613610 = query.getOrDefault("Version")
  valid_613610 = validateParameter(valid_613610, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613610 != nil:
    section.add "Version", valid_613610
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613611 = header.getOrDefault("X-Amz-Signature")
  valid_613611 = validateParameter(valid_613611, JString, required = false,
                                 default = nil)
  if valid_613611 != nil:
    section.add "X-Amz-Signature", valid_613611
  var valid_613612 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613612 = validateParameter(valid_613612, JString, required = false,
                                 default = nil)
  if valid_613612 != nil:
    section.add "X-Amz-Content-Sha256", valid_613612
  var valid_613613 = header.getOrDefault("X-Amz-Date")
  valid_613613 = validateParameter(valid_613613, JString, required = false,
                                 default = nil)
  if valid_613613 != nil:
    section.add "X-Amz-Date", valid_613613
  var valid_613614 = header.getOrDefault("X-Amz-Credential")
  valid_613614 = validateParameter(valid_613614, JString, required = false,
                                 default = nil)
  if valid_613614 != nil:
    section.add "X-Amz-Credential", valid_613614
  var valid_613615 = header.getOrDefault("X-Amz-Security-Token")
  valid_613615 = validateParameter(valid_613615, JString, required = false,
                                 default = nil)
  if valid_613615 != nil:
    section.add "X-Amz-Security-Token", valid_613615
  var valid_613616 = header.getOrDefault("X-Amz-Algorithm")
  valid_613616 = validateParameter(valid_613616, JString, required = false,
                                 default = nil)
  if valid_613616 != nil:
    section.add "X-Amz-Algorithm", valid_613616
  var valid_613617 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613617 = validateParameter(valid_613617, JString, required = false,
                                 default = nil)
  if valid_613617 != nil:
    section.add "X-Amz-SignedHeaders", valid_613617
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_613618 = formData.getOrDefault("SourceRegion")
  valid_613618 = validateParameter(valid_613618, JString, required = false,
                                 default = nil)
  if valid_613618 != nil:
    section.add "SourceRegion", valid_613618
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_613619 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_613619 = validateParameter(valid_613619, JString, required = true,
                                 default = nil)
  if valid_613619 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_613619
  var valid_613620 = formData.getOrDefault("KmsKeyId")
  valid_613620 = validateParameter(valid_613620, JString, required = false,
                                 default = nil)
  if valid_613620 != nil:
    section.add "KmsKeyId", valid_613620
  var valid_613621 = formData.getOrDefault("PreSignedUrl")
  valid_613621 = validateParameter(valid_613621, JString, required = false,
                                 default = nil)
  if valid_613621 != nil:
    section.add "PreSignedUrl", valid_613621
  var valid_613622 = formData.getOrDefault("CopyTags")
  valid_613622 = validateParameter(valid_613622, JBool, required = false, default = nil)
  if valid_613622 != nil:
    section.add "CopyTags", valid_613622
  var valid_613623 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_613623 = validateParameter(valid_613623, JString, required = true,
                                 default = nil)
  if valid_613623 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_613623
  var valid_613624 = formData.getOrDefault("Tags")
  valid_613624 = validateParameter(valid_613624, JArray, required = false,
                                 default = nil)
  if valid_613624 != nil:
    section.add "Tags", valid_613624
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613625: Call_PostCopyDBClusterSnapshot_613606; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613625.validator(path, query, header, formData, body)
  let scheme = call_613625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613625.url(scheme.get, call_613625.host, call_613625.base,
                         call_613625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613625, url, valid)

proc call*(call_613626: Call_PostCopyDBClusterSnapshot_613606;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; SourceRegion: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_613627 = newJObject()
  var formData_613628 = newJObject()
  add(formData_613628, "SourceRegion", newJString(SourceRegion))
  add(formData_613628, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_613628, "KmsKeyId", newJString(KmsKeyId))
  add(formData_613628, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_613628, "CopyTags", newJBool(CopyTags))
  add(formData_613628, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_613627, "Action", newJString(Action))
  if Tags != nil:
    formData_613628.add "Tags", Tags
  add(query_613627, "Version", newJString(Version))
  result = call_613626.call(nil, query_613627, nil, formData_613628, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_613606(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_613607, base: "/",
    url: url_PostCopyDBClusterSnapshot_613608,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_613584 = ref object of OpenApiRestCall_612658
proc url_GetCopyDBClusterSnapshot_613586(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterSnapshot_613585(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: JString (required)
  section = newJObject()
  var valid_613587 = query.getOrDefault("Tags")
  valid_613587 = validateParameter(valid_613587, JArray, required = false,
                                 default = nil)
  if valid_613587 != nil:
    section.add "Tags", valid_613587
  var valid_613588 = query.getOrDefault("KmsKeyId")
  valid_613588 = validateParameter(valid_613588, JString, required = false,
                                 default = nil)
  if valid_613588 != nil:
    section.add "KmsKeyId", valid_613588
  var valid_613589 = query.getOrDefault("PreSignedUrl")
  valid_613589 = validateParameter(valid_613589, JString, required = false,
                                 default = nil)
  if valid_613589 != nil:
    section.add "PreSignedUrl", valid_613589
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_613590 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_613590 = validateParameter(valid_613590, JString, required = true,
                                 default = nil)
  if valid_613590 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_613590
  var valid_613591 = query.getOrDefault("SourceRegion")
  valid_613591 = validateParameter(valid_613591, JString, required = false,
                                 default = nil)
  if valid_613591 != nil:
    section.add "SourceRegion", valid_613591
  var valid_613592 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_613592 = validateParameter(valid_613592, JString, required = true,
                                 default = nil)
  if valid_613592 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_613592
  var valid_613593 = query.getOrDefault("Action")
  valid_613593 = validateParameter(valid_613593, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_613593 != nil:
    section.add "Action", valid_613593
  var valid_613594 = query.getOrDefault("CopyTags")
  valid_613594 = validateParameter(valid_613594, JBool, required = false, default = nil)
  if valid_613594 != nil:
    section.add "CopyTags", valid_613594
  var valid_613595 = query.getOrDefault("Version")
  valid_613595 = validateParameter(valid_613595, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613595 != nil:
    section.add "Version", valid_613595
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613596 = header.getOrDefault("X-Amz-Signature")
  valid_613596 = validateParameter(valid_613596, JString, required = false,
                                 default = nil)
  if valid_613596 != nil:
    section.add "X-Amz-Signature", valid_613596
  var valid_613597 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613597 = validateParameter(valid_613597, JString, required = false,
                                 default = nil)
  if valid_613597 != nil:
    section.add "X-Amz-Content-Sha256", valid_613597
  var valid_613598 = header.getOrDefault("X-Amz-Date")
  valid_613598 = validateParameter(valid_613598, JString, required = false,
                                 default = nil)
  if valid_613598 != nil:
    section.add "X-Amz-Date", valid_613598
  var valid_613599 = header.getOrDefault("X-Amz-Credential")
  valid_613599 = validateParameter(valid_613599, JString, required = false,
                                 default = nil)
  if valid_613599 != nil:
    section.add "X-Amz-Credential", valid_613599
  var valid_613600 = header.getOrDefault("X-Amz-Security-Token")
  valid_613600 = validateParameter(valid_613600, JString, required = false,
                                 default = nil)
  if valid_613600 != nil:
    section.add "X-Amz-Security-Token", valid_613600
  var valid_613601 = header.getOrDefault("X-Amz-Algorithm")
  valid_613601 = validateParameter(valid_613601, JString, required = false,
                                 default = nil)
  if valid_613601 != nil:
    section.add "X-Amz-Algorithm", valid_613601
  var valid_613602 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613602 = validateParameter(valid_613602, JString, required = false,
                                 default = nil)
  if valid_613602 != nil:
    section.add "X-Amz-SignedHeaders", valid_613602
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613603: Call_GetCopyDBClusterSnapshot_613584; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613603.validator(path, query, header, formData, body)
  let scheme = call_613603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613603.url(scheme.get, call_613603.host, call_613603.base,
                         call_613603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613603, url, valid)

proc call*(call_613604: Call_GetCopyDBClusterSnapshot_613584;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; Tags: JsonNode = nil;
          KmsKeyId: string = ""; PreSignedUrl: string = ""; SourceRegion: string = "";
          Action: string = "CopyDBClusterSnapshot"; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: string (required)
  var query_613605 = newJObject()
  if Tags != nil:
    query_613605.add "Tags", Tags
  add(query_613605, "KmsKeyId", newJString(KmsKeyId))
  add(query_613605, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_613605, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_613605, "SourceRegion", newJString(SourceRegion))
  add(query_613605, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_613605, "Action", newJString(Action))
  add(query_613605, "CopyTags", newJBool(CopyTags))
  add(query_613605, "Version", newJString(Version))
  result = call_613604.call(nil, query_613605, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_613584(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_613585, base: "/",
    url: url_GetCopyDBClusterSnapshot_613586, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_613648 = ref object of OpenApiRestCall_612658
proc url_PostCopyDBParameterGroup_613650(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBParameterGroup_613649(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613651 = query.getOrDefault("Action")
  valid_613651 = validateParameter(valid_613651, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_613651 != nil:
    section.add "Action", valid_613651
  var valid_613652 = query.getOrDefault("Version")
  valid_613652 = validateParameter(valid_613652, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613652 != nil:
    section.add "Version", valid_613652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613653 = header.getOrDefault("X-Amz-Signature")
  valid_613653 = validateParameter(valid_613653, JString, required = false,
                                 default = nil)
  if valid_613653 != nil:
    section.add "X-Amz-Signature", valid_613653
  var valid_613654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613654 = validateParameter(valid_613654, JString, required = false,
                                 default = nil)
  if valid_613654 != nil:
    section.add "X-Amz-Content-Sha256", valid_613654
  var valid_613655 = header.getOrDefault("X-Amz-Date")
  valid_613655 = validateParameter(valid_613655, JString, required = false,
                                 default = nil)
  if valid_613655 != nil:
    section.add "X-Amz-Date", valid_613655
  var valid_613656 = header.getOrDefault("X-Amz-Credential")
  valid_613656 = validateParameter(valid_613656, JString, required = false,
                                 default = nil)
  if valid_613656 != nil:
    section.add "X-Amz-Credential", valid_613656
  var valid_613657 = header.getOrDefault("X-Amz-Security-Token")
  valid_613657 = validateParameter(valid_613657, JString, required = false,
                                 default = nil)
  if valid_613657 != nil:
    section.add "X-Amz-Security-Token", valid_613657
  var valid_613658 = header.getOrDefault("X-Amz-Algorithm")
  valid_613658 = validateParameter(valid_613658, JString, required = false,
                                 default = nil)
  if valid_613658 != nil:
    section.add "X-Amz-Algorithm", valid_613658
  var valid_613659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613659 = validateParameter(valid_613659, JString, required = false,
                                 default = nil)
  if valid_613659 != nil:
    section.add "X-Amz-SignedHeaders", valid_613659
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_613660 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_613660 = validateParameter(valid_613660, JString, required = true,
                                 default = nil)
  if valid_613660 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_613660
  var valid_613661 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_613661 = validateParameter(valid_613661, JString, required = true,
                                 default = nil)
  if valid_613661 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_613661
  var valid_613662 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_613662 = validateParameter(valid_613662, JString, required = true,
                                 default = nil)
  if valid_613662 != nil:
    section.add "TargetDBParameterGroupDescription", valid_613662
  var valid_613663 = formData.getOrDefault("Tags")
  valid_613663 = validateParameter(valid_613663, JArray, required = false,
                                 default = nil)
  if valid_613663 != nil:
    section.add "Tags", valid_613663
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613664: Call_PostCopyDBParameterGroup_613648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_613664.validator(path, query, header, formData, body)
  let scheme = call_613664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613664.url(scheme.get, call_613664.host, call_613664.base,
                         call_613664.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613664, url, valid)

proc call*(call_613665: Call_PostCopyDBParameterGroup_613648;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          Action: string = "CopyDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_613666 = newJObject()
  var formData_613667 = newJObject()
  add(formData_613667, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(formData_613667, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(formData_613667, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_613666, "Action", newJString(Action))
  if Tags != nil:
    formData_613667.add "Tags", Tags
  add(query_613666, "Version", newJString(Version))
  result = call_613665.call(nil, query_613666, nil, formData_613667, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_613648(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_613649, base: "/",
    url: url_PostCopyDBParameterGroup_613650, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_613629 = ref object of OpenApiRestCall_612658
proc url_GetCopyDBParameterGroup_613631(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBParameterGroup_613630(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_613632 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_613632 = validateParameter(valid_613632, JString, required = true,
                                 default = nil)
  if valid_613632 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_613632
  var valid_613633 = query.getOrDefault("Tags")
  valid_613633 = validateParameter(valid_613633, JArray, required = false,
                                 default = nil)
  if valid_613633 != nil:
    section.add "Tags", valid_613633
  var valid_613634 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_613634 = validateParameter(valid_613634, JString, required = true,
                                 default = nil)
  if valid_613634 != nil:
    section.add "TargetDBParameterGroupDescription", valid_613634
  var valid_613635 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_613635 = validateParameter(valid_613635, JString, required = true,
                                 default = nil)
  if valid_613635 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_613635
  var valid_613636 = query.getOrDefault("Action")
  valid_613636 = validateParameter(valid_613636, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_613636 != nil:
    section.add "Action", valid_613636
  var valid_613637 = query.getOrDefault("Version")
  valid_613637 = validateParameter(valid_613637, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613637 != nil:
    section.add "Version", valid_613637
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613638 = header.getOrDefault("X-Amz-Signature")
  valid_613638 = validateParameter(valid_613638, JString, required = false,
                                 default = nil)
  if valid_613638 != nil:
    section.add "X-Amz-Signature", valid_613638
  var valid_613639 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613639 = validateParameter(valid_613639, JString, required = false,
                                 default = nil)
  if valid_613639 != nil:
    section.add "X-Amz-Content-Sha256", valid_613639
  var valid_613640 = header.getOrDefault("X-Amz-Date")
  valid_613640 = validateParameter(valid_613640, JString, required = false,
                                 default = nil)
  if valid_613640 != nil:
    section.add "X-Amz-Date", valid_613640
  var valid_613641 = header.getOrDefault("X-Amz-Credential")
  valid_613641 = validateParameter(valid_613641, JString, required = false,
                                 default = nil)
  if valid_613641 != nil:
    section.add "X-Amz-Credential", valid_613641
  var valid_613642 = header.getOrDefault("X-Amz-Security-Token")
  valid_613642 = validateParameter(valid_613642, JString, required = false,
                                 default = nil)
  if valid_613642 != nil:
    section.add "X-Amz-Security-Token", valid_613642
  var valid_613643 = header.getOrDefault("X-Amz-Algorithm")
  valid_613643 = validateParameter(valid_613643, JString, required = false,
                                 default = nil)
  if valid_613643 != nil:
    section.add "X-Amz-Algorithm", valid_613643
  var valid_613644 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613644 = validateParameter(valid_613644, JString, required = false,
                                 default = nil)
  if valid_613644 != nil:
    section.add "X-Amz-SignedHeaders", valid_613644
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613645: Call_GetCopyDBParameterGroup_613629; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_613645.validator(path, query, header, formData, body)
  let scheme = call_613645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613645.url(scheme.get, call_613645.host, call_613645.base,
                         call_613645.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613645, url, valid)

proc call*(call_613646: Call_GetCopyDBParameterGroup_613629;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613647 = newJObject()
  add(query_613647, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  if Tags != nil:
    query_613647.add "Tags", Tags
  add(query_613647, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_613647, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(query_613647, "Action", newJString(Action))
  add(query_613647, "Version", newJString(Version))
  result = call_613646.call(nil, query_613647, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_613629(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_613630, base: "/",
    url: url_GetCopyDBParameterGroup_613631, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBSnapshot_613691 = ref object of OpenApiRestCall_612658
proc url_PostCopyDBSnapshot_613693(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBSnapshot_613692(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613694 = query.getOrDefault("Action")
  valid_613694 = validateParameter(valid_613694, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_613694 != nil:
    section.add "Action", valid_613694
  var valid_613695 = query.getOrDefault("Version")
  valid_613695 = validateParameter(valid_613695, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613695 != nil:
    section.add "Version", valid_613695
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613696 = header.getOrDefault("X-Amz-Signature")
  valid_613696 = validateParameter(valid_613696, JString, required = false,
                                 default = nil)
  if valid_613696 != nil:
    section.add "X-Amz-Signature", valid_613696
  var valid_613697 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613697 = validateParameter(valid_613697, JString, required = false,
                                 default = nil)
  if valid_613697 != nil:
    section.add "X-Amz-Content-Sha256", valid_613697
  var valid_613698 = header.getOrDefault("X-Amz-Date")
  valid_613698 = validateParameter(valid_613698, JString, required = false,
                                 default = nil)
  if valid_613698 != nil:
    section.add "X-Amz-Date", valid_613698
  var valid_613699 = header.getOrDefault("X-Amz-Credential")
  valid_613699 = validateParameter(valid_613699, JString, required = false,
                                 default = nil)
  if valid_613699 != nil:
    section.add "X-Amz-Credential", valid_613699
  var valid_613700 = header.getOrDefault("X-Amz-Security-Token")
  valid_613700 = validateParameter(valid_613700, JString, required = false,
                                 default = nil)
  if valid_613700 != nil:
    section.add "X-Amz-Security-Token", valid_613700
  var valid_613701 = header.getOrDefault("X-Amz-Algorithm")
  valid_613701 = validateParameter(valid_613701, JString, required = false,
                                 default = nil)
  if valid_613701 != nil:
    section.add "X-Amz-Algorithm", valid_613701
  var valid_613702 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613702 = validateParameter(valid_613702, JString, required = false,
                                 default = nil)
  if valid_613702 != nil:
    section.add "X-Amz-SignedHeaders", valid_613702
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_613703 = formData.getOrDefault("SourceRegion")
  valid_613703 = validateParameter(valid_613703, JString, required = false,
                                 default = nil)
  if valid_613703 != nil:
    section.add "SourceRegion", valid_613703
  var valid_613704 = formData.getOrDefault("KmsKeyId")
  valid_613704 = validateParameter(valid_613704, JString, required = false,
                                 default = nil)
  if valid_613704 != nil:
    section.add "KmsKeyId", valid_613704
  assert formData != nil, "formData argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_613705 = formData.getOrDefault("SourceDBSnapshotIdentifier")
  valid_613705 = validateParameter(valid_613705, JString, required = true,
                                 default = nil)
  if valid_613705 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_613705
  var valid_613706 = formData.getOrDefault("CopyTags")
  valid_613706 = validateParameter(valid_613706, JBool, required = false, default = nil)
  if valid_613706 != nil:
    section.add "CopyTags", valid_613706
  var valid_613707 = formData.getOrDefault("PreSignedUrl")
  valid_613707 = validateParameter(valid_613707, JString, required = false,
                                 default = nil)
  if valid_613707 != nil:
    section.add "PreSignedUrl", valid_613707
  var valid_613708 = formData.getOrDefault("Tags")
  valid_613708 = validateParameter(valid_613708, JArray, required = false,
                                 default = nil)
  if valid_613708 != nil:
    section.add "Tags", valid_613708
  var valid_613709 = formData.getOrDefault("TargetDBSnapshotIdentifier")
  valid_613709 = validateParameter(valid_613709, JString, required = true,
                                 default = nil)
  if valid_613709 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_613709
  var valid_613710 = formData.getOrDefault("OptionGroupName")
  valid_613710 = validateParameter(valid_613710, JString, required = false,
                                 default = nil)
  if valid_613710 != nil:
    section.add "OptionGroupName", valid_613710
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613711: Call_PostCopyDBSnapshot_613691; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_613711.validator(path, query, header, formData, body)
  let scheme = call_613711.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613711.url(scheme.get, call_613711.host, call_613711.base,
                         call_613711.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613711, url, valid)

proc call*(call_613712: Call_PostCopyDBSnapshot_613691;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          SourceRegion: string = ""; KmsKeyId: string = ""; CopyTags: bool = false;
          PreSignedUrl: string = ""; Action: string = "CopyDBSnapshot";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_613713 = newJObject()
  var formData_613714 = newJObject()
  add(formData_613714, "SourceRegion", newJString(SourceRegion))
  add(formData_613714, "KmsKeyId", newJString(KmsKeyId))
  add(formData_613714, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(formData_613714, "CopyTags", newJBool(CopyTags))
  add(formData_613714, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_613713, "Action", newJString(Action))
  if Tags != nil:
    formData_613714.add "Tags", Tags
  add(formData_613714, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(formData_613714, "OptionGroupName", newJString(OptionGroupName))
  add(query_613713, "Version", newJString(Version))
  result = call_613712.call(nil, query_613713, nil, formData_613714, nil)

var postCopyDBSnapshot* = Call_PostCopyDBSnapshot_613691(
    name: "postCopyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBSnapshot",
    validator: validate_PostCopyDBSnapshot_613692, base: "/",
    url: url_PostCopyDBSnapshot_613693, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBSnapshot_613668 = ref object of OpenApiRestCall_612658
proc url_GetCopyDBSnapshot_613670(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBSnapshot_613669(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_613671 = query.getOrDefault("SourceDBSnapshotIdentifier")
  valid_613671 = validateParameter(valid_613671, JString, required = true,
                                 default = nil)
  if valid_613671 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_613671
  var valid_613672 = query.getOrDefault("Tags")
  valid_613672 = validateParameter(valid_613672, JArray, required = false,
                                 default = nil)
  if valid_613672 != nil:
    section.add "Tags", valid_613672
  var valid_613673 = query.getOrDefault("KmsKeyId")
  valid_613673 = validateParameter(valid_613673, JString, required = false,
                                 default = nil)
  if valid_613673 != nil:
    section.add "KmsKeyId", valid_613673
  var valid_613674 = query.getOrDefault("PreSignedUrl")
  valid_613674 = validateParameter(valid_613674, JString, required = false,
                                 default = nil)
  if valid_613674 != nil:
    section.add "PreSignedUrl", valid_613674
  var valid_613675 = query.getOrDefault("SourceRegion")
  valid_613675 = validateParameter(valid_613675, JString, required = false,
                                 default = nil)
  if valid_613675 != nil:
    section.add "SourceRegion", valid_613675
  var valid_613676 = query.getOrDefault("Action")
  valid_613676 = validateParameter(valid_613676, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_613676 != nil:
    section.add "Action", valid_613676
  var valid_613677 = query.getOrDefault("OptionGroupName")
  valid_613677 = validateParameter(valid_613677, JString, required = false,
                                 default = nil)
  if valid_613677 != nil:
    section.add "OptionGroupName", valid_613677
  var valid_613678 = query.getOrDefault("CopyTags")
  valid_613678 = validateParameter(valid_613678, JBool, required = false, default = nil)
  if valid_613678 != nil:
    section.add "CopyTags", valid_613678
  var valid_613679 = query.getOrDefault("TargetDBSnapshotIdentifier")
  valid_613679 = validateParameter(valid_613679, JString, required = true,
                                 default = nil)
  if valid_613679 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_613679
  var valid_613680 = query.getOrDefault("Version")
  valid_613680 = validateParameter(valid_613680, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613680 != nil:
    section.add "Version", valid_613680
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613681 = header.getOrDefault("X-Amz-Signature")
  valid_613681 = validateParameter(valid_613681, JString, required = false,
                                 default = nil)
  if valid_613681 != nil:
    section.add "X-Amz-Signature", valid_613681
  var valid_613682 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613682 = validateParameter(valid_613682, JString, required = false,
                                 default = nil)
  if valid_613682 != nil:
    section.add "X-Amz-Content-Sha256", valid_613682
  var valid_613683 = header.getOrDefault("X-Amz-Date")
  valid_613683 = validateParameter(valid_613683, JString, required = false,
                                 default = nil)
  if valid_613683 != nil:
    section.add "X-Amz-Date", valid_613683
  var valid_613684 = header.getOrDefault("X-Amz-Credential")
  valid_613684 = validateParameter(valid_613684, JString, required = false,
                                 default = nil)
  if valid_613684 != nil:
    section.add "X-Amz-Credential", valid_613684
  var valid_613685 = header.getOrDefault("X-Amz-Security-Token")
  valid_613685 = validateParameter(valid_613685, JString, required = false,
                                 default = nil)
  if valid_613685 != nil:
    section.add "X-Amz-Security-Token", valid_613685
  var valid_613686 = header.getOrDefault("X-Amz-Algorithm")
  valid_613686 = validateParameter(valid_613686, JString, required = false,
                                 default = nil)
  if valid_613686 != nil:
    section.add "X-Amz-Algorithm", valid_613686
  var valid_613687 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613687 = validateParameter(valid_613687, JString, required = false,
                                 default = nil)
  if valid_613687 != nil:
    section.add "X-Amz-SignedHeaders", valid_613687
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613688: Call_GetCopyDBSnapshot_613668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_613688.validator(path, query, header, formData, body)
  let scheme = call_613688.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613688.url(scheme.get, call_613688.host, call_613688.base,
                         call_613688.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613688, url, valid)

proc call*(call_613689: Call_GetCopyDBSnapshot_613668;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          Tags: JsonNode = nil; KmsKeyId: string = ""; PreSignedUrl: string = "";
          SourceRegion: string = ""; Action: string = "CopyDBSnapshot";
          OptionGroupName: string = ""; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: string (required)
  var query_613690 = newJObject()
  add(query_613690, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  if Tags != nil:
    query_613690.add "Tags", Tags
  add(query_613690, "KmsKeyId", newJString(KmsKeyId))
  add(query_613690, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_613690, "SourceRegion", newJString(SourceRegion))
  add(query_613690, "Action", newJString(Action))
  add(query_613690, "OptionGroupName", newJString(OptionGroupName))
  add(query_613690, "CopyTags", newJBool(CopyTags))
  add(query_613690, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(query_613690, "Version", newJString(Version))
  result = call_613689.call(nil, query_613690, nil, nil, nil)

var getCopyDBSnapshot* = Call_GetCopyDBSnapshot_613668(name: "getCopyDBSnapshot",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyDBSnapshot", validator: validate_GetCopyDBSnapshot_613669,
    base: "/", url: url_GetCopyDBSnapshot_613670,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyOptionGroup_613734 = ref object of OpenApiRestCall_612658
proc url_PostCopyOptionGroup_613736(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyOptionGroup_613735(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613737 = query.getOrDefault("Action")
  valid_613737 = validateParameter(valid_613737, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_613737 != nil:
    section.add "Action", valid_613737
  var valid_613738 = query.getOrDefault("Version")
  valid_613738 = validateParameter(valid_613738, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613738 != nil:
    section.add "Version", valid_613738
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613739 = header.getOrDefault("X-Amz-Signature")
  valid_613739 = validateParameter(valid_613739, JString, required = false,
                                 default = nil)
  if valid_613739 != nil:
    section.add "X-Amz-Signature", valid_613739
  var valid_613740 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613740 = validateParameter(valid_613740, JString, required = false,
                                 default = nil)
  if valid_613740 != nil:
    section.add "X-Amz-Content-Sha256", valid_613740
  var valid_613741 = header.getOrDefault("X-Amz-Date")
  valid_613741 = validateParameter(valid_613741, JString, required = false,
                                 default = nil)
  if valid_613741 != nil:
    section.add "X-Amz-Date", valid_613741
  var valid_613742 = header.getOrDefault("X-Amz-Credential")
  valid_613742 = validateParameter(valid_613742, JString, required = false,
                                 default = nil)
  if valid_613742 != nil:
    section.add "X-Amz-Credential", valid_613742
  var valid_613743 = header.getOrDefault("X-Amz-Security-Token")
  valid_613743 = validateParameter(valid_613743, JString, required = false,
                                 default = nil)
  if valid_613743 != nil:
    section.add "X-Amz-Security-Token", valid_613743
  var valid_613744 = header.getOrDefault("X-Amz-Algorithm")
  valid_613744 = validateParameter(valid_613744, JString, required = false,
                                 default = nil)
  if valid_613744 != nil:
    section.add "X-Amz-Algorithm", valid_613744
  var valid_613745 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613745 = validateParameter(valid_613745, JString, required = false,
                                 default = nil)
  if valid_613745 != nil:
    section.add "X-Amz-SignedHeaders", valid_613745
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetOptionGroupIdentifier` field"
  var valid_613746 = formData.getOrDefault("TargetOptionGroupIdentifier")
  valid_613746 = validateParameter(valid_613746, JString, required = true,
                                 default = nil)
  if valid_613746 != nil:
    section.add "TargetOptionGroupIdentifier", valid_613746
  var valid_613747 = formData.getOrDefault("TargetOptionGroupDescription")
  valid_613747 = validateParameter(valid_613747, JString, required = true,
                                 default = nil)
  if valid_613747 != nil:
    section.add "TargetOptionGroupDescription", valid_613747
  var valid_613748 = formData.getOrDefault("SourceOptionGroupIdentifier")
  valid_613748 = validateParameter(valid_613748, JString, required = true,
                                 default = nil)
  if valid_613748 != nil:
    section.add "SourceOptionGroupIdentifier", valid_613748
  var valid_613749 = formData.getOrDefault("Tags")
  valid_613749 = validateParameter(valid_613749, JArray, required = false,
                                 default = nil)
  if valid_613749 != nil:
    section.add "Tags", valid_613749
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613750: Call_PostCopyOptionGroup_613734; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_613750.validator(path, query, header, formData, body)
  let scheme = call_613750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613750.url(scheme.get, call_613750.host, call_613750.base,
                         call_613750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613750, url, valid)

proc call*(call_613751: Call_PostCopyOptionGroup_613734;
          TargetOptionGroupIdentifier: string;
          TargetOptionGroupDescription: string;
          SourceOptionGroupIdentifier: string; Action: string = "CopyOptionGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCopyOptionGroup
  ## Copies the specified option group.
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_613752 = newJObject()
  var formData_613753 = newJObject()
  add(formData_613753, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(formData_613753, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(formData_613753, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  add(query_613752, "Action", newJString(Action))
  if Tags != nil:
    formData_613753.add "Tags", Tags
  add(query_613752, "Version", newJString(Version))
  result = call_613751.call(nil, query_613752, nil, formData_613753, nil)

var postCopyOptionGroup* = Call_PostCopyOptionGroup_613734(
    name: "postCopyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyOptionGroup",
    validator: validate_PostCopyOptionGroup_613735, base: "/",
    url: url_PostCopyOptionGroup_613736, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyOptionGroup_613715 = ref object of OpenApiRestCall_612658
proc url_GetCopyOptionGroup_613717(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyOptionGroup_613716(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Action: JString (required)
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: JString (required)
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  section = newJObject()
  var valid_613718 = query.getOrDefault("Tags")
  valid_613718 = validateParameter(valid_613718, JArray, required = false,
                                 default = nil)
  if valid_613718 != nil:
    section.add "Tags", valid_613718
  assert query != nil, "query argument is necessary due to required `TargetOptionGroupDescription` field"
  var valid_613719 = query.getOrDefault("TargetOptionGroupDescription")
  valid_613719 = validateParameter(valid_613719, JString, required = true,
                                 default = nil)
  if valid_613719 != nil:
    section.add "TargetOptionGroupDescription", valid_613719
  var valid_613720 = query.getOrDefault("Action")
  valid_613720 = validateParameter(valid_613720, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_613720 != nil:
    section.add "Action", valid_613720
  var valid_613721 = query.getOrDefault("TargetOptionGroupIdentifier")
  valid_613721 = validateParameter(valid_613721, JString, required = true,
                                 default = nil)
  if valid_613721 != nil:
    section.add "TargetOptionGroupIdentifier", valid_613721
  var valid_613722 = query.getOrDefault("Version")
  valid_613722 = validateParameter(valid_613722, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613722 != nil:
    section.add "Version", valid_613722
  var valid_613723 = query.getOrDefault("SourceOptionGroupIdentifier")
  valid_613723 = validateParameter(valid_613723, JString, required = true,
                                 default = nil)
  if valid_613723 != nil:
    section.add "SourceOptionGroupIdentifier", valid_613723
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613724 = header.getOrDefault("X-Amz-Signature")
  valid_613724 = validateParameter(valid_613724, JString, required = false,
                                 default = nil)
  if valid_613724 != nil:
    section.add "X-Amz-Signature", valid_613724
  var valid_613725 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613725 = validateParameter(valid_613725, JString, required = false,
                                 default = nil)
  if valid_613725 != nil:
    section.add "X-Amz-Content-Sha256", valid_613725
  var valid_613726 = header.getOrDefault("X-Amz-Date")
  valid_613726 = validateParameter(valid_613726, JString, required = false,
                                 default = nil)
  if valid_613726 != nil:
    section.add "X-Amz-Date", valid_613726
  var valid_613727 = header.getOrDefault("X-Amz-Credential")
  valid_613727 = validateParameter(valid_613727, JString, required = false,
                                 default = nil)
  if valid_613727 != nil:
    section.add "X-Amz-Credential", valid_613727
  var valid_613728 = header.getOrDefault("X-Amz-Security-Token")
  valid_613728 = validateParameter(valid_613728, JString, required = false,
                                 default = nil)
  if valid_613728 != nil:
    section.add "X-Amz-Security-Token", valid_613728
  var valid_613729 = header.getOrDefault("X-Amz-Algorithm")
  valid_613729 = validateParameter(valid_613729, JString, required = false,
                                 default = nil)
  if valid_613729 != nil:
    section.add "X-Amz-Algorithm", valid_613729
  var valid_613730 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613730 = validateParameter(valid_613730, JString, required = false,
                                 default = nil)
  if valid_613730 != nil:
    section.add "X-Amz-SignedHeaders", valid_613730
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613731: Call_GetCopyOptionGroup_613715; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_613731.validator(path, query, header, formData, body)
  let scheme = call_613731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613731.url(scheme.get, call_613731.host, call_613731.base,
                         call_613731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613731, url, valid)

proc call*(call_613732: Call_GetCopyOptionGroup_613715;
          TargetOptionGroupDescription: string;
          TargetOptionGroupIdentifier: string;
          SourceOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyOptionGroup
  ## Copies the specified option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Action: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: string (required)
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  var query_613733 = newJObject()
  if Tags != nil:
    query_613733.add "Tags", Tags
  add(query_613733, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(query_613733, "Action", newJString(Action))
  add(query_613733, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(query_613733, "Version", newJString(Version))
  add(query_613733, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  result = call_613732.call(nil, query_613733, nil, nil, nil)

var getCopyOptionGroup* = Call_GetCopyOptionGroup_613715(
    name: "getCopyOptionGroup", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyOptionGroup", validator: validate_GetCopyOptionGroup_613716,
    base: "/", url: url_GetCopyOptionGroup_613717,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomAvailabilityZone_613773 = ref object of OpenApiRestCall_612658
proc url_PostCreateCustomAvailabilityZone_613775(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCustomAvailabilityZone_613774(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613776 = query.getOrDefault("Action")
  valid_613776 = validateParameter(valid_613776, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_613776 != nil:
    section.add "Action", valid_613776
  var valid_613777 = query.getOrDefault("Version")
  valid_613777 = validateParameter(valid_613777, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613777 != nil:
    section.add "Version", valid_613777
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613778 = header.getOrDefault("X-Amz-Signature")
  valid_613778 = validateParameter(valid_613778, JString, required = false,
                                 default = nil)
  if valid_613778 != nil:
    section.add "X-Amz-Signature", valid_613778
  var valid_613779 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613779 = validateParameter(valid_613779, JString, required = false,
                                 default = nil)
  if valid_613779 != nil:
    section.add "X-Amz-Content-Sha256", valid_613779
  var valid_613780 = header.getOrDefault("X-Amz-Date")
  valid_613780 = validateParameter(valid_613780, JString, required = false,
                                 default = nil)
  if valid_613780 != nil:
    section.add "X-Amz-Date", valid_613780
  var valid_613781 = header.getOrDefault("X-Amz-Credential")
  valid_613781 = validateParameter(valid_613781, JString, required = false,
                                 default = nil)
  if valid_613781 != nil:
    section.add "X-Amz-Credential", valid_613781
  var valid_613782 = header.getOrDefault("X-Amz-Security-Token")
  valid_613782 = validateParameter(valid_613782, JString, required = false,
                                 default = nil)
  if valid_613782 != nil:
    section.add "X-Amz-Security-Token", valid_613782
  var valid_613783 = header.getOrDefault("X-Amz-Algorithm")
  valid_613783 = validateParameter(valid_613783, JString, required = false,
                                 default = nil)
  if valid_613783 != nil:
    section.add "X-Amz-Algorithm", valid_613783
  var valid_613784 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613784 = validateParameter(valid_613784, JString, required = false,
                                 default = nil)
  if valid_613784 != nil:
    section.add "X-Amz-SignedHeaders", valid_613784
  result.add "header", section
  ## parameters in `formData` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  section = newJObject()
  var valid_613785 = formData.getOrDefault("VpnTunnelOriginatorIP")
  valid_613785 = validateParameter(valid_613785, JString, required = false,
                                 default = nil)
  if valid_613785 != nil:
    section.add "VpnTunnelOriginatorIP", valid_613785
  var valid_613786 = formData.getOrDefault("ExistingVpnId")
  valid_613786 = validateParameter(valid_613786, JString, required = false,
                                 default = nil)
  if valid_613786 != nil:
    section.add "ExistingVpnId", valid_613786
  var valid_613787 = formData.getOrDefault("NewVpnTunnelName")
  valid_613787 = validateParameter(valid_613787, JString, required = false,
                                 default = nil)
  if valid_613787 != nil:
    section.add "NewVpnTunnelName", valid_613787
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneName` field"
  var valid_613788 = formData.getOrDefault("CustomAvailabilityZoneName")
  valid_613788 = validateParameter(valid_613788, JString, required = true,
                                 default = nil)
  if valid_613788 != nil:
    section.add "CustomAvailabilityZoneName", valid_613788
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613789: Call_PostCreateCustomAvailabilityZone_613773;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_613789.validator(path, query, header, formData, body)
  let scheme = call_613789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613789.url(scheme.get, call_613789.host, call_613789.base,
                         call_613789.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613789, url, valid)

proc call*(call_613790: Call_PostCreateCustomAvailabilityZone_613773;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          ExistingVpnId: string = ""; NewVpnTunnelName: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: string (required)
  var query_613791 = newJObject()
  var formData_613792 = newJObject()
  add(formData_613792, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(formData_613792, "ExistingVpnId", newJString(ExistingVpnId))
  add(formData_613792, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  add(query_613791, "Action", newJString(Action))
  add(formData_613792, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_613791, "Version", newJString(Version))
  result = call_613790.call(nil, query_613791, nil, formData_613792, nil)

var postCreateCustomAvailabilityZone* = Call_PostCreateCustomAvailabilityZone_613773(
    name: "postCreateCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_PostCreateCustomAvailabilityZone_613774, base: "/",
    url: url_PostCreateCustomAvailabilityZone_613775,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomAvailabilityZone_613754 = ref object of OpenApiRestCall_612658
proc url_GetCreateCustomAvailabilityZone_613756(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCustomAvailabilityZone_613755(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: JString (required)
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: JString (required)
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  section = newJObject()
  var valid_613757 = query.getOrDefault("VpnTunnelOriginatorIP")
  valid_613757 = validateParameter(valid_613757, JString, required = false,
                                 default = nil)
  if valid_613757 != nil:
    section.add "VpnTunnelOriginatorIP", valid_613757
  var valid_613758 = query.getOrDefault("ExistingVpnId")
  valid_613758 = validateParameter(valid_613758, JString, required = false,
                                 default = nil)
  if valid_613758 != nil:
    section.add "ExistingVpnId", valid_613758
  var valid_613759 = query.getOrDefault("Action")
  valid_613759 = validateParameter(valid_613759, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_613759 != nil:
    section.add "Action", valid_613759
  var valid_613760 = query.getOrDefault("CustomAvailabilityZoneName")
  valid_613760 = validateParameter(valid_613760, JString, required = true,
                                 default = nil)
  if valid_613760 != nil:
    section.add "CustomAvailabilityZoneName", valid_613760
  var valid_613761 = query.getOrDefault("Version")
  valid_613761 = validateParameter(valid_613761, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613761 != nil:
    section.add "Version", valid_613761
  var valid_613762 = query.getOrDefault("NewVpnTunnelName")
  valid_613762 = validateParameter(valid_613762, JString, required = false,
                                 default = nil)
  if valid_613762 != nil:
    section.add "NewVpnTunnelName", valid_613762
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613763 = header.getOrDefault("X-Amz-Signature")
  valid_613763 = validateParameter(valid_613763, JString, required = false,
                                 default = nil)
  if valid_613763 != nil:
    section.add "X-Amz-Signature", valid_613763
  var valid_613764 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613764 = validateParameter(valid_613764, JString, required = false,
                                 default = nil)
  if valid_613764 != nil:
    section.add "X-Amz-Content-Sha256", valid_613764
  var valid_613765 = header.getOrDefault("X-Amz-Date")
  valid_613765 = validateParameter(valid_613765, JString, required = false,
                                 default = nil)
  if valid_613765 != nil:
    section.add "X-Amz-Date", valid_613765
  var valid_613766 = header.getOrDefault("X-Amz-Credential")
  valid_613766 = validateParameter(valid_613766, JString, required = false,
                                 default = nil)
  if valid_613766 != nil:
    section.add "X-Amz-Credential", valid_613766
  var valid_613767 = header.getOrDefault("X-Amz-Security-Token")
  valid_613767 = validateParameter(valid_613767, JString, required = false,
                                 default = nil)
  if valid_613767 != nil:
    section.add "X-Amz-Security-Token", valid_613767
  var valid_613768 = header.getOrDefault("X-Amz-Algorithm")
  valid_613768 = validateParameter(valid_613768, JString, required = false,
                                 default = nil)
  if valid_613768 != nil:
    section.add "X-Amz-Algorithm", valid_613768
  var valid_613769 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613769 = validateParameter(valid_613769, JString, required = false,
                                 default = nil)
  if valid_613769 != nil:
    section.add "X-Amz-SignedHeaders", valid_613769
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613770: Call_GetCreateCustomAvailabilityZone_613754;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_613770.validator(path, query, header, formData, body)
  let scheme = call_613770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613770.url(scheme.get, call_613770.host, call_613770.base,
                         call_613770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613770, url, valid)

proc call*(call_613771: Call_GetCreateCustomAvailabilityZone_613754;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          ExistingVpnId: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"; NewVpnTunnelName: string = ""): Recallable =
  ## getCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: string (required)
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  var query_613772 = newJObject()
  add(query_613772, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(query_613772, "ExistingVpnId", newJString(ExistingVpnId))
  add(query_613772, "Action", newJString(Action))
  add(query_613772, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_613772, "Version", newJString(Version))
  add(query_613772, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  result = call_613771.call(nil, query_613772, nil, nil, nil)

var getCreateCustomAvailabilityZone* = Call_GetCreateCustomAvailabilityZone_613754(
    name: "getCreateCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_GetCreateCustomAvailabilityZone_613755, base: "/",
    url: url_GetCreateCustomAvailabilityZone_613756,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_613861 = ref object of OpenApiRestCall_612658
proc url_PostCreateDBCluster_613863(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBCluster_613862(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613864 = query.getOrDefault("Action")
  valid_613864 = validateParameter(valid_613864, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_613864 != nil:
    section.add "Action", valid_613864
  var valid_613865 = query.getOrDefault("Version")
  valid_613865 = validateParameter(valid_613865, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613865 != nil:
    section.add "Version", valid_613865
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_613866 = header.getOrDefault("X-Amz-Security-Token")
  valid_613866 = validateParameter(valid_613866, JString, required = false,
                                 default = nil)
  if valid_613866 != nil:
    section.add "X-Amz-Security-Token", valid_613866
  var valid_613867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613867 = validateParameter(valid_613867, JString, required = false,
                                 default = nil)
  if valid_613867 != nil:
    section.add "X-Amz-SignedHeaders", valid_613867
  var valid_613868 = header.getOrDefault("X-Amz-Signature")
  valid_613868 = validateParameter(valid_613868, JString, required = false,
                                 default = nil)
  if valid_613868 != nil:
    section.add "X-Amz-Signature", valid_613868
  var valid_613869 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613869 = validateParameter(valid_613869, JString, required = false,
                                 default = nil)
  if valid_613869 != nil:
    section.add "X-Amz-Content-Sha256", valid_613869
  var valid_613870 = header.getOrDefault("X-Amz-Date")
  valid_613870 = validateParameter(valid_613870, JString, required = false,
                                 default = nil)
  if valid_613870 != nil:
    section.add "X-Amz-Date", valid_613870
  var valid_613871 = header.getOrDefault("X-Amz-Credential")
  valid_613871 = validateParameter(valid_613871, JString, required = false,
                                 default = nil)
  if valid_613871 != nil:
    section.add "X-Amz-Credential", valid_613871
  var valid_613872 = header.getOrDefault("X-Amz-Algorithm")
  valid_613872 = validateParameter(valid_613872, JString, required = false,
                                 default = nil)
  if valid_613872 != nil:
    section.add "X-Amz-Algorithm", valid_613872
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: JString
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  section = newJObject()
  var valid_613873 = formData.getOrDefault("Port")
  valid_613873 = validateParameter(valid_613873, JInt, required = false, default = nil)
  if valid_613873 != nil:
    section.add "Port", valid_613873
  var valid_613874 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_613874 = validateParameter(valid_613874, JString, required = false,
                                 default = nil)
  if valid_613874 != nil:
    section.add "GlobalClusterIdentifier", valid_613874
  var valid_613875 = formData.getOrDefault("MasterUsername")
  valid_613875 = validateParameter(valid_613875, JString, required = false,
                                 default = nil)
  if valid_613875 != nil:
    section.add "MasterUsername", valid_613875
  var valid_613876 = formData.getOrDefault("DatabaseName")
  valid_613876 = validateParameter(valid_613876, JString, required = false,
                                 default = nil)
  if valid_613876 != nil:
    section.add "DatabaseName", valid_613876
  var valid_613877 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_613877 = validateParameter(valid_613877, JArray, required = false,
                                 default = nil)
  if valid_613877 != nil:
    section.add "VpcSecurityGroupIds", valid_613877
  var valid_613878 = formData.getOrDefault("AvailabilityZones")
  valid_613878 = validateParameter(valid_613878, JArray, required = false,
                                 default = nil)
  if valid_613878 != nil:
    section.add "AvailabilityZones", valid_613878
  var valid_613879 = formData.getOrDefault("EngineMode")
  valid_613879 = validateParameter(valid_613879, JString, required = false,
                                 default = nil)
  if valid_613879 != nil:
    section.add "EngineMode", valid_613879
  var valid_613880 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_613880 = validateParameter(valid_613880, JArray, required = false,
                                 default = nil)
  if valid_613880 != nil:
    section.add "EnableCloudwatchLogsExports", valid_613880
  var valid_613881 = formData.getOrDefault("DBSubnetGroupName")
  valid_613881 = validateParameter(valid_613881, JString, required = false,
                                 default = nil)
  if valid_613881 != nil:
    section.add "DBSubnetGroupName", valid_613881
  var valid_613882 = formData.getOrDefault("CharacterSetName")
  valid_613882 = validateParameter(valid_613882, JString, required = false,
                                 default = nil)
  if valid_613882 != nil:
    section.add "CharacterSetName", valid_613882
  var valid_613883 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_613883 = validateParameter(valid_613883, JString, required = false,
                                 default = nil)
  if valid_613883 != nil:
    section.add "DBClusterParameterGroupName", valid_613883
  var valid_613884 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_613884 = validateParameter(valid_613884, JBool, required = false, default = nil)
  if valid_613884 != nil:
    section.add "CopyTagsToSnapshot", valid_613884
  var valid_613885 = formData.getOrDefault("DeletionProtection")
  valid_613885 = validateParameter(valid_613885, JBool, required = false, default = nil)
  if valid_613885 != nil:
    section.add "DeletionProtection", valid_613885
  var valid_613886 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_613886 = validateParameter(valid_613886, JString, required = false,
                                 default = nil)
  if valid_613886 != nil:
    section.add "PreferredMaintenanceWindow", valid_613886
  var valid_613887 = formData.getOrDefault("PreferredBackupWindow")
  valid_613887 = validateParameter(valid_613887, JString, required = false,
                                 default = nil)
  if valid_613887 != nil:
    section.add "PreferredBackupWindow", valid_613887
  var valid_613888 = formData.getOrDefault("MasterUserPassword")
  valid_613888 = validateParameter(valid_613888, JString, required = false,
                                 default = nil)
  if valid_613888 != nil:
    section.add "MasterUserPassword", valid_613888
  var valid_613889 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_613889 = validateParameter(valid_613889, JString, required = false,
                                 default = nil)
  if valid_613889 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_613889
  var valid_613890 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_613890 = validateParameter(valid_613890, JString, required = false,
                                 default = nil)
  if valid_613890 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_613890
  var valid_613891 = formData.getOrDefault("SourceRegion")
  valid_613891 = validateParameter(valid_613891, JString, required = false,
                                 default = nil)
  if valid_613891 != nil:
    section.add "SourceRegion", valid_613891
  var valid_613892 = formData.getOrDefault("EngineVersion")
  valid_613892 = validateParameter(valid_613892, JString, required = false,
                                 default = nil)
  if valid_613892 != nil:
    section.add "EngineVersion", valid_613892
  var valid_613893 = formData.getOrDefault("BacktrackWindow")
  valid_613893 = validateParameter(valid_613893, JInt, required = false, default = nil)
  if valid_613893 != nil:
    section.add "BacktrackWindow", valid_613893
  var valid_613894 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_613894 = validateParameter(valid_613894, JBool, required = false, default = nil)
  if valid_613894 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_613894
  var valid_613895 = formData.getOrDefault("BackupRetentionPeriod")
  valid_613895 = validateParameter(valid_613895, JInt, required = false, default = nil)
  if valid_613895 != nil:
    section.add "BackupRetentionPeriod", valid_613895
  var valid_613896 = formData.getOrDefault("KmsKeyId")
  valid_613896 = validateParameter(valid_613896, JString, required = false,
                                 default = nil)
  if valid_613896 != nil:
    section.add "KmsKeyId", valid_613896
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_613897 = formData.getOrDefault("Engine")
  valid_613897 = validateParameter(valid_613897, JString, required = true,
                                 default = nil)
  if valid_613897 != nil:
    section.add "Engine", valid_613897
  var valid_613898 = formData.getOrDefault("PreSignedUrl")
  valid_613898 = validateParameter(valid_613898, JString, required = false,
                                 default = nil)
  if valid_613898 != nil:
    section.add "PreSignedUrl", valid_613898
  var valid_613899 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_613899 = validateParameter(valid_613899, JString, required = false,
                                 default = nil)
  if valid_613899 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_613899
  var valid_613900 = formData.getOrDefault("Tags")
  valid_613900 = validateParameter(valid_613900, JArray, required = false,
                                 default = nil)
  if valid_613900 != nil:
    section.add "Tags", valid_613900
  var valid_613901 = formData.getOrDefault("EnableHttpEndpoint")
  valid_613901 = validateParameter(valid_613901, JBool, required = false, default = nil)
  if valid_613901 != nil:
    section.add "EnableHttpEndpoint", valid_613901
  var valid_613902 = formData.getOrDefault("OptionGroupName")
  valid_613902 = validateParameter(valid_613902, JString, required = false,
                                 default = nil)
  if valid_613902 != nil:
    section.add "OptionGroupName", valid_613902
  var valid_613903 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_613903 = validateParameter(valid_613903, JString, required = false,
                                 default = nil)
  if valid_613903 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_613903
  var valid_613904 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_613904 = validateParameter(valid_613904, JString, required = false,
                                 default = nil)
  if valid_613904 != nil:
    section.add "ReplicationSourceIdentifier", valid_613904
  var valid_613905 = formData.getOrDefault("StorageEncrypted")
  valid_613905 = validateParameter(valid_613905, JBool, required = false, default = nil)
  if valid_613905 != nil:
    section.add "StorageEncrypted", valid_613905
  var valid_613906 = formData.getOrDefault("DBClusterIdentifier")
  valid_613906 = validateParameter(valid_613906, JString, required = true,
                                 default = nil)
  if valid_613906 != nil:
    section.add "DBClusterIdentifier", valid_613906
  var valid_613907 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_613907 = validateParameter(valid_613907, JString, required = false,
                                 default = nil)
  if valid_613907 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_613907
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613908: Call_PostCreateDBCluster_613861; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613908.validator(path, query, header, formData, body)
  let scheme = call_613908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613908.url(scheme.get, call_613908.host, call_613908.base,
                         call_613908.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613908, url, valid)

proc call*(call_613909: Call_PostCreateDBCluster_613861; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          GlobalClusterIdentifier: string = ""; MasterUsername: string = "";
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; EngineMode: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBCluster"; DBSubnetGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = ""; SourceRegion: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          PreSignedUrl: string = ""; ScalingConfigurationMaxCapacity: string = "";
          Tags: JsonNode = nil; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          ReplicationSourceIdentifier: string = ""; Version: string = "2014-10-31";
          StorageEncrypted: bool = false; ScalingConfigurationAutoPause: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: string
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  var query_613910 = newJObject()
  var formData_613911 = newJObject()
  add(formData_613911, "Port", newJInt(Port))
  add(formData_613911, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_613911, "MasterUsername", newJString(MasterUsername))
  add(formData_613911, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_613911.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if AvailabilityZones != nil:
    formData_613911.add "AvailabilityZones", AvailabilityZones
  add(formData_613911, "EngineMode", newJString(EngineMode))
  if EnableCloudwatchLogsExports != nil:
    formData_613911.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_613910, "Action", newJString(Action))
  add(formData_613911, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_613911, "CharacterSetName", newJString(CharacterSetName))
  add(formData_613911, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_613911, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_613911, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_613911, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_613911, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_613911, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_613911, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_613911, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_613911, "SourceRegion", newJString(SourceRegion))
  add(formData_613911, "EngineVersion", newJString(EngineVersion))
  add(formData_613911, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_613911, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_613911, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_613911, "KmsKeyId", newJString(KmsKeyId))
  add(formData_613911, "Engine", newJString(Engine))
  add(formData_613911, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_613911, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  if Tags != nil:
    formData_613911.add "Tags", Tags
  add(formData_613911, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_613911, "OptionGroupName", newJString(OptionGroupName))
  add(formData_613911, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_613911, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_613910, "Version", newJString(Version))
  add(formData_613911, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_613911, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_613911, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  result = call_613909.call(nil, query_613910, nil, formData_613911, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_613861(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_613862, base: "/",
    url: url_PostCreateDBCluster_613863, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_613793 = ref object of OpenApiRestCall_612658
proc url_GetCreateDBCluster_613795(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBCluster_613794(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: JString
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_613814 = query.getOrDefault("GlobalClusterIdentifier")
  valid_613814 = validateParameter(valid_613814, JString, required = false,
                                 default = nil)
  if valid_613814 != nil:
    section.add "GlobalClusterIdentifier", valid_613814
  var valid_613815 = query.getOrDefault("DatabaseName")
  valid_613815 = validateParameter(valid_613815, JString, required = false,
                                 default = nil)
  if valid_613815 != nil:
    section.add "DatabaseName", valid_613815
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_613816 = query.getOrDefault("Engine")
  valid_613816 = validateParameter(valid_613816, JString, required = true,
                                 default = nil)
  if valid_613816 != nil:
    section.add "Engine", valid_613816
  var valid_613817 = query.getOrDefault("CopyTagsToSnapshot")
  valid_613817 = validateParameter(valid_613817, JBool, required = false, default = nil)
  if valid_613817 != nil:
    section.add "CopyTagsToSnapshot", valid_613817
  var valid_613818 = query.getOrDefault("EnableHttpEndpoint")
  valid_613818 = validateParameter(valid_613818, JBool, required = false, default = nil)
  if valid_613818 != nil:
    section.add "EnableHttpEndpoint", valid_613818
  var valid_613819 = query.getOrDefault("KmsKeyId")
  valid_613819 = validateParameter(valid_613819, JString, required = false,
                                 default = nil)
  if valid_613819 != nil:
    section.add "KmsKeyId", valid_613819
  var valid_613820 = query.getOrDefault("PreSignedUrl")
  valid_613820 = validateParameter(valid_613820, JString, required = false,
                                 default = nil)
  if valid_613820 != nil:
    section.add "PreSignedUrl", valid_613820
  var valid_613821 = query.getOrDefault("EngineMode")
  valid_613821 = validateParameter(valid_613821, JString, required = false,
                                 default = nil)
  if valid_613821 != nil:
    section.add "EngineMode", valid_613821
  var valid_613822 = query.getOrDefault("MasterUsername")
  valid_613822 = validateParameter(valid_613822, JString, required = false,
                                 default = nil)
  if valid_613822 != nil:
    section.add "MasterUsername", valid_613822
  var valid_613823 = query.getOrDefault("BackupRetentionPeriod")
  valid_613823 = validateParameter(valid_613823, JInt, required = false, default = nil)
  if valid_613823 != nil:
    section.add "BackupRetentionPeriod", valid_613823
  var valid_613824 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_613824 = validateParameter(valid_613824, JString, required = false,
                                 default = nil)
  if valid_613824 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_613824
  var valid_613825 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_613825 = validateParameter(valid_613825, JArray, required = false,
                                 default = nil)
  if valid_613825 != nil:
    section.add "EnableCloudwatchLogsExports", valid_613825
  var valid_613826 = query.getOrDefault("EngineVersion")
  valid_613826 = validateParameter(valid_613826, JString, required = false,
                                 default = nil)
  if valid_613826 != nil:
    section.add "EngineVersion", valid_613826
  var valid_613827 = query.getOrDefault("Action")
  valid_613827 = validateParameter(valid_613827, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_613827 != nil:
    section.add "Action", valid_613827
  var valid_613828 = query.getOrDefault("VpcSecurityGroupIds")
  valid_613828 = validateParameter(valid_613828, JArray, required = false,
                                 default = nil)
  if valid_613828 != nil:
    section.add "VpcSecurityGroupIds", valid_613828
  var valid_613829 = query.getOrDefault("StorageEncrypted")
  valid_613829 = validateParameter(valid_613829, JBool, required = false, default = nil)
  if valid_613829 != nil:
    section.add "StorageEncrypted", valid_613829
  var valid_613830 = query.getOrDefault("DeletionProtection")
  valid_613830 = validateParameter(valid_613830, JBool, required = false, default = nil)
  if valid_613830 != nil:
    section.add "DeletionProtection", valid_613830
  var valid_613831 = query.getOrDefault("CharacterSetName")
  valid_613831 = validateParameter(valid_613831, JString, required = false,
                                 default = nil)
  if valid_613831 != nil:
    section.add "CharacterSetName", valid_613831
  var valid_613832 = query.getOrDefault("Tags")
  valid_613832 = validateParameter(valid_613832, JArray, required = false,
                                 default = nil)
  if valid_613832 != nil:
    section.add "Tags", valid_613832
  var valid_613833 = query.getOrDefault("DBClusterIdentifier")
  valid_613833 = validateParameter(valid_613833, JString, required = true,
                                 default = nil)
  if valid_613833 != nil:
    section.add "DBClusterIdentifier", valid_613833
  var valid_613834 = query.getOrDefault("BacktrackWindow")
  valid_613834 = validateParameter(valid_613834, JInt, required = false, default = nil)
  if valid_613834 != nil:
    section.add "BacktrackWindow", valid_613834
  var valid_613835 = query.getOrDefault("DBClusterParameterGroupName")
  valid_613835 = validateParameter(valid_613835, JString, required = false,
                                 default = nil)
  if valid_613835 != nil:
    section.add "DBClusterParameterGroupName", valid_613835
  var valid_613836 = query.getOrDefault("AvailabilityZones")
  valid_613836 = validateParameter(valid_613836, JArray, required = false,
                                 default = nil)
  if valid_613836 != nil:
    section.add "AvailabilityZones", valid_613836
  var valid_613837 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_613837 = validateParameter(valid_613837, JString, required = false,
                                 default = nil)
  if valid_613837 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_613837
  var valid_613838 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_613838 = validateParameter(valid_613838, JString, required = false,
                                 default = nil)
  if valid_613838 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_613838
  var valid_613839 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_613839 = validateParameter(valid_613839, JBool, required = false, default = nil)
  if valid_613839 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_613839
  var valid_613840 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_613840 = validateParameter(valid_613840, JString, required = false,
                                 default = nil)
  if valid_613840 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_613840
  var valid_613841 = query.getOrDefault("SourceRegion")
  valid_613841 = validateParameter(valid_613841, JString, required = false,
                                 default = nil)
  if valid_613841 != nil:
    section.add "SourceRegion", valid_613841
  var valid_613842 = query.getOrDefault("Port")
  valid_613842 = validateParameter(valid_613842, JInt, required = false, default = nil)
  if valid_613842 != nil:
    section.add "Port", valid_613842
  var valid_613843 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_613843 = validateParameter(valid_613843, JString, required = false,
                                 default = nil)
  if valid_613843 != nil:
    section.add "ReplicationSourceIdentifier", valid_613843
  var valid_613844 = query.getOrDefault("MasterUserPassword")
  valid_613844 = validateParameter(valid_613844, JString, required = false,
                                 default = nil)
  if valid_613844 != nil:
    section.add "MasterUserPassword", valid_613844
  var valid_613845 = query.getOrDefault("OptionGroupName")
  valid_613845 = validateParameter(valid_613845, JString, required = false,
                                 default = nil)
  if valid_613845 != nil:
    section.add "OptionGroupName", valid_613845
  var valid_613846 = query.getOrDefault("DBSubnetGroupName")
  valid_613846 = validateParameter(valid_613846, JString, required = false,
                                 default = nil)
  if valid_613846 != nil:
    section.add "DBSubnetGroupName", valid_613846
  var valid_613847 = query.getOrDefault("PreferredBackupWindow")
  valid_613847 = validateParameter(valid_613847, JString, required = false,
                                 default = nil)
  if valid_613847 != nil:
    section.add "PreferredBackupWindow", valid_613847
  var valid_613848 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_613848 = validateParameter(valid_613848, JString, required = false,
                                 default = nil)
  if valid_613848 != nil:
    section.add "PreferredMaintenanceWindow", valid_613848
  var valid_613849 = query.getOrDefault("Version")
  valid_613849 = validateParameter(valid_613849, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613849 != nil:
    section.add "Version", valid_613849
  var valid_613850 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_613850 = validateParameter(valid_613850, JString, required = false,
                                 default = nil)
  if valid_613850 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_613850
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_613851 = header.getOrDefault("X-Amz-Security-Token")
  valid_613851 = validateParameter(valid_613851, JString, required = false,
                                 default = nil)
  if valid_613851 != nil:
    section.add "X-Amz-Security-Token", valid_613851
  var valid_613852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613852 = validateParameter(valid_613852, JString, required = false,
                                 default = nil)
  if valid_613852 != nil:
    section.add "X-Amz-SignedHeaders", valid_613852
  var valid_613853 = header.getOrDefault("X-Amz-Signature")
  valid_613853 = validateParameter(valid_613853, JString, required = false,
                                 default = nil)
  if valid_613853 != nil:
    section.add "X-Amz-Signature", valid_613853
  var valid_613854 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613854 = validateParameter(valid_613854, JString, required = false,
                                 default = nil)
  if valid_613854 != nil:
    section.add "X-Amz-Content-Sha256", valid_613854
  var valid_613855 = header.getOrDefault("X-Amz-Date")
  valid_613855 = validateParameter(valid_613855, JString, required = false,
                                 default = nil)
  if valid_613855 != nil:
    section.add "X-Amz-Date", valid_613855
  var valid_613856 = header.getOrDefault("X-Amz-Credential")
  valid_613856 = validateParameter(valid_613856, JString, required = false,
                                 default = nil)
  if valid_613856 != nil:
    section.add "X-Amz-Credential", valid_613856
  var valid_613857 = header.getOrDefault("X-Amz-Algorithm")
  valid_613857 = validateParameter(valid_613857, JString, required = false,
                                 default = nil)
  if valid_613857 != nil:
    section.add "X-Amz-Algorithm", valid_613857
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613858: Call_GetCreateDBCluster_613793; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613858.validator(path, query, header, formData, body)
  let scheme = call_613858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613858.url(scheme.get, call_613858.host, call_613858.base,
                         call_613858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613858, url, valid)

proc call*(call_613859: Call_GetCreateDBCluster_613793; Engine: string;
          DBClusterIdentifier: string; GlobalClusterIdentifier: string = "";
          DatabaseName: string = ""; CopyTagsToSnapshot: bool = false;
          EnableHttpEndpoint: bool = false; KmsKeyId: string = "";
          PreSignedUrl: string = ""; EngineMode: string = "";
          MasterUsername: string = ""; BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBCluster"; VpcSecurityGroupIds: JsonNode = nil;
          StorageEncrypted: bool = false; DeletionProtection: bool = false;
          CharacterSetName: string = ""; Tags: JsonNode = nil; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          SourceRegion: string = ""; Port: int = 0;
          ReplicationSourceIdentifier: string = ""; MasterUserPassword: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: string
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_613860 = newJObject()
  add(query_613860, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_613860, "DatabaseName", newJString(DatabaseName))
  add(query_613860, "Engine", newJString(Engine))
  add(query_613860, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_613860, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_613860, "KmsKeyId", newJString(KmsKeyId))
  add(query_613860, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_613860, "EngineMode", newJString(EngineMode))
  add(query_613860, "MasterUsername", newJString(MasterUsername))
  add(query_613860, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_613860, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  if EnableCloudwatchLogsExports != nil:
    query_613860.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_613860, "EngineVersion", newJString(EngineVersion))
  add(query_613860, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_613860.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_613860, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_613860, "DeletionProtection", newJBool(DeletionProtection))
  add(query_613860, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_613860.add "Tags", Tags
  add(query_613860, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613860, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_613860, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_613860.add "AvailabilityZones", AvailabilityZones
  add(query_613860, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_613860, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_613860, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_613860, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_613860, "SourceRegion", newJString(SourceRegion))
  add(query_613860, "Port", newJInt(Port))
  add(query_613860, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_613860, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_613860, "OptionGroupName", newJString(OptionGroupName))
  add(query_613860, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_613860, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_613860, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_613860, "Version", newJString(Version))
  add(query_613860, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_613859.call(nil, query_613860, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_613793(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_613794,
    base: "/", url: url_GetCreateDBCluster_613795,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterEndpoint_613933 = ref object of OpenApiRestCall_612658
proc url_PostCreateDBClusterEndpoint_613935(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterEndpoint_613934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613936 = query.getOrDefault("Action")
  valid_613936 = validateParameter(valid_613936, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_613936 != nil:
    section.add "Action", valid_613936
  var valid_613937 = query.getOrDefault("Version")
  valid_613937 = validateParameter(valid_613937, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613937 != nil:
    section.add "Version", valid_613937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613938 = header.getOrDefault("X-Amz-Signature")
  valid_613938 = validateParameter(valid_613938, JString, required = false,
                                 default = nil)
  if valid_613938 != nil:
    section.add "X-Amz-Signature", valid_613938
  var valid_613939 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613939 = validateParameter(valid_613939, JString, required = false,
                                 default = nil)
  if valid_613939 != nil:
    section.add "X-Amz-Content-Sha256", valid_613939
  var valid_613940 = header.getOrDefault("X-Amz-Date")
  valid_613940 = validateParameter(valid_613940, JString, required = false,
                                 default = nil)
  if valid_613940 != nil:
    section.add "X-Amz-Date", valid_613940
  var valid_613941 = header.getOrDefault("X-Amz-Credential")
  valid_613941 = validateParameter(valid_613941, JString, required = false,
                                 default = nil)
  if valid_613941 != nil:
    section.add "X-Amz-Credential", valid_613941
  var valid_613942 = header.getOrDefault("X-Amz-Security-Token")
  valid_613942 = validateParameter(valid_613942, JString, required = false,
                                 default = nil)
  if valid_613942 != nil:
    section.add "X-Amz-Security-Token", valid_613942
  var valid_613943 = header.getOrDefault("X-Amz-Algorithm")
  valid_613943 = validateParameter(valid_613943, JString, required = false,
                                 default = nil)
  if valid_613943 != nil:
    section.add "X-Amz-Algorithm", valid_613943
  var valid_613944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613944 = validateParameter(valid_613944, JString, required = false,
                                 default = nil)
  if valid_613944 != nil:
    section.add "X-Amz-SignedHeaders", valid_613944
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_613945 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_613945 = validateParameter(valid_613945, JString, required = true,
                                 default = nil)
  if valid_613945 != nil:
    section.add "DBClusterEndpointIdentifier", valid_613945
  var valid_613946 = formData.getOrDefault("StaticMembers")
  valid_613946 = validateParameter(valid_613946, JArray, required = false,
                                 default = nil)
  if valid_613946 != nil:
    section.add "StaticMembers", valid_613946
  var valid_613947 = formData.getOrDefault("EndpointType")
  valid_613947 = validateParameter(valid_613947, JString, required = true,
                                 default = nil)
  if valid_613947 != nil:
    section.add "EndpointType", valid_613947
  var valid_613948 = formData.getOrDefault("ExcludedMembers")
  valid_613948 = validateParameter(valid_613948, JArray, required = false,
                                 default = nil)
  if valid_613948 != nil:
    section.add "ExcludedMembers", valid_613948
  var valid_613949 = formData.getOrDefault("Tags")
  valid_613949 = validateParameter(valid_613949, JArray, required = false,
                                 default = nil)
  if valid_613949 != nil:
    section.add "Tags", valid_613949
  var valid_613950 = formData.getOrDefault("DBClusterIdentifier")
  valid_613950 = validateParameter(valid_613950, JString, required = true,
                                 default = nil)
  if valid_613950 != nil:
    section.add "DBClusterIdentifier", valid_613950
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613951: Call_PostCreateDBClusterEndpoint_613933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613951.validator(path, query, header, formData, body)
  let scheme = call_613951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613951.url(scheme.get, call_613951.host, call_613951.base,
                         call_613951.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613951, url, valid)

proc call*(call_613952: Call_PostCreateDBClusterEndpoint_613933;
          DBClusterEndpointIdentifier: string; EndpointType: string;
          DBClusterIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "CreateDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_613953 = newJObject()
  var formData_613954 = newJObject()
  add(formData_613954, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_613954.add "StaticMembers", StaticMembers
  add(query_613953, "Action", newJString(Action))
  add(formData_613954, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_613954.add "ExcludedMembers", ExcludedMembers
  if Tags != nil:
    formData_613954.add "Tags", Tags
  add(query_613953, "Version", newJString(Version))
  add(formData_613954, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_613952.call(nil, query_613953, nil, formData_613954, nil)

var postCreateDBClusterEndpoint* = Call_PostCreateDBClusterEndpoint_613933(
    name: "postCreateDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_PostCreateDBClusterEndpoint_613934, base: "/",
    url: url_PostCreateDBClusterEndpoint_613935,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterEndpoint_613912 = ref object of OpenApiRestCall_612658
proc url_GetCreateDBClusterEndpoint_613914(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterEndpoint_613913(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613915 = query.getOrDefault("ExcludedMembers")
  valid_613915 = validateParameter(valid_613915, JArray, required = false,
                                 default = nil)
  if valid_613915 != nil:
    section.add "ExcludedMembers", valid_613915
  var valid_613916 = query.getOrDefault("Tags")
  valid_613916 = validateParameter(valid_613916, JArray, required = false,
                                 default = nil)
  if valid_613916 != nil:
    section.add "Tags", valid_613916
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_613917 = query.getOrDefault("DBClusterIdentifier")
  valid_613917 = validateParameter(valid_613917, JString, required = true,
                                 default = nil)
  if valid_613917 != nil:
    section.add "DBClusterIdentifier", valid_613917
  var valid_613918 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_613918 = validateParameter(valid_613918, JString, required = true,
                                 default = nil)
  if valid_613918 != nil:
    section.add "DBClusterEndpointIdentifier", valid_613918
  var valid_613919 = query.getOrDefault("StaticMembers")
  valid_613919 = validateParameter(valid_613919, JArray, required = false,
                                 default = nil)
  if valid_613919 != nil:
    section.add "StaticMembers", valid_613919
  var valid_613920 = query.getOrDefault("EndpointType")
  valid_613920 = validateParameter(valid_613920, JString, required = true,
                                 default = nil)
  if valid_613920 != nil:
    section.add "EndpointType", valid_613920
  var valid_613921 = query.getOrDefault("Action")
  valid_613921 = validateParameter(valid_613921, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_613921 != nil:
    section.add "Action", valid_613921
  var valid_613922 = query.getOrDefault("Version")
  valid_613922 = validateParameter(valid_613922, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613922 != nil:
    section.add "Version", valid_613922
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613923 = header.getOrDefault("X-Amz-Signature")
  valid_613923 = validateParameter(valid_613923, JString, required = false,
                                 default = nil)
  if valid_613923 != nil:
    section.add "X-Amz-Signature", valid_613923
  var valid_613924 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613924 = validateParameter(valid_613924, JString, required = false,
                                 default = nil)
  if valid_613924 != nil:
    section.add "X-Amz-Content-Sha256", valid_613924
  var valid_613925 = header.getOrDefault("X-Amz-Date")
  valid_613925 = validateParameter(valid_613925, JString, required = false,
                                 default = nil)
  if valid_613925 != nil:
    section.add "X-Amz-Date", valid_613925
  var valid_613926 = header.getOrDefault("X-Amz-Credential")
  valid_613926 = validateParameter(valid_613926, JString, required = false,
                                 default = nil)
  if valid_613926 != nil:
    section.add "X-Amz-Credential", valid_613926
  var valid_613927 = header.getOrDefault("X-Amz-Security-Token")
  valid_613927 = validateParameter(valid_613927, JString, required = false,
                                 default = nil)
  if valid_613927 != nil:
    section.add "X-Amz-Security-Token", valid_613927
  var valid_613928 = header.getOrDefault("X-Amz-Algorithm")
  valid_613928 = validateParameter(valid_613928, JString, required = false,
                                 default = nil)
  if valid_613928 != nil:
    section.add "X-Amz-Algorithm", valid_613928
  var valid_613929 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613929 = validateParameter(valid_613929, JString, required = false,
                                 default = nil)
  if valid_613929 != nil:
    section.add "X-Amz-SignedHeaders", valid_613929
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613930: Call_GetCreateDBClusterEndpoint_613912; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613930.validator(path, query, header, formData, body)
  let scheme = call_613930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613930.url(scheme.get, call_613930.host, call_613930.base,
                         call_613930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613930, url, valid)

proc call*(call_613931: Call_GetCreateDBClusterEndpoint_613912;
          DBClusterIdentifier: string; DBClusterEndpointIdentifier: string;
          EndpointType: string; ExcludedMembers: JsonNode = nil; Tags: JsonNode = nil;
          StaticMembers: JsonNode = nil; Action: string = "CreateDBClusterEndpoint";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613932 = newJObject()
  if ExcludedMembers != nil:
    query_613932.add "ExcludedMembers", ExcludedMembers
  if Tags != nil:
    query_613932.add "Tags", Tags
  add(query_613932, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_613932, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_613932.add "StaticMembers", StaticMembers
  add(query_613932, "EndpointType", newJString(EndpointType))
  add(query_613932, "Action", newJString(Action))
  add(query_613932, "Version", newJString(Version))
  result = call_613931.call(nil, query_613932, nil, nil, nil)

var getCreateDBClusterEndpoint* = Call_GetCreateDBClusterEndpoint_613912(
    name: "getCreateDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_GetCreateDBClusterEndpoint_613913, base: "/",
    url: url_GetCreateDBClusterEndpoint_613914,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_613974 = ref object of OpenApiRestCall_612658
proc url_PostCreateDBClusterParameterGroup_613976(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_613975(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613977 = query.getOrDefault("Action")
  valid_613977 = validateParameter(valid_613977, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_613977 != nil:
    section.add "Action", valid_613977
  var valid_613978 = query.getOrDefault("Version")
  valid_613978 = validateParameter(valid_613978, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613978 != nil:
    section.add "Version", valid_613978
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613979 = header.getOrDefault("X-Amz-Signature")
  valid_613979 = validateParameter(valid_613979, JString, required = false,
                                 default = nil)
  if valid_613979 != nil:
    section.add "X-Amz-Signature", valid_613979
  var valid_613980 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613980 = validateParameter(valid_613980, JString, required = false,
                                 default = nil)
  if valid_613980 != nil:
    section.add "X-Amz-Content-Sha256", valid_613980
  var valid_613981 = header.getOrDefault("X-Amz-Date")
  valid_613981 = validateParameter(valid_613981, JString, required = false,
                                 default = nil)
  if valid_613981 != nil:
    section.add "X-Amz-Date", valid_613981
  var valid_613982 = header.getOrDefault("X-Amz-Credential")
  valid_613982 = validateParameter(valid_613982, JString, required = false,
                                 default = nil)
  if valid_613982 != nil:
    section.add "X-Amz-Credential", valid_613982
  var valid_613983 = header.getOrDefault("X-Amz-Security-Token")
  valid_613983 = validateParameter(valid_613983, JString, required = false,
                                 default = nil)
  if valid_613983 != nil:
    section.add "X-Amz-Security-Token", valid_613983
  var valid_613984 = header.getOrDefault("X-Amz-Algorithm")
  valid_613984 = validateParameter(valid_613984, JString, required = false,
                                 default = nil)
  if valid_613984 != nil:
    section.add "X-Amz-Algorithm", valid_613984
  var valid_613985 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613985 = validateParameter(valid_613985, JString, required = false,
                                 default = nil)
  if valid_613985 != nil:
    section.add "X-Amz-SignedHeaders", valid_613985
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_613986 = formData.getOrDefault("Description")
  valid_613986 = validateParameter(valid_613986, JString, required = true,
                                 default = nil)
  if valid_613986 != nil:
    section.add "Description", valid_613986
  var valid_613987 = formData.getOrDefault("Tags")
  valid_613987 = validateParameter(valid_613987, JArray, required = false,
                                 default = nil)
  if valid_613987 != nil:
    section.add "Tags", valid_613987
  var valid_613988 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_613988 = validateParameter(valid_613988, JString, required = true,
                                 default = nil)
  if valid_613988 != nil:
    section.add "DBClusterParameterGroupName", valid_613988
  var valid_613989 = formData.getOrDefault("DBParameterGroupFamily")
  valid_613989 = validateParameter(valid_613989, JString, required = true,
                                 default = nil)
  if valid_613989 != nil:
    section.add "DBParameterGroupFamily", valid_613989
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613990: Call_PostCreateDBClusterParameterGroup_613974;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613990.validator(path, query, header, formData, body)
  let scheme = call_613990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613990.url(scheme.get, call_613990.host, call_613990.base,
                         call_613990.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613990, url, valid)

proc call*(call_613991: Call_PostCreateDBClusterParameterGroup_613974;
          Description: string; DBClusterParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  var query_613992 = newJObject()
  var formData_613993 = newJObject()
  add(formData_613993, "Description", newJString(Description))
  add(query_613992, "Action", newJString(Action))
  if Tags != nil:
    formData_613993.add "Tags", Tags
  add(formData_613993, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_613992, "Version", newJString(Version))
  add(formData_613993, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_613991.call(nil, query_613992, nil, formData_613993, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_613974(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_613975, base: "/",
    url: url_PostCreateDBClusterParameterGroup_613976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_613955 = ref object of OpenApiRestCall_612658
proc url_GetCreateDBClusterParameterGroup_613957(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_613956(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_613958 = query.getOrDefault("DBParameterGroupFamily")
  valid_613958 = validateParameter(valid_613958, JString, required = true,
                                 default = nil)
  if valid_613958 != nil:
    section.add "DBParameterGroupFamily", valid_613958
  var valid_613959 = query.getOrDefault("Tags")
  valid_613959 = validateParameter(valid_613959, JArray, required = false,
                                 default = nil)
  if valid_613959 != nil:
    section.add "Tags", valid_613959
  var valid_613960 = query.getOrDefault("DBClusterParameterGroupName")
  valid_613960 = validateParameter(valid_613960, JString, required = true,
                                 default = nil)
  if valid_613960 != nil:
    section.add "DBClusterParameterGroupName", valid_613960
  var valid_613961 = query.getOrDefault("Action")
  valid_613961 = validateParameter(valid_613961, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_613961 != nil:
    section.add "Action", valid_613961
  var valid_613962 = query.getOrDefault("Description")
  valid_613962 = validateParameter(valid_613962, JString, required = true,
                                 default = nil)
  if valid_613962 != nil:
    section.add "Description", valid_613962
  var valid_613963 = query.getOrDefault("Version")
  valid_613963 = validateParameter(valid_613963, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_613963 != nil:
    section.add "Version", valid_613963
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613964 = header.getOrDefault("X-Amz-Signature")
  valid_613964 = validateParameter(valid_613964, JString, required = false,
                                 default = nil)
  if valid_613964 != nil:
    section.add "X-Amz-Signature", valid_613964
  var valid_613965 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613965 = validateParameter(valid_613965, JString, required = false,
                                 default = nil)
  if valid_613965 != nil:
    section.add "X-Amz-Content-Sha256", valid_613965
  var valid_613966 = header.getOrDefault("X-Amz-Date")
  valid_613966 = validateParameter(valid_613966, JString, required = false,
                                 default = nil)
  if valid_613966 != nil:
    section.add "X-Amz-Date", valid_613966
  var valid_613967 = header.getOrDefault("X-Amz-Credential")
  valid_613967 = validateParameter(valid_613967, JString, required = false,
                                 default = nil)
  if valid_613967 != nil:
    section.add "X-Amz-Credential", valid_613967
  var valid_613968 = header.getOrDefault("X-Amz-Security-Token")
  valid_613968 = validateParameter(valid_613968, JString, required = false,
                                 default = nil)
  if valid_613968 != nil:
    section.add "X-Amz-Security-Token", valid_613968
  var valid_613969 = header.getOrDefault("X-Amz-Algorithm")
  valid_613969 = validateParameter(valid_613969, JString, required = false,
                                 default = nil)
  if valid_613969 != nil:
    section.add "X-Amz-Algorithm", valid_613969
  var valid_613970 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613970 = validateParameter(valid_613970, JString, required = false,
                                 default = nil)
  if valid_613970 != nil:
    section.add "X-Amz-SignedHeaders", valid_613970
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613971: Call_GetCreateDBClusterParameterGroup_613955;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_613971.validator(path, query, header, formData, body)
  let scheme = call_613971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613971.url(scheme.get, call_613971.host, call_613971.base,
                         call_613971.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613971, url, valid)

proc call*(call_613972: Call_GetCreateDBClusterParameterGroup_613955;
          DBParameterGroupFamily: string; DBClusterParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: string (required)
  var query_613973 = newJObject()
  add(query_613973, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_613973.add "Tags", Tags
  add(query_613973, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_613973, "Action", newJString(Action))
  add(query_613973, "Description", newJString(Description))
  add(query_613973, "Version", newJString(Version))
  result = call_613972.call(nil, query_613973, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_613955(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_613956, base: "/",
    url: url_GetCreateDBClusterParameterGroup_613957,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_614012 = ref object of OpenApiRestCall_612658
proc url_PostCreateDBClusterSnapshot_614014(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterSnapshot_614013(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614015 = query.getOrDefault("Action")
  valid_614015 = validateParameter(valid_614015, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_614015 != nil:
    section.add "Action", valid_614015
  var valid_614016 = query.getOrDefault("Version")
  valid_614016 = validateParameter(valid_614016, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614016 != nil:
    section.add "Version", valid_614016
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614017 = header.getOrDefault("X-Amz-Signature")
  valid_614017 = validateParameter(valid_614017, JString, required = false,
                                 default = nil)
  if valid_614017 != nil:
    section.add "X-Amz-Signature", valid_614017
  var valid_614018 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614018 = validateParameter(valid_614018, JString, required = false,
                                 default = nil)
  if valid_614018 != nil:
    section.add "X-Amz-Content-Sha256", valid_614018
  var valid_614019 = header.getOrDefault("X-Amz-Date")
  valid_614019 = validateParameter(valid_614019, JString, required = false,
                                 default = nil)
  if valid_614019 != nil:
    section.add "X-Amz-Date", valid_614019
  var valid_614020 = header.getOrDefault("X-Amz-Credential")
  valid_614020 = validateParameter(valid_614020, JString, required = false,
                                 default = nil)
  if valid_614020 != nil:
    section.add "X-Amz-Credential", valid_614020
  var valid_614021 = header.getOrDefault("X-Amz-Security-Token")
  valid_614021 = validateParameter(valid_614021, JString, required = false,
                                 default = nil)
  if valid_614021 != nil:
    section.add "X-Amz-Security-Token", valid_614021
  var valid_614022 = header.getOrDefault("X-Amz-Algorithm")
  valid_614022 = validateParameter(valid_614022, JString, required = false,
                                 default = nil)
  if valid_614022 != nil:
    section.add "X-Amz-Algorithm", valid_614022
  var valid_614023 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614023 = validateParameter(valid_614023, JString, required = false,
                                 default = nil)
  if valid_614023 != nil:
    section.add "X-Amz-SignedHeaders", valid_614023
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_614024 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_614024 = validateParameter(valid_614024, JString, required = true,
                                 default = nil)
  if valid_614024 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_614024
  var valid_614025 = formData.getOrDefault("Tags")
  valid_614025 = validateParameter(valid_614025, JArray, required = false,
                                 default = nil)
  if valid_614025 != nil:
    section.add "Tags", valid_614025
  var valid_614026 = formData.getOrDefault("DBClusterIdentifier")
  valid_614026 = validateParameter(valid_614026, JString, required = true,
                                 default = nil)
  if valid_614026 != nil:
    section.add "DBClusterIdentifier", valid_614026
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614027: Call_PostCreateDBClusterSnapshot_614012; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614027.validator(path, query, header, formData, body)
  let scheme = call_614027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614027.url(scheme.get, call_614027.host, call_614027.base,
                         call_614027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614027, url, valid)

proc call*(call_614028: Call_PostCreateDBClusterSnapshot_614012;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Action: string = "CreateDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_614029 = newJObject()
  var formData_614030 = newJObject()
  add(formData_614030, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_614029, "Action", newJString(Action))
  if Tags != nil:
    formData_614030.add "Tags", Tags
  add(query_614029, "Version", newJString(Version))
  add(formData_614030, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_614028.call(nil, query_614029, nil, formData_614030, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_614012(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_614013, base: "/",
    url: url_PostCreateDBClusterSnapshot_614014,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_613994 = ref object of OpenApiRestCall_612658
proc url_GetCreateDBClusterSnapshot_613996(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterSnapshot_613995(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_613997 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_613997 = validateParameter(valid_613997, JString, required = true,
                                 default = nil)
  if valid_613997 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_613997
  var valid_613998 = query.getOrDefault("Tags")
  valid_613998 = validateParameter(valid_613998, JArray, required = false,
                                 default = nil)
  if valid_613998 != nil:
    section.add "Tags", valid_613998
  var valid_613999 = query.getOrDefault("DBClusterIdentifier")
  valid_613999 = validateParameter(valid_613999, JString, required = true,
                                 default = nil)
  if valid_613999 != nil:
    section.add "DBClusterIdentifier", valid_613999
  var valid_614000 = query.getOrDefault("Action")
  valid_614000 = validateParameter(valid_614000, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_614000 != nil:
    section.add "Action", valid_614000
  var valid_614001 = query.getOrDefault("Version")
  valid_614001 = validateParameter(valid_614001, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614001 != nil:
    section.add "Version", valid_614001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614002 = header.getOrDefault("X-Amz-Signature")
  valid_614002 = validateParameter(valid_614002, JString, required = false,
                                 default = nil)
  if valid_614002 != nil:
    section.add "X-Amz-Signature", valid_614002
  var valid_614003 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614003 = validateParameter(valid_614003, JString, required = false,
                                 default = nil)
  if valid_614003 != nil:
    section.add "X-Amz-Content-Sha256", valid_614003
  var valid_614004 = header.getOrDefault("X-Amz-Date")
  valid_614004 = validateParameter(valid_614004, JString, required = false,
                                 default = nil)
  if valid_614004 != nil:
    section.add "X-Amz-Date", valid_614004
  var valid_614005 = header.getOrDefault("X-Amz-Credential")
  valid_614005 = validateParameter(valid_614005, JString, required = false,
                                 default = nil)
  if valid_614005 != nil:
    section.add "X-Amz-Credential", valid_614005
  var valid_614006 = header.getOrDefault("X-Amz-Security-Token")
  valid_614006 = validateParameter(valid_614006, JString, required = false,
                                 default = nil)
  if valid_614006 != nil:
    section.add "X-Amz-Security-Token", valid_614006
  var valid_614007 = header.getOrDefault("X-Amz-Algorithm")
  valid_614007 = validateParameter(valid_614007, JString, required = false,
                                 default = nil)
  if valid_614007 != nil:
    section.add "X-Amz-Algorithm", valid_614007
  var valid_614008 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614008 = validateParameter(valid_614008, JString, required = false,
                                 default = nil)
  if valid_614008 != nil:
    section.add "X-Amz-SignedHeaders", valid_614008
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614009: Call_GetCreateDBClusterSnapshot_613994; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614009.validator(path, query, header, formData, body)
  let scheme = call_614009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614009.url(scheme.get, call_614009.host, call_614009.base,
                         call_614009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614009, url, valid)

proc call*(call_614010: Call_GetCreateDBClusterSnapshot_613994;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614011 = newJObject()
  add(query_614011, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_614011.add "Tags", Tags
  add(query_614011, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_614011, "Action", newJString(Action))
  add(query_614011, "Version", newJString(Version))
  result = call_614010.call(nil, query_614011, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_613994(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_613995, base: "/",
    url: url_GetCreateDBClusterSnapshot_613996,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_614092 = ref object of OpenApiRestCall_612658
proc url_PostCreateDBInstance_614094(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstance_614093(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614095 = query.getOrDefault("Action")
  valid_614095 = validateParameter(valid_614095, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_614095 != nil:
    section.add "Action", valid_614095
  var valid_614096 = query.getOrDefault("Version")
  valid_614096 = validateParameter(valid_614096, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614096 != nil:
    section.add "Version", valid_614096
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_614097 = header.getOrDefault("X-Amz-Security-Token")
  valid_614097 = validateParameter(valid_614097, JString, required = false,
                                 default = nil)
  if valid_614097 != nil:
    section.add "X-Amz-Security-Token", valid_614097
  var valid_614098 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614098 = validateParameter(valid_614098, JString, required = false,
                                 default = nil)
  if valid_614098 != nil:
    section.add "X-Amz-SignedHeaders", valid_614098
  var valid_614099 = header.getOrDefault("X-Amz-Signature")
  valid_614099 = validateParameter(valid_614099, JString, required = false,
                                 default = nil)
  if valid_614099 != nil:
    section.add "X-Amz-Signature", valid_614099
  var valid_614100 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614100 = validateParameter(valid_614100, JString, required = false,
                                 default = nil)
  if valid_614100 != nil:
    section.add "X-Amz-Content-Sha256", valid_614100
  var valid_614101 = header.getOrDefault("X-Amz-Date")
  valid_614101 = validateParameter(valid_614101, JString, required = false,
                                 default = nil)
  if valid_614101 != nil:
    section.add "X-Amz-Date", valid_614101
  var valid_614102 = header.getOrDefault("X-Amz-Credential")
  valid_614102 = validateParameter(valid_614102, JString, required = false,
                                 default = nil)
  if valid_614102 != nil:
    section.add "X-Amz-Credential", valid_614102
  var valid_614103 = header.getOrDefault("X-Amz-Algorithm")
  valid_614103 = validateParameter(valid_614103, JString, required = false,
                                 default = nil)
  if valid_614103 != nil:
    section.add "X-Amz-Algorithm", valid_614103
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  section = newJObject()
  var valid_614104 = formData.getOrDefault("PromotionTier")
  valid_614104 = validateParameter(valid_614104, JInt, required = false, default = nil)
  if valid_614104 != nil:
    section.add "PromotionTier", valid_614104
  var valid_614105 = formData.getOrDefault("Port")
  valid_614105 = validateParameter(valid_614105, JInt, required = false, default = nil)
  if valid_614105 != nil:
    section.add "Port", valid_614105
  var valid_614106 = formData.getOrDefault("MultiAZ")
  valid_614106 = validateParameter(valid_614106, JBool, required = false, default = nil)
  if valid_614106 != nil:
    section.add "MultiAZ", valid_614106
  var valid_614107 = formData.getOrDefault("MasterUsername")
  valid_614107 = validateParameter(valid_614107, JString, required = false,
                                 default = nil)
  if valid_614107 != nil:
    section.add "MasterUsername", valid_614107
  var valid_614108 = formData.getOrDefault("MonitoringRoleArn")
  valid_614108 = validateParameter(valid_614108, JString, required = false,
                                 default = nil)
  if valid_614108 != nil:
    section.add "MonitoringRoleArn", valid_614108
  var valid_614109 = formData.getOrDefault("MonitoringInterval")
  valid_614109 = validateParameter(valid_614109, JInt, required = false, default = nil)
  if valid_614109 != nil:
    section.add "MonitoringInterval", valid_614109
  var valid_614110 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_614110 = validateParameter(valid_614110, JArray, required = false,
                                 default = nil)
  if valid_614110 != nil:
    section.add "VpcSecurityGroupIds", valid_614110
  var valid_614111 = formData.getOrDefault("AvailabilityZone")
  valid_614111 = validateParameter(valid_614111, JString, required = false,
                                 default = nil)
  if valid_614111 != nil:
    section.add "AvailabilityZone", valid_614111
  var valid_614112 = formData.getOrDefault("EnablePerformanceInsights")
  valid_614112 = validateParameter(valid_614112, JBool, required = false, default = nil)
  if valid_614112 != nil:
    section.add "EnablePerformanceInsights", valid_614112
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614113 = formData.getOrDefault("DBInstanceIdentifier")
  valid_614113 = validateParameter(valid_614113, JString, required = true,
                                 default = nil)
  if valid_614113 != nil:
    section.add "DBInstanceIdentifier", valid_614113
  var valid_614114 = formData.getOrDefault("TdeCredentialArn")
  valid_614114 = validateParameter(valid_614114, JString, required = false,
                                 default = nil)
  if valid_614114 != nil:
    section.add "TdeCredentialArn", valid_614114
  var valid_614115 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_614115 = validateParameter(valid_614115, JArray, required = false,
                                 default = nil)
  if valid_614115 != nil:
    section.add "EnableCloudwatchLogsExports", valid_614115
  var valid_614116 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_614116 = validateParameter(valid_614116, JInt, required = false, default = nil)
  if valid_614116 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_614116
  var valid_614117 = formData.getOrDefault("DBSubnetGroupName")
  valid_614117 = validateParameter(valid_614117, JString, required = false,
                                 default = nil)
  if valid_614117 != nil:
    section.add "DBSubnetGroupName", valid_614117
  var valid_614118 = formData.getOrDefault("CharacterSetName")
  valid_614118 = validateParameter(valid_614118, JString, required = false,
                                 default = nil)
  if valid_614118 != nil:
    section.add "CharacterSetName", valid_614118
  var valid_614119 = formData.getOrDefault("StorageType")
  valid_614119 = validateParameter(valid_614119, JString, required = false,
                                 default = nil)
  if valid_614119 != nil:
    section.add "StorageType", valid_614119
  var valid_614120 = formData.getOrDefault("MaxAllocatedStorage")
  valid_614120 = validateParameter(valid_614120, JInt, required = false, default = nil)
  if valid_614120 != nil:
    section.add "MaxAllocatedStorage", valid_614120
  var valid_614121 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_614121 = validateParameter(valid_614121, JBool, required = false, default = nil)
  if valid_614121 != nil:
    section.add "CopyTagsToSnapshot", valid_614121
  var valid_614122 = formData.getOrDefault("DeletionProtection")
  valid_614122 = validateParameter(valid_614122, JBool, required = false, default = nil)
  if valid_614122 != nil:
    section.add "DeletionProtection", valid_614122
  var valid_614123 = formData.getOrDefault("ProcessorFeatures")
  valid_614123 = validateParameter(valid_614123, JArray, required = false,
                                 default = nil)
  if valid_614123 != nil:
    section.add "ProcessorFeatures", valid_614123
  var valid_614124 = formData.getOrDefault("AllocatedStorage")
  valid_614124 = validateParameter(valid_614124, JInt, required = false, default = nil)
  if valid_614124 != nil:
    section.add "AllocatedStorage", valid_614124
  var valid_614125 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_614125 = validateParameter(valid_614125, JString, required = false,
                                 default = nil)
  if valid_614125 != nil:
    section.add "PreferredMaintenanceWindow", valid_614125
  var valid_614126 = formData.getOrDefault("DBInstanceClass")
  valid_614126 = validateParameter(valid_614126, JString, required = true,
                                 default = nil)
  if valid_614126 != nil:
    section.add "DBInstanceClass", valid_614126
  var valid_614127 = formData.getOrDefault("PreferredBackupWindow")
  valid_614127 = validateParameter(valid_614127, JString, required = false,
                                 default = nil)
  if valid_614127 != nil:
    section.add "PreferredBackupWindow", valid_614127
  var valid_614128 = formData.getOrDefault("MasterUserPassword")
  valid_614128 = validateParameter(valid_614128, JString, required = false,
                                 default = nil)
  if valid_614128 != nil:
    section.add "MasterUserPassword", valid_614128
  var valid_614129 = formData.getOrDefault("Domain")
  valid_614129 = validateParameter(valid_614129, JString, required = false,
                                 default = nil)
  if valid_614129 != nil:
    section.add "Domain", valid_614129
  var valid_614130 = formData.getOrDefault("Timezone")
  valid_614130 = validateParameter(valid_614130, JString, required = false,
                                 default = nil)
  if valid_614130 != nil:
    section.add "Timezone", valid_614130
  var valid_614131 = formData.getOrDefault("DBParameterGroupName")
  valid_614131 = validateParameter(valid_614131, JString, required = false,
                                 default = nil)
  if valid_614131 != nil:
    section.add "DBParameterGroupName", valid_614131
  var valid_614132 = formData.getOrDefault("EngineVersion")
  valid_614132 = validateParameter(valid_614132, JString, required = false,
                                 default = nil)
  if valid_614132 != nil:
    section.add "EngineVersion", valid_614132
  var valid_614133 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_614133 = validateParameter(valid_614133, JBool, required = false, default = nil)
  if valid_614133 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_614133
  var valid_614134 = formData.getOrDefault("BackupRetentionPeriod")
  valid_614134 = validateParameter(valid_614134, JInt, required = false, default = nil)
  if valid_614134 != nil:
    section.add "BackupRetentionPeriod", valid_614134
  var valid_614135 = formData.getOrDefault("KmsKeyId")
  valid_614135 = validateParameter(valid_614135, JString, required = false,
                                 default = nil)
  if valid_614135 != nil:
    section.add "KmsKeyId", valid_614135
  var valid_614136 = formData.getOrDefault("Engine")
  valid_614136 = validateParameter(valid_614136, JString, required = true,
                                 default = nil)
  if valid_614136 != nil:
    section.add "Engine", valid_614136
  var valid_614137 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_614137 = validateParameter(valid_614137, JBool, required = false, default = nil)
  if valid_614137 != nil:
    section.add "AutoMinorVersionUpgrade", valid_614137
  var valid_614138 = formData.getOrDefault("TdeCredentialPassword")
  valid_614138 = validateParameter(valid_614138, JString, required = false,
                                 default = nil)
  if valid_614138 != nil:
    section.add "TdeCredentialPassword", valid_614138
  var valid_614139 = formData.getOrDefault("DBName")
  valid_614139 = validateParameter(valid_614139, JString, required = false,
                                 default = nil)
  if valid_614139 != nil:
    section.add "DBName", valid_614139
  var valid_614140 = formData.getOrDefault("Iops")
  valid_614140 = validateParameter(valid_614140, JInt, required = false, default = nil)
  if valid_614140 != nil:
    section.add "Iops", valid_614140
  var valid_614141 = formData.getOrDefault("PubliclyAccessible")
  valid_614141 = validateParameter(valid_614141, JBool, required = false, default = nil)
  if valid_614141 != nil:
    section.add "PubliclyAccessible", valid_614141
  var valid_614142 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_614142 = validateParameter(valid_614142, JString, required = false,
                                 default = nil)
  if valid_614142 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_614142
  var valid_614143 = formData.getOrDefault("LicenseModel")
  valid_614143 = validateParameter(valid_614143, JString, required = false,
                                 default = nil)
  if valid_614143 != nil:
    section.add "LicenseModel", valid_614143
  var valid_614144 = formData.getOrDefault("Tags")
  valid_614144 = validateParameter(valid_614144, JArray, required = false,
                                 default = nil)
  if valid_614144 != nil:
    section.add "Tags", valid_614144
  var valid_614145 = formData.getOrDefault("DomainIAMRoleName")
  valid_614145 = validateParameter(valid_614145, JString, required = false,
                                 default = nil)
  if valid_614145 != nil:
    section.add "DomainIAMRoleName", valid_614145
  var valid_614146 = formData.getOrDefault("OptionGroupName")
  valid_614146 = validateParameter(valid_614146, JString, required = false,
                                 default = nil)
  if valid_614146 != nil:
    section.add "OptionGroupName", valid_614146
  var valid_614147 = formData.getOrDefault("DBSecurityGroups")
  valid_614147 = validateParameter(valid_614147, JArray, required = false,
                                 default = nil)
  if valid_614147 != nil:
    section.add "DBSecurityGroups", valid_614147
  var valid_614148 = formData.getOrDefault("StorageEncrypted")
  valid_614148 = validateParameter(valid_614148, JBool, required = false, default = nil)
  if valid_614148 != nil:
    section.add "StorageEncrypted", valid_614148
  var valid_614149 = formData.getOrDefault("DBClusterIdentifier")
  valid_614149 = validateParameter(valid_614149, JString, required = false,
                                 default = nil)
  if valid_614149 != nil:
    section.add "DBClusterIdentifier", valid_614149
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614150: Call_PostCreateDBInstance_614092; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_614150.validator(path, query, header, formData, body)
  let scheme = call_614150.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614150.url(scheme.get, call_614150.host, call_614150.base,
                         call_614150.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614150, url, valid)

proc call*(call_614151: Call_PostCreateDBInstance_614092;
          DBInstanceIdentifier: string; DBInstanceClass: string; Engine: string;
          PromotionTier: int = 0; Port: int = 0; MultiAZ: bool = false;
          MasterUsername: string = ""; MonitoringRoleArn: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; EnablePerformanceInsights: bool = false;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; CharacterSetName: string = "";
          StorageType: string = ""; MaxAllocatedStorage: int = 0;
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          Domain: string = ""; Timezone: string = ""; DBParameterGroupName: string = "";
          EngineVersion: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  var query_614152 = newJObject()
  var formData_614153 = newJObject()
  add(formData_614153, "PromotionTier", newJInt(PromotionTier))
  add(formData_614153, "Port", newJInt(Port))
  add(formData_614153, "MultiAZ", newJBool(MultiAZ))
  add(formData_614153, "MasterUsername", newJString(MasterUsername))
  add(formData_614153, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_614153, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_614153.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_614153, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_614153, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_614153, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_614153, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_614153.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_614152, "Action", newJString(Action))
  add(formData_614153, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_614153, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_614153, "CharacterSetName", newJString(CharacterSetName))
  add(formData_614153, "StorageType", newJString(StorageType))
  add(formData_614153, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_614153, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_614153, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_614153.add "ProcessorFeatures", ProcessorFeatures
  add(formData_614153, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_614153, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_614153, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_614153, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_614153, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_614153, "Domain", newJString(Domain))
  add(formData_614153, "Timezone", newJString(Timezone))
  add(formData_614153, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_614153, "EngineVersion", newJString(EngineVersion))
  add(formData_614153, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_614153, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_614153, "KmsKeyId", newJString(KmsKeyId))
  add(formData_614153, "Engine", newJString(Engine))
  add(formData_614153, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_614153, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_614153, "DBName", newJString(DBName))
  add(formData_614153, "Iops", newJInt(Iops))
  add(formData_614153, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_614153, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_614153, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_614153.add "Tags", Tags
  add(formData_614153, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_614153, "OptionGroupName", newJString(OptionGroupName))
  add(query_614152, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_614153.add "DBSecurityGroups", DBSecurityGroups
  add(formData_614153, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_614153, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_614151.call(nil, query_614152, nil, formData_614153, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_614092(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_614093, base: "/",
    url: url_PostCreateDBInstance_614094, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_614031 = ref object of OpenApiRestCall_612658
proc url_GetCreateDBInstance_614033(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstance_614032(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: JString (required)
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_614034 = query.getOrDefault("Engine")
  valid_614034 = validateParameter(valid_614034, JString, required = true,
                                 default = nil)
  if valid_614034 != nil:
    section.add "Engine", valid_614034
  var valid_614035 = query.getOrDefault("CopyTagsToSnapshot")
  valid_614035 = validateParameter(valid_614035, JBool, required = false, default = nil)
  if valid_614035 != nil:
    section.add "CopyTagsToSnapshot", valid_614035
  var valid_614036 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_614036 = validateParameter(valid_614036, JInt, required = false, default = nil)
  if valid_614036 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_614036
  var valid_614037 = query.getOrDefault("MonitoringInterval")
  valid_614037 = validateParameter(valid_614037, JInt, required = false, default = nil)
  if valid_614037 != nil:
    section.add "MonitoringInterval", valid_614037
  var valid_614038 = query.getOrDefault("KmsKeyId")
  valid_614038 = validateParameter(valid_614038, JString, required = false,
                                 default = nil)
  if valid_614038 != nil:
    section.add "KmsKeyId", valid_614038
  var valid_614039 = query.getOrDefault("MonitoringRoleArn")
  valid_614039 = validateParameter(valid_614039, JString, required = false,
                                 default = nil)
  if valid_614039 != nil:
    section.add "MonitoringRoleArn", valid_614039
  var valid_614040 = query.getOrDefault("ProcessorFeatures")
  valid_614040 = validateParameter(valid_614040, JArray, required = false,
                                 default = nil)
  if valid_614040 != nil:
    section.add "ProcessorFeatures", valid_614040
  var valid_614041 = query.getOrDefault("MasterUsername")
  valid_614041 = validateParameter(valid_614041, JString, required = false,
                                 default = nil)
  if valid_614041 != nil:
    section.add "MasterUsername", valid_614041
  var valid_614042 = query.getOrDefault("BackupRetentionPeriod")
  valid_614042 = validateParameter(valid_614042, JInt, required = false, default = nil)
  if valid_614042 != nil:
    section.add "BackupRetentionPeriod", valid_614042
  var valid_614043 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_614043 = validateParameter(valid_614043, JArray, required = false,
                                 default = nil)
  if valid_614043 != nil:
    section.add "EnableCloudwatchLogsExports", valid_614043
  var valid_614044 = query.getOrDefault("EngineVersion")
  valid_614044 = validateParameter(valid_614044, JString, required = false,
                                 default = nil)
  if valid_614044 != nil:
    section.add "EngineVersion", valid_614044
  var valid_614045 = query.getOrDefault("Action")
  valid_614045 = validateParameter(valid_614045, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_614045 != nil:
    section.add "Action", valid_614045
  var valid_614046 = query.getOrDefault("Domain")
  valid_614046 = validateParameter(valid_614046, JString, required = false,
                                 default = nil)
  if valid_614046 != nil:
    section.add "Domain", valid_614046
  var valid_614047 = query.getOrDefault("VpcSecurityGroupIds")
  valid_614047 = validateParameter(valid_614047, JArray, required = false,
                                 default = nil)
  if valid_614047 != nil:
    section.add "VpcSecurityGroupIds", valid_614047
  var valid_614048 = query.getOrDefault("AllocatedStorage")
  valid_614048 = validateParameter(valid_614048, JInt, required = false, default = nil)
  if valid_614048 != nil:
    section.add "AllocatedStorage", valid_614048
  var valid_614049 = query.getOrDefault("EnablePerformanceInsights")
  valid_614049 = validateParameter(valid_614049, JBool, required = false, default = nil)
  if valid_614049 != nil:
    section.add "EnablePerformanceInsights", valid_614049
  var valid_614050 = query.getOrDefault("PubliclyAccessible")
  valid_614050 = validateParameter(valid_614050, JBool, required = false, default = nil)
  if valid_614050 != nil:
    section.add "PubliclyAccessible", valid_614050
  var valid_614051 = query.getOrDefault("DBName")
  valid_614051 = validateParameter(valid_614051, JString, required = false,
                                 default = nil)
  if valid_614051 != nil:
    section.add "DBName", valid_614051
  var valid_614052 = query.getOrDefault("TdeCredentialPassword")
  valid_614052 = validateParameter(valid_614052, JString, required = false,
                                 default = nil)
  if valid_614052 != nil:
    section.add "TdeCredentialPassword", valid_614052
  var valid_614053 = query.getOrDefault("StorageEncrypted")
  valid_614053 = validateParameter(valid_614053, JBool, required = false, default = nil)
  if valid_614053 != nil:
    section.add "StorageEncrypted", valid_614053
  var valid_614054 = query.getOrDefault("DBParameterGroupName")
  valid_614054 = validateParameter(valid_614054, JString, required = false,
                                 default = nil)
  if valid_614054 != nil:
    section.add "DBParameterGroupName", valid_614054
  var valid_614055 = query.getOrDefault("DeletionProtection")
  valid_614055 = validateParameter(valid_614055, JBool, required = false, default = nil)
  if valid_614055 != nil:
    section.add "DeletionProtection", valid_614055
  var valid_614056 = query.getOrDefault("CharacterSetName")
  valid_614056 = validateParameter(valid_614056, JString, required = false,
                                 default = nil)
  if valid_614056 != nil:
    section.add "CharacterSetName", valid_614056
  var valid_614057 = query.getOrDefault("Tags")
  valid_614057 = validateParameter(valid_614057, JArray, required = false,
                                 default = nil)
  if valid_614057 != nil:
    section.add "Tags", valid_614057
  var valid_614058 = query.getOrDefault("MaxAllocatedStorage")
  valid_614058 = validateParameter(valid_614058, JInt, required = false, default = nil)
  if valid_614058 != nil:
    section.add "MaxAllocatedStorage", valid_614058
  var valid_614059 = query.getOrDefault("DBClusterIdentifier")
  valid_614059 = validateParameter(valid_614059, JString, required = false,
                                 default = nil)
  if valid_614059 != nil:
    section.add "DBClusterIdentifier", valid_614059
  var valid_614060 = query.getOrDefault("LicenseModel")
  valid_614060 = validateParameter(valid_614060, JString, required = false,
                                 default = nil)
  if valid_614060 != nil:
    section.add "LicenseModel", valid_614060
  var valid_614061 = query.getOrDefault("DBInstanceIdentifier")
  valid_614061 = validateParameter(valid_614061, JString, required = true,
                                 default = nil)
  if valid_614061 != nil:
    section.add "DBInstanceIdentifier", valid_614061
  var valid_614062 = query.getOrDefault("TdeCredentialArn")
  valid_614062 = validateParameter(valid_614062, JString, required = false,
                                 default = nil)
  if valid_614062 != nil:
    section.add "TdeCredentialArn", valid_614062
  var valid_614063 = query.getOrDefault("PromotionTier")
  valid_614063 = validateParameter(valid_614063, JInt, required = false, default = nil)
  if valid_614063 != nil:
    section.add "PromotionTier", valid_614063
  var valid_614064 = query.getOrDefault("StorageType")
  valid_614064 = validateParameter(valid_614064, JString, required = false,
                                 default = nil)
  if valid_614064 != nil:
    section.add "StorageType", valid_614064
  var valid_614065 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_614065 = validateParameter(valid_614065, JBool, required = false, default = nil)
  if valid_614065 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_614065
  var valid_614066 = query.getOrDefault("MultiAZ")
  valid_614066 = validateParameter(valid_614066, JBool, required = false, default = nil)
  if valid_614066 != nil:
    section.add "MultiAZ", valid_614066
  var valid_614067 = query.getOrDefault("DBSecurityGroups")
  valid_614067 = validateParameter(valid_614067, JArray, required = false,
                                 default = nil)
  if valid_614067 != nil:
    section.add "DBSecurityGroups", valid_614067
  var valid_614068 = query.getOrDefault("Port")
  valid_614068 = validateParameter(valid_614068, JInt, required = false, default = nil)
  if valid_614068 != nil:
    section.add "Port", valid_614068
  var valid_614069 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_614069 = validateParameter(valid_614069, JString, required = false,
                                 default = nil)
  if valid_614069 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_614069
  var valid_614070 = query.getOrDefault("MasterUserPassword")
  valid_614070 = validateParameter(valid_614070, JString, required = false,
                                 default = nil)
  if valid_614070 != nil:
    section.add "MasterUserPassword", valid_614070
  var valid_614071 = query.getOrDefault("AvailabilityZone")
  valid_614071 = validateParameter(valid_614071, JString, required = false,
                                 default = nil)
  if valid_614071 != nil:
    section.add "AvailabilityZone", valid_614071
  var valid_614072 = query.getOrDefault("OptionGroupName")
  valid_614072 = validateParameter(valid_614072, JString, required = false,
                                 default = nil)
  if valid_614072 != nil:
    section.add "OptionGroupName", valid_614072
  var valid_614073 = query.getOrDefault("DBSubnetGroupName")
  valid_614073 = validateParameter(valid_614073, JString, required = false,
                                 default = nil)
  if valid_614073 != nil:
    section.add "DBSubnetGroupName", valid_614073
  var valid_614074 = query.getOrDefault("PreferredBackupWindow")
  valid_614074 = validateParameter(valid_614074, JString, required = false,
                                 default = nil)
  if valid_614074 != nil:
    section.add "PreferredBackupWindow", valid_614074
  var valid_614075 = query.getOrDefault("DBInstanceClass")
  valid_614075 = validateParameter(valid_614075, JString, required = true,
                                 default = nil)
  if valid_614075 != nil:
    section.add "DBInstanceClass", valid_614075
  var valid_614076 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_614076 = validateParameter(valid_614076, JString, required = false,
                                 default = nil)
  if valid_614076 != nil:
    section.add "PreferredMaintenanceWindow", valid_614076
  var valid_614077 = query.getOrDefault("Timezone")
  valid_614077 = validateParameter(valid_614077, JString, required = false,
                                 default = nil)
  if valid_614077 != nil:
    section.add "Timezone", valid_614077
  var valid_614078 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_614078 = validateParameter(valid_614078, JBool, required = false, default = nil)
  if valid_614078 != nil:
    section.add "AutoMinorVersionUpgrade", valid_614078
  var valid_614079 = query.getOrDefault("Iops")
  valid_614079 = validateParameter(valid_614079, JInt, required = false, default = nil)
  if valid_614079 != nil:
    section.add "Iops", valid_614079
  var valid_614080 = query.getOrDefault("Version")
  valid_614080 = validateParameter(valid_614080, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614080 != nil:
    section.add "Version", valid_614080
  var valid_614081 = query.getOrDefault("DomainIAMRoleName")
  valid_614081 = validateParameter(valid_614081, JString, required = false,
                                 default = nil)
  if valid_614081 != nil:
    section.add "DomainIAMRoleName", valid_614081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_614082 = header.getOrDefault("X-Amz-Security-Token")
  valid_614082 = validateParameter(valid_614082, JString, required = false,
                                 default = nil)
  if valid_614082 != nil:
    section.add "X-Amz-Security-Token", valid_614082
  var valid_614083 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614083 = validateParameter(valid_614083, JString, required = false,
                                 default = nil)
  if valid_614083 != nil:
    section.add "X-Amz-SignedHeaders", valid_614083
  var valid_614084 = header.getOrDefault("X-Amz-Signature")
  valid_614084 = validateParameter(valid_614084, JString, required = false,
                                 default = nil)
  if valid_614084 != nil:
    section.add "X-Amz-Signature", valid_614084
  var valid_614085 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614085 = validateParameter(valid_614085, JString, required = false,
                                 default = nil)
  if valid_614085 != nil:
    section.add "X-Amz-Content-Sha256", valid_614085
  var valid_614086 = header.getOrDefault("X-Amz-Date")
  valid_614086 = validateParameter(valid_614086, JString, required = false,
                                 default = nil)
  if valid_614086 != nil:
    section.add "X-Amz-Date", valid_614086
  var valid_614087 = header.getOrDefault("X-Amz-Credential")
  valid_614087 = validateParameter(valid_614087, JString, required = false,
                                 default = nil)
  if valid_614087 != nil:
    section.add "X-Amz-Credential", valid_614087
  var valid_614088 = header.getOrDefault("X-Amz-Algorithm")
  valid_614088 = validateParameter(valid_614088, JString, required = false,
                                 default = nil)
  if valid_614088 != nil:
    section.add "X-Amz-Algorithm", valid_614088
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614089: Call_GetCreateDBInstance_614031; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_614089.validator(path, query, header, formData, body)
  let scheme = call_614089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614089.url(scheme.get, call_614089.host, call_614089.base,
                         call_614089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614089, url, valid)

proc call*(call_614090: Call_GetCreateDBInstance_614031; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; TdeCredentialPassword: string = "";
          StorageEncrypted: bool = false; DBParameterGroupName: string = "";
          DeletionProtection: bool = false; CharacterSetName: string = "";
          Tags: JsonNode = nil; MaxAllocatedStorage: int = 0;
          DBClusterIdentifier: string = ""; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Timezone: string = "";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          Version: string = "2014-10-31"; DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: string (required)
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_614091 = newJObject()
  add(query_614091, "Engine", newJString(Engine))
  add(query_614091, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_614091, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_614091, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_614091, "KmsKeyId", newJString(KmsKeyId))
  add(query_614091, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  if ProcessorFeatures != nil:
    query_614091.add "ProcessorFeatures", ProcessorFeatures
  add(query_614091, "MasterUsername", newJString(MasterUsername))
  add(query_614091, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_614091.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_614091, "EngineVersion", newJString(EngineVersion))
  add(query_614091, "Action", newJString(Action))
  add(query_614091, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_614091.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_614091, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_614091, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_614091, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_614091, "DBName", newJString(DBName))
  add(query_614091, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_614091, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_614091, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_614091, "DeletionProtection", newJBool(DeletionProtection))
  add(query_614091, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_614091.add "Tags", Tags
  add(query_614091, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_614091, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_614091, "LicenseModel", newJString(LicenseModel))
  add(query_614091, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614091, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_614091, "PromotionTier", newJInt(PromotionTier))
  add(query_614091, "StorageType", newJString(StorageType))
  add(query_614091, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_614091, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_614091.add "DBSecurityGroups", DBSecurityGroups
  add(query_614091, "Port", newJInt(Port))
  add(query_614091, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_614091, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_614091, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_614091, "OptionGroupName", newJString(OptionGroupName))
  add(query_614091, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_614091, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_614091, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_614091, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_614091, "Timezone", newJString(Timezone))
  add(query_614091, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_614091, "Iops", newJInt(Iops))
  add(query_614091, "Version", newJString(Version))
  add(query_614091, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_614090.call(nil, query_614091, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_614031(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_614032, base: "/",
    url: url_GetCreateDBInstance_614033, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstanceReadReplica_614200 = ref object of OpenApiRestCall_612658
proc url_PostCreateDBInstanceReadReplica_614202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstanceReadReplica_614201(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614203 = query.getOrDefault("Action")
  valid_614203 = validateParameter(valid_614203, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_614203 != nil:
    section.add "Action", valid_614203
  var valid_614204 = query.getOrDefault("Version")
  valid_614204 = validateParameter(valid_614204, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614204 != nil:
    section.add "Version", valid_614204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614205 = header.getOrDefault("X-Amz-Signature")
  valid_614205 = validateParameter(valid_614205, JString, required = false,
                                 default = nil)
  if valid_614205 != nil:
    section.add "X-Amz-Signature", valid_614205
  var valid_614206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614206 = validateParameter(valid_614206, JString, required = false,
                                 default = nil)
  if valid_614206 != nil:
    section.add "X-Amz-Content-Sha256", valid_614206
  var valid_614207 = header.getOrDefault("X-Amz-Date")
  valid_614207 = validateParameter(valid_614207, JString, required = false,
                                 default = nil)
  if valid_614207 != nil:
    section.add "X-Amz-Date", valid_614207
  var valid_614208 = header.getOrDefault("X-Amz-Credential")
  valid_614208 = validateParameter(valid_614208, JString, required = false,
                                 default = nil)
  if valid_614208 != nil:
    section.add "X-Amz-Credential", valid_614208
  var valid_614209 = header.getOrDefault("X-Amz-Security-Token")
  valid_614209 = validateParameter(valid_614209, JString, required = false,
                                 default = nil)
  if valid_614209 != nil:
    section.add "X-Amz-Security-Token", valid_614209
  var valid_614210 = header.getOrDefault("X-Amz-Algorithm")
  valid_614210 = validateParameter(valid_614210, JString, required = false,
                                 default = nil)
  if valid_614210 != nil:
    section.add "X-Amz-Algorithm", valid_614210
  var valid_614211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614211 = validateParameter(valid_614211, JString, required = false,
                                 default = nil)
  if valid_614211 != nil:
    section.add "X-Amz-SignedHeaders", valid_614211
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_614212 = formData.getOrDefault("Port")
  valid_614212 = validateParameter(valid_614212, JInt, required = false, default = nil)
  if valid_614212 != nil:
    section.add "Port", valid_614212
  var valid_614213 = formData.getOrDefault("DBInstanceClass")
  valid_614213 = validateParameter(valid_614213, JString, required = false,
                                 default = nil)
  if valid_614213 != nil:
    section.add "DBInstanceClass", valid_614213
  var valid_614214 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_614214 = validateParameter(valid_614214, JBool, required = false, default = nil)
  if valid_614214 != nil:
    section.add "UseDefaultProcessorFeatures", valid_614214
  var valid_614215 = formData.getOrDefault("MultiAZ")
  valid_614215 = validateParameter(valid_614215, JBool, required = false, default = nil)
  if valid_614215 != nil:
    section.add "MultiAZ", valid_614215
  var valid_614216 = formData.getOrDefault("Domain")
  valid_614216 = validateParameter(valid_614216, JString, required = false,
                                 default = nil)
  if valid_614216 != nil:
    section.add "Domain", valid_614216
  var valid_614217 = formData.getOrDefault("MonitoringRoleArn")
  valid_614217 = validateParameter(valid_614217, JString, required = false,
                                 default = nil)
  if valid_614217 != nil:
    section.add "MonitoringRoleArn", valid_614217
  assert formData != nil, "formData argument is necessary due to required `SourceDBInstanceIdentifier` field"
  var valid_614218 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_614218 = validateParameter(valid_614218, JString, required = true,
                                 default = nil)
  if valid_614218 != nil:
    section.add "SourceDBInstanceIdentifier", valid_614218
  var valid_614219 = formData.getOrDefault("DBParameterGroupName")
  valid_614219 = validateParameter(valid_614219, JString, required = false,
                                 default = nil)
  if valid_614219 != nil:
    section.add "DBParameterGroupName", valid_614219
  var valid_614220 = formData.getOrDefault("SourceRegion")
  valid_614220 = validateParameter(valid_614220, JString, required = false,
                                 default = nil)
  if valid_614220 != nil:
    section.add "SourceRegion", valid_614220
  var valid_614221 = formData.getOrDefault("MonitoringInterval")
  valid_614221 = validateParameter(valid_614221, JInt, required = false, default = nil)
  if valid_614221 != nil:
    section.add "MonitoringInterval", valid_614221
  var valid_614222 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_614222 = validateParameter(valid_614222, JArray, required = false,
                                 default = nil)
  if valid_614222 != nil:
    section.add "VpcSecurityGroupIds", valid_614222
  var valid_614223 = formData.getOrDefault("AvailabilityZone")
  valid_614223 = validateParameter(valid_614223, JString, required = false,
                                 default = nil)
  if valid_614223 != nil:
    section.add "AvailabilityZone", valid_614223
  var valid_614224 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_614224 = validateParameter(valid_614224, JBool, required = false, default = nil)
  if valid_614224 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_614224
  var valid_614225 = formData.getOrDefault("KmsKeyId")
  valid_614225 = validateParameter(valid_614225, JString, required = false,
                                 default = nil)
  if valid_614225 != nil:
    section.add "KmsKeyId", valid_614225
  var valid_614226 = formData.getOrDefault("EnablePerformanceInsights")
  valid_614226 = validateParameter(valid_614226, JBool, required = false, default = nil)
  if valid_614226 != nil:
    section.add "EnablePerformanceInsights", valid_614226
  var valid_614227 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_614227 = validateParameter(valid_614227, JBool, required = false, default = nil)
  if valid_614227 != nil:
    section.add "AutoMinorVersionUpgrade", valid_614227
  var valid_614228 = formData.getOrDefault("PreSignedUrl")
  valid_614228 = validateParameter(valid_614228, JString, required = false,
                                 default = nil)
  if valid_614228 != nil:
    section.add "PreSignedUrl", valid_614228
  var valid_614229 = formData.getOrDefault("DBInstanceIdentifier")
  valid_614229 = validateParameter(valid_614229, JString, required = true,
                                 default = nil)
  if valid_614229 != nil:
    section.add "DBInstanceIdentifier", valid_614229
  var valid_614230 = formData.getOrDefault("Iops")
  valid_614230 = validateParameter(valid_614230, JInt, required = false, default = nil)
  if valid_614230 != nil:
    section.add "Iops", valid_614230
  var valid_614231 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_614231 = validateParameter(valid_614231, JArray, required = false,
                                 default = nil)
  if valid_614231 != nil:
    section.add "EnableCloudwatchLogsExports", valid_614231
  var valid_614232 = formData.getOrDefault("PubliclyAccessible")
  valid_614232 = validateParameter(valid_614232, JBool, required = false, default = nil)
  if valid_614232 != nil:
    section.add "PubliclyAccessible", valid_614232
  var valid_614233 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_614233 = validateParameter(valid_614233, JString, required = false,
                                 default = nil)
  if valid_614233 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_614233
  var valid_614234 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_614234 = validateParameter(valid_614234, JInt, required = false, default = nil)
  if valid_614234 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_614234
  var valid_614235 = formData.getOrDefault("Tags")
  valid_614235 = validateParameter(valid_614235, JArray, required = false,
                                 default = nil)
  if valid_614235 != nil:
    section.add "Tags", valid_614235
  var valid_614236 = formData.getOrDefault("DBSubnetGroupName")
  valid_614236 = validateParameter(valid_614236, JString, required = false,
                                 default = nil)
  if valid_614236 != nil:
    section.add "DBSubnetGroupName", valid_614236
  var valid_614237 = formData.getOrDefault("DomainIAMRoleName")
  valid_614237 = validateParameter(valid_614237, JString, required = false,
                                 default = nil)
  if valid_614237 != nil:
    section.add "DomainIAMRoleName", valid_614237
  var valid_614238 = formData.getOrDefault("OptionGroupName")
  valid_614238 = validateParameter(valid_614238, JString, required = false,
                                 default = nil)
  if valid_614238 != nil:
    section.add "OptionGroupName", valid_614238
  var valid_614239 = formData.getOrDefault("StorageType")
  valid_614239 = validateParameter(valid_614239, JString, required = false,
                                 default = nil)
  if valid_614239 != nil:
    section.add "StorageType", valid_614239
  var valid_614240 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_614240 = validateParameter(valid_614240, JBool, required = false, default = nil)
  if valid_614240 != nil:
    section.add "CopyTagsToSnapshot", valid_614240
  var valid_614241 = formData.getOrDefault("DeletionProtection")
  valid_614241 = validateParameter(valid_614241, JBool, required = false, default = nil)
  if valid_614241 != nil:
    section.add "DeletionProtection", valid_614241
  var valid_614242 = formData.getOrDefault("ProcessorFeatures")
  valid_614242 = validateParameter(valid_614242, JArray, required = false,
                                 default = nil)
  if valid_614242 != nil:
    section.add "ProcessorFeatures", valid_614242
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614243: Call_PostCreateDBInstanceReadReplica_614200;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_614243.validator(path, query, header, formData, body)
  let scheme = call_614243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614243.url(scheme.get, call_614243.host, call_614243.base,
                         call_614243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614243, url, valid)

proc call*(call_614244: Call_PostCreateDBInstanceReadReplica_614200;
          SourceDBInstanceIdentifier: string; DBInstanceIdentifier: string;
          Port: int = 0; DBInstanceClass: string = "";
          UseDefaultProcessorFeatures: bool = false; MultiAZ: bool = false;
          Domain: string = ""; MonitoringRoleArn: string = "";
          DBParameterGroupName: string = ""; SourceRegion: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; PreSignedUrl: string = "";
          Iops: int = 0; EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "CreateDBInstanceReadReplica";
          PerformanceInsightsKMSKeyId: string = "";
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_614245 = newJObject()
  var formData_614246 = newJObject()
  add(formData_614246, "Port", newJInt(Port))
  add(formData_614246, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_614246, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_614246, "MultiAZ", newJBool(MultiAZ))
  add(formData_614246, "Domain", newJString(Domain))
  add(formData_614246, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_614246, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_614246, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_614246, "SourceRegion", newJString(SourceRegion))
  add(formData_614246, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_614246.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_614246, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_614246, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_614246, "KmsKeyId", newJString(KmsKeyId))
  add(formData_614246, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_614246, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_614246, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_614246, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_614246, "Iops", newJInt(Iops))
  if EnableCloudwatchLogsExports != nil:
    formData_614246.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_614246, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_614245, "Action", newJString(Action))
  add(formData_614246, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_614246, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    formData_614246.add "Tags", Tags
  add(formData_614246, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_614246, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_614246, "OptionGroupName", newJString(OptionGroupName))
  add(query_614245, "Version", newJString(Version))
  add(formData_614246, "StorageType", newJString(StorageType))
  add(formData_614246, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_614246, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_614246.add "ProcessorFeatures", ProcessorFeatures
  result = call_614244.call(nil, query_614245, nil, formData_614246, nil)

var postCreateDBInstanceReadReplica* = Call_PostCreateDBInstanceReadReplica_614200(
    name: "postCreateDBInstanceReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_PostCreateDBInstanceReadReplica_614201, base: "/",
    url: url_PostCreateDBInstanceReadReplica_614202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstanceReadReplica_614154 = ref object of OpenApiRestCall_612658
proc url_GetCreateDBInstanceReadReplica_614156(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstanceReadReplica_614155(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_614157 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_614157 = validateParameter(valid_614157, JBool, required = false, default = nil)
  if valid_614157 != nil:
    section.add "UseDefaultProcessorFeatures", valid_614157
  var valid_614158 = query.getOrDefault("DeletionProtection")
  valid_614158 = validateParameter(valid_614158, JBool, required = false, default = nil)
  if valid_614158 != nil:
    section.add "DeletionProtection", valid_614158
  var valid_614159 = query.getOrDefault("DBParameterGroupName")
  valid_614159 = validateParameter(valid_614159, JString, required = false,
                                 default = nil)
  if valid_614159 != nil:
    section.add "DBParameterGroupName", valid_614159
  var valid_614160 = query.getOrDefault("CopyTagsToSnapshot")
  valid_614160 = validateParameter(valid_614160, JBool, required = false, default = nil)
  if valid_614160 != nil:
    section.add "CopyTagsToSnapshot", valid_614160
  var valid_614161 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_614161 = validateParameter(valid_614161, JInt, required = false, default = nil)
  if valid_614161 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_614161
  var valid_614162 = query.getOrDefault("Tags")
  valid_614162 = validateParameter(valid_614162, JArray, required = false,
                                 default = nil)
  if valid_614162 != nil:
    section.add "Tags", valid_614162
  var valid_614163 = query.getOrDefault("MonitoringInterval")
  valid_614163 = validateParameter(valid_614163, JInt, required = false, default = nil)
  if valid_614163 != nil:
    section.add "MonitoringInterval", valid_614163
  var valid_614164 = query.getOrDefault("MonitoringRoleArn")
  valid_614164 = validateParameter(valid_614164, JString, required = false,
                                 default = nil)
  if valid_614164 != nil:
    section.add "MonitoringRoleArn", valid_614164
  var valid_614165 = query.getOrDefault("KmsKeyId")
  valid_614165 = validateParameter(valid_614165, JString, required = false,
                                 default = nil)
  if valid_614165 != nil:
    section.add "KmsKeyId", valid_614165
  var valid_614166 = query.getOrDefault("PreSignedUrl")
  valid_614166 = validateParameter(valid_614166, JString, required = false,
                                 default = nil)
  if valid_614166 != nil:
    section.add "PreSignedUrl", valid_614166
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614167 = query.getOrDefault("DBInstanceIdentifier")
  valid_614167 = validateParameter(valid_614167, JString, required = true,
                                 default = nil)
  if valid_614167 != nil:
    section.add "DBInstanceIdentifier", valid_614167
  var valid_614168 = query.getOrDefault("ProcessorFeatures")
  valid_614168 = validateParameter(valid_614168, JArray, required = false,
                                 default = nil)
  if valid_614168 != nil:
    section.add "ProcessorFeatures", valid_614168
  var valid_614169 = query.getOrDefault("StorageType")
  valid_614169 = validateParameter(valid_614169, JString, required = false,
                                 default = nil)
  if valid_614169 != nil:
    section.add "StorageType", valid_614169
  var valid_614170 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_614170 = validateParameter(valid_614170, JBool, required = false, default = nil)
  if valid_614170 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_614170
  var valid_614171 = query.getOrDefault("SourceRegion")
  valid_614171 = validateParameter(valid_614171, JString, required = false,
                                 default = nil)
  if valid_614171 != nil:
    section.add "SourceRegion", valid_614171
  var valid_614172 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_614172 = validateParameter(valid_614172, JArray, required = false,
                                 default = nil)
  if valid_614172 != nil:
    section.add "EnableCloudwatchLogsExports", valid_614172
  var valid_614173 = query.getOrDefault("Action")
  valid_614173 = validateParameter(valid_614173, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_614173 != nil:
    section.add "Action", valid_614173
  var valid_614174 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_614174 = validateParameter(valid_614174, JString, required = true,
                                 default = nil)
  if valid_614174 != nil:
    section.add "SourceDBInstanceIdentifier", valid_614174
  var valid_614175 = query.getOrDefault("MultiAZ")
  valid_614175 = validateParameter(valid_614175, JBool, required = false, default = nil)
  if valid_614175 != nil:
    section.add "MultiAZ", valid_614175
  var valid_614176 = query.getOrDefault("Port")
  valid_614176 = validateParameter(valid_614176, JInt, required = false, default = nil)
  if valid_614176 != nil:
    section.add "Port", valid_614176
  var valid_614177 = query.getOrDefault("Domain")
  valid_614177 = validateParameter(valid_614177, JString, required = false,
                                 default = nil)
  if valid_614177 != nil:
    section.add "Domain", valid_614177
  var valid_614178 = query.getOrDefault("VpcSecurityGroupIds")
  valid_614178 = validateParameter(valid_614178, JArray, required = false,
                                 default = nil)
  if valid_614178 != nil:
    section.add "VpcSecurityGroupIds", valid_614178
  var valid_614179 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_614179 = validateParameter(valid_614179, JString, required = false,
                                 default = nil)
  if valid_614179 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_614179
  var valid_614180 = query.getOrDefault("AvailabilityZone")
  valid_614180 = validateParameter(valid_614180, JString, required = false,
                                 default = nil)
  if valid_614180 != nil:
    section.add "AvailabilityZone", valid_614180
  var valid_614181 = query.getOrDefault("OptionGroupName")
  valid_614181 = validateParameter(valid_614181, JString, required = false,
                                 default = nil)
  if valid_614181 != nil:
    section.add "OptionGroupName", valid_614181
  var valid_614182 = query.getOrDefault("DBSubnetGroupName")
  valid_614182 = validateParameter(valid_614182, JString, required = false,
                                 default = nil)
  if valid_614182 != nil:
    section.add "DBSubnetGroupName", valid_614182
  var valid_614183 = query.getOrDefault("Version")
  valid_614183 = validateParameter(valid_614183, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614183 != nil:
    section.add "Version", valid_614183
  var valid_614184 = query.getOrDefault("DBInstanceClass")
  valid_614184 = validateParameter(valid_614184, JString, required = false,
                                 default = nil)
  if valid_614184 != nil:
    section.add "DBInstanceClass", valid_614184
  var valid_614185 = query.getOrDefault("PubliclyAccessible")
  valid_614185 = validateParameter(valid_614185, JBool, required = false, default = nil)
  if valid_614185 != nil:
    section.add "PubliclyAccessible", valid_614185
  var valid_614186 = query.getOrDefault("EnablePerformanceInsights")
  valid_614186 = validateParameter(valid_614186, JBool, required = false, default = nil)
  if valid_614186 != nil:
    section.add "EnablePerformanceInsights", valid_614186
  var valid_614187 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_614187 = validateParameter(valid_614187, JBool, required = false, default = nil)
  if valid_614187 != nil:
    section.add "AutoMinorVersionUpgrade", valid_614187
  var valid_614188 = query.getOrDefault("Iops")
  valid_614188 = validateParameter(valid_614188, JInt, required = false, default = nil)
  if valid_614188 != nil:
    section.add "Iops", valid_614188
  var valid_614189 = query.getOrDefault("DomainIAMRoleName")
  valid_614189 = validateParameter(valid_614189, JString, required = false,
                                 default = nil)
  if valid_614189 != nil:
    section.add "DomainIAMRoleName", valid_614189
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614190 = header.getOrDefault("X-Amz-Signature")
  valid_614190 = validateParameter(valid_614190, JString, required = false,
                                 default = nil)
  if valid_614190 != nil:
    section.add "X-Amz-Signature", valid_614190
  var valid_614191 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614191 = validateParameter(valid_614191, JString, required = false,
                                 default = nil)
  if valid_614191 != nil:
    section.add "X-Amz-Content-Sha256", valid_614191
  var valid_614192 = header.getOrDefault("X-Amz-Date")
  valid_614192 = validateParameter(valid_614192, JString, required = false,
                                 default = nil)
  if valid_614192 != nil:
    section.add "X-Amz-Date", valid_614192
  var valid_614193 = header.getOrDefault("X-Amz-Credential")
  valid_614193 = validateParameter(valid_614193, JString, required = false,
                                 default = nil)
  if valid_614193 != nil:
    section.add "X-Amz-Credential", valid_614193
  var valid_614194 = header.getOrDefault("X-Amz-Security-Token")
  valid_614194 = validateParameter(valid_614194, JString, required = false,
                                 default = nil)
  if valid_614194 != nil:
    section.add "X-Amz-Security-Token", valid_614194
  var valid_614195 = header.getOrDefault("X-Amz-Algorithm")
  valid_614195 = validateParameter(valid_614195, JString, required = false,
                                 default = nil)
  if valid_614195 != nil:
    section.add "X-Amz-Algorithm", valid_614195
  var valid_614196 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614196 = validateParameter(valid_614196, JString, required = false,
                                 default = nil)
  if valid_614196 != nil:
    section.add "X-Amz-SignedHeaders", valid_614196
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614197: Call_GetCreateDBInstanceReadReplica_614154; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_614197.validator(path, query, header, formData, body)
  let scheme = call_614197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614197.url(scheme.get, call_614197.host, call_614197.base,
                         call_614197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614197, url, valid)

proc call*(call_614198: Call_GetCreateDBInstanceReadReplica_614154;
          DBInstanceIdentifier: string; SourceDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false;
          DeletionProtection: bool = false; DBParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          MonitoringInterval: int = 0; MonitoringRoleArn: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; SourceRegion: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstanceReadReplica"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          PerformanceInsightsKMSKeyId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_614199 = newJObject()
  add(query_614199, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_614199, "DeletionProtection", newJBool(DeletionProtection))
  add(query_614199, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_614199, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_614199, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    query_614199.add "Tags", Tags
  add(query_614199, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_614199, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_614199, "KmsKeyId", newJString(KmsKeyId))
  add(query_614199, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_614199, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if ProcessorFeatures != nil:
    query_614199.add "ProcessorFeatures", ProcessorFeatures
  add(query_614199, "StorageType", newJString(StorageType))
  add(query_614199, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_614199, "SourceRegion", newJString(SourceRegion))
  if EnableCloudwatchLogsExports != nil:
    query_614199.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_614199, "Action", newJString(Action))
  add(query_614199, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_614199, "MultiAZ", newJBool(MultiAZ))
  add(query_614199, "Port", newJInt(Port))
  add(query_614199, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_614199.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_614199, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_614199, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_614199, "OptionGroupName", newJString(OptionGroupName))
  add(query_614199, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_614199, "Version", newJString(Version))
  add(query_614199, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_614199, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_614199, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_614199, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_614199, "Iops", newJInt(Iops))
  add(query_614199, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_614198.call(nil, query_614199, nil, nil, nil)

var getCreateDBInstanceReadReplica* = Call_GetCreateDBInstanceReadReplica_614154(
    name: "getCreateDBInstanceReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_GetCreateDBInstanceReadReplica_614155, base: "/",
    url: url_GetCreateDBInstanceReadReplica_614156,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_614266 = ref object of OpenApiRestCall_612658
proc url_PostCreateDBParameterGroup_614268(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBParameterGroup_614267(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614269 = query.getOrDefault("Action")
  valid_614269 = validateParameter(valid_614269, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_614269 != nil:
    section.add "Action", valid_614269
  var valid_614270 = query.getOrDefault("Version")
  valid_614270 = validateParameter(valid_614270, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614270 != nil:
    section.add "Version", valid_614270
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614271 = header.getOrDefault("X-Amz-Signature")
  valid_614271 = validateParameter(valid_614271, JString, required = false,
                                 default = nil)
  if valid_614271 != nil:
    section.add "X-Amz-Signature", valid_614271
  var valid_614272 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614272 = validateParameter(valid_614272, JString, required = false,
                                 default = nil)
  if valid_614272 != nil:
    section.add "X-Amz-Content-Sha256", valid_614272
  var valid_614273 = header.getOrDefault("X-Amz-Date")
  valid_614273 = validateParameter(valid_614273, JString, required = false,
                                 default = nil)
  if valid_614273 != nil:
    section.add "X-Amz-Date", valid_614273
  var valid_614274 = header.getOrDefault("X-Amz-Credential")
  valid_614274 = validateParameter(valid_614274, JString, required = false,
                                 default = nil)
  if valid_614274 != nil:
    section.add "X-Amz-Credential", valid_614274
  var valid_614275 = header.getOrDefault("X-Amz-Security-Token")
  valid_614275 = validateParameter(valid_614275, JString, required = false,
                                 default = nil)
  if valid_614275 != nil:
    section.add "X-Amz-Security-Token", valid_614275
  var valid_614276 = header.getOrDefault("X-Amz-Algorithm")
  valid_614276 = validateParameter(valid_614276, JString, required = false,
                                 default = nil)
  if valid_614276 != nil:
    section.add "X-Amz-Algorithm", valid_614276
  var valid_614277 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614277 = validateParameter(valid_614277, JString, required = false,
                                 default = nil)
  if valid_614277 != nil:
    section.add "X-Amz-SignedHeaders", valid_614277
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_614278 = formData.getOrDefault("Description")
  valid_614278 = validateParameter(valid_614278, JString, required = true,
                                 default = nil)
  if valid_614278 != nil:
    section.add "Description", valid_614278
  var valid_614279 = formData.getOrDefault("DBParameterGroupName")
  valid_614279 = validateParameter(valid_614279, JString, required = true,
                                 default = nil)
  if valid_614279 != nil:
    section.add "DBParameterGroupName", valid_614279
  var valid_614280 = formData.getOrDefault("Tags")
  valid_614280 = validateParameter(valid_614280, JArray, required = false,
                                 default = nil)
  if valid_614280 != nil:
    section.add "Tags", valid_614280
  var valid_614281 = formData.getOrDefault("DBParameterGroupFamily")
  valid_614281 = validateParameter(valid_614281, JString, required = true,
                                 default = nil)
  if valid_614281 != nil:
    section.add "DBParameterGroupFamily", valid_614281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614282: Call_PostCreateDBParameterGroup_614266; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_614282.validator(path, query, header, formData, body)
  let scheme = call_614282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614282.url(scheme.get, call_614282.host, call_614282.base,
                         call_614282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614282, url, valid)

proc call*(call_614283: Call_PostCreateDBParameterGroup_614266;
          Description: string; DBParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  var query_614284 = newJObject()
  var formData_614285 = newJObject()
  add(formData_614285, "Description", newJString(Description))
  add(formData_614285, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_614284, "Action", newJString(Action))
  if Tags != nil:
    formData_614285.add "Tags", Tags
  add(query_614284, "Version", newJString(Version))
  add(formData_614285, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_614283.call(nil, query_614284, nil, formData_614285, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_614266(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_614267, base: "/",
    url: url_PostCreateDBParameterGroup_614268,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_614247 = ref object of OpenApiRestCall_612658
proc url_GetCreateDBParameterGroup_614249(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBParameterGroup_614248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_614250 = query.getOrDefault("DBParameterGroupFamily")
  valid_614250 = validateParameter(valid_614250, JString, required = true,
                                 default = nil)
  if valid_614250 != nil:
    section.add "DBParameterGroupFamily", valid_614250
  var valid_614251 = query.getOrDefault("DBParameterGroupName")
  valid_614251 = validateParameter(valid_614251, JString, required = true,
                                 default = nil)
  if valid_614251 != nil:
    section.add "DBParameterGroupName", valid_614251
  var valid_614252 = query.getOrDefault("Tags")
  valid_614252 = validateParameter(valid_614252, JArray, required = false,
                                 default = nil)
  if valid_614252 != nil:
    section.add "Tags", valid_614252
  var valid_614253 = query.getOrDefault("Action")
  valid_614253 = validateParameter(valid_614253, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_614253 != nil:
    section.add "Action", valid_614253
  var valid_614254 = query.getOrDefault("Description")
  valid_614254 = validateParameter(valid_614254, JString, required = true,
                                 default = nil)
  if valid_614254 != nil:
    section.add "Description", valid_614254
  var valid_614255 = query.getOrDefault("Version")
  valid_614255 = validateParameter(valid_614255, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614255 != nil:
    section.add "Version", valid_614255
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614256 = header.getOrDefault("X-Amz-Signature")
  valid_614256 = validateParameter(valid_614256, JString, required = false,
                                 default = nil)
  if valid_614256 != nil:
    section.add "X-Amz-Signature", valid_614256
  var valid_614257 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614257 = validateParameter(valid_614257, JString, required = false,
                                 default = nil)
  if valid_614257 != nil:
    section.add "X-Amz-Content-Sha256", valid_614257
  var valid_614258 = header.getOrDefault("X-Amz-Date")
  valid_614258 = validateParameter(valid_614258, JString, required = false,
                                 default = nil)
  if valid_614258 != nil:
    section.add "X-Amz-Date", valid_614258
  var valid_614259 = header.getOrDefault("X-Amz-Credential")
  valid_614259 = validateParameter(valid_614259, JString, required = false,
                                 default = nil)
  if valid_614259 != nil:
    section.add "X-Amz-Credential", valid_614259
  var valid_614260 = header.getOrDefault("X-Amz-Security-Token")
  valid_614260 = validateParameter(valid_614260, JString, required = false,
                                 default = nil)
  if valid_614260 != nil:
    section.add "X-Amz-Security-Token", valid_614260
  var valid_614261 = header.getOrDefault("X-Amz-Algorithm")
  valid_614261 = validateParameter(valid_614261, JString, required = false,
                                 default = nil)
  if valid_614261 != nil:
    section.add "X-Amz-Algorithm", valid_614261
  var valid_614262 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614262 = validateParameter(valid_614262, JString, required = false,
                                 default = nil)
  if valid_614262 != nil:
    section.add "X-Amz-SignedHeaders", valid_614262
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614263: Call_GetCreateDBParameterGroup_614247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_614263.validator(path, query, header, formData, body)
  let scheme = call_614263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614263.url(scheme.get, call_614263.host, call_614263.base,
                         call_614263.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614263, url, valid)

proc call*(call_614264: Call_GetCreateDBParameterGroup_614247;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   Version: string (required)
  var query_614265 = newJObject()
  add(query_614265, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_614265, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_614265.add "Tags", Tags
  add(query_614265, "Action", newJString(Action))
  add(query_614265, "Description", newJString(Description))
  add(query_614265, "Version", newJString(Version))
  result = call_614264.call(nil, query_614265, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_614247(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_614248, base: "/",
    url: url_GetCreateDBParameterGroup_614249,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBProxy_614311 = ref object of OpenApiRestCall_612658
proc url_PostCreateDBProxy_614313(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBProxy_614312(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614314 = query.getOrDefault("Action")
  valid_614314 = validateParameter(valid_614314, JString, required = true,
                                 default = newJString("CreateDBProxy"))
  if valid_614314 != nil:
    section.add "Action", valid_614314
  var valid_614315 = query.getOrDefault("Version")
  valid_614315 = validateParameter(valid_614315, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614315 != nil:
    section.add "Version", valid_614315
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614316 = header.getOrDefault("X-Amz-Signature")
  valid_614316 = validateParameter(valid_614316, JString, required = false,
                                 default = nil)
  if valid_614316 != nil:
    section.add "X-Amz-Signature", valid_614316
  var valid_614317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614317 = validateParameter(valid_614317, JString, required = false,
                                 default = nil)
  if valid_614317 != nil:
    section.add "X-Amz-Content-Sha256", valid_614317
  var valid_614318 = header.getOrDefault("X-Amz-Date")
  valid_614318 = validateParameter(valid_614318, JString, required = false,
                                 default = nil)
  if valid_614318 != nil:
    section.add "X-Amz-Date", valid_614318
  var valid_614319 = header.getOrDefault("X-Amz-Credential")
  valid_614319 = validateParameter(valid_614319, JString, required = false,
                                 default = nil)
  if valid_614319 != nil:
    section.add "X-Amz-Credential", valid_614319
  var valid_614320 = header.getOrDefault("X-Amz-Security-Token")
  valid_614320 = validateParameter(valid_614320, JString, required = false,
                                 default = nil)
  if valid_614320 != nil:
    section.add "X-Amz-Security-Token", valid_614320
  var valid_614321 = header.getOrDefault("X-Amz-Algorithm")
  valid_614321 = validateParameter(valid_614321, JString, required = false,
                                 default = nil)
  if valid_614321 != nil:
    section.add "X-Amz-Algorithm", valid_614321
  var valid_614322 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614322 = validateParameter(valid_614322, JString, required = false,
                                 default = nil)
  if valid_614322 != nil:
    section.add "X-Amz-SignedHeaders", valid_614322
  result.add "header", section
  ## parameters in `formData` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   RequireTLS: JBool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   EngineFamily: JString (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_614323 = formData.getOrDefault("IdleClientTimeout")
  valid_614323 = validateParameter(valid_614323, JInt, required = false, default = nil)
  if valid_614323 != nil:
    section.add "IdleClientTimeout", valid_614323
  assert formData != nil,
        "formData argument is necessary due to required `VpcSubnetIds` field"
  var valid_614324 = formData.getOrDefault("VpcSubnetIds")
  valid_614324 = validateParameter(valid_614324, JArray, required = true, default = nil)
  if valid_614324 != nil:
    section.add "VpcSubnetIds", valid_614324
  var valid_614325 = formData.getOrDefault("RequireTLS")
  valid_614325 = validateParameter(valid_614325, JBool, required = false, default = nil)
  if valid_614325 != nil:
    section.add "RequireTLS", valid_614325
  var valid_614326 = formData.getOrDefault("DebugLogging")
  valid_614326 = validateParameter(valid_614326, JBool, required = false, default = nil)
  if valid_614326 != nil:
    section.add "DebugLogging", valid_614326
  var valid_614327 = formData.getOrDefault("RoleArn")
  valid_614327 = validateParameter(valid_614327, JString, required = true,
                                 default = nil)
  if valid_614327 != nil:
    section.add "RoleArn", valid_614327
  var valid_614328 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_614328 = validateParameter(valid_614328, JArray, required = false,
                                 default = nil)
  if valid_614328 != nil:
    section.add "VpcSecurityGroupIds", valid_614328
  var valid_614329 = formData.getOrDefault("EngineFamily")
  valid_614329 = validateParameter(valid_614329, JString, required = true,
                                 default = newJString("MYSQL"))
  if valid_614329 != nil:
    section.add "EngineFamily", valid_614329
  var valid_614330 = formData.getOrDefault("Auth")
  valid_614330 = validateParameter(valid_614330, JArray, required = true, default = nil)
  if valid_614330 != nil:
    section.add "Auth", valid_614330
  var valid_614331 = formData.getOrDefault("DBProxyName")
  valid_614331 = validateParameter(valid_614331, JString, required = true,
                                 default = nil)
  if valid_614331 != nil:
    section.add "DBProxyName", valid_614331
  var valid_614332 = formData.getOrDefault("Tags")
  valid_614332 = validateParameter(valid_614332, JArray, required = false,
                                 default = nil)
  if valid_614332 != nil:
    section.add "Tags", valid_614332
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614333: Call_PostCreateDBProxy_614311; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  let valid = call_614333.validator(path, query, header, formData, body)
  let scheme = call_614333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614333.url(scheme.get, call_614333.host, call_614333.base,
                         call_614333.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614333, url, valid)

proc call*(call_614334: Call_PostCreateDBProxy_614311; VpcSubnetIds: JsonNode;
          RoleArn: string; Auth: JsonNode; DBProxyName: string;
          IdleClientTimeout: int = 0; RequireTLS: bool = false;
          DebugLogging: bool = false; VpcSecurityGroupIds: JsonNode = nil;
          EngineFamily: string = "MYSQL"; Action: string = "CreateDBProxy";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   RequireTLS: bool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   EngineFamily: string (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   DBProxyName: string (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_614335 = newJObject()
  var formData_614336 = newJObject()
  add(formData_614336, "IdleClientTimeout", newJInt(IdleClientTimeout))
  if VpcSubnetIds != nil:
    formData_614336.add "VpcSubnetIds", VpcSubnetIds
  add(formData_614336, "RequireTLS", newJBool(RequireTLS))
  add(formData_614336, "DebugLogging", newJBool(DebugLogging))
  add(formData_614336, "RoleArn", newJString(RoleArn))
  if VpcSecurityGroupIds != nil:
    formData_614336.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_614336, "EngineFamily", newJString(EngineFamily))
  if Auth != nil:
    formData_614336.add "Auth", Auth
  add(formData_614336, "DBProxyName", newJString(DBProxyName))
  add(query_614335, "Action", newJString(Action))
  if Tags != nil:
    formData_614336.add "Tags", Tags
  add(query_614335, "Version", newJString(Version))
  result = call_614334.call(nil, query_614335, nil, formData_614336, nil)

var postCreateDBProxy* = Call_PostCreateDBProxy_614311(name: "postCreateDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBProxy", validator: validate_PostCreateDBProxy_614312,
    base: "/", url: url_PostCreateDBProxy_614313,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBProxy_614286 = ref object of OpenApiRestCall_612658
proc url_GetCreateDBProxy_614288(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBProxy_614287(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   RequireTLS: JBool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   EngineFamily: JString (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   Version: JString (required)
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  section = newJObject()
  var valid_614289 = query.getOrDefault("IdleClientTimeout")
  valid_614289 = validateParameter(valid_614289, JInt, required = false, default = nil)
  if valid_614289 != nil:
    section.add "IdleClientTimeout", valid_614289
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_614290 = query.getOrDefault("RoleArn")
  valid_614290 = validateParameter(valid_614290, JString, required = true,
                                 default = nil)
  if valid_614290 != nil:
    section.add "RoleArn", valid_614290
  var valid_614291 = query.getOrDefault("Tags")
  valid_614291 = validateParameter(valid_614291, JArray, required = false,
                                 default = nil)
  if valid_614291 != nil:
    section.add "Tags", valid_614291
  var valid_614292 = query.getOrDefault("Auth")
  valid_614292 = validateParameter(valid_614292, JArray, required = true, default = nil)
  if valid_614292 != nil:
    section.add "Auth", valid_614292
  var valid_614293 = query.getOrDefault("RequireTLS")
  valid_614293 = validateParameter(valid_614293, JBool, required = false, default = nil)
  if valid_614293 != nil:
    section.add "RequireTLS", valid_614293
  var valid_614294 = query.getOrDefault("EngineFamily")
  valid_614294 = validateParameter(valid_614294, JString, required = true,
                                 default = newJString("MYSQL"))
  if valid_614294 != nil:
    section.add "EngineFamily", valid_614294
  var valid_614295 = query.getOrDefault("Action")
  valid_614295 = validateParameter(valid_614295, JString, required = true,
                                 default = newJString("CreateDBProxy"))
  if valid_614295 != nil:
    section.add "Action", valid_614295
  var valid_614296 = query.getOrDefault("VpcSecurityGroupIds")
  valid_614296 = validateParameter(valid_614296, JArray, required = false,
                                 default = nil)
  if valid_614296 != nil:
    section.add "VpcSecurityGroupIds", valid_614296
  var valid_614297 = query.getOrDefault("VpcSubnetIds")
  valid_614297 = validateParameter(valid_614297, JArray, required = true, default = nil)
  if valid_614297 != nil:
    section.add "VpcSubnetIds", valid_614297
  var valid_614298 = query.getOrDefault("Version")
  valid_614298 = validateParameter(valid_614298, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614298 != nil:
    section.add "Version", valid_614298
  var valid_614299 = query.getOrDefault("DebugLogging")
  valid_614299 = validateParameter(valid_614299, JBool, required = false, default = nil)
  if valid_614299 != nil:
    section.add "DebugLogging", valid_614299
  var valid_614300 = query.getOrDefault("DBProxyName")
  valid_614300 = validateParameter(valid_614300, JString, required = true,
                                 default = nil)
  if valid_614300 != nil:
    section.add "DBProxyName", valid_614300
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614301 = header.getOrDefault("X-Amz-Signature")
  valid_614301 = validateParameter(valid_614301, JString, required = false,
                                 default = nil)
  if valid_614301 != nil:
    section.add "X-Amz-Signature", valid_614301
  var valid_614302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614302 = validateParameter(valid_614302, JString, required = false,
                                 default = nil)
  if valid_614302 != nil:
    section.add "X-Amz-Content-Sha256", valid_614302
  var valid_614303 = header.getOrDefault("X-Amz-Date")
  valid_614303 = validateParameter(valid_614303, JString, required = false,
                                 default = nil)
  if valid_614303 != nil:
    section.add "X-Amz-Date", valid_614303
  var valid_614304 = header.getOrDefault("X-Amz-Credential")
  valid_614304 = validateParameter(valid_614304, JString, required = false,
                                 default = nil)
  if valid_614304 != nil:
    section.add "X-Amz-Credential", valid_614304
  var valid_614305 = header.getOrDefault("X-Amz-Security-Token")
  valid_614305 = validateParameter(valid_614305, JString, required = false,
                                 default = nil)
  if valid_614305 != nil:
    section.add "X-Amz-Security-Token", valid_614305
  var valid_614306 = header.getOrDefault("X-Amz-Algorithm")
  valid_614306 = validateParameter(valid_614306, JString, required = false,
                                 default = nil)
  if valid_614306 != nil:
    section.add "X-Amz-Algorithm", valid_614306
  var valid_614307 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614307 = validateParameter(valid_614307, JString, required = false,
                                 default = nil)
  if valid_614307 != nil:
    section.add "X-Amz-SignedHeaders", valid_614307
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614308: Call_GetCreateDBProxy_614286; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  let valid = call_614308.validator(path, query, header, formData, body)
  let scheme = call_614308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614308.url(scheme.get, call_614308.host, call_614308.base,
                         call_614308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614308, url, valid)

proc call*(call_614309: Call_GetCreateDBProxy_614286; RoleArn: string;
          Auth: JsonNode; VpcSubnetIds: JsonNode; DBProxyName: string;
          IdleClientTimeout: int = 0; Tags: JsonNode = nil; RequireTLS: bool = false;
          EngineFamily: string = "MYSQL"; Action: string = "CreateDBProxy";
          VpcSecurityGroupIds: JsonNode = nil; Version: string = "2014-10-31";
          DebugLogging: bool = false): Recallable =
  ## getCreateDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   RequireTLS: bool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   EngineFamily: string (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   Version: string (required)
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: string (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  var query_614310 = newJObject()
  add(query_614310, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(query_614310, "RoleArn", newJString(RoleArn))
  if Tags != nil:
    query_614310.add "Tags", Tags
  if Auth != nil:
    query_614310.add "Auth", Auth
  add(query_614310, "RequireTLS", newJBool(RequireTLS))
  add(query_614310, "EngineFamily", newJString(EngineFamily))
  add(query_614310, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_614310.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if VpcSubnetIds != nil:
    query_614310.add "VpcSubnetIds", VpcSubnetIds
  add(query_614310, "Version", newJString(Version))
  add(query_614310, "DebugLogging", newJBool(DebugLogging))
  add(query_614310, "DBProxyName", newJString(DBProxyName))
  result = call_614309.call(nil, query_614310, nil, nil, nil)

var getCreateDBProxy* = Call_GetCreateDBProxy_614286(name: "getCreateDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBProxy", validator: validate_GetCreateDBProxy_614287,
    base: "/", url: url_GetCreateDBProxy_614288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSecurityGroup_614355 = ref object of OpenApiRestCall_612658
proc url_PostCreateDBSecurityGroup_614357(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSecurityGroup_614356(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614358 = query.getOrDefault("Action")
  valid_614358 = validateParameter(valid_614358, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_614358 != nil:
    section.add "Action", valid_614358
  var valid_614359 = query.getOrDefault("Version")
  valid_614359 = validateParameter(valid_614359, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614359 != nil:
    section.add "Version", valid_614359
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614360 = header.getOrDefault("X-Amz-Signature")
  valid_614360 = validateParameter(valid_614360, JString, required = false,
                                 default = nil)
  if valid_614360 != nil:
    section.add "X-Amz-Signature", valid_614360
  var valid_614361 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614361 = validateParameter(valid_614361, JString, required = false,
                                 default = nil)
  if valid_614361 != nil:
    section.add "X-Amz-Content-Sha256", valid_614361
  var valid_614362 = header.getOrDefault("X-Amz-Date")
  valid_614362 = validateParameter(valid_614362, JString, required = false,
                                 default = nil)
  if valid_614362 != nil:
    section.add "X-Amz-Date", valid_614362
  var valid_614363 = header.getOrDefault("X-Amz-Credential")
  valid_614363 = validateParameter(valid_614363, JString, required = false,
                                 default = nil)
  if valid_614363 != nil:
    section.add "X-Amz-Credential", valid_614363
  var valid_614364 = header.getOrDefault("X-Amz-Security-Token")
  valid_614364 = validateParameter(valid_614364, JString, required = false,
                                 default = nil)
  if valid_614364 != nil:
    section.add "X-Amz-Security-Token", valid_614364
  var valid_614365 = header.getOrDefault("X-Amz-Algorithm")
  valid_614365 = validateParameter(valid_614365, JString, required = false,
                                 default = nil)
  if valid_614365 != nil:
    section.add "X-Amz-Algorithm", valid_614365
  var valid_614366 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614366 = validateParameter(valid_614366, JString, required = false,
                                 default = nil)
  if valid_614366 != nil:
    section.add "X-Amz-SignedHeaders", valid_614366
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupDescription` field"
  var valid_614367 = formData.getOrDefault("DBSecurityGroupDescription")
  valid_614367 = validateParameter(valid_614367, JString, required = true,
                                 default = nil)
  if valid_614367 != nil:
    section.add "DBSecurityGroupDescription", valid_614367
  var valid_614368 = formData.getOrDefault("DBSecurityGroupName")
  valid_614368 = validateParameter(valid_614368, JString, required = true,
                                 default = nil)
  if valid_614368 != nil:
    section.add "DBSecurityGroupName", valid_614368
  var valid_614369 = formData.getOrDefault("Tags")
  valid_614369 = validateParameter(valid_614369, JArray, required = false,
                                 default = nil)
  if valid_614369 != nil:
    section.add "Tags", valid_614369
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614370: Call_PostCreateDBSecurityGroup_614355; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_614370.validator(path, query, header, formData, body)
  let scheme = call_614370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614370.url(scheme.get, call_614370.host, call_614370.base,
                         call_614370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614370, url, valid)

proc call*(call_614371: Call_PostCreateDBSecurityGroup_614355;
          DBSecurityGroupDescription: string; DBSecurityGroupName: string;
          Action: string = "CreateDBSecurityGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_614372 = newJObject()
  var formData_614373 = newJObject()
  add(formData_614373, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(formData_614373, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_614372, "Action", newJString(Action))
  if Tags != nil:
    formData_614373.add "Tags", Tags
  add(query_614372, "Version", newJString(Version))
  result = call_614371.call(nil, query_614372, nil, formData_614373, nil)

var postCreateDBSecurityGroup* = Call_PostCreateDBSecurityGroup_614355(
    name: "postCreateDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_PostCreateDBSecurityGroup_614356, base: "/",
    url: url_PostCreateDBSecurityGroup_614357,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSecurityGroup_614337 = ref object of OpenApiRestCall_612658
proc url_GetCreateDBSecurityGroup_614339(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSecurityGroup_614338(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_614340 = query.getOrDefault("DBSecurityGroupName")
  valid_614340 = validateParameter(valid_614340, JString, required = true,
                                 default = nil)
  if valid_614340 != nil:
    section.add "DBSecurityGroupName", valid_614340
  var valid_614341 = query.getOrDefault("Tags")
  valid_614341 = validateParameter(valid_614341, JArray, required = false,
                                 default = nil)
  if valid_614341 != nil:
    section.add "Tags", valid_614341
  var valid_614342 = query.getOrDefault("DBSecurityGroupDescription")
  valid_614342 = validateParameter(valid_614342, JString, required = true,
                                 default = nil)
  if valid_614342 != nil:
    section.add "DBSecurityGroupDescription", valid_614342
  var valid_614343 = query.getOrDefault("Action")
  valid_614343 = validateParameter(valid_614343, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_614343 != nil:
    section.add "Action", valid_614343
  var valid_614344 = query.getOrDefault("Version")
  valid_614344 = validateParameter(valid_614344, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614344 != nil:
    section.add "Version", valid_614344
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614345 = header.getOrDefault("X-Amz-Signature")
  valid_614345 = validateParameter(valid_614345, JString, required = false,
                                 default = nil)
  if valid_614345 != nil:
    section.add "X-Amz-Signature", valid_614345
  var valid_614346 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614346 = validateParameter(valid_614346, JString, required = false,
                                 default = nil)
  if valid_614346 != nil:
    section.add "X-Amz-Content-Sha256", valid_614346
  var valid_614347 = header.getOrDefault("X-Amz-Date")
  valid_614347 = validateParameter(valid_614347, JString, required = false,
                                 default = nil)
  if valid_614347 != nil:
    section.add "X-Amz-Date", valid_614347
  var valid_614348 = header.getOrDefault("X-Amz-Credential")
  valid_614348 = validateParameter(valid_614348, JString, required = false,
                                 default = nil)
  if valid_614348 != nil:
    section.add "X-Amz-Credential", valid_614348
  var valid_614349 = header.getOrDefault("X-Amz-Security-Token")
  valid_614349 = validateParameter(valid_614349, JString, required = false,
                                 default = nil)
  if valid_614349 != nil:
    section.add "X-Amz-Security-Token", valid_614349
  var valid_614350 = header.getOrDefault("X-Amz-Algorithm")
  valid_614350 = validateParameter(valid_614350, JString, required = false,
                                 default = nil)
  if valid_614350 != nil:
    section.add "X-Amz-Algorithm", valid_614350
  var valid_614351 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614351 = validateParameter(valid_614351, JString, required = false,
                                 default = nil)
  if valid_614351 != nil:
    section.add "X-Amz-SignedHeaders", valid_614351
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614352: Call_GetCreateDBSecurityGroup_614337; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_614352.validator(path, query, header, formData, body)
  let scheme = call_614352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614352.url(scheme.get, call_614352.host, call_614352.base,
                         call_614352.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614352, url, valid)

proc call*(call_614353: Call_GetCreateDBSecurityGroup_614337;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614354 = newJObject()
  add(query_614354, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Tags != nil:
    query_614354.add "Tags", Tags
  add(query_614354, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(query_614354, "Action", newJString(Action))
  add(query_614354, "Version", newJString(Version))
  result = call_614353.call(nil, query_614354, nil, nil, nil)

var getCreateDBSecurityGroup* = Call_GetCreateDBSecurityGroup_614337(
    name: "getCreateDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_GetCreateDBSecurityGroup_614338, base: "/",
    url: url_GetCreateDBSecurityGroup_614339, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSnapshot_614392 = ref object of OpenApiRestCall_612658
proc url_PostCreateDBSnapshot_614394(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSnapshot_614393(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614395 = query.getOrDefault("Action")
  valid_614395 = validateParameter(valid_614395, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_614395 != nil:
    section.add "Action", valid_614395
  var valid_614396 = query.getOrDefault("Version")
  valid_614396 = validateParameter(valid_614396, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614396 != nil:
    section.add "Version", valid_614396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614397 = header.getOrDefault("X-Amz-Signature")
  valid_614397 = validateParameter(valid_614397, JString, required = false,
                                 default = nil)
  if valid_614397 != nil:
    section.add "X-Amz-Signature", valid_614397
  var valid_614398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614398 = validateParameter(valid_614398, JString, required = false,
                                 default = nil)
  if valid_614398 != nil:
    section.add "X-Amz-Content-Sha256", valid_614398
  var valid_614399 = header.getOrDefault("X-Amz-Date")
  valid_614399 = validateParameter(valid_614399, JString, required = false,
                                 default = nil)
  if valid_614399 != nil:
    section.add "X-Amz-Date", valid_614399
  var valid_614400 = header.getOrDefault("X-Amz-Credential")
  valid_614400 = validateParameter(valid_614400, JString, required = false,
                                 default = nil)
  if valid_614400 != nil:
    section.add "X-Amz-Credential", valid_614400
  var valid_614401 = header.getOrDefault("X-Amz-Security-Token")
  valid_614401 = validateParameter(valid_614401, JString, required = false,
                                 default = nil)
  if valid_614401 != nil:
    section.add "X-Amz-Security-Token", valid_614401
  var valid_614402 = header.getOrDefault("X-Amz-Algorithm")
  valid_614402 = validateParameter(valid_614402, JString, required = false,
                                 default = nil)
  if valid_614402 != nil:
    section.add "X-Amz-Algorithm", valid_614402
  var valid_614403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614403 = validateParameter(valid_614403, JString, required = false,
                                 default = nil)
  if valid_614403 != nil:
    section.add "X-Amz-SignedHeaders", valid_614403
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614404 = formData.getOrDefault("DBInstanceIdentifier")
  valid_614404 = validateParameter(valid_614404, JString, required = true,
                                 default = nil)
  if valid_614404 != nil:
    section.add "DBInstanceIdentifier", valid_614404
  var valid_614405 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_614405 = validateParameter(valid_614405, JString, required = true,
                                 default = nil)
  if valid_614405 != nil:
    section.add "DBSnapshotIdentifier", valid_614405
  var valid_614406 = formData.getOrDefault("Tags")
  valid_614406 = validateParameter(valid_614406, JArray, required = false,
                                 default = nil)
  if valid_614406 != nil:
    section.add "Tags", valid_614406
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614407: Call_PostCreateDBSnapshot_614392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_614407.validator(path, query, header, formData, body)
  let scheme = call_614407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614407.url(scheme.get, call_614407.host, call_614407.base,
                         call_614407.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614407, url, valid)

proc call*(call_614408: Call_PostCreateDBSnapshot_614392;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Action: string = "CreateDBSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_614409 = newJObject()
  var formData_614410 = newJObject()
  add(formData_614410, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_614410, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_614409, "Action", newJString(Action))
  if Tags != nil:
    formData_614410.add "Tags", Tags
  add(query_614409, "Version", newJString(Version))
  result = call_614408.call(nil, query_614409, nil, formData_614410, nil)

var postCreateDBSnapshot* = Call_PostCreateDBSnapshot_614392(
    name: "postCreateDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_PostCreateDBSnapshot_614393, base: "/",
    url: url_PostCreateDBSnapshot_614394, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSnapshot_614374 = ref object of OpenApiRestCall_612658
proc url_GetCreateDBSnapshot_614376(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSnapshot_614375(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614377 = query.getOrDefault("Tags")
  valid_614377 = validateParameter(valid_614377, JArray, required = false,
                                 default = nil)
  if valid_614377 != nil:
    section.add "Tags", valid_614377
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614378 = query.getOrDefault("DBInstanceIdentifier")
  valid_614378 = validateParameter(valid_614378, JString, required = true,
                                 default = nil)
  if valid_614378 != nil:
    section.add "DBInstanceIdentifier", valid_614378
  var valid_614379 = query.getOrDefault("DBSnapshotIdentifier")
  valid_614379 = validateParameter(valid_614379, JString, required = true,
                                 default = nil)
  if valid_614379 != nil:
    section.add "DBSnapshotIdentifier", valid_614379
  var valid_614380 = query.getOrDefault("Action")
  valid_614380 = validateParameter(valid_614380, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_614380 != nil:
    section.add "Action", valid_614380
  var valid_614381 = query.getOrDefault("Version")
  valid_614381 = validateParameter(valid_614381, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614381 != nil:
    section.add "Version", valid_614381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614382 = header.getOrDefault("X-Amz-Signature")
  valid_614382 = validateParameter(valid_614382, JString, required = false,
                                 default = nil)
  if valid_614382 != nil:
    section.add "X-Amz-Signature", valid_614382
  var valid_614383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614383 = validateParameter(valid_614383, JString, required = false,
                                 default = nil)
  if valid_614383 != nil:
    section.add "X-Amz-Content-Sha256", valid_614383
  var valid_614384 = header.getOrDefault("X-Amz-Date")
  valid_614384 = validateParameter(valid_614384, JString, required = false,
                                 default = nil)
  if valid_614384 != nil:
    section.add "X-Amz-Date", valid_614384
  var valid_614385 = header.getOrDefault("X-Amz-Credential")
  valid_614385 = validateParameter(valid_614385, JString, required = false,
                                 default = nil)
  if valid_614385 != nil:
    section.add "X-Amz-Credential", valid_614385
  var valid_614386 = header.getOrDefault("X-Amz-Security-Token")
  valid_614386 = validateParameter(valid_614386, JString, required = false,
                                 default = nil)
  if valid_614386 != nil:
    section.add "X-Amz-Security-Token", valid_614386
  var valid_614387 = header.getOrDefault("X-Amz-Algorithm")
  valid_614387 = validateParameter(valid_614387, JString, required = false,
                                 default = nil)
  if valid_614387 != nil:
    section.add "X-Amz-Algorithm", valid_614387
  var valid_614388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614388 = validateParameter(valid_614388, JString, required = false,
                                 default = nil)
  if valid_614388 != nil:
    section.add "X-Amz-SignedHeaders", valid_614388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614389: Call_GetCreateDBSnapshot_614374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_614389.validator(path, query, header, formData, body)
  let scheme = call_614389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614389.url(scheme.get, call_614389.host, call_614389.base,
                         call_614389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614389, url, valid)

proc call*(call_614390: Call_GetCreateDBSnapshot_614374;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614391 = newJObject()
  if Tags != nil:
    query_614391.add "Tags", Tags
  add(query_614391, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614391, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_614391, "Action", newJString(Action))
  add(query_614391, "Version", newJString(Version))
  result = call_614390.call(nil, query_614391, nil, nil, nil)

var getCreateDBSnapshot* = Call_GetCreateDBSnapshot_614374(
    name: "getCreateDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_GetCreateDBSnapshot_614375, base: "/",
    url: url_GetCreateDBSnapshot_614376, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_614430 = ref object of OpenApiRestCall_612658
proc url_PostCreateDBSubnetGroup_614432(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSubnetGroup_614431(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614433 = query.getOrDefault("Action")
  valid_614433 = validateParameter(valid_614433, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_614433 != nil:
    section.add "Action", valid_614433
  var valid_614434 = query.getOrDefault("Version")
  valid_614434 = validateParameter(valid_614434, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614434 != nil:
    section.add "Version", valid_614434
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614435 = header.getOrDefault("X-Amz-Signature")
  valid_614435 = validateParameter(valid_614435, JString, required = false,
                                 default = nil)
  if valid_614435 != nil:
    section.add "X-Amz-Signature", valid_614435
  var valid_614436 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614436 = validateParameter(valid_614436, JString, required = false,
                                 default = nil)
  if valid_614436 != nil:
    section.add "X-Amz-Content-Sha256", valid_614436
  var valid_614437 = header.getOrDefault("X-Amz-Date")
  valid_614437 = validateParameter(valid_614437, JString, required = false,
                                 default = nil)
  if valid_614437 != nil:
    section.add "X-Amz-Date", valid_614437
  var valid_614438 = header.getOrDefault("X-Amz-Credential")
  valid_614438 = validateParameter(valid_614438, JString, required = false,
                                 default = nil)
  if valid_614438 != nil:
    section.add "X-Amz-Credential", valid_614438
  var valid_614439 = header.getOrDefault("X-Amz-Security-Token")
  valid_614439 = validateParameter(valid_614439, JString, required = false,
                                 default = nil)
  if valid_614439 != nil:
    section.add "X-Amz-Security-Token", valid_614439
  var valid_614440 = header.getOrDefault("X-Amz-Algorithm")
  valid_614440 = validateParameter(valid_614440, JString, required = false,
                                 default = nil)
  if valid_614440 != nil:
    section.add "X-Amz-Algorithm", valid_614440
  var valid_614441 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614441 = validateParameter(valid_614441, JString, required = false,
                                 default = nil)
  if valid_614441 != nil:
    section.add "X-Amz-SignedHeaders", valid_614441
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupDescription` field"
  var valid_614442 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_614442 = validateParameter(valid_614442, JString, required = true,
                                 default = nil)
  if valid_614442 != nil:
    section.add "DBSubnetGroupDescription", valid_614442
  var valid_614443 = formData.getOrDefault("Tags")
  valid_614443 = validateParameter(valid_614443, JArray, required = false,
                                 default = nil)
  if valid_614443 != nil:
    section.add "Tags", valid_614443
  var valid_614444 = formData.getOrDefault("DBSubnetGroupName")
  valid_614444 = validateParameter(valid_614444, JString, required = true,
                                 default = nil)
  if valid_614444 != nil:
    section.add "DBSubnetGroupName", valid_614444
  var valid_614445 = formData.getOrDefault("SubnetIds")
  valid_614445 = validateParameter(valid_614445, JArray, required = true, default = nil)
  if valid_614445 != nil:
    section.add "SubnetIds", valid_614445
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614446: Call_PostCreateDBSubnetGroup_614430; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_614446.validator(path, query, header, formData, body)
  let scheme = call_614446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614446.url(scheme.get, call_614446.host, call_614446.base,
                         call_614446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614446, url, valid)

proc call*(call_614447: Call_PostCreateDBSubnetGroup_614430;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateDBSubnetGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  var query_614448 = newJObject()
  var formData_614449 = newJObject()
  add(formData_614449, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_614448, "Action", newJString(Action))
  if Tags != nil:
    formData_614449.add "Tags", Tags
  add(formData_614449, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_614448, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_614449.add "SubnetIds", SubnetIds
  result = call_614447.call(nil, query_614448, nil, formData_614449, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_614430(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_614431, base: "/",
    url: url_PostCreateDBSubnetGroup_614432, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_614411 = ref object of OpenApiRestCall_612658
proc url_GetCreateDBSubnetGroup_614413(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSubnetGroup_614412(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_614414 = query.getOrDefault("Tags")
  valid_614414 = validateParameter(valid_614414, JArray, required = false,
                                 default = nil)
  if valid_614414 != nil:
    section.add "Tags", valid_614414
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_614415 = query.getOrDefault("SubnetIds")
  valid_614415 = validateParameter(valid_614415, JArray, required = true, default = nil)
  if valid_614415 != nil:
    section.add "SubnetIds", valid_614415
  var valid_614416 = query.getOrDefault("Action")
  valid_614416 = validateParameter(valid_614416, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_614416 != nil:
    section.add "Action", valid_614416
  var valid_614417 = query.getOrDefault("DBSubnetGroupDescription")
  valid_614417 = validateParameter(valid_614417, JString, required = true,
                                 default = nil)
  if valid_614417 != nil:
    section.add "DBSubnetGroupDescription", valid_614417
  var valid_614418 = query.getOrDefault("DBSubnetGroupName")
  valid_614418 = validateParameter(valid_614418, JString, required = true,
                                 default = nil)
  if valid_614418 != nil:
    section.add "DBSubnetGroupName", valid_614418
  var valid_614419 = query.getOrDefault("Version")
  valid_614419 = validateParameter(valid_614419, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614419 != nil:
    section.add "Version", valid_614419
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614420 = header.getOrDefault("X-Amz-Signature")
  valid_614420 = validateParameter(valid_614420, JString, required = false,
                                 default = nil)
  if valid_614420 != nil:
    section.add "X-Amz-Signature", valid_614420
  var valid_614421 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614421 = validateParameter(valid_614421, JString, required = false,
                                 default = nil)
  if valid_614421 != nil:
    section.add "X-Amz-Content-Sha256", valid_614421
  var valid_614422 = header.getOrDefault("X-Amz-Date")
  valid_614422 = validateParameter(valid_614422, JString, required = false,
                                 default = nil)
  if valid_614422 != nil:
    section.add "X-Amz-Date", valid_614422
  var valid_614423 = header.getOrDefault("X-Amz-Credential")
  valid_614423 = validateParameter(valid_614423, JString, required = false,
                                 default = nil)
  if valid_614423 != nil:
    section.add "X-Amz-Credential", valid_614423
  var valid_614424 = header.getOrDefault("X-Amz-Security-Token")
  valid_614424 = validateParameter(valid_614424, JString, required = false,
                                 default = nil)
  if valid_614424 != nil:
    section.add "X-Amz-Security-Token", valid_614424
  var valid_614425 = header.getOrDefault("X-Amz-Algorithm")
  valid_614425 = validateParameter(valid_614425, JString, required = false,
                                 default = nil)
  if valid_614425 != nil:
    section.add "X-Amz-Algorithm", valid_614425
  var valid_614426 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614426 = validateParameter(valid_614426, JString, required = false,
                                 default = nil)
  if valid_614426 != nil:
    section.add "X-Amz-SignedHeaders", valid_614426
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614427: Call_GetCreateDBSubnetGroup_614411; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_614427.validator(path, query, header, formData, body)
  let scheme = call_614427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614427.url(scheme.get, call_614427.host, call_614427.base,
                         call_614427.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614427, url, valid)

proc call*(call_614428: Call_GetCreateDBSubnetGroup_614411; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_614429 = newJObject()
  if Tags != nil:
    query_614429.add "Tags", Tags
  if SubnetIds != nil:
    query_614429.add "SubnetIds", SubnetIds
  add(query_614429, "Action", newJString(Action))
  add(query_614429, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_614429, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_614429, "Version", newJString(Version))
  result = call_614428.call(nil, query_614429, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_614411(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_614412, base: "/",
    url: url_GetCreateDBSubnetGroup_614413, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_614472 = ref object of OpenApiRestCall_612658
proc url_PostCreateEventSubscription_614474(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateEventSubscription_614473(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614475 = query.getOrDefault("Action")
  valid_614475 = validateParameter(valid_614475, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_614475 != nil:
    section.add "Action", valid_614475
  var valid_614476 = query.getOrDefault("Version")
  valid_614476 = validateParameter(valid_614476, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614476 != nil:
    section.add "Version", valid_614476
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614477 = header.getOrDefault("X-Amz-Signature")
  valid_614477 = validateParameter(valid_614477, JString, required = false,
                                 default = nil)
  if valid_614477 != nil:
    section.add "X-Amz-Signature", valid_614477
  var valid_614478 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614478 = validateParameter(valid_614478, JString, required = false,
                                 default = nil)
  if valid_614478 != nil:
    section.add "X-Amz-Content-Sha256", valid_614478
  var valid_614479 = header.getOrDefault("X-Amz-Date")
  valid_614479 = validateParameter(valid_614479, JString, required = false,
                                 default = nil)
  if valid_614479 != nil:
    section.add "X-Amz-Date", valid_614479
  var valid_614480 = header.getOrDefault("X-Amz-Credential")
  valid_614480 = validateParameter(valid_614480, JString, required = false,
                                 default = nil)
  if valid_614480 != nil:
    section.add "X-Amz-Credential", valid_614480
  var valid_614481 = header.getOrDefault("X-Amz-Security-Token")
  valid_614481 = validateParameter(valid_614481, JString, required = false,
                                 default = nil)
  if valid_614481 != nil:
    section.add "X-Amz-Security-Token", valid_614481
  var valid_614482 = header.getOrDefault("X-Amz-Algorithm")
  valid_614482 = validateParameter(valid_614482, JString, required = false,
                                 default = nil)
  if valid_614482 != nil:
    section.add "X-Amz-Algorithm", valid_614482
  var valid_614483 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614483 = validateParameter(valid_614483, JString, required = false,
                                 default = nil)
  if valid_614483 != nil:
    section.add "X-Amz-SignedHeaders", valid_614483
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_614484 = formData.getOrDefault("SourceIds")
  valid_614484 = validateParameter(valid_614484, JArray, required = false,
                                 default = nil)
  if valid_614484 != nil:
    section.add "SourceIds", valid_614484
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_614485 = formData.getOrDefault("SnsTopicArn")
  valid_614485 = validateParameter(valid_614485, JString, required = true,
                                 default = nil)
  if valid_614485 != nil:
    section.add "SnsTopicArn", valid_614485
  var valid_614486 = formData.getOrDefault("Enabled")
  valid_614486 = validateParameter(valid_614486, JBool, required = false, default = nil)
  if valid_614486 != nil:
    section.add "Enabled", valid_614486
  var valid_614487 = formData.getOrDefault("SubscriptionName")
  valid_614487 = validateParameter(valid_614487, JString, required = true,
                                 default = nil)
  if valid_614487 != nil:
    section.add "SubscriptionName", valid_614487
  var valid_614488 = formData.getOrDefault("SourceType")
  valid_614488 = validateParameter(valid_614488, JString, required = false,
                                 default = nil)
  if valid_614488 != nil:
    section.add "SourceType", valid_614488
  var valid_614489 = formData.getOrDefault("EventCategories")
  valid_614489 = validateParameter(valid_614489, JArray, required = false,
                                 default = nil)
  if valid_614489 != nil:
    section.add "EventCategories", valid_614489
  var valid_614490 = formData.getOrDefault("Tags")
  valid_614490 = validateParameter(valid_614490, JArray, required = false,
                                 default = nil)
  if valid_614490 != nil:
    section.add "Tags", valid_614490
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614491: Call_PostCreateEventSubscription_614472; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  let valid = call_614491.validator(path, query, header, formData, body)
  let scheme = call_614491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614491.url(scheme.get, call_614491.host, call_614491.base,
                         call_614491.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614491, url, valid)

proc call*(call_614492: Call_PostCreateEventSubscription_614472;
          SnsTopicArn: string; SubscriptionName: string; SourceIds: JsonNode = nil;
          Enabled: bool = false; SourceType: string = "";
          EventCategories: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_614493 = newJObject()
  var formData_614494 = newJObject()
  if SourceIds != nil:
    formData_614494.add "SourceIds", SourceIds
  add(formData_614494, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_614494, "Enabled", newJBool(Enabled))
  add(formData_614494, "SubscriptionName", newJString(SubscriptionName))
  add(formData_614494, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_614494.add "EventCategories", EventCategories
  add(query_614493, "Action", newJString(Action))
  if Tags != nil:
    formData_614494.add "Tags", Tags
  add(query_614493, "Version", newJString(Version))
  result = call_614492.call(nil, query_614493, nil, formData_614494, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_614472(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_614473, base: "/",
    url: url_PostCreateEventSubscription_614474,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_614450 = ref object of OpenApiRestCall_612658
proc url_GetCreateEventSubscription_614452(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateEventSubscription_614451(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_614453 = query.getOrDefault("Tags")
  valid_614453 = validateParameter(valid_614453, JArray, required = false,
                                 default = nil)
  if valid_614453 != nil:
    section.add "Tags", valid_614453
  var valid_614454 = query.getOrDefault("SourceType")
  valid_614454 = validateParameter(valid_614454, JString, required = false,
                                 default = nil)
  if valid_614454 != nil:
    section.add "SourceType", valid_614454
  var valid_614455 = query.getOrDefault("Enabled")
  valid_614455 = validateParameter(valid_614455, JBool, required = false, default = nil)
  if valid_614455 != nil:
    section.add "Enabled", valid_614455
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_614456 = query.getOrDefault("SubscriptionName")
  valid_614456 = validateParameter(valid_614456, JString, required = true,
                                 default = nil)
  if valid_614456 != nil:
    section.add "SubscriptionName", valid_614456
  var valid_614457 = query.getOrDefault("EventCategories")
  valid_614457 = validateParameter(valid_614457, JArray, required = false,
                                 default = nil)
  if valid_614457 != nil:
    section.add "EventCategories", valid_614457
  var valid_614458 = query.getOrDefault("SourceIds")
  valid_614458 = validateParameter(valid_614458, JArray, required = false,
                                 default = nil)
  if valid_614458 != nil:
    section.add "SourceIds", valid_614458
  var valid_614459 = query.getOrDefault("Action")
  valid_614459 = validateParameter(valid_614459, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_614459 != nil:
    section.add "Action", valid_614459
  var valid_614460 = query.getOrDefault("SnsTopicArn")
  valid_614460 = validateParameter(valid_614460, JString, required = true,
                                 default = nil)
  if valid_614460 != nil:
    section.add "SnsTopicArn", valid_614460
  var valid_614461 = query.getOrDefault("Version")
  valid_614461 = validateParameter(valid_614461, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614461 != nil:
    section.add "Version", valid_614461
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614462 = header.getOrDefault("X-Amz-Signature")
  valid_614462 = validateParameter(valid_614462, JString, required = false,
                                 default = nil)
  if valid_614462 != nil:
    section.add "X-Amz-Signature", valid_614462
  var valid_614463 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614463 = validateParameter(valid_614463, JString, required = false,
                                 default = nil)
  if valid_614463 != nil:
    section.add "X-Amz-Content-Sha256", valid_614463
  var valid_614464 = header.getOrDefault("X-Amz-Date")
  valid_614464 = validateParameter(valid_614464, JString, required = false,
                                 default = nil)
  if valid_614464 != nil:
    section.add "X-Amz-Date", valid_614464
  var valid_614465 = header.getOrDefault("X-Amz-Credential")
  valid_614465 = validateParameter(valid_614465, JString, required = false,
                                 default = nil)
  if valid_614465 != nil:
    section.add "X-Amz-Credential", valid_614465
  var valid_614466 = header.getOrDefault("X-Amz-Security-Token")
  valid_614466 = validateParameter(valid_614466, JString, required = false,
                                 default = nil)
  if valid_614466 != nil:
    section.add "X-Amz-Security-Token", valid_614466
  var valid_614467 = header.getOrDefault("X-Amz-Algorithm")
  valid_614467 = validateParameter(valid_614467, JString, required = false,
                                 default = nil)
  if valid_614467 != nil:
    section.add "X-Amz-Algorithm", valid_614467
  var valid_614468 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614468 = validateParameter(valid_614468, JString, required = false,
                                 default = nil)
  if valid_614468 != nil:
    section.add "X-Amz-SignedHeaders", valid_614468
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614469: Call_GetCreateEventSubscription_614450; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  let valid = call_614469.validator(path, query, header, formData, body)
  let scheme = call_614469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614469.url(scheme.get, call_614469.host, call_614469.base,
                         call_614469.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614469, url, valid)

proc call*(call_614470: Call_GetCreateEventSubscription_614450;
          SubscriptionName: string; SnsTopicArn: string; Tags: JsonNode = nil;
          SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_614471 = newJObject()
  if Tags != nil:
    query_614471.add "Tags", Tags
  add(query_614471, "SourceType", newJString(SourceType))
  add(query_614471, "Enabled", newJBool(Enabled))
  add(query_614471, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_614471.add "EventCategories", EventCategories
  if SourceIds != nil:
    query_614471.add "SourceIds", SourceIds
  add(query_614471, "Action", newJString(Action))
  add(query_614471, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_614471, "Version", newJString(Version))
  result = call_614470.call(nil, query_614471, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_614450(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_614451, base: "/",
    url: url_GetCreateEventSubscription_614452,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGlobalCluster_614517 = ref object of OpenApiRestCall_612658
proc url_PostCreateGlobalCluster_614519(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateGlobalCluster_614518(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614520 = query.getOrDefault("Action")
  valid_614520 = validateParameter(valid_614520, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_614520 != nil:
    section.add "Action", valid_614520
  var valid_614521 = query.getOrDefault("Version")
  valid_614521 = validateParameter(valid_614521, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614521 != nil:
    section.add "Version", valid_614521
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614522 = header.getOrDefault("X-Amz-Signature")
  valid_614522 = validateParameter(valid_614522, JString, required = false,
                                 default = nil)
  if valid_614522 != nil:
    section.add "X-Amz-Signature", valid_614522
  var valid_614523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614523 = validateParameter(valid_614523, JString, required = false,
                                 default = nil)
  if valid_614523 != nil:
    section.add "X-Amz-Content-Sha256", valid_614523
  var valid_614524 = header.getOrDefault("X-Amz-Date")
  valid_614524 = validateParameter(valid_614524, JString, required = false,
                                 default = nil)
  if valid_614524 != nil:
    section.add "X-Amz-Date", valid_614524
  var valid_614525 = header.getOrDefault("X-Amz-Credential")
  valid_614525 = validateParameter(valid_614525, JString, required = false,
                                 default = nil)
  if valid_614525 != nil:
    section.add "X-Amz-Credential", valid_614525
  var valid_614526 = header.getOrDefault("X-Amz-Security-Token")
  valid_614526 = validateParameter(valid_614526, JString, required = false,
                                 default = nil)
  if valid_614526 != nil:
    section.add "X-Amz-Security-Token", valid_614526
  var valid_614527 = header.getOrDefault("X-Amz-Algorithm")
  valid_614527 = validateParameter(valid_614527, JString, required = false,
                                 default = nil)
  if valid_614527 != nil:
    section.add "X-Amz-Algorithm", valid_614527
  var valid_614528 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614528 = validateParameter(valid_614528, JString, required = false,
                                 default = nil)
  if valid_614528 != nil:
    section.add "X-Amz-SignedHeaders", valid_614528
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  section = newJObject()
  var valid_614529 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_614529 = validateParameter(valid_614529, JString, required = false,
                                 default = nil)
  if valid_614529 != nil:
    section.add "GlobalClusterIdentifier", valid_614529
  var valid_614530 = formData.getOrDefault("EngineVersion")
  valid_614530 = validateParameter(valid_614530, JString, required = false,
                                 default = nil)
  if valid_614530 != nil:
    section.add "EngineVersion", valid_614530
  var valid_614531 = formData.getOrDefault("DatabaseName")
  valid_614531 = validateParameter(valid_614531, JString, required = false,
                                 default = nil)
  if valid_614531 != nil:
    section.add "DatabaseName", valid_614531
  var valid_614532 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_614532 = validateParameter(valid_614532, JString, required = false,
                                 default = nil)
  if valid_614532 != nil:
    section.add "SourceDBClusterIdentifier", valid_614532
  var valid_614533 = formData.getOrDefault("Engine")
  valid_614533 = validateParameter(valid_614533, JString, required = false,
                                 default = nil)
  if valid_614533 != nil:
    section.add "Engine", valid_614533
  var valid_614534 = formData.getOrDefault("StorageEncrypted")
  valid_614534 = validateParameter(valid_614534, JBool, required = false, default = nil)
  if valid_614534 != nil:
    section.add "StorageEncrypted", valid_614534
  var valid_614535 = formData.getOrDefault("DeletionProtection")
  valid_614535 = validateParameter(valid_614535, JBool, required = false, default = nil)
  if valid_614535 != nil:
    section.add "DeletionProtection", valid_614535
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614536: Call_PostCreateGlobalCluster_614517; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614536.validator(path, query, header, formData, body)
  let scheme = call_614536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614536.url(scheme.get, call_614536.host, call_614536.base,
                         call_614536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614536, url, valid)

proc call*(call_614537: Call_PostCreateGlobalCluster_614517;
          GlobalClusterIdentifier: string = ""; EngineVersion: string = "";
          DatabaseName: string = ""; SourceDBClusterIdentifier: string = "";
          Engine: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false): Recallable =
  ## postCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  var query_614538 = newJObject()
  var formData_614539 = newJObject()
  add(formData_614539, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_614539, "EngineVersion", newJString(EngineVersion))
  add(formData_614539, "DatabaseName", newJString(DatabaseName))
  add(formData_614539, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_614539, "Engine", newJString(Engine))
  add(query_614538, "Action", newJString(Action))
  add(query_614538, "Version", newJString(Version))
  add(formData_614539, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_614539, "DeletionProtection", newJBool(DeletionProtection))
  result = call_614537.call(nil, query_614538, nil, formData_614539, nil)

var postCreateGlobalCluster* = Call_PostCreateGlobalCluster_614517(
    name: "postCreateGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_PostCreateGlobalCluster_614518, base: "/",
    url: url_PostCreateGlobalCluster_614519, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGlobalCluster_614495 = ref object of OpenApiRestCall_612658
proc url_GetCreateGlobalCluster_614497(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateGlobalCluster_614496(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614498 = query.getOrDefault("GlobalClusterIdentifier")
  valid_614498 = validateParameter(valid_614498, JString, required = false,
                                 default = nil)
  if valid_614498 != nil:
    section.add "GlobalClusterIdentifier", valid_614498
  var valid_614499 = query.getOrDefault("DatabaseName")
  valid_614499 = validateParameter(valid_614499, JString, required = false,
                                 default = nil)
  if valid_614499 != nil:
    section.add "DatabaseName", valid_614499
  var valid_614500 = query.getOrDefault("DeletionProtection")
  valid_614500 = validateParameter(valid_614500, JBool, required = false, default = nil)
  if valid_614500 != nil:
    section.add "DeletionProtection", valid_614500
  var valid_614501 = query.getOrDefault("Engine")
  valid_614501 = validateParameter(valid_614501, JString, required = false,
                                 default = nil)
  if valid_614501 != nil:
    section.add "Engine", valid_614501
  var valid_614502 = query.getOrDefault("StorageEncrypted")
  valid_614502 = validateParameter(valid_614502, JBool, required = false, default = nil)
  if valid_614502 != nil:
    section.add "StorageEncrypted", valid_614502
  var valid_614503 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_614503 = validateParameter(valid_614503, JString, required = false,
                                 default = nil)
  if valid_614503 != nil:
    section.add "SourceDBClusterIdentifier", valid_614503
  var valid_614504 = query.getOrDefault("EngineVersion")
  valid_614504 = validateParameter(valid_614504, JString, required = false,
                                 default = nil)
  if valid_614504 != nil:
    section.add "EngineVersion", valid_614504
  var valid_614505 = query.getOrDefault("Action")
  valid_614505 = validateParameter(valid_614505, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_614505 != nil:
    section.add "Action", valid_614505
  var valid_614506 = query.getOrDefault("Version")
  valid_614506 = validateParameter(valid_614506, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614506 != nil:
    section.add "Version", valid_614506
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614507 = header.getOrDefault("X-Amz-Signature")
  valid_614507 = validateParameter(valid_614507, JString, required = false,
                                 default = nil)
  if valid_614507 != nil:
    section.add "X-Amz-Signature", valid_614507
  var valid_614508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614508 = validateParameter(valid_614508, JString, required = false,
                                 default = nil)
  if valid_614508 != nil:
    section.add "X-Amz-Content-Sha256", valid_614508
  var valid_614509 = header.getOrDefault("X-Amz-Date")
  valid_614509 = validateParameter(valid_614509, JString, required = false,
                                 default = nil)
  if valid_614509 != nil:
    section.add "X-Amz-Date", valid_614509
  var valid_614510 = header.getOrDefault("X-Amz-Credential")
  valid_614510 = validateParameter(valid_614510, JString, required = false,
                                 default = nil)
  if valid_614510 != nil:
    section.add "X-Amz-Credential", valid_614510
  var valid_614511 = header.getOrDefault("X-Amz-Security-Token")
  valid_614511 = validateParameter(valid_614511, JString, required = false,
                                 default = nil)
  if valid_614511 != nil:
    section.add "X-Amz-Security-Token", valid_614511
  var valid_614512 = header.getOrDefault("X-Amz-Algorithm")
  valid_614512 = validateParameter(valid_614512, JString, required = false,
                                 default = nil)
  if valid_614512 != nil:
    section.add "X-Amz-Algorithm", valid_614512
  var valid_614513 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614513 = validateParameter(valid_614513, JString, required = false,
                                 default = nil)
  if valid_614513 != nil:
    section.add "X-Amz-SignedHeaders", valid_614513
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614514: Call_GetCreateGlobalCluster_614495; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614514.validator(path, query, header, formData, body)
  let scheme = call_614514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614514.url(scheme.get, call_614514.host, call_614514.base,
                         call_614514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614514, url, valid)

proc call*(call_614515: Call_GetCreateGlobalCluster_614495;
          GlobalClusterIdentifier: string = ""; DatabaseName: string = "";
          DeletionProtection: bool = false; Engine: string = "";
          StorageEncrypted: bool = false; SourceDBClusterIdentifier: string = "";
          EngineVersion: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614516 = newJObject()
  add(query_614516, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_614516, "DatabaseName", newJString(DatabaseName))
  add(query_614516, "DeletionProtection", newJBool(DeletionProtection))
  add(query_614516, "Engine", newJString(Engine))
  add(query_614516, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_614516, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_614516, "EngineVersion", newJString(EngineVersion))
  add(query_614516, "Action", newJString(Action))
  add(query_614516, "Version", newJString(Version))
  result = call_614515.call(nil, query_614516, nil, nil, nil)

var getCreateGlobalCluster* = Call_GetCreateGlobalCluster_614495(
    name: "getCreateGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_GetCreateGlobalCluster_614496, base: "/",
    url: url_GetCreateGlobalCluster_614497, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOptionGroup_614560 = ref object of OpenApiRestCall_612658
proc url_PostCreateOptionGroup_614562(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOptionGroup_614561(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614563 = query.getOrDefault("Action")
  valid_614563 = validateParameter(valid_614563, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_614563 != nil:
    section.add "Action", valid_614563
  var valid_614564 = query.getOrDefault("Version")
  valid_614564 = validateParameter(valid_614564, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614564 != nil:
    section.add "Version", valid_614564
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614565 = header.getOrDefault("X-Amz-Signature")
  valid_614565 = validateParameter(valid_614565, JString, required = false,
                                 default = nil)
  if valid_614565 != nil:
    section.add "X-Amz-Signature", valid_614565
  var valid_614566 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614566 = validateParameter(valid_614566, JString, required = false,
                                 default = nil)
  if valid_614566 != nil:
    section.add "X-Amz-Content-Sha256", valid_614566
  var valid_614567 = header.getOrDefault("X-Amz-Date")
  valid_614567 = validateParameter(valid_614567, JString, required = false,
                                 default = nil)
  if valid_614567 != nil:
    section.add "X-Amz-Date", valid_614567
  var valid_614568 = header.getOrDefault("X-Amz-Credential")
  valid_614568 = validateParameter(valid_614568, JString, required = false,
                                 default = nil)
  if valid_614568 != nil:
    section.add "X-Amz-Credential", valid_614568
  var valid_614569 = header.getOrDefault("X-Amz-Security-Token")
  valid_614569 = validateParameter(valid_614569, JString, required = false,
                                 default = nil)
  if valid_614569 != nil:
    section.add "X-Amz-Security-Token", valid_614569
  var valid_614570 = header.getOrDefault("X-Amz-Algorithm")
  valid_614570 = validateParameter(valid_614570, JString, required = false,
                                 default = nil)
  if valid_614570 != nil:
    section.add "X-Amz-Algorithm", valid_614570
  var valid_614571 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614571 = validateParameter(valid_614571, JString, required = false,
                                 default = nil)
  if valid_614571 != nil:
    section.add "X-Amz-SignedHeaders", valid_614571
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupDescription` field"
  var valid_614572 = formData.getOrDefault("OptionGroupDescription")
  valid_614572 = validateParameter(valid_614572, JString, required = true,
                                 default = nil)
  if valid_614572 != nil:
    section.add "OptionGroupDescription", valid_614572
  var valid_614573 = formData.getOrDefault("EngineName")
  valid_614573 = validateParameter(valid_614573, JString, required = true,
                                 default = nil)
  if valid_614573 != nil:
    section.add "EngineName", valid_614573
  var valid_614574 = formData.getOrDefault("MajorEngineVersion")
  valid_614574 = validateParameter(valid_614574, JString, required = true,
                                 default = nil)
  if valid_614574 != nil:
    section.add "MajorEngineVersion", valid_614574
  var valid_614575 = formData.getOrDefault("Tags")
  valid_614575 = validateParameter(valid_614575, JArray, required = false,
                                 default = nil)
  if valid_614575 != nil:
    section.add "Tags", valid_614575
  var valid_614576 = formData.getOrDefault("OptionGroupName")
  valid_614576 = validateParameter(valid_614576, JString, required = true,
                                 default = nil)
  if valid_614576 != nil:
    section.add "OptionGroupName", valid_614576
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614577: Call_PostCreateOptionGroup_614560; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_614577.validator(path, query, header, formData, body)
  let scheme = call_614577.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614577.url(scheme.get, call_614577.host, call_614577.base,
                         call_614577.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614577, url, valid)

proc call*(call_614578: Call_PostCreateOptionGroup_614560;
          OptionGroupDescription: string; EngineName: string;
          MajorEngineVersion: string; OptionGroupName: string;
          Action: string = "CreateOptionGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  var query_614579 = newJObject()
  var formData_614580 = newJObject()
  add(formData_614580, "OptionGroupDescription",
      newJString(OptionGroupDescription))
  add(formData_614580, "EngineName", newJString(EngineName))
  add(formData_614580, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_614579, "Action", newJString(Action))
  if Tags != nil:
    formData_614580.add "Tags", Tags
  add(formData_614580, "OptionGroupName", newJString(OptionGroupName))
  add(query_614579, "Version", newJString(Version))
  result = call_614578.call(nil, query_614579, nil, formData_614580, nil)

var postCreateOptionGroup* = Call_PostCreateOptionGroup_614560(
    name: "postCreateOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_PostCreateOptionGroup_614561, base: "/",
    url: url_PostCreateOptionGroup_614562, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOptionGroup_614540 = ref object of OpenApiRestCall_612658
proc url_GetCreateOptionGroup_614542(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOptionGroup_614541(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: JString (required)
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_614543 = query.getOrDefault("EngineName")
  valid_614543 = validateParameter(valid_614543, JString, required = true,
                                 default = nil)
  if valid_614543 != nil:
    section.add "EngineName", valid_614543
  var valid_614544 = query.getOrDefault("OptionGroupDescription")
  valid_614544 = validateParameter(valid_614544, JString, required = true,
                                 default = nil)
  if valid_614544 != nil:
    section.add "OptionGroupDescription", valid_614544
  var valid_614545 = query.getOrDefault("Tags")
  valid_614545 = validateParameter(valid_614545, JArray, required = false,
                                 default = nil)
  if valid_614545 != nil:
    section.add "Tags", valid_614545
  var valid_614546 = query.getOrDefault("Action")
  valid_614546 = validateParameter(valid_614546, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_614546 != nil:
    section.add "Action", valid_614546
  var valid_614547 = query.getOrDefault("OptionGroupName")
  valid_614547 = validateParameter(valid_614547, JString, required = true,
                                 default = nil)
  if valid_614547 != nil:
    section.add "OptionGroupName", valid_614547
  var valid_614548 = query.getOrDefault("Version")
  valid_614548 = validateParameter(valid_614548, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614548 != nil:
    section.add "Version", valid_614548
  var valid_614549 = query.getOrDefault("MajorEngineVersion")
  valid_614549 = validateParameter(valid_614549, JString, required = true,
                                 default = nil)
  if valid_614549 != nil:
    section.add "MajorEngineVersion", valid_614549
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614550 = header.getOrDefault("X-Amz-Signature")
  valid_614550 = validateParameter(valid_614550, JString, required = false,
                                 default = nil)
  if valid_614550 != nil:
    section.add "X-Amz-Signature", valid_614550
  var valid_614551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614551 = validateParameter(valid_614551, JString, required = false,
                                 default = nil)
  if valid_614551 != nil:
    section.add "X-Amz-Content-Sha256", valid_614551
  var valid_614552 = header.getOrDefault("X-Amz-Date")
  valid_614552 = validateParameter(valid_614552, JString, required = false,
                                 default = nil)
  if valid_614552 != nil:
    section.add "X-Amz-Date", valid_614552
  var valid_614553 = header.getOrDefault("X-Amz-Credential")
  valid_614553 = validateParameter(valid_614553, JString, required = false,
                                 default = nil)
  if valid_614553 != nil:
    section.add "X-Amz-Credential", valid_614553
  var valid_614554 = header.getOrDefault("X-Amz-Security-Token")
  valid_614554 = validateParameter(valid_614554, JString, required = false,
                                 default = nil)
  if valid_614554 != nil:
    section.add "X-Amz-Security-Token", valid_614554
  var valid_614555 = header.getOrDefault("X-Amz-Algorithm")
  valid_614555 = validateParameter(valid_614555, JString, required = false,
                                 default = nil)
  if valid_614555 != nil:
    section.add "X-Amz-Algorithm", valid_614555
  var valid_614556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614556 = validateParameter(valid_614556, JString, required = false,
                                 default = nil)
  if valid_614556 != nil:
    section.add "X-Amz-SignedHeaders", valid_614556
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614557: Call_GetCreateOptionGroup_614540; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_614557.validator(path, query, header, formData, body)
  let scheme = call_614557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614557.url(scheme.get, call_614557.host, call_614557.base,
                         call_614557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614557, url, valid)

proc call*(call_614558: Call_GetCreateOptionGroup_614540; EngineName: string;
          OptionGroupDescription: string; OptionGroupName: string;
          MajorEngineVersion: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  var query_614559 = newJObject()
  add(query_614559, "EngineName", newJString(EngineName))
  add(query_614559, "OptionGroupDescription", newJString(OptionGroupDescription))
  if Tags != nil:
    query_614559.add "Tags", Tags
  add(query_614559, "Action", newJString(Action))
  add(query_614559, "OptionGroupName", newJString(OptionGroupName))
  add(query_614559, "Version", newJString(Version))
  add(query_614559, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_614558.call(nil, query_614559, nil, nil, nil)

var getCreateOptionGroup* = Call_GetCreateOptionGroup_614540(
    name: "getCreateOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_GetCreateOptionGroup_614541, base: "/",
    url: url_GetCreateOptionGroup_614542, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomAvailabilityZone_614597 = ref object of OpenApiRestCall_612658
proc url_PostDeleteCustomAvailabilityZone_614599(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCustomAvailabilityZone_614598(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614600 = query.getOrDefault("Action")
  valid_614600 = validateParameter(valid_614600, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_614600 != nil:
    section.add "Action", valid_614600
  var valid_614601 = query.getOrDefault("Version")
  valid_614601 = validateParameter(valid_614601, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614601 != nil:
    section.add "Version", valid_614601
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614602 = header.getOrDefault("X-Amz-Signature")
  valid_614602 = validateParameter(valid_614602, JString, required = false,
                                 default = nil)
  if valid_614602 != nil:
    section.add "X-Amz-Signature", valid_614602
  var valid_614603 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614603 = validateParameter(valid_614603, JString, required = false,
                                 default = nil)
  if valid_614603 != nil:
    section.add "X-Amz-Content-Sha256", valid_614603
  var valid_614604 = header.getOrDefault("X-Amz-Date")
  valid_614604 = validateParameter(valid_614604, JString, required = false,
                                 default = nil)
  if valid_614604 != nil:
    section.add "X-Amz-Date", valid_614604
  var valid_614605 = header.getOrDefault("X-Amz-Credential")
  valid_614605 = validateParameter(valid_614605, JString, required = false,
                                 default = nil)
  if valid_614605 != nil:
    section.add "X-Amz-Credential", valid_614605
  var valid_614606 = header.getOrDefault("X-Amz-Security-Token")
  valid_614606 = validateParameter(valid_614606, JString, required = false,
                                 default = nil)
  if valid_614606 != nil:
    section.add "X-Amz-Security-Token", valid_614606
  var valid_614607 = header.getOrDefault("X-Amz-Algorithm")
  valid_614607 = validateParameter(valid_614607, JString, required = false,
                                 default = nil)
  if valid_614607 != nil:
    section.add "X-Amz-Algorithm", valid_614607
  var valid_614608 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614608 = validateParameter(valid_614608, JString, required = false,
                                 default = nil)
  if valid_614608 != nil:
    section.add "X-Amz-SignedHeaders", valid_614608
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_614609 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_614609 = validateParameter(valid_614609, JString, required = true,
                                 default = nil)
  if valid_614609 != nil:
    section.add "CustomAvailabilityZoneId", valid_614609
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614610: Call_PostDeleteCustomAvailabilityZone_614597;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_614610.validator(path, query, header, formData, body)
  let scheme = call_614610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614610.url(scheme.get, call_614610.host, call_614610.base,
                         call_614610.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614610, url, valid)

proc call*(call_614611: Call_PostDeleteCustomAvailabilityZone_614597;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Version: string (required)
  var query_614612 = newJObject()
  var formData_614613 = newJObject()
  add(query_614612, "Action", newJString(Action))
  add(formData_614613, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_614612, "Version", newJString(Version))
  result = call_614611.call(nil, query_614612, nil, formData_614613, nil)

var postDeleteCustomAvailabilityZone* = Call_PostDeleteCustomAvailabilityZone_614597(
    name: "postDeleteCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_PostDeleteCustomAvailabilityZone_614598, base: "/",
    url: url_PostDeleteCustomAvailabilityZone_614599,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomAvailabilityZone_614581 = ref object of OpenApiRestCall_612658
proc url_GetDeleteCustomAvailabilityZone_614583(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCustomAvailabilityZone_614582(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_614584 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_614584 = validateParameter(valid_614584, JString, required = true,
                                 default = nil)
  if valid_614584 != nil:
    section.add "CustomAvailabilityZoneId", valid_614584
  var valid_614585 = query.getOrDefault("Action")
  valid_614585 = validateParameter(valid_614585, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_614585 != nil:
    section.add "Action", valid_614585
  var valid_614586 = query.getOrDefault("Version")
  valid_614586 = validateParameter(valid_614586, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614586 != nil:
    section.add "Version", valid_614586
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614587 = header.getOrDefault("X-Amz-Signature")
  valid_614587 = validateParameter(valid_614587, JString, required = false,
                                 default = nil)
  if valid_614587 != nil:
    section.add "X-Amz-Signature", valid_614587
  var valid_614588 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614588 = validateParameter(valid_614588, JString, required = false,
                                 default = nil)
  if valid_614588 != nil:
    section.add "X-Amz-Content-Sha256", valid_614588
  var valid_614589 = header.getOrDefault("X-Amz-Date")
  valid_614589 = validateParameter(valid_614589, JString, required = false,
                                 default = nil)
  if valid_614589 != nil:
    section.add "X-Amz-Date", valid_614589
  var valid_614590 = header.getOrDefault("X-Amz-Credential")
  valid_614590 = validateParameter(valid_614590, JString, required = false,
                                 default = nil)
  if valid_614590 != nil:
    section.add "X-Amz-Credential", valid_614590
  var valid_614591 = header.getOrDefault("X-Amz-Security-Token")
  valid_614591 = validateParameter(valid_614591, JString, required = false,
                                 default = nil)
  if valid_614591 != nil:
    section.add "X-Amz-Security-Token", valid_614591
  var valid_614592 = header.getOrDefault("X-Amz-Algorithm")
  valid_614592 = validateParameter(valid_614592, JString, required = false,
                                 default = nil)
  if valid_614592 != nil:
    section.add "X-Amz-Algorithm", valid_614592
  var valid_614593 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614593 = validateParameter(valid_614593, JString, required = false,
                                 default = nil)
  if valid_614593 != nil:
    section.add "X-Amz-SignedHeaders", valid_614593
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614594: Call_GetDeleteCustomAvailabilityZone_614581;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_614594.validator(path, query, header, formData, body)
  let scheme = call_614594.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614594.url(scheme.get, call_614594.host, call_614594.base,
                         call_614594.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614594, url, valid)

proc call*(call_614595: Call_GetDeleteCustomAvailabilityZone_614581;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614596 = newJObject()
  add(query_614596, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_614596, "Action", newJString(Action))
  add(query_614596, "Version", newJString(Version))
  result = call_614595.call(nil, query_614596, nil, nil, nil)

var getDeleteCustomAvailabilityZone* = Call_GetDeleteCustomAvailabilityZone_614581(
    name: "getDeleteCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_GetDeleteCustomAvailabilityZone_614582, base: "/",
    url: url_GetDeleteCustomAvailabilityZone_614583,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_614632 = ref object of OpenApiRestCall_612658
proc url_PostDeleteDBCluster_614634(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBCluster_614633(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614635 = query.getOrDefault("Action")
  valid_614635 = validateParameter(valid_614635, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_614635 != nil:
    section.add "Action", valid_614635
  var valid_614636 = query.getOrDefault("Version")
  valid_614636 = validateParameter(valid_614636, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614636 != nil:
    section.add "Version", valid_614636
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614637 = header.getOrDefault("X-Amz-Signature")
  valid_614637 = validateParameter(valid_614637, JString, required = false,
                                 default = nil)
  if valid_614637 != nil:
    section.add "X-Amz-Signature", valid_614637
  var valid_614638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614638 = validateParameter(valid_614638, JString, required = false,
                                 default = nil)
  if valid_614638 != nil:
    section.add "X-Amz-Content-Sha256", valid_614638
  var valid_614639 = header.getOrDefault("X-Amz-Date")
  valid_614639 = validateParameter(valid_614639, JString, required = false,
                                 default = nil)
  if valid_614639 != nil:
    section.add "X-Amz-Date", valid_614639
  var valid_614640 = header.getOrDefault("X-Amz-Credential")
  valid_614640 = validateParameter(valid_614640, JString, required = false,
                                 default = nil)
  if valid_614640 != nil:
    section.add "X-Amz-Credential", valid_614640
  var valid_614641 = header.getOrDefault("X-Amz-Security-Token")
  valid_614641 = validateParameter(valid_614641, JString, required = false,
                                 default = nil)
  if valid_614641 != nil:
    section.add "X-Amz-Security-Token", valid_614641
  var valid_614642 = header.getOrDefault("X-Amz-Algorithm")
  valid_614642 = validateParameter(valid_614642, JString, required = false,
                                 default = nil)
  if valid_614642 != nil:
    section.add "X-Amz-Algorithm", valid_614642
  var valid_614643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614643 = validateParameter(valid_614643, JString, required = false,
                                 default = nil)
  if valid_614643 != nil:
    section.add "X-Amz-SignedHeaders", valid_614643
  result.add "header", section
  ## parameters in `formData` object:
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_614644 = formData.getOrDefault("SkipFinalSnapshot")
  valid_614644 = validateParameter(valid_614644, JBool, required = false, default = nil)
  if valid_614644 != nil:
    section.add "SkipFinalSnapshot", valid_614644
  var valid_614645 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_614645 = validateParameter(valid_614645, JString, required = false,
                                 default = nil)
  if valid_614645 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_614645
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_614646 = formData.getOrDefault("DBClusterIdentifier")
  valid_614646 = validateParameter(valid_614646, JString, required = true,
                                 default = nil)
  if valid_614646 != nil:
    section.add "DBClusterIdentifier", valid_614646
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614647: Call_PostDeleteDBCluster_614632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614647.validator(path, query, header, formData, body)
  let scheme = call_614647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614647.url(scheme.get, call_614647.host, call_614647.base,
                         call_614647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614647, url, valid)

proc call*(call_614648: Call_PostDeleteDBCluster_614632;
          DBClusterIdentifier: string; Action: string = "DeleteDBCluster";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_614649 = newJObject()
  var formData_614650 = newJObject()
  add(query_614649, "Action", newJString(Action))
  add(formData_614650, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_614650, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_614649, "Version", newJString(Version))
  add(formData_614650, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_614648.call(nil, query_614649, nil, formData_614650, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_614632(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_614633, base: "/",
    url: url_PostDeleteDBCluster_614634, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_614614 = ref object of OpenApiRestCall_612658
proc url_GetDeleteDBCluster_614616(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBCluster_614615(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_614617 = query.getOrDefault("DBClusterIdentifier")
  valid_614617 = validateParameter(valid_614617, JString, required = true,
                                 default = nil)
  if valid_614617 != nil:
    section.add "DBClusterIdentifier", valid_614617
  var valid_614618 = query.getOrDefault("SkipFinalSnapshot")
  valid_614618 = validateParameter(valid_614618, JBool, required = false, default = nil)
  if valid_614618 != nil:
    section.add "SkipFinalSnapshot", valid_614618
  var valid_614619 = query.getOrDefault("Action")
  valid_614619 = validateParameter(valid_614619, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_614619 != nil:
    section.add "Action", valid_614619
  var valid_614620 = query.getOrDefault("Version")
  valid_614620 = validateParameter(valid_614620, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614620 != nil:
    section.add "Version", valid_614620
  var valid_614621 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_614621 = validateParameter(valid_614621, JString, required = false,
                                 default = nil)
  if valid_614621 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_614621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614622 = header.getOrDefault("X-Amz-Signature")
  valid_614622 = validateParameter(valid_614622, JString, required = false,
                                 default = nil)
  if valid_614622 != nil:
    section.add "X-Amz-Signature", valid_614622
  var valid_614623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614623 = validateParameter(valid_614623, JString, required = false,
                                 default = nil)
  if valid_614623 != nil:
    section.add "X-Amz-Content-Sha256", valid_614623
  var valid_614624 = header.getOrDefault("X-Amz-Date")
  valid_614624 = validateParameter(valid_614624, JString, required = false,
                                 default = nil)
  if valid_614624 != nil:
    section.add "X-Amz-Date", valid_614624
  var valid_614625 = header.getOrDefault("X-Amz-Credential")
  valid_614625 = validateParameter(valid_614625, JString, required = false,
                                 default = nil)
  if valid_614625 != nil:
    section.add "X-Amz-Credential", valid_614625
  var valid_614626 = header.getOrDefault("X-Amz-Security-Token")
  valid_614626 = validateParameter(valid_614626, JString, required = false,
                                 default = nil)
  if valid_614626 != nil:
    section.add "X-Amz-Security-Token", valid_614626
  var valid_614627 = header.getOrDefault("X-Amz-Algorithm")
  valid_614627 = validateParameter(valid_614627, JString, required = false,
                                 default = nil)
  if valid_614627 != nil:
    section.add "X-Amz-Algorithm", valid_614627
  var valid_614628 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614628 = validateParameter(valid_614628, JString, required = false,
                                 default = nil)
  if valid_614628 != nil:
    section.add "X-Amz-SignedHeaders", valid_614628
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614629: Call_GetDeleteDBCluster_614614; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614629.validator(path, query, header, formData, body)
  let scheme = call_614629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614629.url(scheme.get, call_614629.host, call_614629.base,
                         call_614629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614629, url, valid)

proc call*(call_614630: Call_GetDeleteDBCluster_614614;
          DBClusterIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_614631 = newJObject()
  add(query_614631, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_614631, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_614631, "Action", newJString(Action))
  add(query_614631, "Version", newJString(Version))
  add(query_614631, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_614630.call(nil, query_614631, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_614614(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_614615,
    base: "/", url: url_GetDeleteDBCluster_614616,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterEndpoint_614667 = ref object of OpenApiRestCall_612658
proc url_PostDeleteDBClusterEndpoint_614669(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterEndpoint_614668(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614670 = query.getOrDefault("Action")
  valid_614670 = validateParameter(valid_614670, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_614670 != nil:
    section.add "Action", valid_614670
  var valid_614671 = query.getOrDefault("Version")
  valid_614671 = validateParameter(valid_614671, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614671 != nil:
    section.add "Version", valid_614671
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614672 = header.getOrDefault("X-Amz-Signature")
  valid_614672 = validateParameter(valid_614672, JString, required = false,
                                 default = nil)
  if valid_614672 != nil:
    section.add "X-Amz-Signature", valid_614672
  var valid_614673 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614673 = validateParameter(valid_614673, JString, required = false,
                                 default = nil)
  if valid_614673 != nil:
    section.add "X-Amz-Content-Sha256", valid_614673
  var valid_614674 = header.getOrDefault("X-Amz-Date")
  valid_614674 = validateParameter(valid_614674, JString, required = false,
                                 default = nil)
  if valid_614674 != nil:
    section.add "X-Amz-Date", valid_614674
  var valid_614675 = header.getOrDefault("X-Amz-Credential")
  valid_614675 = validateParameter(valid_614675, JString, required = false,
                                 default = nil)
  if valid_614675 != nil:
    section.add "X-Amz-Credential", valid_614675
  var valid_614676 = header.getOrDefault("X-Amz-Security-Token")
  valid_614676 = validateParameter(valid_614676, JString, required = false,
                                 default = nil)
  if valid_614676 != nil:
    section.add "X-Amz-Security-Token", valid_614676
  var valid_614677 = header.getOrDefault("X-Amz-Algorithm")
  valid_614677 = validateParameter(valid_614677, JString, required = false,
                                 default = nil)
  if valid_614677 != nil:
    section.add "X-Amz-Algorithm", valid_614677
  var valid_614678 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614678 = validateParameter(valid_614678, JString, required = false,
                                 default = nil)
  if valid_614678 != nil:
    section.add "X-Amz-SignedHeaders", valid_614678
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_614679 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_614679 = validateParameter(valid_614679, JString, required = true,
                                 default = nil)
  if valid_614679 != nil:
    section.add "DBClusterEndpointIdentifier", valid_614679
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614680: Call_PostDeleteDBClusterEndpoint_614667; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614680.validator(path, query, header, formData, body)
  let scheme = call_614680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614680.url(scheme.get, call_614680.host, call_614680.base,
                         call_614680.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614680, url, valid)

proc call*(call_614681: Call_PostDeleteDBClusterEndpoint_614667;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614682 = newJObject()
  var formData_614683 = newJObject()
  add(formData_614683, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_614682, "Action", newJString(Action))
  add(query_614682, "Version", newJString(Version))
  result = call_614681.call(nil, query_614682, nil, formData_614683, nil)

var postDeleteDBClusterEndpoint* = Call_PostDeleteDBClusterEndpoint_614667(
    name: "postDeleteDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_PostDeleteDBClusterEndpoint_614668, base: "/",
    url: url_PostDeleteDBClusterEndpoint_614669,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterEndpoint_614651 = ref object of OpenApiRestCall_612658
proc url_GetDeleteDBClusterEndpoint_614653(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterEndpoint_614652(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_614654 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_614654 = validateParameter(valid_614654, JString, required = true,
                                 default = nil)
  if valid_614654 != nil:
    section.add "DBClusterEndpointIdentifier", valid_614654
  var valid_614655 = query.getOrDefault("Action")
  valid_614655 = validateParameter(valid_614655, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_614655 != nil:
    section.add "Action", valid_614655
  var valid_614656 = query.getOrDefault("Version")
  valid_614656 = validateParameter(valid_614656, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614656 != nil:
    section.add "Version", valid_614656
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614657 = header.getOrDefault("X-Amz-Signature")
  valid_614657 = validateParameter(valid_614657, JString, required = false,
                                 default = nil)
  if valid_614657 != nil:
    section.add "X-Amz-Signature", valid_614657
  var valid_614658 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614658 = validateParameter(valid_614658, JString, required = false,
                                 default = nil)
  if valid_614658 != nil:
    section.add "X-Amz-Content-Sha256", valid_614658
  var valid_614659 = header.getOrDefault("X-Amz-Date")
  valid_614659 = validateParameter(valid_614659, JString, required = false,
                                 default = nil)
  if valid_614659 != nil:
    section.add "X-Amz-Date", valid_614659
  var valid_614660 = header.getOrDefault("X-Amz-Credential")
  valid_614660 = validateParameter(valid_614660, JString, required = false,
                                 default = nil)
  if valid_614660 != nil:
    section.add "X-Amz-Credential", valid_614660
  var valid_614661 = header.getOrDefault("X-Amz-Security-Token")
  valid_614661 = validateParameter(valid_614661, JString, required = false,
                                 default = nil)
  if valid_614661 != nil:
    section.add "X-Amz-Security-Token", valid_614661
  var valid_614662 = header.getOrDefault("X-Amz-Algorithm")
  valid_614662 = validateParameter(valid_614662, JString, required = false,
                                 default = nil)
  if valid_614662 != nil:
    section.add "X-Amz-Algorithm", valid_614662
  var valid_614663 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614663 = validateParameter(valid_614663, JString, required = false,
                                 default = nil)
  if valid_614663 != nil:
    section.add "X-Amz-SignedHeaders", valid_614663
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614664: Call_GetDeleteDBClusterEndpoint_614651; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614664.validator(path, query, header, formData, body)
  let scheme = call_614664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614664.url(scheme.get, call_614664.host, call_614664.base,
                         call_614664.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614664, url, valid)

proc call*(call_614665: Call_GetDeleteDBClusterEndpoint_614651;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614666 = newJObject()
  add(query_614666, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_614666, "Action", newJString(Action))
  add(query_614666, "Version", newJString(Version))
  result = call_614665.call(nil, query_614666, nil, nil, nil)

var getDeleteDBClusterEndpoint* = Call_GetDeleteDBClusterEndpoint_614651(
    name: "getDeleteDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_GetDeleteDBClusterEndpoint_614652, base: "/",
    url: url_GetDeleteDBClusterEndpoint_614653,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_614700 = ref object of OpenApiRestCall_612658
proc url_PostDeleteDBClusterParameterGroup_614702(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_614701(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614703 = query.getOrDefault("Action")
  valid_614703 = validateParameter(valid_614703, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_614703 != nil:
    section.add "Action", valid_614703
  var valid_614704 = query.getOrDefault("Version")
  valid_614704 = validateParameter(valid_614704, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614704 != nil:
    section.add "Version", valid_614704
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614705 = header.getOrDefault("X-Amz-Signature")
  valid_614705 = validateParameter(valid_614705, JString, required = false,
                                 default = nil)
  if valid_614705 != nil:
    section.add "X-Amz-Signature", valid_614705
  var valid_614706 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614706 = validateParameter(valid_614706, JString, required = false,
                                 default = nil)
  if valid_614706 != nil:
    section.add "X-Amz-Content-Sha256", valid_614706
  var valid_614707 = header.getOrDefault("X-Amz-Date")
  valid_614707 = validateParameter(valid_614707, JString, required = false,
                                 default = nil)
  if valid_614707 != nil:
    section.add "X-Amz-Date", valid_614707
  var valid_614708 = header.getOrDefault("X-Amz-Credential")
  valid_614708 = validateParameter(valid_614708, JString, required = false,
                                 default = nil)
  if valid_614708 != nil:
    section.add "X-Amz-Credential", valid_614708
  var valid_614709 = header.getOrDefault("X-Amz-Security-Token")
  valid_614709 = validateParameter(valid_614709, JString, required = false,
                                 default = nil)
  if valid_614709 != nil:
    section.add "X-Amz-Security-Token", valid_614709
  var valid_614710 = header.getOrDefault("X-Amz-Algorithm")
  valid_614710 = validateParameter(valid_614710, JString, required = false,
                                 default = nil)
  if valid_614710 != nil:
    section.add "X-Amz-Algorithm", valid_614710
  var valid_614711 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614711 = validateParameter(valid_614711, JString, required = false,
                                 default = nil)
  if valid_614711 != nil:
    section.add "X-Amz-SignedHeaders", valid_614711
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_614712 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_614712 = validateParameter(valid_614712, JString, required = true,
                                 default = nil)
  if valid_614712 != nil:
    section.add "DBClusterParameterGroupName", valid_614712
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614713: Call_PostDeleteDBClusterParameterGroup_614700;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614713.validator(path, query, header, formData, body)
  let scheme = call_614713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614713.url(scheme.get, call_614713.host, call_614713.base,
                         call_614713.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614713, url, valid)

proc call*(call_614714: Call_PostDeleteDBClusterParameterGroup_614700;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_614715 = newJObject()
  var formData_614716 = newJObject()
  add(query_614715, "Action", newJString(Action))
  add(formData_614716, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_614715, "Version", newJString(Version))
  result = call_614714.call(nil, query_614715, nil, formData_614716, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_614700(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_614701, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_614702,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_614684 = ref object of OpenApiRestCall_612658
proc url_GetDeleteDBClusterParameterGroup_614686(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_614685(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_614687 = query.getOrDefault("DBClusterParameterGroupName")
  valid_614687 = validateParameter(valid_614687, JString, required = true,
                                 default = nil)
  if valid_614687 != nil:
    section.add "DBClusterParameterGroupName", valid_614687
  var valid_614688 = query.getOrDefault("Action")
  valid_614688 = validateParameter(valid_614688, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_614688 != nil:
    section.add "Action", valid_614688
  var valid_614689 = query.getOrDefault("Version")
  valid_614689 = validateParameter(valid_614689, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614689 != nil:
    section.add "Version", valid_614689
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614690 = header.getOrDefault("X-Amz-Signature")
  valid_614690 = validateParameter(valid_614690, JString, required = false,
                                 default = nil)
  if valid_614690 != nil:
    section.add "X-Amz-Signature", valid_614690
  var valid_614691 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614691 = validateParameter(valid_614691, JString, required = false,
                                 default = nil)
  if valid_614691 != nil:
    section.add "X-Amz-Content-Sha256", valid_614691
  var valid_614692 = header.getOrDefault("X-Amz-Date")
  valid_614692 = validateParameter(valid_614692, JString, required = false,
                                 default = nil)
  if valid_614692 != nil:
    section.add "X-Amz-Date", valid_614692
  var valid_614693 = header.getOrDefault("X-Amz-Credential")
  valid_614693 = validateParameter(valid_614693, JString, required = false,
                                 default = nil)
  if valid_614693 != nil:
    section.add "X-Amz-Credential", valid_614693
  var valid_614694 = header.getOrDefault("X-Amz-Security-Token")
  valid_614694 = validateParameter(valid_614694, JString, required = false,
                                 default = nil)
  if valid_614694 != nil:
    section.add "X-Amz-Security-Token", valid_614694
  var valid_614695 = header.getOrDefault("X-Amz-Algorithm")
  valid_614695 = validateParameter(valid_614695, JString, required = false,
                                 default = nil)
  if valid_614695 != nil:
    section.add "X-Amz-Algorithm", valid_614695
  var valid_614696 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614696 = validateParameter(valid_614696, JString, required = false,
                                 default = nil)
  if valid_614696 != nil:
    section.add "X-Amz-SignedHeaders", valid_614696
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614697: Call_GetDeleteDBClusterParameterGroup_614684;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614697.validator(path, query, header, formData, body)
  let scheme = call_614697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614697.url(scheme.get, call_614697.host, call_614697.base,
                         call_614697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614697, url, valid)

proc call*(call_614698: Call_GetDeleteDBClusterParameterGroup_614684;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614699 = newJObject()
  add(query_614699, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_614699, "Action", newJString(Action))
  add(query_614699, "Version", newJString(Version))
  result = call_614698.call(nil, query_614699, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_614684(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_614685, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_614686,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_614733 = ref object of OpenApiRestCall_612658
proc url_PostDeleteDBClusterSnapshot_614735(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_614734(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614736 = query.getOrDefault("Action")
  valid_614736 = validateParameter(valid_614736, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_614736 != nil:
    section.add "Action", valid_614736
  var valid_614737 = query.getOrDefault("Version")
  valid_614737 = validateParameter(valid_614737, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614737 != nil:
    section.add "Version", valid_614737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614738 = header.getOrDefault("X-Amz-Signature")
  valid_614738 = validateParameter(valid_614738, JString, required = false,
                                 default = nil)
  if valid_614738 != nil:
    section.add "X-Amz-Signature", valid_614738
  var valid_614739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614739 = validateParameter(valid_614739, JString, required = false,
                                 default = nil)
  if valid_614739 != nil:
    section.add "X-Amz-Content-Sha256", valid_614739
  var valid_614740 = header.getOrDefault("X-Amz-Date")
  valid_614740 = validateParameter(valid_614740, JString, required = false,
                                 default = nil)
  if valid_614740 != nil:
    section.add "X-Amz-Date", valid_614740
  var valid_614741 = header.getOrDefault("X-Amz-Credential")
  valid_614741 = validateParameter(valid_614741, JString, required = false,
                                 default = nil)
  if valid_614741 != nil:
    section.add "X-Amz-Credential", valid_614741
  var valid_614742 = header.getOrDefault("X-Amz-Security-Token")
  valid_614742 = validateParameter(valid_614742, JString, required = false,
                                 default = nil)
  if valid_614742 != nil:
    section.add "X-Amz-Security-Token", valid_614742
  var valid_614743 = header.getOrDefault("X-Amz-Algorithm")
  valid_614743 = validateParameter(valid_614743, JString, required = false,
                                 default = nil)
  if valid_614743 != nil:
    section.add "X-Amz-Algorithm", valid_614743
  var valid_614744 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614744 = validateParameter(valid_614744, JString, required = false,
                                 default = nil)
  if valid_614744 != nil:
    section.add "X-Amz-SignedHeaders", valid_614744
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_614745 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_614745 = validateParameter(valid_614745, JString, required = true,
                                 default = nil)
  if valid_614745 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_614745
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614746: Call_PostDeleteDBClusterSnapshot_614733; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614746.validator(path, query, header, formData, body)
  let scheme = call_614746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614746.url(scheme.get, call_614746.host, call_614746.base,
                         call_614746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614746, url, valid)

proc call*(call_614747: Call_PostDeleteDBClusterSnapshot_614733;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614748 = newJObject()
  var formData_614749 = newJObject()
  add(formData_614749, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_614748, "Action", newJString(Action))
  add(query_614748, "Version", newJString(Version))
  result = call_614747.call(nil, query_614748, nil, formData_614749, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_614733(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_614734, base: "/",
    url: url_PostDeleteDBClusterSnapshot_614735,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_614717 = ref object of OpenApiRestCall_612658
proc url_GetDeleteDBClusterSnapshot_614719(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_614718(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_614720 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_614720 = validateParameter(valid_614720, JString, required = true,
                                 default = nil)
  if valid_614720 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_614720
  var valid_614721 = query.getOrDefault("Action")
  valid_614721 = validateParameter(valid_614721, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_614721 != nil:
    section.add "Action", valid_614721
  var valid_614722 = query.getOrDefault("Version")
  valid_614722 = validateParameter(valid_614722, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614722 != nil:
    section.add "Version", valid_614722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614723 = header.getOrDefault("X-Amz-Signature")
  valid_614723 = validateParameter(valid_614723, JString, required = false,
                                 default = nil)
  if valid_614723 != nil:
    section.add "X-Amz-Signature", valid_614723
  var valid_614724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614724 = validateParameter(valid_614724, JString, required = false,
                                 default = nil)
  if valid_614724 != nil:
    section.add "X-Amz-Content-Sha256", valid_614724
  var valid_614725 = header.getOrDefault("X-Amz-Date")
  valid_614725 = validateParameter(valid_614725, JString, required = false,
                                 default = nil)
  if valid_614725 != nil:
    section.add "X-Amz-Date", valid_614725
  var valid_614726 = header.getOrDefault("X-Amz-Credential")
  valid_614726 = validateParameter(valid_614726, JString, required = false,
                                 default = nil)
  if valid_614726 != nil:
    section.add "X-Amz-Credential", valid_614726
  var valid_614727 = header.getOrDefault("X-Amz-Security-Token")
  valid_614727 = validateParameter(valid_614727, JString, required = false,
                                 default = nil)
  if valid_614727 != nil:
    section.add "X-Amz-Security-Token", valid_614727
  var valid_614728 = header.getOrDefault("X-Amz-Algorithm")
  valid_614728 = validateParameter(valid_614728, JString, required = false,
                                 default = nil)
  if valid_614728 != nil:
    section.add "X-Amz-Algorithm", valid_614728
  var valid_614729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614729 = validateParameter(valid_614729, JString, required = false,
                                 default = nil)
  if valid_614729 != nil:
    section.add "X-Amz-SignedHeaders", valid_614729
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614730: Call_GetDeleteDBClusterSnapshot_614717; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_614730.validator(path, query, header, formData, body)
  let scheme = call_614730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614730.url(scheme.get, call_614730.host, call_614730.base,
                         call_614730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614730, url, valid)

proc call*(call_614731: Call_GetDeleteDBClusterSnapshot_614717;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614732 = newJObject()
  add(query_614732, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_614732, "Action", newJString(Action))
  add(query_614732, "Version", newJString(Version))
  result = call_614731.call(nil, query_614732, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_614717(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_614718, base: "/",
    url: url_GetDeleteDBClusterSnapshot_614719,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_614769 = ref object of OpenApiRestCall_612658
proc url_PostDeleteDBInstance_614771(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstance_614770(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614772 = query.getOrDefault("Action")
  valid_614772 = validateParameter(valid_614772, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_614772 != nil:
    section.add "Action", valid_614772
  var valid_614773 = query.getOrDefault("Version")
  valid_614773 = validateParameter(valid_614773, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614773 != nil:
    section.add "Version", valid_614773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614774 = header.getOrDefault("X-Amz-Signature")
  valid_614774 = validateParameter(valid_614774, JString, required = false,
                                 default = nil)
  if valid_614774 != nil:
    section.add "X-Amz-Signature", valid_614774
  var valid_614775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614775 = validateParameter(valid_614775, JString, required = false,
                                 default = nil)
  if valid_614775 != nil:
    section.add "X-Amz-Content-Sha256", valid_614775
  var valid_614776 = header.getOrDefault("X-Amz-Date")
  valid_614776 = validateParameter(valid_614776, JString, required = false,
                                 default = nil)
  if valid_614776 != nil:
    section.add "X-Amz-Date", valid_614776
  var valid_614777 = header.getOrDefault("X-Amz-Credential")
  valid_614777 = validateParameter(valid_614777, JString, required = false,
                                 default = nil)
  if valid_614777 != nil:
    section.add "X-Amz-Credential", valid_614777
  var valid_614778 = header.getOrDefault("X-Amz-Security-Token")
  valid_614778 = validateParameter(valid_614778, JString, required = false,
                                 default = nil)
  if valid_614778 != nil:
    section.add "X-Amz-Security-Token", valid_614778
  var valid_614779 = header.getOrDefault("X-Amz-Algorithm")
  valid_614779 = validateParameter(valid_614779, JString, required = false,
                                 default = nil)
  if valid_614779 != nil:
    section.add "X-Amz-Algorithm", valid_614779
  var valid_614780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614780 = validateParameter(valid_614780, JString, required = false,
                                 default = nil)
  if valid_614780 != nil:
    section.add "X-Amz-SignedHeaders", valid_614780
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614781 = formData.getOrDefault("DBInstanceIdentifier")
  valid_614781 = validateParameter(valid_614781, JString, required = true,
                                 default = nil)
  if valid_614781 != nil:
    section.add "DBInstanceIdentifier", valid_614781
  var valid_614782 = formData.getOrDefault("SkipFinalSnapshot")
  valid_614782 = validateParameter(valid_614782, JBool, required = false, default = nil)
  if valid_614782 != nil:
    section.add "SkipFinalSnapshot", valid_614782
  var valid_614783 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_614783 = validateParameter(valid_614783, JString, required = false,
                                 default = nil)
  if valid_614783 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_614783
  var valid_614784 = formData.getOrDefault("DeleteAutomatedBackups")
  valid_614784 = validateParameter(valid_614784, JBool, required = false, default = nil)
  if valid_614784 != nil:
    section.add "DeleteAutomatedBackups", valid_614784
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614785: Call_PostDeleteDBInstance_614769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_614785.validator(path, query, header, formData, body)
  let scheme = call_614785.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614785.url(scheme.get, call_614785.host, call_614785.base,
                         call_614785.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614785, url, valid)

proc call*(call_614786: Call_PostDeleteDBInstance_614769;
          DBInstanceIdentifier: string; Action: string = "DeleteDBInstance";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"; DeleteAutomatedBackups: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Version: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  var query_614787 = newJObject()
  var formData_614788 = newJObject()
  add(formData_614788, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614787, "Action", newJString(Action))
  add(formData_614788, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_614788, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_614787, "Version", newJString(Version))
  add(formData_614788, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  result = call_614786.call(nil, query_614787, nil, formData_614788, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_614769(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_614770, base: "/",
    url: url_PostDeleteDBInstance_614771, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_614750 = ref object of OpenApiRestCall_612658
proc url_GetDeleteDBInstance_614752(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstance_614751(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  var valid_614753 = query.getOrDefault("DeleteAutomatedBackups")
  valid_614753 = validateParameter(valid_614753, JBool, required = false, default = nil)
  if valid_614753 != nil:
    section.add "DeleteAutomatedBackups", valid_614753
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_614754 = query.getOrDefault("DBInstanceIdentifier")
  valid_614754 = validateParameter(valid_614754, JString, required = true,
                                 default = nil)
  if valid_614754 != nil:
    section.add "DBInstanceIdentifier", valid_614754
  var valid_614755 = query.getOrDefault("SkipFinalSnapshot")
  valid_614755 = validateParameter(valid_614755, JBool, required = false, default = nil)
  if valid_614755 != nil:
    section.add "SkipFinalSnapshot", valid_614755
  var valid_614756 = query.getOrDefault("Action")
  valid_614756 = validateParameter(valid_614756, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_614756 != nil:
    section.add "Action", valid_614756
  var valid_614757 = query.getOrDefault("Version")
  valid_614757 = validateParameter(valid_614757, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614757 != nil:
    section.add "Version", valid_614757
  var valid_614758 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_614758 = validateParameter(valid_614758, JString, required = false,
                                 default = nil)
  if valid_614758 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_614758
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614759 = header.getOrDefault("X-Amz-Signature")
  valid_614759 = validateParameter(valid_614759, JString, required = false,
                                 default = nil)
  if valid_614759 != nil:
    section.add "X-Amz-Signature", valid_614759
  var valid_614760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614760 = validateParameter(valid_614760, JString, required = false,
                                 default = nil)
  if valid_614760 != nil:
    section.add "X-Amz-Content-Sha256", valid_614760
  var valid_614761 = header.getOrDefault("X-Amz-Date")
  valid_614761 = validateParameter(valid_614761, JString, required = false,
                                 default = nil)
  if valid_614761 != nil:
    section.add "X-Amz-Date", valid_614761
  var valid_614762 = header.getOrDefault("X-Amz-Credential")
  valid_614762 = validateParameter(valid_614762, JString, required = false,
                                 default = nil)
  if valid_614762 != nil:
    section.add "X-Amz-Credential", valid_614762
  var valid_614763 = header.getOrDefault("X-Amz-Security-Token")
  valid_614763 = validateParameter(valid_614763, JString, required = false,
                                 default = nil)
  if valid_614763 != nil:
    section.add "X-Amz-Security-Token", valid_614763
  var valid_614764 = header.getOrDefault("X-Amz-Algorithm")
  valid_614764 = validateParameter(valid_614764, JString, required = false,
                                 default = nil)
  if valid_614764 != nil:
    section.add "X-Amz-Algorithm", valid_614764
  var valid_614765 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614765 = validateParameter(valid_614765, JString, required = false,
                                 default = nil)
  if valid_614765 != nil:
    section.add "X-Amz-SignedHeaders", valid_614765
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614766: Call_GetDeleteDBInstance_614750; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_614766.validator(path, query, header, formData, body)
  let scheme = call_614766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614766.url(scheme.get, call_614766.host, call_614766.base,
                         call_614766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614766, url, valid)

proc call*(call_614767: Call_GetDeleteDBInstance_614750;
          DBInstanceIdentifier: string; DeleteAutomatedBackups: bool = false;
          SkipFinalSnapshot: bool = false; Action: string = "DeleteDBInstance";
          Version: string = "2014-10-31"; FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  var query_614768 = newJObject()
  add(query_614768, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  add(query_614768, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_614768, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_614768, "Action", newJString(Action))
  add(query_614768, "Version", newJString(Version))
  add(query_614768, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_614767.call(nil, query_614768, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_614750(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_614751, base: "/",
    url: url_GetDeleteDBInstance_614752, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstanceAutomatedBackup_614805 = ref object of OpenApiRestCall_612658
proc url_PostDeleteDBInstanceAutomatedBackup_614807(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstanceAutomatedBackup_614806(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614808 = query.getOrDefault("Action")
  valid_614808 = validateParameter(valid_614808, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_614808 != nil:
    section.add "Action", valid_614808
  var valid_614809 = query.getOrDefault("Version")
  valid_614809 = validateParameter(valid_614809, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614809 != nil:
    section.add "Version", valid_614809
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614810 = header.getOrDefault("X-Amz-Signature")
  valid_614810 = validateParameter(valid_614810, JString, required = false,
                                 default = nil)
  if valid_614810 != nil:
    section.add "X-Amz-Signature", valid_614810
  var valid_614811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614811 = validateParameter(valid_614811, JString, required = false,
                                 default = nil)
  if valid_614811 != nil:
    section.add "X-Amz-Content-Sha256", valid_614811
  var valid_614812 = header.getOrDefault("X-Amz-Date")
  valid_614812 = validateParameter(valid_614812, JString, required = false,
                                 default = nil)
  if valid_614812 != nil:
    section.add "X-Amz-Date", valid_614812
  var valid_614813 = header.getOrDefault("X-Amz-Credential")
  valid_614813 = validateParameter(valid_614813, JString, required = false,
                                 default = nil)
  if valid_614813 != nil:
    section.add "X-Amz-Credential", valid_614813
  var valid_614814 = header.getOrDefault("X-Amz-Security-Token")
  valid_614814 = validateParameter(valid_614814, JString, required = false,
                                 default = nil)
  if valid_614814 != nil:
    section.add "X-Amz-Security-Token", valid_614814
  var valid_614815 = header.getOrDefault("X-Amz-Algorithm")
  valid_614815 = validateParameter(valid_614815, JString, required = false,
                                 default = nil)
  if valid_614815 != nil:
    section.add "X-Amz-Algorithm", valid_614815
  var valid_614816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614816 = validateParameter(valid_614816, JString, required = false,
                                 default = nil)
  if valid_614816 != nil:
    section.add "X-Amz-SignedHeaders", valid_614816
  result.add "header", section
  ## parameters in `formData` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DbiResourceId` field"
  var valid_614817 = formData.getOrDefault("DbiResourceId")
  valid_614817 = validateParameter(valid_614817, JString, required = true,
                                 default = nil)
  if valid_614817 != nil:
    section.add "DbiResourceId", valid_614817
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614818: Call_PostDeleteDBInstanceAutomatedBackup_614805;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_614818.validator(path, query, header, formData, body)
  let scheme = call_614818.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614818.url(scheme.get, call_614818.host, call_614818.base,
                         call_614818.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614818, url, valid)

proc call*(call_614819: Call_PostDeleteDBInstanceAutomatedBackup_614805;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614820 = newJObject()
  var formData_614821 = newJObject()
  add(formData_614821, "DbiResourceId", newJString(DbiResourceId))
  add(query_614820, "Action", newJString(Action))
  add(query_614820, "Version", newJString(Version))
  result = call_614819.call(nil, query_614820, nil, formData_614821, nil)

var postDeleteDBInstanceAutomatedBackup* = Call_PostDeleteDBInstanceAutomatedBackup_614805(
    name: "postDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_PostDeleteDBInstanceAutomatedBackup_614806, base: "/",
    url: url_PostDeleteDBInstanceAutomatedBackup_614807,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstanceAutomatedBackup_614789 = ref object of OpenApiRestCall_612658
proc url_GetDeleteDBInstanceAutomatedBackup_614791(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstanceAutomatedBackup_614790(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DbiResourceId` field"
  var valid_614792 = query.getOrDefault("DbiResourceId")
  valid_614792 = validateParameter(valid_614792, JString, required = true,
                                 default = nil)
  if valid_614792 != nil:
    section.add "DbiResourceId", valid_614792
  var valid_614793 = query.getOrDefault("Action")
  valid_614793 = validateParameter(valid_614793, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_614793 != nil:
    section.add "Action", valid_614793
  var valid_614794 = query.getOrDefault("Version")
  valid_614794 = validateParameter(valid_614794, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614794 != nil:
    section.add "Version", valid_614794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614795 = header.getOrDefault("X-Amz-Signature")
  valid_614795 = validateParameter(valid_614795, JString, required = false,
                                 default = nil)
  if valid_614795 != nil:
    section.add "X-Amz-Signature", valid_614795
  var valid_614796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614796 = validateParameter(valid_614796, JString, required = false,
                                 default = nil)
  if valid_614796 != nil:
    section.add "X-Amz-Content-Sha256", valid_614796
  var valid_614797 = header.getOrDefault("X-Amz-Date")
  valid_614797 = validateParameter(valid_614797, JString, required = false,
                                 default = nil)
  if valid_614797 != nil:
    section.add "X-Amz-Date", valid_614797
  var valid_614798 = header.getOrDefault("X-Amz-Credential")
  valid_614798 = validateParameter(valid_614798, JString, required = false,
                                 default = nil)
  if valid_614798 != nil:
    section.add "X-Amz-Credential", valid_614798
  var valid_614799 = header.getOrDefault("X-Amz-Security-Token")
  valid_614799 = validateParameter(valid_614799, JString, required = false,
                                 default = nil)
  if valid_614799 != nil:
    section.add "X-Amz-Security-Token", valid_614799
  var valid_614800 = header.getOrDefault("X-Amz-Algorithm")
  valid_614800 = validateParameter(valid_614800, JString, required = false,
                                 default = nil)
  if valid_614800 != nil:
    section.add "X-Amz-Algorithm", valid_614800
  var valid_614801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614801 = validateParameter(valid_614801, JString, required = false,
                                 default = nil)
  if valid_614801 != nil:
    section.add "X-Amz-SignedHeaders", valid_614801
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614802: Call_GetDeleteDBInstanceAutomatedBackup_614789;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_614802.validator(path, query, header, formData, body)
  let scheme = call_614802.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614802.url(scheme.get, call_614802.host, call_614802.base,
                         call_614802.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614802, url, valid)

proc call*(call_614803: Call_GetDeleteDBInstanceAutomatedBackup_614789;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614804 = newJObject()
  add(query_614804, "DbiResourceId", newJString(DbiResourceId))
  add(query_614804, "Action", newJString(Action))
  add(query_614804, "Version", newJString(Version))
  result = call_614803.call(nil, query_614804, nil, nil, nil)

var getDeleteDBInstanceAutomatedBackup* = Call_GetDeleteDBInstanceAutomatedBackup_614789(
    name: "getDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_GetDeleteDBInstanceAutomatedBackup_614790, base: "/",
    url: url_GetDeleteDBInstanceAutomatedBackup_614791,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_614838 = ref object of OpenApiRestCall_612658
proc url_PostDeleteDBParameterGroup_614840(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBParameterGroup_614839(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614841 = query.getOrDefault("Action")
  valid_614841 = validateParameter(valid_614841, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_614841 != nil:
    section.add "Action", valid_614841
  var valid_614842 = query.getOrDefault("Version")
  valid_614842 = validateParameter(valid_614842, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614842 != nil:
    section.add "Version", valid_614842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614843 = header.getOrDefault("X-Amz-Signature")
  valid_614843 = validateParameter(valid_614843, JString, required = false,
                                 default = nil)
  if valid_614843 != nil:
    section.add "X-Amz-Signature", valid_614843
  var valid_614844 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614844 = validateParameter(valid_614844, JString, required = false,
                                 default = nil)
  if valid_614844 != nil:
    section.add "X-Amz-Content-Sha256", valid_614844
  var valid_614845 = header.getOrDefault("X-Amz-Date")
  valid_614845 = validateParameter(valid_614845, JString, required = false,
                                 default = nil)
  if valid_614845 != nil:
    section.add "X-Amz-Date", valid_614845
  var valid_614846 = header.getOrDefault("X-Amz-Credential")
  valid_614846 = validateParameter(valid_614846, JString, required = false,
                                 default = nil)
  if valid_614846 != nil:
    section.add "X-Amz-Credential", valid_614846
  var valid_614847 = header.getOrDefault("X-Amz-Security-Token")
  valid_614847 = validateParameter(valid_614847, JString, required = false,
                                 default = nil)
  if valid_614847 != nil:
    section.add "X-Amz-Security-Token", valid_614847
  var valid_614848 = header.getOrDefault("X-Amz-Algorithm")
  valid_614848 = validateParameter(valid_614848, JString, required = false,
                                 default = nil)
  if valid_614848 != nil:
    section.add "X-Amz-Algorithm", valid_614848
  var valid_614849 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614849 = validateParameter(valid_614849, JString, required = false,
                                 default = nil)
  if valid_614849 != nil:
    section.add "X-Amz-SignedHeaders", valid_614849
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_614850 = formData.getOrDefault("DBParameterGroupName")
  valid_614850 = validateParameter(valid_614850, JString, required = true,
                                 default = nil)
  if valid_614850 != nil:
    section.add "DBParameterGroupName", valid_614850
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614851: Call_PostDeleteDBParameterGroup_614838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_614851.validator(path, query, header, formData, body)
  let scheme = call_614851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614851.url(scheme.get, call_614851.host, call_614851.base,
                         call_614851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614851, url, valid)

proc call*(call_614852: Call_PostDeleteDBParameterGroup_614838;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614853 = newJObject()
  var formData_614854 = newJObject()
  add(formData_614854, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_614853, "Action", newJString(Action))
  add(query_614853, "Version", newJString(Version))
  result = call_614852.call(nil, query_614853, nil, formData_614854, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_614838(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_614839, base: "/",
    url: url_PostDeleteDBParameterGroup_614840,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_614822 = ref object of OpenApiRestCall_612658
proc url_GetDeleteDBParameterGroup_614824(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBParameterGroup_614823(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_614825 = query.getOrDefault("DBParameterGroupName")
  valid_614825 = validateParameter(valid_614825, JString, required = true,
                                 default = nil)
  if valid_614825 != nil:
    section.add "DBParameterGroupName", valid_614825
  var valid_614826 = query.getOrDefault("Action")
  valid_614826 = validateParameter(valid_614826, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_614826 != nil:
    section.add "Action", valid_614826
  var valid_614827 = query.getOrDefault("Version")
  valid_614827 = validateParameter(valid_614827, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614827 != nil:
    section.add "Version", valid_614827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614828 = header.getOrDefault("X-Amz-Signature")
  valid_614828 = validateParameter(valid_614828, JString, required = false,
                                 default = nil)
  if valid_614828 != nil:
    section.add "X-Amz-Signature", valid_614828
  var valid_614829 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614829 = validateParameter(valid_614829, JString, required = false,
                                 default = nil)
  if valid_614829 != nil:
    section.add "X-Amz-Content-Sha256", valid_614829
  var valid_614830 = header.getOrDefault("X-Amz-Date")
  valid_614830 = validateParameter(valid_614830, JString, required = false,
                                 default = nil)
  if valid_614830 != nil:
    section.add "X-Amz-Date", valid_614830
  var valid_614831 = header.getOrDefault("X-Amz-Credential")
  valid_614831 = validateParameter(valid_614831, JString, required = false,
                                 default = nil)
  if valid_614831 != nil:
    section.add "X-Amz-Credential", valid_614831
  var valid_614832 = header.getOrDefault("X-Amz-Security-Token")
  valid_614832 = validateParameter(valid_614832, JString, required = false,
                                 default = nil)
  if valid_614832 != nil:
    section.add "X-Amz-Security-Token", valid_614832
  var valid_614833 = header.getOrDefault("X-Amz-Algorithm")
  valid_614833 = validateParameter(valid_614833, JString, required = false,
                                 default = nil)
  if valid_614833 != nil:
    section.add "X-Amz-Algorithm", valid_614833
  var valid_614834 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614834 = validateParameter(valid_614834, JString, required = false,
                                 default = nil)
  if valid_614834 != nil:
    section.add "X-Amz-SignedHeaders", valid_614834
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614835: Call_GetDeleteDBParameterGroup_614822; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_614835.validator(path, query, header, formData, body)
  let scheme = call_614835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614835.url(scheme.get, call_614835.host, call_614835.base,
                         call_614835.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614835, url, valid)

proc call*(call_614836: Call_GetDeleteDBParameterGroup_614822;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614837 = newJObject()
  add(query_614837, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_614837, "Action", newJString(Action))
  add(query_614837, "Version", newJString(Version))
  result = call_614836.call(nil, query_614837, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_614822(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_614823, base: "/",
    url: url_GetDeleteDBParameterGroup_614824,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBProxy_614871 = ref object of OpenApiRestCall_612658
proc url_PostDeleteDBProxy_614873(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBProxy_614872(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614874 = query.getOrDefault("Action")
  valid_614874 = validateParameter(valid_614874, JString, required = true,
                                 default = newJString("DeleteDBProxy"))
  if valid_614874 != nil:
    section.add "Action", valid_614874
  var valid_614875 = query.getOrDefault("Version")
  valid_614875 = validateParameter(valid_614875, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614875 != nil:
    section.add "Version", valid_614875
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614876 = header.getOrDefault("X-Amz-Signature")
  valid_614876 = validateParameter(valid_614876, JString, required = false,
                                 default = nil)
  if valid_614876 != nil:
    section.add "X-Amz-Signature", valid_614876
  var valid_614877 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614877 = validateParameter(valid_614877, JString, required = false,
                                 default = nil)
  if valid_614877 != nil:
    section.add "X-Amz-Content-Sha256", valid_614877
  var valid_614878 = header.getOrDefault("X-Amz-Date")
  valid_614878 = validateParameter(valid_614878, JString, required = false,
                                 default = nil)
  if valid_614878 != nil:
    section.add "X-Amz-Date", valid_614878
  var valid_614879 = header.getOrDefault("X-Amz-Credential")
  valid_614879 = validateParameter(valid_614879, JString, required = false,
                                 default = nil)
  if valid_614879 != nil:
    section.add "X-Amz-Credential", valid_614879
  var valid_614880 = header.getOrDefault("X-Amz-Security-Token")
  valid_614880 = validateParameter(valid_614880, JString, required = false,
                                 default = nil)
  if valid_614880 != nil:
    section.add "X-Amz-Security-Token", valid_614880
  var valid_614881 = header.getOrDefault("X-Amz-Algorithm")
  valid_614881 = validateParameter(valid_614881, JString, required = false,
                                 default = nil)
  if valid_614881 != nil:
    section.add "X-Amz-Algorithm", valid_614881
  var valid_614882 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614882 = validateParameter(valid_614882, JString, required = false,
                                 default = nil)
  if valid_614882 != nil:
    section.add "X-Amz-SignedHeaders", valid_614882
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBProxyName: JString (required)
  ##              : The name of the DB proxy to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_614883 = formData.getOrDefault("DBProxyName")
  valid_614883 = validateParameter(valid_614883, JString, required = true,
                                 default = nil)
  if valid_614883 != nil:
    section.add "DBProxyName", valid_614883
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614884: Call_PostDeleteDBProxy_614871; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  let valid = call_614884.validator(path, query, header, formData, body)
  let scheme = call_614884.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614884.url(scheme.get, call_614884.host, call_614884.base,
                         call_614884.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614884, url, valid)

proc call*(call_614885: Call_PostDeleteDBProxy_614871; DBProxyName: string;
          Action: string = "DeleteDBProxy"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ##   DBProxyName: string (required)
  ##              : The name of the DB proxy to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614886 = newJObject()
  var formData_614887 = newJObject()
  add(formData_614887, "DBProxyName", newJString(DBProxyName))
  add(query_614886, "Action", newJString(Action))
  add(query_614886, "Version", newJString(Version))
  result = call_614885.call(nil, query_614886, nil, formData_614887, nil)

var postDeleteDBProxy* = Call_PostDeleteDBProxy_614871(name: "postDeleteDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBProxy", validator: validate_PostDeleteDBProxy_614872,
    base: "/", url: url_PostDeleteDBProxy_614873,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBProxy_614855 = ref object of OpenApiRestCall_612658
proc url_GetDeleteDBProxy_614857(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBProxy_614856(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The name of the DB proxy to delete.
  section = newJObject()
  var valid_614858 = query.getOrDefault("Action")
  valid_614858 = validateParameter(valid_614858, JString, required = true,
                                 default = newJString("DeleteDBProxy"))
  if valid_614858 != nil:
    section.add "Action", valid_614858
  var valid_614859 = query.getOrDefault("Version")
  valid_614859 = validateParameter(valid_614859, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614859 != nil:
    section.add "Version", valid_614859
  var valid_614860 = query.getOrDefault("DBProxyName")
  valid_614860 = validateParameter(valid_614860, JString, required = true,
                                 default = nil)
  if valid_614860 != nil:
    section.add "DBProxyName", valid_614860
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614861 = header.getOrDefault("X-Amz-Signature")
  valid_614861 = validateParameter(valid_614861, JString, required = false,
                                 default = nil)
  if valid_614861 != nil:
    section.add "X-Amz-Signature", valid_614861
  var valid_614862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614862 = validateParameter(valid_614862, JString, required = false,
                                 default = nil)
  if valid_614862 != nil:
    section.add "X-Amz-Content-Sha256", valid_614862
  var valid_614863 = header.getOrDefault("X-Amz-Date")
  valid_614863 = validateParameter(valid_614863, JString, required = false,
                                 default = nil)
  if valid_614863 != nil:
    section.add "X-Amz-Date", valid_614863
  var valid_614864 = header.getOrDefault("X-Amz-Credential")
  valid_614864 = validateParameter(valid_614864, JString, required = false,
                                 default = nil)
  if valid_614864 != nil:
    section.add "X-Amz-Credential", valid_614864
  var valid_614865 = header.getOrDefault("X-Amz-Security-Token")
  valid_614865 = validateParameter(valid_614865, JString, required = false,
                                 default = nil)
  if valid_614865 != nil:
    section.add "X-Amz-Security-Token", valid_614865
  var valid_614866 = header.getOrDefault("X-Amz-Algorithm")
  valid_614866 = validateParameter(valid_614866, JString, required = false,
                                 default = nil)
  if valid_614866 != nil:
    section.add "X-Amz-Algorithm", valid_614866
  var valid_614867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614867 = validateParameter(valid_614867, JString, required = false,
                                 default = nil)
  if valid_614867 != nil:
    section.add "X-Amz-SignedHeaders", valid_614867
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614868: Call_GetDeleteDBProxy_614855; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  let valid = call_614868.validator(path, query, header, formData, body)
  let scheme = call_614868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614868.url(scheme.get, call_614868.host, call_614868.base,
                         call_614868.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614868, url, valid)

proc call*(call_614869: Call_GetDeleteDBProxy_614855; DBProxyName: string;
          Action: string = "DeleteDBProxy"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the DB proxy to delete.
  var query_614870 = newJObject()
  add(query_614870, "Action", newJString(Action))
  add(query_614870, "Version", newJString(Version))
  add(query_614870, "DBProxyName", newJString(DBProxyName))
  result = call_614869.call(nil, query_614870, nil, nil, nil)

var getDeleteDBProxy* = Call_GetDeleteDBProxy_614855(name: "getDeleteDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBProxy", validator: validate_GetDeleteDBProxy_614856,
    base: "/", url: url_GetDeleteDBProxy_614857,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSecurityGroup_614904 = ref object of OpenApiRestCall_612658
proc url_PostDeleteDBSecurityGroup_614906(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSecurityGroup_614905(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614907 = query.getOrDefault("Action")
  valid_614907 = validateParameter(valid_614907, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_614907 != nil:
    section.add "Action", valid_614907
  var valid_614908 = query.getOrDefault("Version")
  valid_614908 = validateParameter(valid_614908, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614908 != nil:
    section.add "Version", valid_614908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614909 = header.getOrDefault("X-Amz-Signature")
  valid_614909 = validateParameter(valid_614909, JString, required = false,
                                 default = nil)
  if valid_614909 != nil:
    section.add "X-Amz-Signature", valid_614909
  var valid_614910 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614910 = validateParameter(valid_614910, JString, required = false,
                                 default = nil)
  if valid_614910 != nil:
    section.add "X-Amz-Content-Sha256", valid_614910
  var valid_614911 = header.getOrDefault("X-Amz-Date")
  valid_614911 = validateParameter(valid_614911, JString, required = false,
                                 default = nil)
  if valid_614911 != nil:
    section.add "X-Amz-Date", valid_614911
  var valid_614912 = header.getOrDefault("X-Amz-Credential")
  valid_614912 = validateParameter(valid_614912, JString, required = false,
                                 default = nil)
  if valid_614912 != nil:
    section.add "X-Amz-Credential", valid_614912
  var valid_614913 = header.getOrDefault("X-Amz-Security-Token")
  valid_614913 = validateParameter(valid_614913, JString, required = false,
                                 default = nil)
  if valid_614913 != nil:
    section.add "X-Amz-Security-Token", valid_614913
  var valid_614914 = header.getOrDefault("X-Amz-Algorithm")
  valid_614914 = validateParameter(valid_614914, JString, required = false,
                                 default = nil)
  if valid_614914 != nil:
    section.add "X-Amz-Algorithm", valid_614914
  var valid_614915 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614915 = validateParameter(valid_614915, JString, required = false,
                                 default = nil)
  if valid_614915 != nil:
    section.add "X-Amz-SignedHeaders", valid_614915
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_614916 = formData.getOrDefault("DBSecurityGroupName")
  valid_614916 = validateParameter(valid_614916, JString, required = true,
                                 default = nil)
  if valid_614916 != nil:
    section.add "DBSecurityGroupName", valid_614916
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614917: Call_PostDeleteDBSecurityGroup_614904; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_614917.validator(path, query, header, formData, body)
  let scheme = call_614917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614917.url(scheme.get, call_614917.host, call_614917.base,
                         call_614917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614917, url, valid)

proc call*(call_614918: Call_PostDeleteDBSecurityGroup_614904;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614919 = newJObject()
  var formData_614920 = newJObject()
  add(formData_614920, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_614919, "Action", newJString(Action))
  add(query_614919, "Version", newJString(Version))
  result = call_614918.call(nil, query_614919, nil, formData_614920, nil)

var postDeleteDBSecurityGroup* = Call_PostDeleteDBSecurityGroup_614904(
    name: "postDeleteDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_PostDeleteDBSecurityGroup_614905, base: "/",
    url: url_PostDeleteDBSecurityGroup_614906,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSecurityGroup_614888 = ref object of OpenApiRestCall_612658
proc url_GetDeleteDBSecurityGroup_614890(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSecurityGroup_614889(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_614891 = query.getOrDefault("DBSecurityGroupName")
  valid_614891 = validateParameter(valid_614891, JString, required = true,
                                 default = nil)
  if valid_614891 != nil:
    section.add "DBSecurityGroupName", valid_614891
  var valid_614892 = query.getOrDefault("Action")
  valid_614892 = validateParameter(valid_614892, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_614892 != nil:
    section.add "Action", valid_614892
  var valid_614893 = query.getOrDefault("Version")
  valid_614893 = validateParameter(valid_614893, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614893 != nil:
    section.add "Version", valid_614893
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614894 = header.getOrDefault("X-Amz-Signature")
  valid_614894 = validateParameter(valid_614894, JString, required = false,
                                 default = nil)
  if valid_614894 != nil:
    section.add "X-Amz-Signature", valid_614894
  var valid_614895 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614895 = validateParameter(valid_614895, JString, required = false,
                                 default = nil)
  if valid_614895 != nil:
    section.add "X-Amz-Content-Sha256", valid_614895
  var valid_614896 = header.getOrDefault("X-Amz-Date")
  valid_614896 = validateParameter(valid_614896, JString, required = false,
                                 default = nil)
  if valid_614896 != nil:
    section.add "X-Amz-Date", valid_614896
  var valid_614897 = header.getOrDefault("X-Amz-Credential")
  valid_614897 = validateParameter(valid_614897, JString, required = false,
                                 default = nil)
  if valid_614897 != nil:
    section.add "X-Amz-Credential", valid_614897
  var valid_614898 = header.getOrDefault("X-Amz-Security-Token")
  valid_614898 = validateParameter(valid_614898, JString, required = false,
                                 default = nil)
  if valid_614898 != nil:
    section.add "X-Amz-Security-Token", valid_614898
  var valid_614899 = header.getOrDefault("X-Amz-Algorithm")
  valid_614899 = validateParameter(valid_614899, JString, required = false,
                                 default = nil)
  if valid_614899 != nil:
    section.add "X-Amz-Algorithm", valid_614899
  var valid_614900 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614900 = validateParameter(valid_614900, JString, required = false,
                                 default = nil)
  if valid_614900 != nil:
    section.add "X-Amz-SignedHeaders", valid_614900
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614901: Call_GetDeleteDBSecurityGroup_614888; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_614901.validator(path, query, header, formData, body)
  let scheme = call_614901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614901.url(scheme.get, call_614901.host, call_614901.base,
                         call_614901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614901, url, valid)

proc call*(call_614902: Call_GetDeleteDBSecurityGroup_614888;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614903 = newJObject()
  add(query_614903, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_614903, "Action", newJString(Action))
  add(query_614903, "Version", newJString(Version))
  result = call_614902.call(nil, query_614903, nil, nil, nil)

var getDeleteDBSecurityGroup* = Call_GetDeleteDBSecurityGroup_614888(
    name: "getDeleteDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_GetDeleteDBSecurityGroup_614889, base: "/",
    url: url_GetDeleteDBSecurityGroup_614890, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSnapshot_614937 = ref object of OpenApiRestCall_612658
proc url_PostDeleteDBSnapshot_614939(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSnapshot_614938(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614940 = query.getOrDefault("Action")
  valid_614940 = validateParameter(valid_614940, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_614940 != nil:
    section.add "Action", valid_614940
  var valid_614941 = query.getOrDefault("Version")
  valid_614941 = validateParameter(valid_614941, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614941 != nil:
    section.add "Version", valid_614941
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614942 = header.getOrDefault("X-Amz-Signature")
  valid_614942 = validateParameter(valid_614942, JString, required = false,
                                 default = nil)
  if valid_614942 != nil:
    section.add "X-Amz-Signature", valid_614942
  var valid_614943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614943 = validateParameter(valid_614943, JString, required = false,
                                 default = nil)
  if valid_614943 != nil:
    section.add "X-Amz-Content-Sha256", valid_614943
  var valid_614944 = header.getOrDefault("X-Amz-Date")
  valid_614944 = validateParameter(valid_614944, JString, required = false,
                                 default = nil)
  if valid_614944 != nil:
    section.add "X-Amz-Date", valid_614944
  var valid_614945 = header.getOrDefault("X-Amz-Credential")
  valid_614945 = validateParameter(valid_614945, JString, required = false,
                                 default = nil)
  if valid_614945 != nil:
    section.add "X-Amz-Credential", valid_614945
  var valid_614946 = header.getOrDefault("X-Amz-Security-Token")
  valid_614946 = validateParameter(valid_614946, JString, required = false,
                                 default = nil)
  if valid_614946 != nil:
    section.add "X-Amz-Security-Token", valid_614946
  var valid_614947 = header.getOrDefault("X-Amz-Algorithm")
  valid_614947 = validateParameter(valid_614947, JString, required = false,
                                 default = nil)
  if valid_614947 != nil:
    section.add "X-Amz-Algorithm", valid_614947
  var valid_614948 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614948 = validateParameter(valid_614948, JString, required = false,
                                 default = nil)
  if valid_614948 != nil:
    section.add "X-Amz-SignedHeaders", valid_614948
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_614949 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_614949 = validateParameter(valid_614949, JString, required = true,
                                 default = nil)
  if valid_614949 != nil:
    section.add "DBSnapshotIdentifier", valid_614949
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614950: Call_PostDeleteDBSnapshot_614937; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_614950.validator(path, query, header, formData, body)
  let scheme = call_614950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614950.url(scheme.get, call_614950.host, call_614950.base,
                         call_614950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614950, url, valid)

proc call*(call_614951: Call_PostDeleteDBSnapshot_614937;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614952 = newJObject()
  var formData_614953 = newJObject()
  add(formData_614953, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_614952, "Action", newJString(Action))
  add(query_614952, "Version", newJString(Version))
  result = call_614951.call(nil, query_614952, nil, formData_614953, nil)

var postDeleteDBSnapshot* = Call_PostDeleteDBSnapshot_614937(
    name: "postDeleteDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_PostDeleteDBSnapshot_614938, base: "/",
    url: url_PostDeleteDBSnapshot_614939, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSnapshot_614921 = ref object of OpenApiRestCall_612658
proc url_GetDeleteDBSnapshot_614923(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSnapshot_614922(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_614924 = query.getOrDefault("DBSnapshotIdentifier")
  valid_614924 = validateParameter(valid_614924, JString, required = true,
                                 default = nil)
  if valid_614924 != nil:
    section.add "DBSnapshotIdentifier", valid_614924
  var valid_614925 = query.getOrDefault("Action")
  valid_614925 = validateParameter(valid_614925, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_614925 != nil:
    section.add "Action", valid_614925
  var valid_614926 = query.getOrDefault("Version")
  valid_614926 = validateParameter(valid_614926, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614926 != nil:
    section.add "Version", valid_614926
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614927 = header.getOrDefault("X-Amz-Signature")
  valid_614927 = validateParameter(valid_614927, JString, required = false,
                                 default = nil)
  if valid_614927 != nil:
    section.add "X-Amz-Signature", valid_614927
  var valid_614928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614928 = validateParameter(valid_614928, JString, required = false,
                                 default = nil)
  if valid_614928 != nil:
    section.add "X-Amz-Content-Sha256", valid_614928
  var valid_614929 = header.getOrDefault("X-Amz-Date")
  valid_614929 = validateParameter(valid_614929, JString, required = false,
                                 default = nil)
  if valid_614929 != nil:
    section.add "X-Amz-Date", valid_614929
  var valid_614930 = header.getOrDefault("X-Amz-Credential")
  valid_614930 = validateParameter(valid_614930, JString, required = false,
                                 default = nil)
  if valid_614930 != nil:
    section.add "X-Amz-Credential", valid_614930
  var valid_614931 = header.getOrDefault("X-Amz-Security-Token")
  valid_614931 = validateParameter(valid_614931, JString, required = false,
                                 default = nil)
  if valid_614931 != nil:
    section.add "X-Amz-Security-Token", valid_614931
  var valid_614932 = header.getOrDefault("X-Amz-Algorithm")
  valid_614932 = validateParameter(valid_614932, JString, required = false,
                                 default = nil)
  if valid_614932 != nil:
    section.add "X-Amz-Algorithm", valid_614932
  var valid_614933 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614933 = validateParameter(valid_614933, JString, required = false,
                                 default = nil)
  if valid_614933 != nil:
    section.add "X-Amz-SignedHeaders", valid_614933
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614934: Call_GetDeleteDBSnapshot_614921; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_614934.validator(path, query, header, formData, body)
  let scheme = call_614934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614934.url(scheme.get, call_614934.host, call_614934.base,
                         call_614934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614934, url, valid)

proc call*(call_614935: Call_GetDeleteDBSnapshot_614921;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614936 = newJObject()
  add(query_614936, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_614936, "Action", newJString(Action))
  add(query_614936, "Version", newJString(Version))
  result = call_614935.call(nil, query_614936, nil, nil, nil)

var getDeleteDBSnapshot* = Call_GetDeleteDBSnapshot_614921(
    name: "getDeleteDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_GetDeleteDBSnapshot_614922, base: "/",
    url: url_GetDeleteDBSnapshot_614923, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_614970 = ref object of OpenApiRestCall_612658
proc url_PostDeleteDBSubnetGroup_614972(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSubnetGroup_614971(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614973 = query.getOrDefault("Action")
  valid_614973 = validateParameter(valid_614973, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_614973 != nil:
    section.add "Action", valid_614973
  var valid_614974 = query.getOrDefault("Version")
  valid_614974 = validateParameter(valid_614974, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614974 != nil:
    section.add "Version", valid_614974
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614975 = header.getOrDefault("X-Amz-Signature")
  valid_614975 = validateParameter(valid_614975, JString, required = false,
                                 default = nil)
  if valid_614975 != nil:
    section.add "X-Amz-Signature", valid_614975
  var valid_614976 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614976 = validateParameter(valid_614976, JString, required = false,
                                 default = nil)
  if valid_614976 != nil:
    section.add "X-Amz-Content-Sha256", valid_614976
  var valid_614977 = header.getOrDefault("X-Amz-Date")
  valid_614977 = validateParameter(valid_614977, JString, required = false,
                                 default = nil)
  if valid_614977 != nil:
    section.add "X-Amz-Date", valid_614977
  var valid_614978 = header.getOrDefault("X-Amz-Credential")
  valid_614978 = validateParameter(valid_614978, JString, required = false,
                                 default = nil)
  if valid_614978 != nil:
    section.add "X-Amz-Credential", valid_614978
  var valid_614979 = header.getOrDefault("X-Amz-Security-Token")
  valid_614979 = validateParameter(valid_614979, JString, required = false,
                                 default = nil)
  if valid_614979 != nil:
    section.add "X-Amz-Security-Token", valid_614979
  var valid_614980 = header.getOrDefault("X-Amz-Algorithm")
  valid_614980 = validateParameter(valid_614980, JString, required = false,
                                 default = nil)
  if valid_614980 != nil:
    section.add "X-Amz-Algorithm", valid_614980
  var valid_614981 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614981 = validateParameter(valid_614981, JString, required = false,
                                 default = nil)
  if valid_614981 != nil:
    section.add "X-Amz-SignedHeaders", valid_614981
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_614982 = formData.getOrDefault("DBSubnetGroupName")
  valid_614982 = validateParameter(valid_614982, JString, required = true,
                                 default = nil)
  if valid_614982 != nil:
    section.add "DBSubnetGroupName", valid_614982
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614983: Call_PostDeleteDBSubnetGroup_614970; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_614983.validator(path, query, header, formData, body)
  let scheme = call_614983.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614983.url(scheme.get, call_614983.host, call_614983.base,
                         call_614983.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614983, url, valid)

proc call*(call_614984: Call_PostDeleteDBSubnetGroup_614970;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_614985 = newJObject()
  var formData_614986 = newJObject()
  add(query_614985, "Action", newJString(Action))
  add(formData_614986, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_614985, "Version", newJString(Version))
  result = call_614984.call(nil, query_614985, nil, formData_614986, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_614970(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_614971, base: "/",
    url: url_PostDeleteDBSubnetGroup_614972, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_614954 = ref object of OpenApiRestCall_612658
proc url_GetDeleteDBSubnetGroup_614956(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSubnetGroup_614955(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_614957 = query.getOrDefault("Action")
  valid_614957 = validateParameter(valid_614957, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_614957 != nil:
    section.add "Action", valid_614957
  var valid_614958 = query.getOrDefault("DBSubnetGroupName")
  valid_614958 = validateParameter(valid_614958, JString, required = true,
                                 default = nil)
  if valid_614958 != nil:
    section.add "DBSubnetGroupName", valid_614958
  var valid_614959 = query.getOrDefault("Version")
  valid_614959 = validateParameter(valid_614959, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614959 != nil:
    section.add "Version", valid_614959
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614960 = header.getOrDefault("X-Amz-Signature")
  valid_614960 = validateParameter(valid_614960, JString, required = false,
                                 default = nil)
  if valid_614960 != nil:
    section.add "X-Amz-Signature", valid_614960
  var valid_614961 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614961 = validateParameter(valid_614961, JString, required = false,
                                 default = nil)
  if valid_614961 != nil:
    section.add "X-Amz-Content-Sha256", valid_614961
  var valid_614962 = header.getOrDefault("X-Amz-Date")
  valid_614962 = validateParameter(valid_614962, JString, required = false,
                                 default = nil)
  if valid_614962 != nil:
    section.add "X-Amz-Date", valid_614962
  var valid_614963 = header.getOrDefault("X-Amz-Credential")
  valid_614963 = validateParameter(valid_614963, JString, required = false,
                                 default = nil)
  if valid_614963 != nil:
    section.add "X-Amz-Credential", valid_614963
  var valid_614964 = header.getOrDefault("X-Amz-Security-Token")
  valid_614964 = validateParameter(valid_614964, JString, required = false,
                                 default = nil)
  if valid_614964 != nil:
    section.add "X-Amz-Security-Token", valid_614964
  var valid_614965 = header.getOrDefault("X-Amz-Algorithm")
  valid_614965 = validateParameter(valid_614965, JString, required = false,
                                 default = nil)
  if valid_614965 != nil:
    section.add "X-Amz-Algorithm", valid_614965
  var valid_614966 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614966 = validateParameter(valid_614966, JString, required = false,
                                 default = nil)
  if valid_614966 != nil:
    section.add "X-Amz-SignedHeaders", valid_614966
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614967: Call_GetDeleteDBSubnetGroup_614954; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_614967.validator(path, query, header, formData, body)
  let scheme = call_614967.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614967.url(scheme.get, call_614967.host, call_614967.base,
                         call_614967.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614967, url, valid)

proc call*(call_614968: Call_GetDeleteDBSubnetGroup_614954;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_614969 = newJObject()
  add(query_614969, "Action", newJString(Action))
  add(query_614969, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_614969, "Version", newJString(Version))
  result = call_614968.call(nil, query_614969, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_614954(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_614955, base: "/",
    url: url_GetDeleteDBSubnetGroup_614956, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_615003 = ref object of OpenApiRestCall_612658
proc url_PostDeleteEventSubscription_615005(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteEventSubscription_615004(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615006 = query.getOrDefault("Action")
  valid_615006 = validateParameter(valid_615006, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_615006 != nil:
    section.add "Action", valid_615006
  var valid_615007 = query.getOrDefault("Version")
  valid_615007 = validateParameter(valid_615007, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615007 != nil:
    section.add "Version", valid_615007
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615008 = header.getOrDefault("X-Amz-Signature")
  valid_615008 = validateParameter(valid_615008, JString, required = false,
                                 default = nil)
  if valid_615008 != nil:
    section.add "X-Amz-Signature", valid_615008
  var valid_615009 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615009 = validateParameter(valid_615009, JString, required = false,
                                 default = nil)
  if valid_615009 != nil:
    section.add "X-Amz-Content-Sha256", valid_615009
  var valid_615010 = header.getOrDefault("X-Amz-Date")
  valid_615010 = validateParameter(valid_615010, JString, required = false,
                                 default = nil)
  if valid_615010 != nil:
    section.add "X-Amz-Date", valid_615010
  var valid_615011 = header.getOrDefault("X-Amz-Credential")
  valid_615011 = validateParameter(valid_615011, JString, required = false,
                                 default = nil)
  if valid_615011 != nil:
    section.add "X-Amz-Credential", valid_615011
  var valid_615012 = header.getOrDefault("X-Amz-Security-Token")
  valid_615012 = validateParameter(valid_615012, JString, required = false,
                                 default = nil)
  if valid_615012 != nil:
    section.add "X-Amz-Security-Token", valid_615012
  var valid_615013 = header.getOrDefault("X-Amz-Algorithm")
  valid_615013 = validateParameter(valid_615013, JString, required = false,
                                 default = nil)
  if valid_615013 != nil:
    section.add "X-Amz-Algorithm", valid_615013
  var valid_615014 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615014 = validateParameter(valid_615014, JString, required = false,
                                 default = nil)
  if valid_615014 != nil:
    section.add "X-Amz-SignedHeaders", valid_615014
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_615015 = formData.getOrDefault("SubscriptionName")
  valid_615015 = validateParameter(valid_615015, JString, required = true,
                                 default = nil)
  if valid_615015 != nil:
    section.add "SubscriptionName", valid_615015
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615016: Call_PostDeleteEventSubscription_615003; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_615016.validator(path, query, header, formData, body)
  let scheme = call_615016.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615016.url(scheme.get, call_615016.host, call_615016.base,
                         call_615016.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615016, url, valid)

proc call*(call_615017: Call_PostDeleteEventSubscription_615003;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615018 = newJObject()
  var formData_615019 = newJObject()
  add(formData_615019, "SubscriptionName", newJString(SubscriptionName))
  add(query_615018, "Action", newJString(Action))
  add(query_615018, "Version", newJString(Version))
  result = call_615017.call(nil, query_615018, nil, formData_615019, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_615003(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_615004, base: "/",
    url: url_PostDeleteEventSubscription_615005,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_614987 = ref object of OpenApiRestCall_612658
proc url_GetDeleteEventSubscription_614989(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteEventSubscription_614988(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_614990 = query.getOrDefault("SubscriptionName")
  valid_614990 = validateParameter(valid_614990, JString, required = true,
                                 default = nil)
  if valid_614990 != nil:
    section.add "SubscriptionName", valid_614990
  var valid_614991 = query.getOrDefault("Action")
  valid_614991 = validateParameter(valid_614991, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_614991 != nil:
    section.add "Action", valid_614991
  var valid_614992 = query.getOrDefault("Version")
  valid_614992 = validateParameter(valid_614992, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_614992 != nil:
    section.add "Version", valid_614992
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614993 = header.getOrDefault("X-Amz-Signature")
  valid_614993 = validateParameter(valid_614993, JString, required = false,
                                 default = nil)
  if valid_614993 != nil:
    section.add "X-Amz-Signature", valid_614993
  var valid_614994 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614994 = validateParameter(valid_614994, JString, required = false,
                                 default = nil)
  if valid_614994 != nil:
    section.add "X-Amz-Content-Sha256", valid_614994
  var valid_614995 = header.getOrDefault("X-Amz-Date")
  valid_614995 = validateParameter(valid_614995, JString, required = false,
                                 default = nil)
  if valid_614995 != nil:
    section.add "X-Amz-Date", valid_614995
  var valid_614996 = header.getOrDefault("X-Amz-Credential")
  valid_614996 = validateParameter(valid_614996, JString, required = false,
                                 default = nil)
  if valid_614996 != nil:
    section.add "X-Amz-Credential", valid_614996
  var valid_614997 = header.getOrDefault("X-Amz-Security-Token")
  valid_614997 = validateParameter(valid_614997, JString, required = false,
                                 default = nil)
  if valid_614997 != nil:
    section.add "X-Amz-Security-Token", valid_614997
  var valid_614998 = header.getOrDefault("X-Amz-Algorithm")
  valid_614998 = validateParameter(valid_614998, JString, required = false,
                                 default = nil)
  if valid_614998 != nil:
    section.add "X-Amz-Algorithm", valid_614998
  var valid_614999 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614999 = validateParameter(valid_614999, JString, required = false,
                                 default = nil)
  if valid_614999 != nil:
    section.add "X-Amz-SignedHeaders", valid_614999
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615000: Call_GetDeleteEventSubscription_614987; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_615000.validator(path, query, header, formData, body)
  let scheme = call_615000.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615000.url(scheme.get, call_615000.host, call_615000.base,
                         call_615000.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615000, url, valid)

proc call*(call_615001: Call_GetDeleteEventSubscription_614987;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615002 = newJObject()
  add(query_615002, "SubscriptionName", newJString(SubscriptionName))
  add(query_615002, "Action", newJString(Action))
  add(query_615002, "Version", newJString(Version))
  result = call_615001.call(nil, query_615002, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_614987(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_614988, base: "/",
    url: url_GetDeleteEventSubscription_614989,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGlobalCluster_615036 = ref object of OpenApiRestCall_612658
proc url_PostDeleteGlobalCluster_615038(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGlobalCluster_615037(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615039 = query.getOrDefault("Action")
  valid_615039 = validateParameter(valid_615039, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_615039 != nil:
    section.add "Action", valid_615039
  var valid_615040 = query.getOrDefault("Version")
  valid_615040 = validateParameter(valid_615040, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615040 != nil:
    section.add "Version", valid_615040
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615041 = header.getOrDefault("X-Amz-Signature")
  valid_615041 = validateParameter(valid_615041, JString, required = false,
                                 default = nil)
  if valid_615041 != nil:
    section.add "X-Amz-Signature", valid_615041
  var valid_615042 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615042 = validateParameter(valid_615042, JString, required = false,
                                 default = nil)
  if valid_615042 != nil:
    section.add "X-Amz-Content-Sha256", valid_615042
  var valid_615043 = header.getOrDefault("X-Amz-Date")
  valid_615043 = validateParameter(valid_615043, JString, required = false,
                                 default = nil)
  if valid_615043 != nil:
    section.add "X-Amz-Date", valid_615043
  var valid_615044 = header.getOrDefault("X-Amz-Credential")
  valid_615044 = validateParameter(valid_615044, JString, required = false,
                                 default = nil)
  if valid_615044 != nil:
    section.add "X-Amz-Credential", valid_615044
  var valid_615045 = header.getOrDefault("X-Amz-Security-Token")
  valid_615045 = validateParameter(valid_615045, JString, required = false,
                                 default = nil)
  if valid_615045 != nil:
    section.add "X-Amz-Security-Token", valid_615045
  var valid_615046 = header.getOrDefault("X-Amz-Algorithm")
  valid_615046 = validateParameter(valid_615046, JString, required = false,
                                 default = nil)
  if valid_615046 != nil:
    section.add "X-Amz-Algorithm", valid_615046
  var valid_615047 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615047 = validateParameter(valid_615047, JString, required = false,
                                 default = nil)
  if valid_615047 != nil:
    section.add "X-Amz-SignedHeaders", valid_615047
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_615048 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_615048 = validateParameter(valid_615048, JString, required = true,
                                 default = nil)
  if valid_615048 != nil:
    section.add "GlobalClusterIdentifier", valid_615048
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615049: Call_PostDeleteGlobalCluster_615036; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615049.validator(path, query, header, formData, body)
  let scheme = call_615049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615049.url(scheme.get, call_615049.host, call_615049.base,
                         call_615049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615049, url, valid)

proc call*(call_615050: Call_PostDeleteGlobalCluster_615036;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615051 = newJObject()
  var formData_615052 = newJObject()
  add(formData_615052, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_615051, "Action", newJString(Action))
  add(query_615051, "Version", newJString(Version))
  result = call_615050.call(nil, query_615051, nil, formData_615052, nil)

var postDeleteGlobalCluster* = Call_PostDeleteGlobalCluster_615036(
    name: "postDeleteGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_PostDeleteGlobalCluster_615037, base: "/",
    url: url_PostDeleteGlobalCluster_615038, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGlobalCluster_615020 = ref object of OpenApiRestCall_612658
proc url_GetDeleteGlobalCluster_615022(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGlobalCluster_615021(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_615023 = query.getOrDefault("GlobalClusterIdentifier")
  valid_615023 = validateParameter(valid_615023, JString, required = true,
                                 default = nil)
  if valid_615023 != nil:
    section.add "GlobalClusterIdentifier", valid_615023
  var valid_615024 = query.getOrDefault("Action")
  valid_615024 = validateParameter(valid_615024, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_615024 != nil:
    section.add "Action", valid_615024
  var valid_615025 = query.getOrDefault("Version")
  valid_615025 = validateParameter(valid_615025, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615025 != nil:
    section.add "Version", valid_615025
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615026 = header.getOrDefault("X-Amz-Signature")
  valid_615026 = validateParameter(valid_615026, JString, required = false,
                                 default = nil)
  if valid_615026 != nil:
    section.add "X-Amz-Signature", valid_615026
  var valid_615027 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615027 = validateParameter(valid_615027, JString, required = false,
                                 default = nil)
  if valid_615027 != nil:
    section.add "X-Amz-Content-Sha256", valid_615027
  var valid_615028 = header.getOrDefault("X-Amz-Date")
  valid_615028 = validateParameter(valid_615028, JString, required = false,
                                 default = nil)
  if valid_615028 != nil:
    section.add "X-Amz-Date", valid_615028
  var valid_615029 = header.getOrDefault("X-Amz-Credential")
  valid_615029 = validateParameter(valid_615029, JString, required = false,
                                 default = nil)
  if valid_615029 != nil:
    section.add "X-Amz-Credential", valid_615029
  var valid_615030 = header.getOrDefault("X-Amz-Security-Token")
  valid_615030 = validateParameter(valid_615030, JString, required = false,
                                 default = nil)
  if valid_615030 != nil:
    section.add "X-Amz-Security-Token", valid_615030
  var valid_615031 = header.getOrDefault("X-Amz-Algorithm")
  valid_615031 = validateParameter(valid_615031, JString, required = false,
                                 default = nil)
  if valid_615031 != nil:
    section.add "X-Amz-Algorithm", valid_615031
  var valid_615032 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615032 = validateParameter(valid_615032, JString, required = false,
                                 default = nil)
  if valid_615032 != nil:
    section.add "X-Amz-SignedHeaders", valid_615032
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615033: Call_GetDeleteGlobalCluster_615020; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615033.validator(path, query, header, formData, body)
  let scheme = call_615033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615033.url(scheme.get, call_615033.host, call_615033.base,
                         call_615033.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615033, url, valid)

proc call*(call_615034: Call_GetDeleteGlobalCluster_615020;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615035 = newJObject()
  add(query_615035, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_615035, "Action", newJString(Action))
  add(query_615035, "Version", newJString(Version))
  result = call_615034.call(nil, query_615035, nil, nil, nil)

var getDeleteGlobalCluster* = Call_GetDeleteGlobalCluster_615020(
    name: "getDeleteGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_GetDeleteGlobalCluster_615021, base: "/",
    url: url_GetDeleteGlobalCluster_615022, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstallationMedia_615069 = ref object of OpenApiRestCall_612658
proc url_PostDeleteInstallationMedia_615071(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteInstallationMedia_615070(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615072 = query.getOrDefault("Action")
  valid_615072 = validateParameter(valid_615072, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_615072 != nil:
    section.add "Action", valid_615072
  var valid_615073 = query.getOrDefault("Version")
  valid_615073 = validateParameter(valid_615073, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615073 != nil:
    section.add "Version", valid_615073
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615074 = header.getOrDefault("X-Amz-Signature")
  valid_615074 = validateParameter(valid_615074, JString, required = false,
                                 default = nil)
  if valid_615074 != nil:
    section.add "X-Amz-Signature", valid_615074
  var valid_615075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615075 = validateParameter(valid_615075, JString, required = false,
                                 default = nil)
  if valid_615075 != nil:
    section.add "X-Amz-Content-Sha256", valid_615075
  var valid_615076 = header.getOrDefault("X-Amz-Date")
  valid_615076 = validateParameter(valid_615076, JString, required = false,
                                 default = nil)
  if valid_615076 != nil:
    section.add "X-Amz-Date", valid_615076
  var valid_615077 = header.getOrDefault("X-Amz-Credential")
  valid_615077 = validateParameter(valid_615077, JString, required = false,
                                 default = nil)
  if valid_615077 != nil:
    section.add "X-Amz-Credential", valid_615077
  var valid_615078 = header.getOrDefault("X-Amz-Security-Token")
  valid_615078 = validateParameter(valid_615078, JString, required = false,
                                 default = nil)
  if valid_615078 != nil:
    section.add "X-Amz-Security-Token", valid_615078
  var valid_615079 = header.getOrDefault("X-Amz-Algorithm")
  valid_615079 = validateParameter(valid_615079, JString, required = false,
                                 default = nil)
  if valid_615079 != nil:
    section.add "X-Amz-Algorithm", valid_615079
  var valid_615080 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615080 = validateParameter(valid_615080, JString, required = false,
                                 default = nil)
  if valid_615080 != nil:
    section.add "X-Amz-SignedHeaders", valid_615080
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation medium ID.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstallationMediaId` field"
  var valid_615081 = formData.getOrDefault("InstallationMediaId")
  valid_615081 = validateParameter(valid_615081, JString, required = true,
                                 default = nil)
  if valid_615081 != nil:
    section.add "InstallationMediaId", valid_615081
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615082: Call_PostDeleteInstallationMedia_615069; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_615082.validator(path, query, header, formData, body)
  let scheme = call_615082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615082.url(scheme.get, call_615082.host, call_615082.base,
                         call_615082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615082, url, valid)

proc call*(call_615083: Call_PostDeleteInstallationMedia_615069;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteInstallationMedia
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615084 = newJObject()
  var formData_615085 = newJObject()
  add(formData_615085, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_615084, "Action", newJString(Action))
  add(query_615084, "Version", newJString(Version))
  result = call_615083.call(nil, query_615084, nil, formData_615085, nil)

var postDeleteInstallationMedia* = Call_PostDeleteInstallationMedia_615069(
    name: "postDeleteInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_PostDeleteInstallationMedia_615070, base: "/",
    url: url_PostDeleteInstallationMedia_615071,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstallationMedia_615053 = ref object of OpenApiRestCall_612658
proc url_GetDeleteInstallationMedia_615055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteInstallationMedia_615054(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation medium ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstallationMediaId` field"
  var valid_615056 = query.getOrDefault("InstallationMediaId")
  valid_615056 = validateParameter(valid_615056, JString, required = true,
                                 default = nil)
  if valid_615056 != nil:
    section.add "InstallationMediaId", valid_615056
  var valid_615057 = query.getOrDefault("Action")
  valid_615057 = validateParameter(valid_615057, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_615057 != nil:
    section.add "Action", valid_615057
  var valid_615058 = query.getOrDefault("Version")
  valid_615058 = validateParameter(valid_615058, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615058 != nil:
    section.add "Version", valid_615058
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615059 = header.getOrDefault("X-Amz-Signature")
  valid_615059 = validateParameter(valid_615059, JString, required = false,
                                 default = nil)
  if valid_615059 != nil:
    section.add "X-Amz-Signature", valid_615059
  var valid_615060 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615060 = validateParameter(valid_615060, JString, required = false,
                                 default = nil)
  if valid_615060 != nil:
    section.add "X-Amz-Content-Sha256", valid_615060
  var valid_615061 = header.getOrDefault("X-Amz-Date")
  valid_615061 = validateParameter(valid_615061, JString, required = false,
                                 default = nil)
  if valid_615061 != nil:
    section.add "X-Amz-Date", valid_615061
  var valid_615062 = header.getOrDefault("X-Amz-Credential")
  valid_615062 = validateParameter(valid_615062, JString, required = false,
                                 default = nil)
  if valid_615062 != nil:
    section.add "X-Amz-Credential", valid_615062
  var valid_615063 = header.getOrDefault("X-Amz-Security-Token")
  valid_615063 = validateParameter(valid_615063, JString, required = false,
                                 default = nil)
  if valid_615063 != nil:
    section.add "X-Amz-Security-Token", valid_615063
  var valid_615064 = header.getOrDefault("X-Amz-Algorithm")
  valid_615064 = validateParameter(valid_615064, JString, required = false,
                                 default = nil)
  if valid_615064 != nil:
    section.add "X-Amz-Algorithm", valid_615064
  var valid_615065 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615065 = validateParameter(valid_615065, JString, required = false,
                                 default = nil)
  if valid_615065 != nil:
    section.add "X-Amz-SignedHeaders", valid_615065
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615066: Call_GetDeleteInstallationMedia_615053; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_615066.validator(path, query, header, formData, body)
  let scheme = call_615066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615066.url(scheme.get, call_615066.host, call_615066.base,
                         call_615066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615066, url, valid)

proc call*(call_615067: Call_GetDeleteInstallationMedia_615053;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteInstallationMedia
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615068 = newJObject()
  add(query_615068, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_615068, "Action", newJString(Action))
  add(query_615068, "Version", newJString(Version))
  result = call_615067.call(nil, query_615068, nil, nil, nil)

var getDeleteInstallationMedia* = Call_GetDeleteInstallationMedia_615053(
    name: "getDeleteInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_GetDeleteInstallationMedia_615054, base: "/",
    url: url_GetDeleteInstallationMedia_615055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOptionGroup_615102 = ref object of OpenApiRestCall_612658
proc url_PostDeleteOptionGroup_615104(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteOptionGroup_615103(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615105 = query.getOrDefault("Action")
  valid_615105 = validateParameter(valid_615105, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_615105 != nil:
    section.add "Action", valid_615105
  var valid_615106 = query.getOrDefault("Version")
  valid_615106 = validateParameter(valid_615106, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615106 != nil:
    section.add "Version", valid_615106
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615107 = header.getOrDefault("X-Amz-Signature")
  valid_615107 = validateParameter(valid_615107, JString, required = false,
                                 default = nil)
  if valid_615107 != nil:
    section.add "X-Amz-Signature", valid_615107
  var valid_615108 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615108 = validateParameter(valid_615108, JString, required = false,
                                 default = nil)
  if valid_615108 != nil:
    section.add "X-Amz-Content-Sha256", valid_615108
  var valid_615109 = header.getOrDefault("X-Amz-Date")
  valid_615109 = validateParameter(valid_615109, JString, required = false,
                                 default = nil)
  if valid_615109 != nil:
    section.add "X-Amz-Date", valid_615109
  var valid_615110 = header.getOrDefault("X-Amz-Credential")
  valid_615110 = validateParameter(valid_615110, JString, required = false,
                                 default = nil)
  if valid_615110 != nil:
    section.add "X-Amz-Credential", valid_615110
  var valid_615111 = header.getOrDefault("X-Amz-Security-Token")
  valid_615111 = validateParameter(valid_615111, JString, required = false,
                                 default = nil)
  if valid_615111 != nil:
    section.add "X-Amz-Security-Token", valid_615111
  var valid_615112 = header.getOrDefault("X-Amz-Algorithm")
  valid_615112 = validateParameter(valid_615112, JString, required = false,
                                 default = nil)
  if valid_615112 != nil:
    section.add "X-Amz-Algorithm", valid_615112
  var valid_615113 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615113 = validateParameter(valid_615113, JString, required = false,
                                 default = nil)
  if valid_615113 != nil:
    section.add "X-Amz-SignedHeaders", valid_615113
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_615114 = formData.getOrDefault("OptionGroupName")
  valid_615114 = validateParameter(valid_615114, JString, required = true,
                                 default = nil)
  if valid_615114 != nil:
    section.add "OptionGroupName", valid_615114
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615115: Call_PostDeleteOptionGroup_615102; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_615115.validator(path, query, header, formData, body)
  let scheme = call_615115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615115.url(scheme.get, call_615115.host, call_615115.base,
                         call_615115.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615115, url, valid)

proc call*(call_615116: Call_PostDeleteOptionGroup_615102; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_615117 = newJObject()
  var formData_615118 = newJObject()
  add(query_615117, "Action", newJString(Action))
  add(formData_615118, "OptionGroupName", newJString(OptionGroupName))
  add(query_615117, "Version", newJString(Version))
  result = call_615116.call(nil, query_615117, nil, formData_615118, nil)

var postDeleteOptionGroup* = Call_PostDeleteOptionGroup_615102(
    name: "postDeleteOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_PostDeleteOptionGroup_615103, base: "/",
    url: url_PostDeleteOptionGroup_615104, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOptionGroup_615086 = ref object of OpenApiRestCall_612658
proc url_GetDeleteOptionGroup_615088(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteOptionGroup_615087(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615089 = query.getOrDefault("Action")
  valid_615089 = validateParameter(valid_615089, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_615089 != nil:
    section.add "Action", valid_615089
  var valid_615090 = query.getOrDefault("OptionGroupName")
  valid_615090 = validateParameter(valid_615090, JString, required = true,
                                 default = nil)
  if valid_615090 != nil:
    section.add "OptionGroupName", valid_615090
  var valid_615091 = query.getOrDefault("Version")
  valid_615091 = validateParameter(valid_615091, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615091 != nil:
    section.add "Version", valid_615091
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615092 = header.getOrDefault("X-Amz-Signature")
  valid_615092 = validateParameter(valid_615092, JString, required = false,
                                 default = nil)
  if valid_615092 != nil:
    section.add "X-Amz-Signature", valid_615092
  var valid_615093 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615093 = validateParameter(valid_615093, JString, required = false,
                                 default = nil)
  if valid_615093 != nil:
    section.add "X-Amz-Content-Sha256", valid_615093
  var valid_615094 = header.getOrDefault("X-Amz-Date")
  valid_615094 = validateParameter(valid_615094, JString, required = false,
                                 default = nil)
  if valid_615094 != nil:
    section.add "X-Amz-Date", valid_615094
  var valid_615095 = header.getOrDefault("X-Amz-Credential")
  valid_615095 = validateParameter(valid_615095, JString, required = false,
                                 default = nil)
  if valid_615095 != nil:
    section.add "X-Amz-Credential", valid_615095
  var valid_615096 = header.getOrDefault("X-Amz-Security-Token")
  valid_615096 = validateParameter(valid_615096, JString, required = false,
                                 default = nil)
  if valid_615096 != nil:
    section.add "X-Amz-Security-Token", valid_615096
  var valid_615097 = header.getOrDefault("X-Amz-Algorithm")
  valid_615097 = validateParameter(valid_615097, JString, required = false,
                                 default = nil)
  if valid_615097 != nil:
    section.add "X-Amz-Algorithm", valid_615097
  var valid_615098 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615098 = validateParameter(valid_615098, JString, required = false,
                                 default = nil)
  if valid_615098 != nil:
    section.add "X-Amz-SignedHeaders", valid_615098
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615099: Call_GetDeleteOptionGroup_615086; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_615099.validator(path, query, header, formData, body)
  let scheme = call_615099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615099.url(scheme.get, call_615099.host, call_615099.base,
                         call_615099.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615099, url, valid)

proc call*(call_615100: Call_GetDeleteOptionGroup_615086; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_615101 = newJObject()
  add(query_615101, "Action", newJString(Action))
  add(query_615101, "OptionGroupName", newJString(OptionGroupName))
  add(query_615101, "Version", newJString(Version))
  result = call_615100.call(nil, query_615101, nil, nil, nil)

var getDeleteOptionGroup* = Call_GetDeleteOptionGroup_615086(
    name: "getDeleteOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_GetDeleteOptionGroup_615087, base: "/",
    url: url_GetDeleteOptionGroup_615088, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeregisterDBProxyTargets_615138 = ref object of OpenApiRestCall_612658
proc url_PostDeregisterDBProxyTargets_615140(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeregisterDBProxyTargets_615139(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615141 = query.getOrDefault("Action")
  valid_615141 = validateParameter(valid_615141, JString, required = true, default = newJString(
      "DeregisterDBProxyTargets"))
  if valid_615141 != nil:
    section.add "Action", valid_615141
  var valid_615142 = query.getOrDefault("Version")
  valid_615142 = validateParameter(valid_615142, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615142 != nil:
    section.add "Version", valid_615142
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615143 = header.getOrDefault("X-Amz-Signature")
  valid_615143 = validateParameter(valid_615143, JString, required = false,
                                 default = nil)
  if valid_615143 != nil:
    section.add "X-Amz-Signature", valid_615143
  var valid_615144 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615144 = validateParameter(valid_615144, JString, required = false,
                                 default = nil)
  if valid_615144 != nil:
    section.add "X-Amz-Content-Sha256", valid_615144
  var valid_615145 = header.getOrDefault("X-Amz-Date")
  valid_615145 = validateParameter(valid_615145, JString, required = false,
                                 default = nil)
  if valid_615145 != nil:
    section.add "X-Amz-Date", valid_615145
  var valid_615146 = header.getOrDefault("X-Amz-Credential")
  valid_615146 = validateParameter(valid_615146, JString, required = false,
                                 default = nil)
  if valid_615146 != nil:
    section.add "X-Amz-Credential", valid_615146
  var valid_615147 = header.getOrDefault("X-Amz-Security-Token")
  valid_615147 = validateParameter(valid_615147, JString, required = false,
                                 default = nil)
  if valid_615147 != nil:
    section.add "X-Amz-Security-Token", valid_615147
  var valid_615148 = header.getOrDefault("X-Amz-Algorithm")
  valid_615148 = validateParameter(valid_615148, JString, required = false,
                                 default = nil)
  if valid_615148 != nil:
    section.add "X-Amz-Algorithm", valid_615148
  var valid_615149 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615149 = validateParameter(valid_615149, JString, required = false,
                                 default = nil)
  if valid_615149 != nil:
    section.add "X-Amz-SignedHeaders", valid_615149
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_615150 = formData.getOrDefault("TargetGroupName")
  valid_615150 = validateParameter(valid_615150, JString, required = false,
                                 default = nil)
  if valid_615150 != nil:
    section.add "TargetGroupName", valid_615150
  var valid_615151 = formData.getOrDefault("DBInstanceIdentifiers")
  valid_615151 = validateParameter(valid_615151, JArray, required = false,
                                 default = nil)
  if valid_615151 != nil:
    section.add "DBInstanceIdentifiers", valid_615151
  var valid_615152 = formData.getOrDefault("DBClusterIdentifiers")
  valid_615152 = validateParameter(valid_615152, JArray, required = false,
                                 default = nil)
  if valid_615152 != nil:
    section.add "DBClusterIdentifiers", valid_615152
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_615153 = formData.getOrDefault("DBProxyName")
  valid_615153 = validateParameter(valid_615153, JString, required = true,
                                 default = nil)
  if valid_615153 != nil:
    section.add "DBProxyName", valid_615153
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615154: Call_PostDeregisterDBProxyTargets_615138; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_615154.validator(path, query, header, formData, body)
  let scheme = call_615154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615154.url(scheme.get, call_615154.host, call_615154.base,
                         call_615154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615154, url, valid)

proc call*(call_615155: Call_PostDeregisterDBProxyTargets_615138;
          DBProxyName: string; TargetGroupName: string = "";
          DBInstanceIdentifiers: JsonNode = nil;
          DBClusterIdentifiers: JsonNode = nil;
          Action: string = "DeregisterDBProxyTargets";
          Version: string = "2014-10-31"): Recallable =
  ## postDeregisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615156 = newJObject()
  var formData_615157 = newJObject()
  add(formData_615157, "TargetGroupName", newJString(TargetGroupName))
  if DBInstanceIdentifiers != nil:
    formData_615157.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  if DBClusterIdentifiers != nil:
    formData_615157.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(formData_615157, "DBProxyName", newJString(DBProxyName))
  add(query_615156, "Action", newJString(Action))
  add(query_615156, "Version", newJString(Version))
  result = call_615155.call(nil, query_615156, nil, formData_615157, nil)

var postDeregisterDBProxyTargets* = Call_PostDeregisterDBProxyTargets_615138(
    name: "postDeregisterDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeregisterDBProxyTargets",
    validator: validate_PostDeregisterDBProxyTargets_615139, base: "/",
    url: url_PostDeregisterDBProxyTargets_615140,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeregisterDBProxyTargets_615119 = ref object of OpenApiRestCall_612658
proc url_GetDeregisterDBProxyTargets_615121(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeregisterDBProxyTargets_615120(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_615122 = query.getOrDefault("DBClusterIdentifiers")
  valid_615122 = validateParameter(valid_615122, JArray, required = false,
                                 default = nil)
  if valid_615122 != nil:
    section.add "DBClusterIdentifiers", valid_615122
  var valid_615123 = query.getOrDefault("DBInstanceIdentifiers")
  valid_615123 = validateParameter(valid_615123, JArray, required = false,
                                 default = nil)
  if valid_615123 != nil:
    section.add "DBInstanceIdentifiers", valid_615123
  var valid_615124 = query.getOrDefault("TargetGroupName")
  valid_615124 = validateParameter(valid_615124, JString, required = false,
                                 default = nil)
  if valid_615124 != nil:
    section.add "TargetGroupName", valid_615124
  var valid_615125 = query.getOrDefault("Action")
  valid_615125 = validateParameter(valid_615125, JString, required = true, default = newJString(
      "DeregisterDBProxyTargets"))
  if valid_615125 != nil:
    section.add "Action", valid_615125
  var valid_615126 = query.getOrDefault("Version")
  valid_615126 = validateParameter(valid_615126, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615126 != nil:
    section.add "Version", valid_615126
  var valid_615127 = query.getOrDefault("DBProxyName")
  valid_615127 = validateParameter(valid_615127, JString, required = true,
                                 default = nil)
  if valid_615127 != nil:
    section.add "DBProxyName", valid_615127
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615128 = header.getOrDefault("X-Amz-Signature")
  valid_615128 = validateParameter(valid_615128, JString, required = false,
                                 default = nil)
  if valid_615128 != nil:
    section.add "X-Amz-Signature", valid_615128
  var valid_615129 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615129 = validateParameter(valid_615129, JString, required = false,
                                 default = nil)
  if valid_615129 != nil:
    section.add "X-Amz-Content-Sha256", valid_615129
  var valid_615130 = header.getOrDefault("X-Amz-Date")
  valid_615130 = validateParameter(valid_615130, JString, required = false,
                                 default = nil)
  if valid_615130 != nil:
    section.add "X-Amz-Date", valid_615130
  var valid_615131 = header.getOrDefault("X-Amz-Credential")
  valid_615131 = validateParameter(valid_615131, JString, required = false,
                                 default = nil)
  if valid_615131 != nil:
    section.add "X-Amz-Credential", valid_615131
  var valid_615132 = header.getOrDefault("X-Amz-Security-Token")
  valid_615132 = validateParameter(valid_615132, JString, required = false,
                                 default = nil)
  if valid_615132 != nil:
    section.add "X-Amz-Security-Token", valid_615132
  var valid_615133 = header.getOrDefault("X-Amz-Algorithm")
  valid_615133 = validateParameter(valid_615133, JString, required = false,
                                 default = nil)
  if valid_615133 != nil:
    section.add "X-Amz-Algorithm", valid_615133
  var valid_615134 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615134 = validateParameter(valid_615134, JString, required = false,
                                 default = nil)
  if valid_615134 != nil:
    section.add "X-Amz-SignedHeaders", valid_615134
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615135: Call_GetDeregisterDBProxyTargets_615119; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_615135.validator(path, query, header, formData, body)
  let scheme = call_615135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615135.url(scheme.get, call_615135.host, call_615135.base,
                         call_615135.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615135, url, valid)

proc call*(call_615136: Call_GetDeregisterDBProxyTargets_615119;
          DBProxyName: string; DBClusterIdentifiers: JsonNode = nil;
          DBInstanceIdentifiers: JsonNode = nil; TargetGroupName: string = "";
          Action: string = "DeregisterDBProxyTargets";
          Version: string = "2014-10-31"): Recallable =
  ## getDeregisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  var query_615137 = newJObject()
  if DBClusterIdentifiers != nil:
    query_615137.add "DBClusterIdentifiers", DBClusterIdentifiers
  if DBInstanceIdentifiers != nil:
    query_615137.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  add(query_615137, "TargetGroupName", newJString(TargetGroupName))
  add(query_615137, "Action", newJString(Action))
  add(query_615137, "Version", newJString(Version))
  add(query_615137, "DBProxyName", newJString(DBProxyName))
  result = call_615136.call(nil, query_615137, nil, nil, nil)

var getDeregisterDBProxyTargets* = Call_GetDeregisterDBProxyTargets_615119(
    name: "getDeregisterDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeregisterDBProxyTargets",
    validator: validate_GetDeregisterDBProxyTargets_615120, base: "/",
    url: url_GetDeregisterDBProxyTargets_615121,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountAttributes_615173 = ref object of OpenApiRestCall_612658
proc url_PostDescribeAccountAttributes_615175(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAccountAttributes_615174(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615176 = query.getOrDefault("Action")
  valid_615176 = validateParameter(valid_615176, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_615176 != nil:
    section.add "Action", valid_615176
  var valid_615177 = query.getOrDefault("Version")
  valid_615177 = validateParameter(valid_615177, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615177 != nil:
    section.add "Version", valid_615177
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615178 = header.getOrDefault("X-Amz-Signature")
  valid_615178 = validateParameter(valid_615178, JString, required = false,
                                 default = nil)
  if valid_615178 != nil:
    section.add "X-Amz-Signature", valid_615178
  var valid_615179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615179 = validateParameter(valid_615179, JString, required = false,
                                 default = nil)
  if valid_615179 != nil:
    section.add "X-Amz-Content-Sha256", valid_615179
  var valid_615180 = header.getOrDefault("X-Amz-Date")
  valid_615180 = validateParameter(valid_615180, JString, required = false,
                                 default = nil)
  if valid_615180 != nil:
    section.add "X-Amz-Date", valid_615180
  var valid_615181 = header.getOrDefault("X-Amz-Credential")
  valid_615181 = validateParameter(valid_615181, JString, required = false,
                                 default = nil)
  if valid_615181 != nil:
    section.add "X-Amz-Credential", valid_615181
  var valid_615182 = header.getOrDefault("X-Amz-Security-Token")
  valid_615182 = validateParameter(valid_615182, JString, required = false,
                                 default = nil)
  if valid_615182 != nil:
    section.add "X-Amz-Security-Token", valid_615182
  var valid_615183 = header.getOrDefault("X-Amz-Algorithm")
  valid_615183 = validateParameter(valid_615183, JString, required = false,
                                 default = nil)
  if valid_615183 != nil:
    section.add "X-Amz-Algorithm", valid_615183
  var valid_615184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615184 = validateParameter(valid_615184, JString, required = false,
                                 default = nil)
  if valid_615184 != nil:
    section.add "X-Amz-SignedHeaders", valid_615184
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615185: Call_PostDescribeAccountAttributes_615173; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_615185.validator(path, query, header, formData, body)
  let scheme = call_615185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615185.url(scheme.get, call_615185.host, call_615185.base,
                         call_615185.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615185, url, valid)

proc call*(call_615186: Call_PostDescribeAccountAttributes_615173;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615187 = newJObject()
  add(query_615187, "Action", newJString(Action))
  add(query_615187, "Version", newJString(Version))
  result = call_615186.call(nil, query_615187, nil, nil, nil)

var postDescribeAccountAttributes* = Call_PostDescribeAccountAttributes_615173(
    name: "postDescribeAccountAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_PostDescribeAccountAttributes_615174, base: "/",
    url: url_PostDescribeAccountAttributes_615175,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountAttributes_615158 = ref object of OpenApiRestCall_612658
proc url_GetDescribeAccountAttributes_615160(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAccountAttributes_615159(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615161 = query.getOrDefault("Action")
  valid_615161 = validateParameter(valid_615161, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_615161 != nil:
    section.add "Action", valid_615161
  var valid_615162 = query.getOrDefault("Version")
  valid_615162 = validateParameter(valid_615162, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615162 != nil:
    section.add "Version", valid_615162
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615163 = header.getOrDefault("X-Amz-Signature")
  valid_615163 = validateParameter(valid_615163, JString, required = false,
                                 default = nil)
  if valid_615163 != nil:
    section.add "X-Amz-Signature", valid_615163
  var valid_615164 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615164 = validateParameter(valid_615164, JString, required = false,
                                 default = nil)
  if valid_615164 != nil:
    section.add "X-Amz-Content-Sha256", valid_615164
  var valid_615165 = header.getOrDefault("X-Amz-Date")
  valid_615165 = validateParameter(valid_615165, JString, required = false,
                                 default = nil)
  if valid_615165 != nil:
    section.add "X-Amz-Date", valid_615165
  var valid_615166 = header.getOrDefault("X-Amz-Credential")
  valid_615166 = validateParameter(valid_615166, JString, required = false,
                                 default = nil)
  if valid_615166 != nil:
    section.add "X-Amz-Credential", valid_615166
  var valid_615167 = header.getOrDefault("X-Amz-Security-Token")
  valid_615167 = validateParameter(valid_615167, JString, required = false,
                                 default = nil)
  if valid_615167 != nil:
    section.add "X-Amz-Security-Token", valid_615167
  var valid_615168 = header.getOrDefault("X-Amz-Algorithm")
  valid_615168 = validateParameter(valid_615168, JString, required = false,
                                 default = nil)
  if valid_615168 != nil:
    section.add "X-Amz-Algorithm", valid_615168
  var valid_615169 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615169 = validateParameter(valid_615169, JString, required = false,
                                 default = nil)
  if valid_615169 != nil:
    section.add "X-Amz-SignedHeaders", valid_615169
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615170: Call_GetDescribeAccountAttributes_615158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_615170.validator(path, query, header, formData, body)
  let scheme = call_615170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615170.url(scheme.get, call_615170.host, call_615170.base,
                         call_615170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615170, url, valid)

proc call*(call_615171: Call_GetDescribeAccountAttributes_615158;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615172 = newJObject()
  add(query_615172, "Action", newJString(Action))
  add(query_615172, "Version", newJString(Version))
  result = call_615171.call(nil, query_615172, nil, nil, nil)

var getDescribeAccountAttributes* = Call_GetDescribeAccountAttributes_615158(
    name: "getDescribeAccountAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_GetDescribeAccountAttributes_615159, base: "/",
    url: url_GetDescribeAccountAttributes_615160,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCertificates_615207 = ref object of OpenApiRestCall_612658
proc url_PostDescribeCertificates_615209(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCertificates_615208(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615210 = query.getOrDefault("Action")
  valid_615210 = validateParameter(valid_615210, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_615210 != nil:
    section.add "Action", valid_615210
  var valid_615211 = query.getOrDefault("Version")
  valid_615211 = validateParameter(valid_615211, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615211 != nil:
    section.add "Version", valid_615211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615212 = header.getOrDefault("X-Amz-Signature")
  valid_615212 = validateParameter(valid_615212, JString, required = false,
                                 default = nil)
  if valid_615212 != nil:
    section.add "X-Amz-Signature", valid_615212
  var valid_615213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615213 = validateParameter(valid_615213, JString, required = false,
                                 default = nil)
  if valid_615213 != nil:
    section.add "X-Amz-Content-Sha256", valid_615213
  var valid_615214 = header.getOrDefault("X-Amz-Date")
  valid_615214 = validateParameter(valid_615214, JString, required = false,
                                 default = nil)
  if valid_615214 != nil:
    section.add "X-Amz-Date", valid_615214
  var valid_615215 = header.getOrDefault("X-Amz-Credential")
  valid_615215 = validateParameter(valid_615215, JString, required = false,
                                 default = nil)
  if valid_615215 != nil:
    section.add "X-Amz-Credential", valid_615215
  var valid_615216 = header.getOrDefault("X-Amz-Security-Token")
  valid_615216 = validateParameter(valid_615216, JString, required = false,
                                 default = nil)
  if valid_615216 != nil:
    section.add "X-Amz-Security-Token", valid_615216
  var valid_615217 = header.getOrDefault("X-Amz-Algorithm")
  valid_615217 = validateParameter(valid_615217, JString, required = false,
                                 default = nil)
  if valid_615217 != nil:
    section.add "X-Amz-Algorithm", valid_615217
  var valid_615218 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615218 = validateParameter(valid_615218, JString, required = false,
                                 default = nil)
  if valid_615218 != nil:
    section.add "X-Amz-SignedHeaders", valid_615218
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_615219 = formData.getOrDefault("MaxRecords")
  valid_615219 = validateParameter(valid_615219, JInt, required = false, default = nil)
  if valid_615219 != nil:
    section.add "MaxRecords", valid_615219
  var valid_615220 = formData.getOrDefault("Marker")
  valid_615220 = validateParameter(valid_615220, JString, required = false,
                                 default = nil)
  if valid_615220 != nil:
    section.add "Marker", valid_615220
  var valid_615221 = formData.getOrDefault("CertificateIdentifier")
  valid_615221 = validateParameter(valid_615221, JString, required = false,
                                 default = nil)
  if valid_615221 != nil:
    section.add "CertificateIdentifier", valid_615221
  var valid_615222 = formData.getOrDefault("Filters")
  valid_615222 = validateParameter(valid_615222, JArray, required = false,
                                 default = nil)
  if valid_615222 != nil:
    section.add "Filters", valid_615222
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615223: Call_PostDescribeCertificates_615207; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_615223.validator(path, query, header, formData, body)
  let scheme = call_615223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615223.url(scheme.get, call_615223.host, call_615223.base,
                         call_615223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615223, url, valid)

proc call*(call_615224: Call_PostDescribeCertificates_615207; MaxRecords: int = 0;
          Marker: string = ""; CertificateIdentifier: string = "";
          Action: string = "DescribeCertificates"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_615225 = newJObject()
  var formData_615226 = newJObject()
  add(formData_615226, "MaxRecords", newJInt(MaxRecords))
  add(formData_615226, "Marker", newJString(Marker))
  add(formData_615226, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(query_615225, "Action", newJString(Action))
  if Filters != nil:
    formData_615226.add "Filters", Filters
  add(query_615225, "Version", newJString(Version))
  result = call_615224.call(nil, query_615225, nil, formData_615226, nil)

var postDescribeCertificates* = Call_PostDescribeCertificates_615207(
    name: "postDescribeCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_PostDescribeCertificates_615208, base: "/",
    url: url_PostDescribeCertificates_615209, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCertificates_615188 = ref object of OpenApiRestCall_612658
proc url_GetDescribeCertificates_615190(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCertificates_615189(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615191 = query.getOrDefault("Marker")
  valid_615191 = validateParameter(valid_615191, JString, required = false,
                                 default = nil)
  if valid_615191 != nil:
    section.add "Marker", valid_615191
  var valid_615192 = query.getOrDefault("Action")
  valid_615192 = validateParameter(valid_615192, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_615192 != nil:
    section.add "Action", valid_615192
  var valid_615193 = query.getOrDefault("Version")
  valid_615193 = validateParameter(valid_615193, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615193 != nil:
    section.add "Version", valid_615193
  var valid_615194 = query.getOrDefault("CertificateIdentifier")
  valid_615194 = validateParameter(valid_615194, JString, required = false,
                                 default = nil)
  if valid_615194 != nil:
    section.add "CertificateIdentifier", valid_615194
  var valid_615195 = query.getOrDefault("Filters")
  valid_615195 = validateParameter(valid_615195, JArray, required = false,
                                 default = nil)
  if valid_615195 != nil:
    section.add "Filters", valid_615195
  var valid_615196 = query.getOrDefault("MaxRecords")
  valid_615196 = validateParameter(valid_615196, JInt, required = false, default = nil)
  if valid_615196 != nil:
    section.add "MaxRecords", valid_615196
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615197 = header.getOrDefault("X-Amz-Signature")
  valid_615197 = validateParameter(valid_615197, JString, required = false,
                                 default = nil)
  if valid_615197 != nil:
    section.add "X-Amz-Signature", valid_615197
  var valid_615198 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615198 = validateParameter(valid_615198, JString, required = false,
                                 default = nil)
  if valid_615198 != nil:
    section.add "X-Amz-Content-Sha256", valid_615198
  var valid_615199 = header.getOrDefault("X-Amz-Date")
  valid_615199 = validateParameter(valid_615199, JString, required = false,
                                 default = nil)
  if valid_615199 != nil:
    section.add "X-Amz-Date", valid_615199
  var valid_615200 = header.getOrDefault("X-Amz-Credential")
  valid_615200 = validateParameter(valid_615200, JString, required = false,
                                 default = nil)
  if valid_615200 != nil:
    section.add "X-Amz-Credential", valid_615200
  var valid_615201 = header.getOrDefault("X-Amz-Security-Token")
  valid_615201 = validateParameter(valid_615201, JString, required = false,
                                 default = nil)
  if valid_615201 != nil:
    section.add "X-Amz-Security-Token", valid_615201
  var valid_615202 = header.getOrDefault("X-Amz-Algorithm")
  valid_615202 = validateParameter(valid_615202, JString, required = false,
                                 default = nil)
  if valid_615202 != nil:
    section.add "X-Amz-Algorithm", valid_615202
  var valid_615203 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615203 = validateParameter(valid_615203, JString, required = false,
                                 default = nil)
  if valid_615203 != nil:
    section.add "X-Amz-SignedHeaders", valid_615203
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615204: Call_GetDescribeCertificates_615188; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_615204.validator(path, query, header, formData, body)
  let scheme = call_615204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615204.url(scheme.get, call_615204.host, call_615204.base,
                         call_615204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615204, url, valid)

proc call*(call_615205: Call_GetDescribeCertificates_615188; Marker: string = "";
          Action: string = "DescribeCertificates"; Version: string = "2014-10-31";
          CertificateIdentifier: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0): Recallable =
  ## getDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615206 = newJObject()
  add(query_615206, "Marker", newJString(Marker))
  add(query_615206, "Action", newJString(Action))
  add(query_615206, "Version", newJString(Version))
  add(query_615206, "CertificateIdentifier", newJString(CertificateIdentifier))
  if Filters != nil:
    query_615206.add "Filters", Filters
  add(query_615206, "MaxRecords", newJInt(MaxRecords))
  result = call_615205.call(nil, query_615206, nil, nil, nil)

var getDescribeCertificates* = Call_GetDescribeCertificates_615188(
    name: "getDescribeCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_GetDescribeCertificates_615189, base: "/",
    url: url_GetDescribeCertificates_615190, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCustomAvailabilityZones_615246 = ref object of OpenApiRestCall_612658
proc url_PostDescribeCustomAvailabilityZones_615248(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCustomAvailabilityZones_615247(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615249 = query.getOrDefault("Action")
  valid_615249 = validateParameter(valid_615249, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_615249 != nil:
    section.add "Action", valid_615249
  var valid_615250 = query.getOrDefault("Version")
  valid_615250 = validateParameter(valid_615250, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615250 != nil:
    section.add "Version", valid_615250
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615251 = header.getOrDefault("X-Amz-Signature")
  valid_615251 = validateParameter(valid_615251, JString, required = false,
                                 default = nil)
  if valid_615251 != nil:
    section.add "X-Amz-Signature", valid_615251
  var valid_615252 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615252 = validateParameter(valid_615252, JString, required = false,
                                 default = nil)
  if valid_615252 != nil:
    section.add "X-Amz-Content-Sha256", valid_615252
  var valid_615253 = header.getOrDefault("X-Amz-Date")
  valid_615253 = validateParameter(valid_615253, JString, required = false,
                                 default = nil)
  if valid_615253 != nil:
    section.add "X-Amz-Date", valid_615253
  var valid_615254 = header.getOrDefault("X-Amz-Credential")
  valid_615254 = validateParameter(valid_615254, JString, required = false,
                                 default = nil)
  if valid_615254 != nil:
    section.add "X-Amz-Credential", valid_615254
  var valid_615255 = header.getOrDefault("X-Amz-Security-Token")
  valid_615255 = validateParameter(valid_615255, JString, required = false,
                                 default = nil)
  if valid_615255 != nil:
    section.add "X-Amz-Security-Token", valid_615255
  var valid_615256 = header.getOrDefault("X-Amz-Algorithm")
  valid_615256 = validateParameter(valid_615256, JString, required = false,
                                 default = nil)
  if valid_615256 != nil:
    section.add "X-Amz-Algorithm", valid_615256
  var valid_615257 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615257 = validateParameter(valid_615257, JString, required = false,
                                 default = nil)
  if valid_615257 != nil:
    section.add "X-Amz-SignedHeaders", valid_615257
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  section = newJObject()
  var valid_615258 = formData.getOrDefault("MaxRecords")
  valid_615258 = validateParameter(valid_615258, JInt, required = false, default = nil)
  if valid_615258 != nil:
    section.add "MaxRecords", valid_615258
  var valid_615259 = formData.getOrDefault("Marker")
  valid_615259 = validateParameter(valid_615259, JString, required = false,
                                 default = nil)
  if valid_615259 != nil:
    section.add "Marker", valid_615259
  var valid_615260 = formData.getOrDefault("Filters")
  valid_615260 = validateParameter(valid_615260, JArray, required = false,
                                 default = nil)
  if valid_615260 != nil:
    section.add "Filters", valid_615260
  var valid_615261 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_615261 = validateParameter(valid_615261, JString, required = false,
                                 default = nil)
  if valid_615261 != nil:
    section.add "CustomAvailabilityZoneId", valid_615261
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615262: Call_PostDescribeCustomAvailabilityZones_615246;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_615262.validator(path, query, header, formData, body)
  let scheme = call_615262.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615262.url(scheme.get, call_615262.host, call_615262.base,
                         call_615262.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615262, url, valid)

proc call*(call_615263: Call_PostDescribeCustomAvailabilityZones_615246;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeCustomAvailabilityZones";
          Filters: JsonNode = nil; CustomAvailabilityZoneId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Version: string (required)
  var query_615264 = newJObject()
  var formData_615265 = newJObject()
  add(formData_615265, "MaxRecords", newJInt(MaxRecords))
  add(formData_615265, "Marker", newJString(Marker))
  add(query_615264, "Action", newJString(Action))
  if Filters != nil:
    formData_615265.add "Filters", Filters
  add(formData_615265, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_615264, "Version", newJString(Version))
  result = call_615263.call(nil, query_615264, nil, formData_615265, nil)

var postDescribeCustomAvailabilityZones* = Call_PostDescribeCustomAvailabilityZones_615246(
    name: "postDescribeCustomAvailabilityZones", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_PostDescribeCustomAvailabilityZones_615247, base: "/",
    url: url_PostDescribeCustomAvailabilityZones_615248,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCustomAvailabilityZones_615227 = ref object of OpenApiRestCall_612658
proc url_GetDescribeCustomAvailabilityZones_615229(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCustomAvailabilityZones_615228(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615230 = query.getOrDefault("Marker")
  valid_615230 = validateParameter(valid_615230, JString, required = false,
                                 default = nil)
  if valid_615230 != nil:
    section.add "Marker", valid_615230
  var valid_615231 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_615231 = validateParameter(valid_615231, JString, required = false,
                                 default = nil)
  if valid_615231 != nil:
    section.add "CustomAvailabilityZoneId", valid_615231
  var valid_615232 = query.getOrDefault("Action")
  valid_615232 = validateParameter(valid_615232, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_615232 != nil:
    section.add "Action", valid_615232
  var valid_615233 = query.getOrDefault("Version")
  valid_615233 = validateParameter(valid_615233, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615233 != nil:
    section.add "Version", valid_615233
  var valid_615234 = query.getOrDefault("Filters")
  valid_615234 = validateParameter(valid_615234, JArray, required = false,
                                 default = nil)
  if valid_615234 != nil:
    section.add "Filters", valid_615234
  var valid_615235 = query.getOrDefault("MaxRecords")
  valid_615235 = validateParameter(valid_615235, JInt, required = false, default = nil)
  if valid_615235 != nil:
    section.add "MaxRecords", valid_615235
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615236 = header.getOrDefault("X-Amz-Signature")
  valid_615236 = validateParameter(valid_615236, JString, required = false,
                                 default = nil)
  if valid_615236 != nil:
    section.add "X-Amz-Signature", valid_615236
  var valid_615237 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615237 = validateParameter(valid_615237, JString, required = false,
                                 default = nil)
  if valid_615237 != nil:
    section.add "X-Amz-Content-Sha256", valid_615237
  var valid_615238 = header.getOrDefault("X-Amz-Date")
  valid_615238 = validateParameter(valid_615238, JString, required = false,
                                 default = nil)
  if valid_615238 != nil:
    section.add "X-Amz-Date", valid_615238
  var valid_615239 = header.getOrDefault("X-Amz-Credential")
  valid_615239 = validateParameter(valid_615239, JString, required = false,
                                 default = nil)
  if valid_615239 != nil:
    section.add "X-Amz-Credential", valid_615239
  var valid_615240 = header.getOrDefault("X-Amz-Security-Token")
  valid_615240 = validateParameter(valid_615240, JString, required = false,
                                 default = nil)
  if valid_615240 != nil:
    section.add "X-Amz-Security-Token", valid_615240
  var valid_615241 = header.getOrDefault("X-Amz-Algorithm")
  valid_615241 = validateParameter(valid_615241, JString, required = false,
                                 default = nil)
  if valid_615241 != nil:
    section.add "X-Amz-Algorithm", valid_615241
  var valid_615242 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615242 = validateParameter(valid_615242, JString, required = false,
                                 default = nil)
  if valid_615242 != nil:
    section.add "X-Amz-SignedHeaders", valid_615242
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615243: Call_GetDescribeCustomAvailabilityZones_615227;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_615243.validator(path, query, header, formData, body)
  let scheme = call_615243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615243.url(scheme.get, call_615243.host, call_615243.base,
                         call_615243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615243, url, valid)

proc call*(call_615244: Call_GetDescribeCustomAvailabilityZones_615227;
          Marker: string = ""; CustomAvailabilityZoneId: string = "";
          Action: string = "DescribeCustomAvailabilityZones";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615245 = newJObject()
  add(query_615245, "Marker", newJString(Marker))
  add(query_615245, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_615245, "Action", newJString(Action))
  add(query_615245, "Version", newJString(Version))
  if Filters != nil:
    query_615245.add "Filters", Filters
  add(query_615245, "MaxRecords", newJInt(MaxRecords))
  result = call_615244.call(nil, query_615245, nil, nil, nil)

var getDescribeCustomAvailabilityZones* = Call_GetDescribeCustomAvailabilityZones_615227(
    name: "getDescribeCustomAvailabilityZones", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_GetDescribeCustomAvailabilityZones_615228, base: "/",
    url: url_GetDescribeCustomAvailabilityZones_615229,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterBacktracks_615286 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBClusterBacktracks_615288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterBacktracks_615287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615289 = query.getOrDefault("Action")
  valid_615289 = validateParameter(valid_615289, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_615289 != nil:
    section.add "Action", valid_615289
  var valid_615290 = query.getOrDefault("Version")
  valid_615290 = validateParameter(valid_615290, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615290 != nil:
    section.add "Version", valid_615290
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615291 = header.getOrDefault("X-Amz-Signature")
  valid_615291 = validateParameter(valid_615291, JString, required = false,
                                 default = nil)
  if valid_615291 != nil:
    section.add "X-Amz-Signature", valid_615291
  var valid_615292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615292 = validateParameter(valid_615292, JString, required = false,
                                 default = nil)
  if valid_615292 != nil:
    section.add "X-Amz-Content-Sha256", valid_615292
  var valid_615293 = header.getOrDefault("X-Amz-Date")
  valid_615293 = validateParameter(valid_615293, JString, required = false,
                                 default = nil)
  if valid_615293 != nil:
    section.add "X-Amz-Date", valid_615293
  var valid_615294 = header.getOrDefault("X-Amz-Credential")
  valid_615294 = validateParameter(valid_615294, JString, required = false,
                                 default = nil)
  if valid_615294 != nil:
    section.add "X-Amz-Credential", valid_615294
  var valid_615295 = header.getOrDefault("X-Amz-Security-Token")
  valid_615295 = validateParameter(valid_615295, JString, required = false,
                                 default = nil)
  if valid_615295 != nil:
    section.add "X-Amz-Security-Token", valid_615295
  var valid_615296 = header.getOrDefault("X-Amz-Algorithm")
  valid_615296 = validateParameter(valid_615296, JString, required = false,
                                 default = nil)
  if valid_615296 != nil:
    section.add "X-Amz-Algorithm", valid_615296
  var valid_615297 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615297 = validateParameter(valid_615297, JString, required = false,
                                 default = nil)
  if valid_615297 != nil:
    section.add "X-Amz-SignedHeaders", valid_615297
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_615298 = formData.getOrDefault("MaxRecords")
  valid_615298 = validateParameter(valid_615298, JInt, required = false, default = nil)
  if valid_615298 != nil:
    section.add "MaxRecords", valid_615298
  var valid_615299 = formData.getOrDefault("Marker")
  valid_615299 = validateParameter(valid_615299, JString, required = false,
                                 default = nil)
  if valid_615299 != nil:
    section.add "Marker", valid_615299
  var valid_615300 = formData.getOrDefault("BacktrackIdentifier")
  valid_615300 = validateParameter(valid_615300, JString, required = false,
                                 default = nil)
  if valid_615300 != nil:
    section.add "BacktrackIdentifier", valid_615300
  var valid_615301 = formData.getOrDefault("Filters")
  valid_615301 = validateParameter(valid_615301, JArray, required = false,
                                 default = nil)
  if valid_615301 != nil:
    section.add "Filters", valid_615301
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_615302 = formData.getOrDefault("DBClusterIdentifier")
  valid_615302 = validateParameter(valid_615302, JString, required = true,
                                 default = nil)
  if valid_615302 != nil:
    section.add "DBClusterIdentifier", valid_615302
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615303: Call_PostDescribeDBClusterBacktracks_615286;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615303.validator(path, query, header, formData, body)
  let scheme = call_615303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615303.url(scheme.get, call_615303.host, call_615303.base,
                         call_615303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615303, url, valid)

proc call*(call_615304: Call_PostDescribeDBClusterBacktracks_615286;
          DBClusterIdentifier: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_615305 = newJObject()
  var formData_615306 = newJObject()
  add(formData_615306, "MaxRecords", newJInt(MaxRecords))
  add(formData_615306, "Marker", newJString(Marker))
  add(query_615305, "Action", newJString(Action))
  add(formData_615306, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  if Filters != nil:
    formData_615306.add "Filters", Filters
  add(query_615305, "Version", newJString(Version))
  add(formData_615306, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_615304.call(nil, query_615305, nil, formData_615306, nil)

var postDescribeDBClusterBacktracks* = Call_PostDescribeDBClusterBacktracks_615286(
    name: "postDescribeDBClusterBacktracks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_PostDescribeDBClusterBacktracks_615287, base: "/",
    url: url_PostDescribeDBClusterBacktracks_615288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterBacktracks_615266 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBClusterBacktracks_615268(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterBacktracks_615267(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615269 = query.getOrDefault("Marker")
  valid_615269 = validateParameter(valid_615269, JString, required = false,
                                 default = nil)
  if valid_615269 != nil:
    section.add "Marker", valid_615269
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_615270 = query.getOrDefault("DBClusterIdentifier")
  valid_615270 = validateParameter(valid_615270, JString, required = true,
                                 default = nil)
  if valid_615270 != nil:
    section.add "DBClusterIdentifier", valid_615270
  var valid_615271 = query.getOrDefault("BacktrackIdentifier")
  valid_615271 = validateParameter(valid_615271, JString, required = false,
                                 default = nil)
  if valid_615271 != nil:
    section.add "BacktrackIdentifier", valid_615271
  var valid_615272 = query.getOrDefault("Action")
  valid_615272 = validateParameter(valid_615272, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_615272 != nil:
    section.add "Action", valid_615272
  var valid_615273 = query.getOrDefault("Version")
  valid_615273 = validateParameter(valid_615273, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615273 != nil:
    section.add "Version", valid_615273
  var valid_615274 = query.getOrDefault("Filters")
  valid_615274 = validateParameter(valid_615274, JArray, required = false,
                                 default = nil)
  if valid_615274 != nil:
    section.add "Filters", valid_615274
  var valid_615275 = query.getOrDefault("MaxRecords")
  valid_615275 = validateParameter(valid_615275, JInt, required = false, default = nil)
  if valid_615275 != nil:
    section.add "MaxRecords", valid_615275
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615276 = header.getOrDefault("X-Amz-Signature")
  valid_615276 = validateParameter(valid_615276, JString, required = false,
                                 default = nil)
  if valid_615276 != nil:
    section.add "X-Amz-Signature", valid_615276
  var valid_615277 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615277 = validateParameter(valid_615277, JString, required = false,
                                 default = nil)
  if valid_615277 != nil:
    section.add "X-Amz-Content-Sha256", valid_615277
  var valid_615278 = header.getOrDefault("X-Amz-Date")
  valid_615278 = validateParameter(valid_615278, JString, required = false,
                                 default = nil)
  if valid_615278 != nil:
    section.add "X-Amz-Date", valid_615278
  var valid_615279 = header.getOrDefault("X-Amz-Credential")
  valid_615279 = validateParameter(valid_615279, JString, required = false,
                                 default = nil)
  if valid_615279 != nil:
    section.add "X-Amz-Credential", valid_615279
  var valid_615280 = header.getOrDefault("X-Amz-Security-Token")
  valid_615280 = validateParameter(valid_615280, JString, required = false,
                                 default = nil)
  if valid_615280 != nil:
    section.add "X-Amz-Security-Token", valid_615280
  var valid_615281 = header.getOrDefault("X-Amz-Algorithm")
  valid_615281 = validateParameter(valid_615281, JString, required = false,
                                 default = nil)
  if valid_615281 != nil:
    section.add "X-Amz-Algorithm", valid_615281
  var valid_615282 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615282 = validateParameter(valid_615282, JString, required = false,
                                 default = nil)
  if valid_615282 != nil:
    section.add "X-Amz-SignedHeaders", valid_615282
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615283: Call_GetDescribeDBClusterBacktracks_615266; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615283.validator(path, query, header, formData, body)
  let scheme = call_615283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615283.url(scheme.get, call_615283.host, call_615283.base,
                         call_615283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615283, url, valid)

proc call*(call_615284: Call_GetDescribeDBClusterBacktracks_615266;
          DBClusterIdentifier: string; Marker: string = "";
          BacktrackIdentifier: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615285 = newJObject()
  add(query_615285, "Marker", newJString(Marker))
  add(query_615285, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_615285, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  add(query_615285, "Action", newJString(Action))
  add(query_615285, "Version", newJString(Version))
  if Filters != nil:
    query_615285.add "Filters", Filters
  add(query_615285, "MaxRecords", newJInt(MaxRecords))
  result = call_615284.call(nil, query_615285, nil, nil, nil)

var getDescribeDBClusterBacktracks* = Call_GetDescribeDBClusterBacktracks_615266(
    name: "getDescribeDBClusterBacktracks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_GetDescribeDBClusterBacktracks_615267, base: "/",
    url: url_GetDescribeDBClusterBacktracks_615268,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterEndpoints_615327 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBClusterEndpoints_615329(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterEndpoints_615328(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615330 = query.getOrDefault("Action")
  valid_615330 = validateParameter(valid_615330, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_615330 != nil:
    section.add "Action", valid_615330
  var valid_615331 = query.getOrDefault("Version")
  valid_615331 = validateParameter(valid_615331, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615331 != nil:
    section.add "Version", valid_615331
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615332 = header.getOrDefault("X-Amz-Signature")
  valid_615332 = validateParameter(valid_615332, JString, required = false,
                                 default = nil)
  if valid_615332 != nil:
    section.add "X-Amz-Signature", valid_615332
  var valid_615333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615333 = validateParameter(valid_615333, JString, required = false,
                                 default = nil)
  if valid_615333 != nil:
    section.add "X-Amz-Content-Sha256", valid_615333
  var valid_615334 = header.getOrDefault("X-Amz-Date")
  valid_615334 = validateParameter(valid_615334, JString, required = false,
                                 default = nil)
  if valid_615334 != nil:
    section.add "X-Amz-Date", valid_615334
  var valid_615335 = header.getOrDefault("X-Amz-Credential")
  valid_615335 = validateParameter(valid_615335, JString, required = false,
                                 default = nil)
  if valid_615335 != nil:
    section.add "X-Amz-Credential", valid_615335
  var valid_615336 = header.getOrDefault("X-Amz-Security-Token")
  valid_615336 = validateParameter(valid_615336, JString, required = false,
                                 default = nil)
  if valid_615336 != nil:
    section.add "X-Amz-Security-Token", valid_615336
  var valid_615337 = header.getOrDefault("X-Amz-Algorithm")
  valid_615337 = validateParameter(valid_615337, JString, required = false,
                                 default = nil)
  if valid_615337 != nil:
    section.add "X-Amz-Algorithm", valid_615337
  var valid_615338 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615338 = validateParameter(valid_615338, JString, required = false,
                                 default = nil)
  if valid_615338 != nil:
    section.add "X-Amz-SignedHeaders", valid_615338
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_615339 = formData.getOrDefault("MaxRecords")
  valid_615339 = validateParameter(valid_615339, JInt, required = false, default = nil)
  if valid_615339 != nil:
    section.add "MaxRecords", valid_615339
  var valid_615340 = formData.getOrDefault("Marker")
  valid_615340 = validateParameter(valid_615340, JString, required = false,
                                 default = nil)
  if valid_615340 != nil:
    section.add "Marker", valid_615340
  var valid_615341 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_615341 = validateParameter(valid_615341, JString, required = false,
                                 default = nil)
  if valid_615341 != nil:
    section.add "DBClusterEndpointIdentifier", valid_615341
  var valid_615342 = formData.getOrDefault("Filters")
  valid_615342 = validateParameter(valid_615342, JArray, required = false,
                                 default = nil)
  if valid_615342 != nil:
    section.add "Filters", valid_615342
  var valid_615343 = formData.getOrDefault("DBClusterIdentifier")
  valid_615343 = validateParameter(valid_615343, JString, required = false,
                                 default = nil)
  if valid_615343 != nil:
    section.add "DBClusterIdentifier", valid_615343
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615344: Call_PostDescribeDBClusterEndpoints_615327; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615344.validator(path, query, header, formData, body)
  let scheme = call_615344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615344.url(scheme.get, call_615344.host, call_615344.base,
                         call_615344.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615344, url, valid)

proc call*(call_615345: Call_PostDescribeDBClusterEndpoints_615327;
          MaxRecords: int = 0; Marker: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_615346 = newJObject()
  var formData_615347 = newJObject()
  add(formData_615347, "MaxRecords", newJInt(MaxRecords))
  add(formData_615347, "Marker", newJString(Marker))
  add(formData_615347, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_615346, "Action", newJString(Action))
  if Filters != nil:
    formData_615347.add "Filters", Filters
  add(query_615346, "Version", newJString(Version))
  add(formData_615347, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_615345.call(nil, query_615346, nil, formData_615347, nil)

var postDescribeDBClusterEndpoints* = Call_PostDescribeDBClusterEndpoints_615327(
    name: "postDescribeDBClusterEndpoints", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_PostDescribeDBClusterEndpoints_615328, base: "/",
    url: url_PostDescribeDBClusterEndpoints_615329,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterEndpoints_615307 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBClusterEndpoints_615309(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterEndpoints_615308(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615310 = query.getOrDefault("Marker")
  valid_615310 = validateParameter(valid_615310, JString, required = false,
                                 default = nil)
  if valid_615310 != nil:
    section.add "Marker", valid_615310
  var valid_615311 = query.getOrDefault("DBClusterIdentifier")
  valid_615311 = validateParameter(valid_615311, JString, required = false,
                                 default = nil)
  if valid_615311 != nil:
    section.add "DBClusterIdentifier", valid_615311
  var valid_615312 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_615312 = validateParameter(valid_615312, JString, required = false,
                                 default = nil)
  if valid_615312 != nil:
    section.add "DBClusterEndpointIdentifier", valid_615312
  var valid_615313 = query.getOrDefault("Action")
  valid_615313 = validateParameter(valid_615313, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_615313 != nil:
    section.add "Action", valid_615313
  var valid_615314 = query.getOrDefault("Version")
  valid_615314 = validateParameter(valid_615314, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615314 != nil:
    section.add "Version", valid_615314
  var valid_615315 = query.getOrDefault("Filters")
  valid_615315 = validateParameter(valid_615315, JArray, required = false,
                                 default = nil)
  if valid_615315 != nil:
    section.add "Filters", valid_615315
  var valid_615316 = query.getOrDefault("MaxRecords")
  valid_615316 = validateParameter(valid_615316, JInt, required = false, default = nil)
  if valid_615316 != nil:
    section.add "MaxRecords", valid_615316
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615317 = header.getOrDefault("X-Amz-Signature")
  valid_615317 = validateParameter(valid_615317, JString, required = false,
                                 default = nil)
  if valid_615317 != nil:
    section.add "X-Amz-Signature", valid_615317
  var valid_615318 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615318 = validateParameter(valid_615318, JString, required = false,
                                 default = nil)
  if valid_615318 != nil:
    section.add "X-Amz-Content-Sha256", valid_615318
  var valid_615319 = header.getOrDefault("X-Amz-Date")
  valid_615319 = validateParameter(valid_615319, JString, required = false,
                                 default = nil)
  if valid_615319 != nil:
    section.add "X-Amz-Date", valid_615319
  var valid_615320 = header.getOrDefault("X-Amz-Credential")
  valid_615320 = validateParameter(valid_615320, JString, required = false,
                                 default = nil)
  if valid_615320 != nil:
    section.add "X-Amz-Credential", valid_615320
  var valid_615321 = header.getOrDefault("X-Amz-Security-Token")
  valid_615321 = validateParameter(valid_615321, JString, required = false,
                                 default = nil)
  if valid_615321 != nil:
    section.add "X-Amz-Security-Token", valid_615321
  var valid_615322 = header.getOrDefault("X-Amz-Algorithm")
  valid_615322 = validateParameter(valid_615322, JString, required = false,
                                 default = nil)
  if valid_615322 != nil:
    section.add "X-Amz-Algorithm", valid_615322
  var valid_615323 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615323 = validateParameter(valid_615323, JString, required = false,
                                 default = nil)
  if valid_615323 != nil:
    section.add "X-Amz-SignedHeaders", valid_615323
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615324: Call_GetDescribeDBClusterEndpoints_615307; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615324.validator(path, query, header, formData, body)
  let scheme = call_615324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615324.url(scheme.get, call_615324.host, call_615324.base,
                         call_615324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615324, url, valid)

proc call*(call_615325: Call_GetDescribeDBClusterEndpoints_615307;
          Marker: string = ""; DBClusterIdentifier: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615326 = newJObject()
  add(query_615326, "Marker", newJString(Marker))
  add(query_615326, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_615326, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_615326, "Action", newJString(Action))
  add(query_615326, "Version", newJString(Version))
  if Filters != nil:
    query_615326.add "Filters", Filters
  add(query_615326, "MaxRecords", newJInt(MaxRecords))
  result = call_615325.call(nil, query_615326, nil, nil, nil)

var getDescribeDBClusterEndpoints* = Call_GetDescribeDBClusterEndpoints_615307(
    name: "getDescribeDBClusterEndpoints", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_GetDescribeDBClusterEndpoints_615308, base: "/",
    url: url_GetDescribeDBClusterEndpoints_615309,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_615367 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBClusterParameterGroups_615369(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_615368(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615370 = query.getOrDefault("Action")
  valid_615370 = validateParameter(valid_615370, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_615370 != nil:
    section.add "Action", valid_615370
  var valid_615371 = query.getOrDefault("Version")
  valid_615371 = validateParameter(valid_615371, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615371 != nil:
    section.add "Version", valid_615371
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615372 = header.getOrDefault("X-Amz-Signature")
  valid_615372 = validateParameter(valid_615372, JString, required = false,
                                 default = nil)
  if valid_615372 != nil:
    section.add "X-Amz-Signature", valid_615372
  var valid_615373 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615373 = validateParameter(valid_615373, JString, required = false,
                                 default = nil)
  if valid_615373 != nil:
    section.add "X-Amz-Content-Sha256", valid_615373
  var valid_615374 = header.getOrDefault("X-Amz-Date")
  valid_615374 = validateParameter(valid_615374, JString, required = false,
                                 default = nil)
  if valid_615374 != nil:
    section.add "X-Amz-Date", valid_615374
  var valid_615375 = header.getOrDefault("X-Amz-Credential")
  valid_615375 = validateParameter(valid_615375, JString, required = false,
                                 default = nil)
  if valid_615375 != nil:
    section.add "X-Amz-Credential", valid_615375
  var valid_615376 = header.getOrDefault("X-Amz-Security-Token")
  valid_615376 = validateParameter(valid_615376, JString, required = false,
                                 default = nil)
  if valid_615376 != nil:
    section.add "X-Amz-Security-Token", valid_615376
  var valid_615377 = header.getOrDefault("X-Amz-Algorithm")
  valid_615377 = validateParameter(valid_615377, JString, required = false,
                                 default = nil)
  if valid_615377 != nil:
    section.add "X-Amz-Algorithm", valid_615377
  var valid_615378 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615378 = validateParameter(valid_615378, JString, required = false,
                                 default = nil)
  if valid_615378 != nil:
    section.add "X-Amz-SignedHeaders", valid_615378
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_615379 = formData.getOrDefault("MaxRecords")
  valid_615379 = validateParameter(valid_615379, JInt, required = false, default = nil)
  if valid_615379 != nil:
    section.add "MaxRecords", valid_615379
  var valid_615380 = formData.getOrDefault("Marker")
  valid_615380 = validateParameter(valid_615380, JString, required = false,
                                 default = nil)
  if valid_615380 != nil:
    section.add "Marker", valid_615380
  var valid_615381 = formData.getOrDefault("Filters")
  valid_615381 = validateParameter(valid_615381, JArray, required = false,
                                 default = nil)
  if valid_615381 != nil:
    section.add "Filters", valid_615381
  var valid_615382 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_615382 = validateParameter(valid_615382, JString, required = false,
                                 default = nil)
  if valid_615382 != nil:
    section.add "DBClusterParameterGroupName", valid_615382
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615383: Call_PostDescribeDBClusterParameterGroups_615367;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615383.validator(path, query, header, formData, body)
  let scheme = call_615383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615383.url(scheme.get, call_615383.host, call_615383.base,
                         call_615383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615383, url, valid)

proc call*(call_615384: Call_PostDescribeDBClusterParameterGroups_615367;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Filters: JsonNode = nil; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_615385 = newJObject()
  var formData_615386 = newJObject()
  add(formData_615386, "MaxRecords", newJInt(MaxRecords))
  add(formData_615386, "Marker", newJString(Marker))
  add(query_615385, "Action", newJString(Action))
  if Filters != nil:
    formData_615386.add "Filters", Filters
  add(formData_615386, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615385, "Version", newJString(Version))
  result = call_615384.call(nil, query_615385, nil, formData_615386, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_615367(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_615368, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_615369,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_615348 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBClusterParameterGroups_615350(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_615349(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615351 = query.getOrDefault("Marker")
  valid_615351 = validateParameter(valid_615351, JString, required = false,
                                 default = nil)
  if valid_615351 != nil:
    section.add "Marker", valid_615351
  var valid_615352 = query.getOrDefault("DBClusterParameterGroupName")
  valid_615352 = validateParameter(valid_615352, JString, required = false,
                                 default = nil)
  if valid_615352 != nil:
    section.add "DBClusterParameterGroupName", valid_615352
  var valid_615353 = query.getOrDefault("Action")
  valid_615353 = validateParameter(valid_615353, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_615353 != nil:
    section.add "Action", valid_615353
  var valid_615354 = query.getOrDefault("Version")
  valid_615354 = validateParameter(valid_615354, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615354 != nil:
    section.add "Version", valid_615354
  var valid_615355 = query.getOrDefault("Filters")
  valid_615355 = validateParameter(valid_615355, JArray, required = false,
                                 default = nil)
  if valid_615355 != nil:
    section.add "Filters", valid_615355
  var valid_615356 = query.getOrDefault("MaxRecords")
  valid_615356 = validateParameter(valid_615356, JInt, required = false, default = nil)
  if valid_615356 != nil:
    section.add "MaxRecords", valid_615356
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615357 = header.getOrDefault("X-Amz-Signature")
  valid_615357 = validateParameter(valid_615357, JString, required = false,
                                 default = nil)
  if valid_615357 != nil:
    section.add "X-Amz-Signature", valid_615357
  var valid_615358 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615358 = validateParameter(valid_615358, JString, required = false,
                                 default = nil)
  if valid_615358 != nil:
    section.add "X-Amz-Content-Sha256", valid_615358
  var valid_615359 = header.getOrDefault("X-Amz-Date")
  valid_615359 = validateParameter(valid_615359, JString, required = false,
                                 default = nil)
  if valid_615359 != nil:
    section.add "X-Amz-Date", valid_615359
  var valid_615360 = header.getOrDefault("X-Amz-Credential")
  valid_615360 = validateParameter(valid_615360, JString, required = false,
                                 default = nil)
  if valid_615360 != nil:
    section.add "X-Amz-Credential", valid_615360
  var valid_615361 = header.getOrDefault("X-Amz-Security-Token")
  valid_615361 = validateParameter(valid_615361, JString, required = false,
                                 default = nil)
  if valid_615361 != nil:
    section.add "X-Amz-Security-Token", valid_615361
  var valid_615362 = header.getOrDefault("X-Amz-Algorithm")
  valid_615362 = validateParameter(valid_615362, JString, required = false,
                                 default = nil)
  if valid_615362 != nil:
    section.add "X-Amz-Algorithm", valid_615362
  var valid_615363 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615363 = validateParameter(valid_615363, JString, required = false,
                                 default = nil)
  if valid_615363 != nil:
    section.add "X-Amz-SignedHeaders", valid_615363
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615364: Call_GetDescribeDBClusterParameterGroups_615348;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615364.validator(path, query, header, formData, body)
  let scheme = call_615364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615364.url(scheme.get, call_615364.host, call_615364.base,
                         call_615364.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615364, url, valid)

proc call*(call_615365: Call_GetDescribeDBClusterParameterGroups_615348;
          Marker: string = ""; DBClusterParameterGroupName: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615366 = newJObject()
  add(query_615366, "Marker", newJString(Marker))
  add(query_615366, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615366, "Action", newJString(Action))
  add(query_615366, "Version", newJString(Version))
  if Filters != nil:
    query_615366.add "Filters", Filters
  add(query_615366, "MaxRecords", newJInt(MaxRecords))
  result = call_615365.call(nil, query_615366, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_615348(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_615349, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_615350,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_615407 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBClusterParameters_615409(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameters_615408(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615410 = query.getOrDefault("Action")
  valid_615410 = validateParameter(valid_615410, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_615410 != nil:
    section.add "Action", valid_615410
  var valid_615411 = query.getOrDefault("Version")
  valid_615411 = validateParameter(valid_615411, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615411 != nil:
    section.add "Version", valid_615411
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615412 = header.getOrDefault("X-Amz-Signature")
  valid_615412 = validateParameter(valid_615412, JString, required = false,
                                 default = nil)
  if valid_615412 != nil:
    section.add "X-Amz-Signature", valid_615412
  var valid_615413 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615413 = validateParameter(valid_615413, JString, required = false,
                                 default = nil)
  if valid_615413 != nil:
    section.add "X-Amz-Content-Sha256", valid_615413
  var valid_615414 = header.getOrDefault("X-Amz-Date")
  valid_615414 = validateParameter(valid_615414, JString, required = false,
                                 default = nil)
  if valid_615414 != nil:
    section.add "X-Amz-Date", valid_615414
  var valid_615415 = header.getOrDefault("X-Amz-Credential")
  valid_615415 = validateParameter(valid_615415, JString, required = false,
                                 default = nil)
  if valid_615415 != nil:
    section.add "X-Amz-Credential", valid_615415
  var valid_615416 = header.getOrDefault("X-Amz-Security-Token")
  valid_615416 = validateParameter(valid_615416, JString, required = false,
                                 default = nil)
  if valid_615416 != nil:
    section.add "X-Amz-Security-Token", valid_615416
  var valid_615417 = header.getOrDefault("X-Amz-Algorithm")
  valid_615417 = validateParameter(valid_615417, JString, required = false,
                                 default = nil)
  if valid_615417 != nil:
    section.add "X-Amz-Algorithm", valid_615417
  var valid_615418 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615418 = validateParameter(valid_615418, JString, required = false,
                                 default = nil)
  if valid_615418 != nil:
    section.add "X-Amz-SignedHeaders", valid_615418
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_615419 = formData.getOrDefault("Source")
  valid_615419 = validateParameter(valid_615419, JString, required = false,
                                 default = nil)
  if valid_615419 != nil:
    section.add "Source", valid_615419
  var valid_615420 = formData.getOrDefault("MaxRecords")
  valid_615420 = validateParameter(valid_615420, JInt, required = false, default = nil)
  if valid_615420 != nil:
    section.add "MaxRecords", valid_615420
  var valid_615421 = formData.getOrDefault("Marker")
  valid_615421 = validateParameter(valid_615421, JString, required = false,
                                 default = nil)
  if valid_615421 != nil:
    section.add "Marker", valid_615421
  var valid_615422 = formData.getOrDefault("Filters")
  valid_615422 = validateParameter(valid_615422, JArray, required = false,
                                 default = nil)
  if valid_615422 != nil:
    section.add "Filters", valid_615422
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_615423 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_615423 = validateParameter(valid_615423, JString, required = true,
                                 default = nil)
  if valid_615423 != nil:
    section.add "DBClusterParameterGroupName", valid_615423
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615424: Call_PostDescribeDBClusterParameters_615407;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615424.validator(path, query, header, formData, body)
  let scheme = call_615424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615424.url(scheme.get, call_615424.host, call_615424.base,
                         call_615424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615424, url, valid)

proc call*(call_615425: Call_PostDescribeDBClusterParameters_615407;
          DBClusterParameterGroupName: string; Source: string = "";
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_615426 = newJObject()
  var formData_615427 = newJObject()
  add(formData_615427, "Source", newJString(Source))
  add(formData_615427, "MaxRecords", newJInt(MaxRecords))
  add(formData_615427, "Marker", newJString(Marker))
  add(query_615426, "Action", newJString(Action))
  if Filters != nil:
    formData_615427.add "Filters", Filters
  add(formData_615427, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615426, "Version", newJString(Version))
  result = call_615425.call(nil, query_615426, nil, formData_615427, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_615407(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_615408, base: "/",
    url: url_PostDescribeDBClusterParameters_615409,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_615387 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBClusterParameters_615389(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameters_615388(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615390 = query.getOrDefault("Marker")
  valid_615390 = validateParameter(valid_615390, JString, required = false,
                                 default = nil)
  if valid_615390 != nil:
    section.add "Marker", valid_615390
  var valid_615391 = query.getOrDefault("Source")
  valid_615391 = validateParameter(valid_615391, JString, required = false,
                                 default = nil)
  if valid_615391 != nil:
    section.add "Source", valid_615391
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_615392 = query.getOrDefault("DBClusterParameterGroupName")
  valid_615392 = validateParameter(valid_615392, JString, required = true,
                                 default = nil)
  if valid_615392 != nil:
    section.add "DBClusterParameterGroupName", valid_615392
  var valid_615393 = query.getOrDefault("Action")
  valid_615393 = validateParameter(valid_615393, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_615393 != nil:
    section.add "Action", valid_615393
  var valid_615394 = query.getOrDefault("Version")
  valid_615394 = validateParameter(valid_615394, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615394 != nil:
    section.add "Version", valid_615394
  var valid_615395 = query.getOrDefault("Filters")
  valid_615395 = validateParameter(valid_615395, JArray, required = false,
                                 default = nil)
  if valid_615395 != nil:
    section.add "Filters", valid_615395
  var valid_615396 = query.getOrDefault("MaxRecords")
  valid_615396 = validateParameter(valid_615396, JInt, required = false, default = nil)
  if valid_615396 != nil:
    section.add "MaxRecords", valid_615396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615397 = header.getOrDefault("X-Amz-Signature")
  valid_615397 = validateParameter(valid_615397, JString, required = false,
                                 default = nil)
  if valid_615397 != nil:
    section.add "X-Amz-Signature", valid_615397
  var valid_615398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615398 = validateParameter(valid_615398, JString, required = false,
                                 default = nil)
  if valid_615398 != nil:
    section.add "X-Amz-Content-Sha256", valid_615398
  var valid_615399 = header.getOrDefault("X-Amz-Date")
  valid_615399 = validateParameter(valid_615399, JString, required = false,
                                 default = nil)
  if valid_615399 != nil:
    section.add "X-Amz-Date", valid_615399
  var valid_615400 = header.getOrDefault("X-Amz-Credential")
  valid_615400 = validateParameter(valid_615400, JString, required = false,
                                 default = nil)
  if valid_615400 != nil:
    section.add "X-Amz-Credential", valid_615400
  var valid_615401 = header.getOrDefault("X-Amz-Security-Token")
  valid_615401 = validateParameter(valid_615401, JString, required = false,
                                 default = nil)
  if valid_615401 != nil:
    section.add "X-Amz-Security-Token", valid_615401
  var valid_615402 = header.getOrDefault("X-Amz-Algorithm")
  valid_615402 = validateParameter(valid_615402, JString, required = false,
                                 default = nil)
  if valid_615402 != nil:
    section.add "X-Amz-Algorithm", valid_615402
  var valid_615403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615403 = validateParameter(valid_615403, JString, required = false,
                                 default = nil)
  if valid_615403 != nil:
    section.add "X-Amz-SignedHeaders", valid_615403
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615404: Call_GetDescribeDBClusterParameters_615387; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615404.validator(path, query, header, formData, body)
  let scheme = call_615404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615404.url(scheme.get, call_615404.host, call_615404.base,
                         call_615404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615404, url, valid)

proc call*(call_615405: Call_GetDescribeDBClusterParameters_615387;
          DBClusterParameterGroupName: string; Marker: string = "";
          Source: string = ""; Action: string = "DescribeDBClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615406 = newJObject()
  add(query_615406, "Marker", newJString(Marker))
  add(query_615406, "Source", newJString(Source))
  add(query_615406, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_615406, "Action", newJString(Action))
  add(query_615406, "Version", newJString(Version))
  if Filters != nil:
    query_615406.add "Filters", Filters
  add(query_615406, "MaxRecords", newJInt(MaxRecords))
  result = call_615405.call(nil, query_615406, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_615387(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_615388, base: "/",
    url: url_GetDescribeDBClusterParameters_615389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_615444 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBClusterSnapshotAttributes_615446(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_615445(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615447 = query.getOrDefault("Action")
  valid_615447 = validateParameter(valid_615447, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_615447 != nil:
    section.add "Action", valid_615447
  var valid_615448 = query.getOrDefault("Version")
  valid_615448 = validateParameter(valid_615448, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615448 != nil:
    section.add "Version", valid_615448
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615449 = header.getOrDefault("X-Amz-Signature")
  valid_615449 = validateParameter(valid_615449, JString, required = false,
                                 default = nil)
  if valid_615449 != nil:
    section.add "X-Amz-Signature", valid_615449
  var valid_615450 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615450 = validateParameter(valid_615450, JString, required = false,
                                 default = nil)
  if valid_615450 != nil:
    section.add "X-Amz-Content-Sha256", valid_615450
  var valid_615451 = header.getOrDefault("X-Amz-Date")
  valid_615451 = validateParameter(valid_615451, JString, required = false,
                                 default = nil)
  if valid_615451 != nil:
    section.add "X-Amz-Date", valid_615451
  var valid_615452 = header.getOrDefault("X-Amz-Credential")
  valid_615452 = validateParameter(valid_615452, JString, required = false,
                                 default = nil)
  if valid_615452 != nil:
    section.add "X-Amz-Credential", valid_615452
  var valid_615453 = header.getOrDefault("X-Amz-Security-Token")
  valid_615453 = validateParameter(valid_615453, JString, required = false,
                                 default = nil)
  if valid_615453 != nil:
    section.add "X-Amz-Security-Token", valid_615453
  var valid_615454 = header.getOrDefault("X-Amz-Algorithm")
  valid_615454 = validateParameter(valid_615454, JString, required = false,
                                 default = nil)
  if valid_615454 != nil:
    section.add "X-Amz-Algorithm", valid_615454
  var valid_615455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615455 = validateParameter(valid_615455, JString, required = false,
                                 default = nil)
  if valid_615455 != nil:
    section.add "X-Amz-SignedHeaders", valid_615455
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_615456 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_615456 = validateParameter(valid_615456, JString, required = true,
                                 default = nil)
  if valid_615456 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_615456
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615457: Call_PostDescribeDBClusterSnapshotAttributes_615444;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615457.validator(path, query, header, formData, body)
  let scheme = call_615457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615457.url(scheme.get, call_615457.host, call_615457.base,
                         call_615457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615457, url, valid)

proc call*(call_615458: Call_PostDescribeDBClusterSnapshotAttributes_615444;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615459 = newJObject()
  var formData_615460 = newJObject()
  add(formData_615460, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_615459, "Action", newJString(Action))
  add(query_615459, "Version", newJString(Version))
  result = call_615458.call(nil, query_615459, nil, formData_615460, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_615444(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_615445, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_615446,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_615428 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBClusterSnapshotAttributes_615430(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_615429(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_615431 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_615431 = validateParameter(valid_615431, JString, required = true,
                                 default = nil)
  if valid_615431 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_615431
  var valid_615432 = query.getOrDefault("Action")
  valid_615432 = validateParameter(valid_615432, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_615432 != nil:
    section.add "Action", valid_615432
  var valid_615433 = query.getOrDefault("Version")
  valid_615433 = validateParameter(valid_615433, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615433 != nil:
    section.add "Version", valid_615433
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615434 = header.getOrDefault("X-Amz-Signature")
  valid_615434 = validateParameter(valid_615434, JString, required = false,
                                 default = nil)
  if valid_615434 != nil:
    section.add "X-Amz-Signature", valid_615434
  var valid_615435 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615435 = validateParameter(valid_615435, JString, required = false,
                                 default = nil)
  if valid_615435 != nil:
    section.add "X-Amz-Content-Sha256", valid_615435
  var valid_615436 = header.getOrDefault("X-Amz-Date")
  valid_615436 = validateParameter(valid_615436, JString, required = false,
                                 default = nil)
  if valid_615436 != nil:
    section.add "X-Amz-Date", valid_615436
  var valid_615437 = header.getOrDefault("X-Amz-Credential")
  valid_615437 = validateParameter(valid_615437, JString, required = false,
                                 default = nil)
  if valid_615437 != nil:
    section.add "X-Amz-Credential", valid_615437
  var valid_615438 = header.getOrDefault("X-Amz-Security-Token")
  valid_615438 = validateParameter(valid_615438, JString, required = false,
                                 default = nil)
  if valid_615438 != nil:
    section.add "X-Amz-Security-Token", valid_615438
  var valid_615439 = header.getOrDefault("X-Amz-Algorithm")
  valid_615439 = validateParameter(valid_615439, JString, required = false,
                                 default = nil)
  if valid_615439 != nil:
    section.add "X-Amz-Algorithm", valid_615439
  var valid_615440 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615440 = validateParameter(valid_615440, JString, required = false,
                                 default = nil)
  if valid_615440 != nil:
    section.add "X-Amz-SignedHeaders", valid_615440
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615441: Call_GetDescribeDBClusterSnapshotAttributes_615428;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615441.validator(path, query, header, formData, body)
  let scheme = call_615441.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615441.url(scheme.get, call_615441.host, call_615441.base,
                         call_615441.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615441, url, valid)

proc call*(call_615442: Call_GetDescribeDBClusterSnapshotAttributes_615428;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615443 = newJObject()
  add(query_615443, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_615443, "Action", newJString(Action))
  add(query_615443, "Version", newJString(Version))
  result = call_615442.call(nil, query_615443, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_615428(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_615429, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_615430,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_615484 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBClusterSnapshots_615486(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_615485(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615487 = query.getOrDefault("Action")
  valid_615487 = validateParameter(valid_615487, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_615487 != nil:
    section.add "Action", valid_615487
  var valid_615488 = query.getOrDefault("Version")
  valid_615488 = validateParameter(valid_615488, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615488 != nil:
    section.add "Version", valid_615488
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615489 = header.getOrDefault("X-Amz-Signature")
  valid_615489 = validateParameter(valid_615489, JString, required = false,
                                 default = nil)
  if valid_615489 != nil:
    section.add "X-Amz-Signature", valid_615489
  var valid_615490 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615490 = validateParameter(valid_615490, JString, required = false,
                                 default = nil)
  if valid_615490 != nil:
    section.add "X-Amz-Content-Sha256", valid_615490
  var valid_615491 = header.getOrDefault("X-Amz-Date")
  valid_615491 = validateParameter(valid_615491, JString, required = false,
                                 default = nil)
  if valid_615491 != nil:
    section.add "X-Amz-Date", valid_615491
  var valid_615492 = header.getOrDefault("X-Amz-Credential")
  valid_615492 = validateParameter(valid_615492, JString, required = false,
                                 default = nil)
  if valid_615492 != nil:
    section.add "X-Amz-Credential", valid_615492
  var valid_615493 = header.getOrDefault("X-Amz-Security-Token")
  valid_615493 = validateParameter(valid_615493, JString, required = false,
                                 default = nil)
  if valid_615493 != nil:
    section.add "X-Amz-Security-Token", valid_615493
  var valid_615494 = header.getOrDefault("X-Amz-Algorithm")
  valid_615494 = validateParameter(valid_615494, JString, required = false,
                                 default = nil)
  if valid_615494 != nil:
    section.add "X-Amz-Algorithm", valid_615494
  var valid_615495 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615495 = validateParameter(valid_615495, JString, required = false,
                                 default = nil)
  if valid_615495 != nil:
    section.add "X-Amz-SignedHeaders", valid_615495
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_615496 = formData.getOrDefault("SnapshotType")
  valid_615496 = validateParameter(valid_615496, JString, required = false,
                                 default = nil)
  if valid_615496 != nil:
    section.add "SnapshotType", valid_615496
  var valid_615497 = formData.getOrDefault("MaxRecords")
  valid_615497 = validateParameter(valid_615497, JInt, required = false, default = nil)
  if valid_615497 != nil:
    section.add "MaxRecords", valid_615497
  var valid_615498 = formData.getOrDefault("IncludePublic")
  valid_615498 = validateParameter(valid_615498, JBool, required = false, default = nil)
  if valid_615498 != nil:
    section.add "IncludePublic", valid_615498
  var valid_615499 = formData.getOrDefault("Marker")
  valid_615499 = validateParameter(valid_615499, JString, required = false,
                                 default = nil)
  if valid_615499 != nil:
    section.add "Marker", valid_615499
  var valid_615500 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_615500 = validateParameter(valid_615500, JString, required = false,
                                 default = nil)
  if valid_615500 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_615500
  var valid_615501 = formData.getOrDefault("IncludeShared")
  valid_615501 = validateParameter(valid_615501, JBool, required = false, default = nil)
  if valid_615501 != nil:
    section.add "IncludeShared", valid_615501
  var valid_615502 = formData.getOrDefault("Filters")
  valid_615502 = validateParameter(valid_615502, JArray, required = false,
                                 default = nil)
  if valid_615502 != nil:
    section.add "Filters", valid_615502
  var valid_615503 = formData.getOrDefault("DBClusterIdentifier")
  valid_615503 = validateParameter(valid_615503, JString, required = false,
                                 default = nil)
  if valid_615503 != nil:
    section.add "DBClusterIdentifier", valid_615503
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615504: Call_PostDescribeDBClusterSnapshots_615484; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615504.validator(path, query, header, formData, body)
  let scheme = call_615504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615504.url(scheme.get, call_615504.host, call_615504.base,
                         call_615504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615504, url, valid)

proc call*(call_615505: Call_PostDescribeDBClusterSnapshots_615484;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_615506 = newJObject()
  var formData_615507 = newJObject()
  add(formData_615507, "SnapshotType", newJString(SnapshotType))
  add(formData_615507, "MaxRecords", newJInt(MaxRecords))
  add(formData_615507, "IncludePublic", newJBool(IncludePublic))
  add(formData_615507, "Marker", newJString(Marker))
  add(formData_615507, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_615507, "IncludeShared", newJBool(IncludeShared))
  add(query_615506, "Action", newJString(Action))
  if Filters != nil:
    formData_615507.add "Filters", Filters
  add(query_615506, "Version", newJString(Version))
  add(formData_615507, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_615505.call(nil, query_615506, nil, formData_615507, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_615484(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_615485, base: "/",
    url: url_PostDescribeDBClusterSnapshots_615486,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_615461 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBClusterSnapshots_615463(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_615462(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615464 = query.getOrDefault("Marker")
  valid_615464 = validateParameter(valid_615464, JString, required = false,
                                 default = nil)
  if valid_615464 != nil:
    section.add "Marker", valid_615464
  var valid_615465 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_615465 = validateParameter(valid_615465, JString, required = false,
                                 default = nil)
  if valid_615465 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_615465
  var valid_615466 = query.getOrDefault("DBClusterIdentifier")
  valid_615466 = validateParameter(valid_615466, JString, required = false,
                                 default = nil)
  if valid_615466 != nil:
    section.add "DBClusterIdentifier", valid_615466
  var valid_615467 = query.getOrDefault("SnapshotType")
  valid_615467 = validateParameter(valid_615467, JString, required = false,
                                 default = nil)
  if valid_615467 != nil:
    section.add "SnapshotType", valid_615467
  var valid_615468 = query.getOrDefault("IncludePublic")
  valid_615468 = validateParameter(valid_615468, JBool, required = false, default = nil)
  if valid_615468 != nil:
    section.add "IncludePublic", valid_615468
  var valid_615469 = query.getOrDefault("Action")
  valid_615469 = validateParameter(valid_615469, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_615469 != nil:
    section.add "Action", valid_615469
  var valid_615470 = query.getOrDefault("IncludeShared")
  valid_615470 = validateParameter(valid_615470, JBool, required = false, default = nil)
  if valid_615470 != nil:
    section.add "IncludeShared", valid_615470
  var valid_615471 = query.getOrDefault("Version")
  valid_615471 = validateParameter(valid_615471, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615471 != nil:
    section.add "Version", valid_615471
  var valid_615472 = query.getOrDefault("Filters")
  valid_615472 = validateParameter(valid_615472, JArray, required = false,
                                 default = nil)
  if valid_615472 != nil:
    section.add "Filters", valid_615472
  var valid_615473 = query.getOrDefault("MaxRecords")
  valid_615473 = validateParameter(valid_615473, JInt, required = false, default = nil)
  if valid_615473 != nil:
    section.add "MaxRecords", valid_615473
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615474 = header.getOrDefault("X-Amz-Signature")
  valid_615474 = validateParameter(valid_615474, JString, required = false,
                                 default = nil)
  if valid_615474 != nil:
    section.add "X-Amz-Signature", valid_615474
  var valid_615475 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615475 = validateParameter(valid_615475, JString, required = false,
                                 default = nil)
  if valid_615475 != nil:
    section.add "X-Amz-Content-Sha256", valid_615475
  var valid_615476 = header.getOrDefault("X-Amz-Date")
  valid_615476 = validateParameter(valid_615476, JString, required = false,
                                 default = nil)
  if valid_615476 != nil:
    section.add "X-Amz-Date", valid_615476
  var valid_615477 = header.getOrDefault("X-Amz-Credential")
  valid_615477 = validateParameter(valid_615477, JString, required = false,
                                 default = nil)
  if valid_615477 != nil:
    section.add "X-Amz-Credential", valid_615477
  var valid_615478 = header.getOrDefault("X-Amz-Security-Token")
  valid_615478 = validateParameter(valid_615478, JString, required = false,
                                 default = nil)
  if valid_615478 != nil:
    section.add "X-Amz-Security-Token", valid_615478
  var valid_615479 = header.getOrDefault("X-Amz-Algorithm")
  valid_615479 = validateParameter(valid_615479, JString, required = false,
                                 default = nil)
  if valid_615479 != nil:
    section.add "X-Amz-Algorithm", valid_615479
  var valid_615480 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615480 = validateParameter(valid_615480, JString, required = false,
                                 default = nil)
  if valid_615480 != nil:
    section.add "X-Amz-SignedHeaders", valid_615480
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615481: Call_GetDescribeDBClusterSnapshots_615461; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_615481.validator(path, query, header, formData, body)
  let scheme = call_615481.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615481.url(scheme.get, call_615481.host, call_615481.base,
                         call_615481.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615481, url, valid)

proc call*(call_615482: Call_GetDescribeDBClusterSnapshots_615461;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          DBClusterIdentifier: string = ""; SnapshotType: string = "";
          IncludePublic: bool = false;
          Action: string = "DescribeDBClusterSnapshots";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615483 = newJObject()
  add(query_615483, "Marker", newJString(Marker))
  add(query_615483, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_615483, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_615483, "SnapshotType", newJString(SnapshotType))
  add(query_615483, "IncludePublic", newJBool(IncludePublic))
  add(query_615483, "Action", newJString(Action))
  add(query_615483, "IncludeShared", newJBool(IncludeShared))
  add(query_615483, "Version", newJString(Version))
  if Filters != nil:
    query_615483.add "Filters", Filters
  add(query_615483, "MaxRecords", newJInt(MaxRecords))
  result = call_615482.call(nil, query_615483, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_615461(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_615462, base: "/",
    url: url_GetDescribeDBClusterSnapshots_615463,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_615528 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBClusters_615530(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusters_615529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615531 = query.getOrDefault("Action")
  valid_615531 = validateParameter(valid_615531, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_615531 != nil:
    section.add "Action", valid_615531
  var valid_615532 = query.getOrDefault("Version")
  valid_615532 = validateParameter(valid_615532, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615532 != nil:
    section.add "Version", valid_615532
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615533 = header.getOrDefault("X-Amz-Signature")
  valid_615533 = validateParameter(valid_615533, JString, required = false,
                                 default = nil)
  if valid_615533 != nil:
    section.add "X-Amz-Signature", valid_615533
  var valid_615534 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615534 = validateParameter(valid_615534, JString, required = false,
                                 default = nil)
  if valid_615534 != nil:
    section.add "X-Amz-Content-Sha256", valid_615534
  var valid_615535 = header.getOrDefault("X-Amz-Date")
  valid_615535 = validateParameter(valid_615535, JString, required = false,
                                 default = nil)
  if valid_615535 != nil:
    section.add "X-Amz-Date", valid_615535
  var valid_615536 = header.getOrDefault("X-Amz-Credential")
  valid_615536 = validateParameter(valid_615536, JString, required = false,
                                 default = nil)
  if valid_615536 != nil:
    section.add "X-Amz-Credential", valid_615536
  var valid_615537 = header.getOrDefault("X-Amz-Security-Token")
  valid_615537 = validateParameter(valid_615537, JString, required = false,
                                 default = nil)
  if valid_615537 != nil:
    section.add "X-Amz-Security-Token", valid_615537
  var valid_615538 = header.getOrDefault("X-Amz-Algorithm")
  valid_615538 = validateParameter(valid_615538, JString, required = false,
                                 default = nil)
  if valid_615538 != nil:
    section.add "X-Amz-Algorithm", valid_615538
  var valid_615539 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615539 = validateParameter(valid_615539, JString, required = false,
                                 default = nil)
  if valid_615539 != nil:
    section.add "X-Amz-SignedHeaders", valid_615539
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_615540 = formData.getOrDefault("MaxRecords")
  valid_615540 = validateParameter(valid_615540, JInt, required = false, default = nil)
  if valid_615540 != nil:
    section.add "MaxRecords", valid_615540
  var valid_615541 = formData.getOrDefault("Marker")
  valid_615541 = validateParameter(valid_615541, JString, required = false,
                                 default = nil)
  if valid_615541 != nil:
    section.add "Marker", valid_615541
  var valid_615542 = formData.getOrDefault("IncludeShared")
  valid_615542 = validateParameter(valid_615542, JBool, required = false, default = nil)
  if valid_615542 != nil:
    section.add "IncludeShared", valid_615542
  var valid_615543 = formData.getOrDefault("Filters")
  valid_615543 = validateParameter(valid_615543, JArray, required = false,
                                 default = nil)
  if valid_615543 != nil:
    section.add "Filters", valid_615543
  var valid_615544 = formData.getOrDefault("DBClusterIdentifier")
  valid_615544 = validateParameter(valid_615544, JString, required = false,
                                 default = nil)
  if valid_615544 != nil:
    section.add "DBClusterIdentifier", valid_615544
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615545: Call_PostDescribeDBClusters_615528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_615545.validator(path, query, header, formData, body)
  let scheme = call_615545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615545.url(scheme.get, call_615545.host, call_615545.base,
                         call_615545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615545, url, valid)

proc call*(call_615546: Call_PostDescribeDBClusters_615528; MaxRecords: int = 0;
          Marker: string = ""; IncludeShared: bool = false;
          Action: string = "DescribeDBClusters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_615547 = newJObject()
  var formData_615548 = newJObject()
  add(formData_615548, "MaxRecords", newJInt(MaxRecords))
  add(formData_615548, "Marker", newJString(Marker))
  add(formData_615548, "IncludeShared", newJBool(IncludeShared))
  add(query_615547, "Action", newJString(Action))
  if Filters != nil:
    formData_615548.add "Filters", Filters
  add(query_615547, "Version", newJString(Version))
  add(formData_615548, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_615546.call(nil, query_615547, nil, formData_615548, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_615528(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_615529, base: "/",
    url: url_PostDescribeDBClusters_615530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_615508 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBClusters_615510(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusters_615509(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615511 = query.getOrDefault("Marker")
  valid_615511 = validateParameter(valid_615511, JString, required = false,
                                 default = nil)
  if valid_615511 != nil:
    section.add "Marker", valid_615511
  var valid_615512 = query.getOrDefault("DBClusterIdentifier")
  valid_615512 = validateParameter(valid_615512, JString, required = false,
                                 default = nil)
  if valid_615512 != nil:
    section.add "DBClusterIdentifier", valid_615512
  var valid_615513 = query.getOrDefault("Action")
  valid_615513 = validateParameter(valid_615513, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_615513 != nil:
    section.add "Action", valid_615513
  var valid_615514 = query.getOrDefault("IncludeShared")
  valid_615514 = validateParameter(valid_615514, JBool, required = false, default = nil)
  if valid_615514 != nil:
    section.add "IncludeShared", valid_615514
  var valid_615515 = query.getOrDefault("Version")
  valid_615515 = validateParameter(valid_615515, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615515 != nil:
    section.add "Version", valid_615515
  var valid_615516 = query.getOrDefault("Filters")
  valid_615516 = validateParameter(valid_615516, JArray, required = false,
                                 default = nil)
  if valid_615516 != nil:
    section.add "Filters", valid_615516
  var valid_615517 = query.getOrDefault("MaxRecords")
  valid_615517 = validateParameter(valid_615517, JInt, required = false, default = nil)
  if valid_615517 != nil:
    section.add "MaxRecords", valid_615517
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615518 = header.getOrDefault("X-Amz-Signature")
  valid_615518 = validateParameter(valid_615518, JString, required = false,
                                 default = nil)
  if valid_615518 != nil:
    section.add "X-Amz-Signature", valid_615518
  var valid_615519 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615519 = validateParameter(valid_615519, JString, required = false,
                                 default = nil)
  if valid_615519 != nil:
    section.add "X-Amz-Content-Sha256", valid_615519
  var valid_615520 = header.getOrDefault("X-Amz-Date")
  valid_615520 = validateParameter(valid_615520, JString, required = false,
                                 default = nil)
  if valid_615520 != nil:
    section.add "X-Amz-Date", valid_615520
  var valid_615521 = header.getOrDefault("X-Amz-Credential")
  valid_615521 = validateParameter(valid_615521, JString, required = false,
                                 default = nil)
  if valid_615521 != nil:
    section.add "X-Amz-Credential", valid_615521
  var valid_615522 = header.getOrDefault("X-Amz-Security-Token")
  valid_615522 = validateParameter(valid_615522, JString, required = false,
                                 default = nil)
  if valid_615522 != nil:
    section.add "X-Amz-Security-Token", valid_615522
  var valid_615523 = header.getOrDefault("X-Amz-Algorithm")
  valid_615523 = validateParameter(valid_615523, JString, required = false,
                                 default = nil)
  if valid_615523 != nil:
    section.add "X-Amz-Algorithm", valid_615523
  var valid_615524 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615524 = validateParameter(valid_615524, JString, required = false,
                                 default = nil)
  if valid_615524 != nil:
    section.add "X-Amz-SignedHeaders", valid_615524
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615525: Call_GetDescribeDBClusters_615508; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_615525.validator(path, query, header, formData, body)
  let scheme = call_615525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615525.url(scheme.get, call_615525.host, call_615525.base,
                         call_615525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615525, url, valid)

proc call*(call_615526: Call_GetDescribeDBClusters_615508; Marker: string = "";
          DBClusterIdentifier: string = ""; Action: string = "DescribeDBClusters";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615527 = newJObject()
  add(query_615527, "Marker", newJString(Marker))
  add(query_615527, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_615527, "Action", newJString(Action))
  add(query_615527, "IncludeShared", newJBool(IncludeShared))
  add(query_615527, "Version", newJString(Version))
  if Filters != nil:
    query_615527.add "Filters", Filters
  add(query_615527, "MaxRecords", newJInt(MaxRecords))
  result = call_615526.call(nil, query_615527, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_615508(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_615509, base: "/",
    url: url_GetDescribeDBClusters_615510, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_615574 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBEngineVersions_615576(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBEngineVersions_615575(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615577 = query.getOrDefault("Action")
  valid_615577 = validateParameter(valid_615577, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_615577 != nil:
    section.add "Action", valid_615577
  var valid_615578 = query.getOrDefault("Version")
  valid_615578 = validateParameter(valid_615578, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615578 != nil:
    section.add "Version", valid_615578
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615579 = header.getOrDefault("X-Amz-Signature")
  valid_615579 = validateParameter(valid_615579, JString, required = false,
                                 default = nil)
  if valid_615579 != nil:
    section.add "X-Amz-Signature", valid_615579
  var valid_615580 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615580 = validateParameter(valid_615580, JString, required = false,
                                 default = nil)
  if valid_615580 != nil:
    section.add "X-Amz-Content-Sha256", valid_615580
  var valid_615581 = header.getOrDefault("X-Amz-Date")
  valid_615581 = validateParameter(valid_615581, JString, required = false,
                                 default = nil)
  if valid_615581 != nil:
    section.add "X-Amz-Date", valid_615581
  var valid_615582 = header.getOrDefault("X-Amz-Credential")
  valid_615582 = validateParameter(valid_615582, JString, required = false,
                                 default = nil)
  if valid_615582 != nil:
    section.add "X-Amz-Credential", valid_615582
  var valid_615583 = header.getOrDefault("X-Amz-Security-Token")
  valid_615583 = validateParameter(valid_615583, JString, required = false,
                                 default = nil)
  if valid_615583 != nil:
    section.add "X-Amz-Security-Token", valid_615583
  var valid_615584 = header.getOrDefault("X-Amz-Algorithm")
  valid_615584 = validateParameter(valid_615584, JString, required = false,
                                 default = nil)
  if valid_615584 != nil:
    section.add "X-Amz-Algorithm", valid_615584
  var valid_615585 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615585 = validateParameter(valid_615585, JString, required = false,
                                 default = nil)
  if valid_615585 != nil:
    section.add "X-Amz-SignedHeaders", valid_615585
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  section = newJObject()
  var valid_615586 = formData.getOrDefault("DefaultOnly")
  valid_615586 = validateParameter(valid_615586, JBool, required = false, default = nil)
  if valid_615586 != nil:
    section.add "DefaultOnly", valid_615586
  var valid_615587 = formData.getOrDefault("MaxRecords")
  valid_615587 = validateParameter(valid_615587, JInt, required = false, default = nil)
  if valid_615587 != nil:
    section.add "MaxRecords", valid_615587
  var valid_615588 = formData.getOrDefault("EngineVersion")
  valid_615588 = validateParameter(valid_615588, JString, required = false,
                                 default = nil)
  if valid_615588 != nil:
    section.add "EngineVersion", valid_615588
  var valid_615589 = formData.getOrDefault("Marker")
  valid_615589 = validateParameter(valid_615589, JString, required = false,
                                 default = nil)
  if valid_615589 != nil:
    section.add "Marker", valid_615589
  var valid_615590 = formData.getOrDefault("IncludeAll")
  valid_615590 = validateParameter(valid_615590, JBool, required = false, default = nil)
  if valid_615590 != nil:
    section.add "IncludeAll", valid_615590
  var valid_615591 = formData.getOrDefault("Engine")
  valid_615591 = validateParameter(valid_615591, JString, required = false,
                                 default = nil)
  if valid_615591 != nil:
    section.add "Engine", valid_615591
  var valid_615592 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_615592 = validateParameter(valid_615592, JBool, required = false, default = nil)
  if valid_615592 != nil:
    section.add "ListSupportedCharacterSets", valid_615592
  var valid_615593 = formData.getOrDefault("ListSupportedTimezones")
  valid_615593 = validateParameter(valid_615593, JBool, required = false, default = nil)
  if valid_615593 != nil:
    section.add "ListSupportedTimezones", valid_615593
  var valid_615594 = formData.getOrDefault("Filters")
  valid_615594 = validateParameter(valid_615594, JArray, required = false,
                                 default = nil)
  if valid_615594 != nil:
    section.add "Filters", valid_615594
  var valid_615595 = formData.getOrDefault("DBParameterGroupFamily")
  valid_615595 = validateParameter(valid_615595, JString, required = false,
                                 default = nil)
  if valid_615595 != nil:
    section.add "DBParameterGroupFamily", valid_615595
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615596: Call_PostDescribeDBEngineVersions_615574; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_615596.validator(path, query, header, formData, body)
  let scheme = call_615596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615596.url(scheme.get, call_615596.host, call_615596.base,
                         call_615596.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615596, url, valid)

proc call*(call_615597: Call_PostDescribeDBEngineVersions_615574;
          DefaultOnly: bool = false; MaxRecords: int = 0; EngineVersion: string = "";
          Marker: string = ""; IncludeAll: bool = false; Engine: string = "";
          ListSupportedCharacterSets: bool = false;
          Action: string = "DescribeDBEngineVersions";
          ListSupportedTimezones: bool = false; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBParameterGroupFamily: string = ""): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Action: string (required)
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  var query_615598 = newJObject()
  var formData_615599 = newJObject()
  add(formData_615599, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_615599, "MaxRecords", newJInt(MaxRecords))
  add(formData_615599, "EngineVersion", newJString(EngineVersion))
  add(formData_615599, "Marker", newJString(Marker))
  add(formData_615599, "IncludeAll", newJBool(IncludeAll))
  add(formData_615599, "Engine", newJString(Engine))
  add(formData_615599, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_615598, "Action", newJString(Action))
  add(formData_615599, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  if Filters != nil:
    formData_615599.add "Filters", Filters
  add(query_615598, "Version", newJString(Version))
  add(formData_615599, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_615597.call(nil, query_615598, nil, formData_615599, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_615574(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_615575, base: "/",
    url: url_PostDescribeDBEngineVersions_615576,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_615549 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBEngineVersions_615551(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBEngineVersions_615550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: JString (required)
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_615552 = query.getOrDefault("Marker")
  valid_615552 = validateParameter(valid_615552, JString, required = false,
                                 default = nil)
  if valid_615552 != nil:
    section.add "Marker", valid_615552
  var valid_615553 = query.getOrDefault("ListSupportedTimezones")
  valid_615553 = validateParameter(valid_615553, JBool, required = false, default = nil)
  if valid_615553 != nil:
    section.add "ListSupportedTimezones", valid_615553
  var valid_615554 = query.getOrDefault("DBParameterGroupFamily")
  valid_615554 = validateParameter(valid_615554, JString, required = false,
                                 default = nil)
  if valid_615554 != nil:
    section.add "DBParameterGroupFamily", valid_615554
  var valid_615555 = query.getOrDefault("Engine")
  valid_615555 = validateParameter(valid_615555, JString, required = false,
                                 default = nil)
  if valid_615555 != nil:
    section.add "Engine", valid_615555
  var valid_615556 = query.getOrDefault("IncludeAll")
  valid_615556 = validateParameter(valid_615556, JBool, required = false, default = nil)
  if valid_615556 != nil:
    section.add "IncludeAll", valid_615556
  var valid_615557 = query.getOrDefault("EngineVersion")
  valid_615557 = validateParameter(valid_615557, JString, required = false,
                                 default = nil)
  if valid_615557 != nil:
    section.add "EngineVersion", valid_615557
  var valid_615558 = query.getOrDefault("Action")
  valid_615558 = validateParameter(valid_615558, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_615558 != nil:
    section.add "Action", valid_615558
  var valid_615559 = query.getOrDefault("ListSupportedCharacterSets")
  valid_615559 = validateParameter(valid_615559, JBool, required = false, default = nil)
  if valid_615559 != nil:
    section.add "ListSupportedCharacterSets", valid_615559
  var valid_615560 = query.getOrDefault("Version")
  valid_615560 = validateParameter(valid_615560, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615560 != nil:
    section.add "Version", valid_615560
  var valid_615561 = query.getOrDefault("Filters")
  valid_615561 = validateParameter(valid_615561, JArray, required = false,
                                 default = nil)
  if valid_615561 != nil:
    section.add "Filters", valid_615561
  var valid_615562 = query.getOrDefault("MaxRecords")
  valid_615562 = validateParameter(valid_615562, JInt, required = false, default = nil)
  if valid_615562 != nil:
    section.add "MaxRecords", valid_615562
  var valid_615563 = query.getOrDefault("DefaultOnly")
  valid_615563 = validateParameter(valid_615563, JBool, required = false, default = nil)
  if valid_615563 != nil:
    section.add "DefaultOnly", valid_615563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615564 = header.getOrDefault("X-Amz-Signature")
  valid_615564 = validateParameter(valid_615564, JString, required = false,
                                 default = nil)
  if valid_615564 != nil:
    section.add "X-Amz-Signature", valid_615564
  var valid_615565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615565 = validateParameter(valid_615565, JString, required = false,
                                 default = nil)
  if valid_615565 != nil:
    section.add "X-Amz-Content-Sha256", valid_615565
  var valid_615566 = header.getOrDefault("X-Amz-Date")
  valid_615566 = validateParameter(valid_615566, JString, required = false,
                                 default = nil)
  if valid_615566 != nil:
    section.add "X-Amz-Date", valid_615566
  var valid_615567 = header.getOrDefault("X-Amz-Credential")
  valid_615567 = validateParameter(valid_615567, JString, required = false,
                                 default = nil)
  if valid_615567 != nil:
    section.add "X-Amz-Credential", valid_615567
  var valid_615568 = header.getOrDefault("X-Amz-Security-Token")
  valid_615568 = validateParameter(valid_615568, JString, required = false,
                                 default = nil)
  if valid_615568 != nil:
    section.add "X-Amz-Security-Token", valid_615568
  var valid_615569 = header.getOrDefault("X-Amz-Algorithm")
  valid_615569 = validateParameter(valid_615569, JString, required = false,
                                 default = nil)
  if valid_615569 != nil:
    section.add "X-Amz-Algorithm", valid_615569
  var valid_615570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615570 = validateParameter(valid_615570, JString, required = false,
                                 default = nil)
  if valid_615570 != nil:
    section.add "X-Amz-SignedHeaders", valid_615570
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615571: Call_GetDescribeDBEngineVersions_615549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_615571.validator(path, query, header, formData, body)
  let scheme = call_615571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615571.url(scheme.get, call_615571.host, call_615571.base,
                         call_615571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615571, url, valid)

proc call*(call_615572: Call_GetDescribeDBEngineVersions_615549;
          Marker: string = ""; ListSupportedTimezones: bool = false;
          DBParameterGroupFamily: string = ""; Engine: string = "";
          IncludeAll: bool = false; EngineVersion: string = "";
          Action: string = "DescribeDBEngineVersions";
          ListSupportedCharacterSets: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: string
  ##         : The database engine to return.
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: string (required)
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  var query_615573 = newJObject()
  add(query_615573, "Marker", newJString(Marker))
  add(query_615573, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_615573, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_615573, "Engine", newJString(Engine))
  add(query_615573, "IncludeAll", newJBool(IncludeAll))
  add(query_615573, "EngineVersion", newJString(EngineVersion))
  add(query_615573, "Action", newJString(Action))
  add(query_615573, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_615573, "Version", newJString(Version))
  if Filters != nil:
    query_615573.add "Filters", Filters
  add(query_615573, "MaxRecords", newJInt(MaxRecords))
  add(query_615573, "DefaultOnly", newJBool(DefaultOnly))
  result = call_615572.call(nil, query_615573, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_615549(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_615550, base: "/",
    url: url_GetDescribeDBEngineVersions_615551,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstanceAutomatedBackups_615620 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBInstanceAutomatedBackups_615622(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstanceAutomatedBackups_615621(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615623 = query.getOrDefault("Action")
  valid_615623 = validateParameter(valid_615623, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_615623 != nil:
    section.add "Action", valid_615623
  var valid_615624 = query.getOrDefault("Version")
  valid_615624 = validateParameter(valid_615624, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615624 != nil:
    section.add "Version", valid_615624
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615625 = header.getOrDefault("X-Amz-Signature")
  valid_615625 = validateParameter(valid_615625, JString, required = false,
                                 default = nil)
  if valid_615625 != nil:
    section.add "X-Amz-Signature", valid_615625
  var valid_615626 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615626 = validateParameter(valid_615626, JString, required = false,
                                 default = nil)
  if valid_615626 != nil:
    section.add "X-Amz-Content-Sha256", valid_615626
  var valid_615627 = header.getOrDefault("X-Amz-Date")
  valid_615627 = validateParameter(valid_615627, JString, required = false,
                                 default = nil)
  if valid_615627 != nil:
    section.add "X-Amz-Date", valid_615627
  var valid_615628 = header.getOrDefault("X-Amz-Credential")
  valid_615628 = validateParameter(valid_615628, JString, required = false,
                                 default = nil)
  if valid_615628 != nil:
    section.add "X-Amz-Credential", valid_615628
  var valid_615629 = header.getOrDefault("X-Amz-Security-Token")
  valid_615629 = validateParameter(valid_615629, JString, required = false,
                                 default = nil)
  if valid_615629 != nil:
    section.add "X-Amz-Security-Token", valid_615629
  var valid_615630 = header.getOrDefault("X-Amz-Algorithm")
  valid_615630 = validateParameter(valid_615630, JString, required = false,
                                 default = nil)
  if valid_615630 != nil:
    section.add "X-Amz-Algorithm", valid_615630
  var valid_615631 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615631 = validateParameter(valid_615631, JString, required = false,
                                 default = nil)
  if valid_615631 != nil:
    section.add "X-Amz-SignedHeaders", valid_615631
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  section = newJObject()
  var valid_615632 = formData.getOrDefault("MaxRecords")
  valid_615632 = validateParameter(valid_615632, JInt, required = false, default = nil)
  if valid_615632 != nil:
    section.add "MaxRecords", valid_615632
  var valid_615633 = formData.getOrDefault("Marker")
  valid_615633 = validateParameter(valid_615633, JString, required = false,
                                 default = nil)
  if valid_615633 != nil:
    section.add "Marker", valid_615633
  var valid_615634 = formData.getOrDefault("DbiResourceId")
  valid_615634 = validateParameter(valid_615634, JString, required = false,
                                 default = nil)
  if valid_615634 != nil:
    section.add "DbiResourceId", valid_615634
  var valid_615635 = formData.getOrDefault("DBInstanceIdentifier")
  valid_615635 = validateParameter(valid_615635, JString, required = false,
                                 default = nil)
  if valid_615635 != nil:
    section.add "DBInstanceIdentifier", valid_615635
  var valid_615636 = formData.getOrDefault("Filters")
  valid_615636 = validateParameter(valid_615636, JArray, required = false,
                                 default = nil)
  if valid_615636 != nil:
    section.add "Filters", valid_615636
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615637: Call_PostDescribeDBInstanceAutomatedBackups_615620;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_615637.validator(path, query, header, formData, body)
  let scheme = call_615637.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615637.url(scheme.get, call_615637.host, call_615637.base,
                         call_615637.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615637, url, valid)

proc call*(call_615638: Call_PostDescribeDBInstanceAutomatedBackups_615620;
          MaxRecords: int = 0; Marker: string = ""; DbiResourceId: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   Version: string (required)
  var query_615639 = newJObject()
  var formData_615640 = newJObject()
  add(formData_615640, "MaxRecords", newJInt(MaxRecords))
  add(formData_615640, "Marker", newJString(Marker))
  add(formData_615640, "DbiResourceId", newJString(DbiResourceId))
  add(formData_615640, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615639, "Action", newJString(Action))
  if Filters != nil:
    formData_615640.add "Filters", Filters
  add(query_615639, "Version", newJString(Version))
  result = call_615638.call(nil, query_615639, nil, formData_615640, nil)

var postDescribeDBInstanceAutomatedBackups* = Call_PostDescribeDBInstanceAutomatedBackups_615620(
    name: "postDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_PostDescribeDBInstanceAutomatedBackups_615621, base: "/",
    url: url_PostDescribeDBInstanceAutomatedBackups_615622,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstanceAutomatedBackups_615600 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBInstanceAutomatedBackups_615602(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstanceAutomatedBackups_615601(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  section = newJObject()
  var valid_615603 = query.getOrDefault("DbiResourceId")
  valid_615603 = validateParameter(valid_615603, JString, required = false,
                                 default = nil)
  if valid_615603 != nil:
    section.add "DbiResourceId", valid_615603
  var valid_615604 = query.getOrDefault("Marker")
  valid_615604 = validateParameter(valid_615604, JString, required = false,
                                 default = nil)
  if valid_615604 != nil:
    section.add "Marker", valid_615604
  var valid_615605 = query.getOrDefault("DBInstanceIdentifier")
  valid_615605 = validateParameter(valid_615605, JString, required = false,
                                 default = nil)
  if valid_615605 != nil:
    section.add "DBInstanceIdentifier", valid_615605
  var valid_615606 = query.getOrDefault("Action")
  valid_615606 = validateParameter(valid_615606, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_615606 != nil:
    section.add "Action", valid_615606
  var valid_615607 = query.getOrDefault("Version")
  valid_615607 = validateParameter(valid_615607, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615607 != nil:
    section.add "Version", valid_615607
  var valid_615608 = query.getOrDefault("Filters")
  valid_615608 = validateParameter(valid_615608, JArray, required = false,
                                 default = nil)
  if valid_615608 != nil:
    section.add "Filters", valid_615608
  var valid_615609 = query.getOrDefault("MaxRecords")
  valid_615609 = validateParameter(valid_615609, JInt, required = false, default = nil)
  if valid_615609 != nil:
    section.add "MaxRecords", valid_615609
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615610 = header.getOrDefault("X-Amz-Signature")
  valid_615610 = validateParameter(valid_615610, JString, required = false,
                                 default = nil)
  if valid_615610 != nil:
    section.add "X-Amz-Signature", valid_615610
  var valid_615611 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615611 = validateParameter(valid_615611, JString, required = false,
                                 default = nil)
  if valid_615611 != nil:
    section.add "X-Amz-Content-Sha256", valid_615611
  var valid_615612 = header.getOrDefault("X-Amz-Date")
  valid_615612 = validateParameter(valid_615612, JString, required = false,
                                 default = nil)
  if valid_615612 != nil:
    section.add "X-Amz-Date", valid_615612
  var valid_615613 = header.getOrDefault("X-Amz-Credential")
  valid_615613 = validateParameter(valid_615613, JString, required = false,
                                 default = nil)
  if valid_615613 != nil:
    section.add "X-Amz-Credential", valid_615613
  var valid_615614 = header.getOrDefault("X-Amz-Security-Token")
  valid_615614 = validateParameter(valid_615614, JString, required = false,
                                 default = nil)
  if valid_615614 != nil:
    section.add "X-Amz-Security-Token", valid_615614
  var valid_615615 = header.getOrDefault("X-Amz-Algorithm")
  valid_615615 = validateParameter(valid_615615, JString, required = false,
                                 default = nil)
  if valid_615615 != nil:
    section.add "X-Amz-Algorithm", valid_615615
  var valid_615616 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615616 = validateParameter(valid_615616, JString, required = false,
                                 default = nil)
  if valid_615616 != nil:
    section.add "X-Amz-SignedHeaders", valid_615616
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615617: Call_GetDescribeDBInstanceAutomatedBackups_615600;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_615617.validator(path, query, header, formData, body)
  let scheme = call_615617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615617.url(scheme.get, call_615617.host, call_615617.base,
                         call_615617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615617, url, valid)

proc call*(call_615618: Call_GetDescribeDBInstanceAutomatedBackups_615600;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  var query_615619 = newJObject()
  add(query_615619, "DbiResourceId", newJString(DbiResourceId))
  add(query_615619, "Marker", newJString(Marker))
  add(query_615619, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615619, "Action", newJString(Action))
  add(query_615619, "Version", newJString(Version))
  if Filters != nil:
    query_615619.add "Filters", Filters
  add(query_615619, "MaxRecords", newJInt(MaxRecords))
  result = call_615618.call(nil, query_615619, nil, nil, nil)

var getDescribeDBInstanceAutomatedBackups* = Call_GetDescribeDBInstanceAutomatedBackups_615600(
    name: "getDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_GetDescribeDBInstanceAutomatedBackups_615601, base: "/",
    url: url_GetDescribeDBInstanceAutomatedBackups_615602,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_615660 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBInstances_615662(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstances_615661(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615663 = query.getOrDefault("Action")
  valid_615663 = validateParameter(valid_615663, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_615663 != nil:
    section.add "Action", valid_615663
  var valid_615664 = query.getOrDefault("Version")
  valid_615664 = validateParameter(valid_615664, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615664 != nil:
    section.add "Version", valid_615664
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615665 = header.getOrDefault("X-Amz-Signature")
  valid_615665 = validateParameter(valid_615665, JString, required = false,
                                 default = nil)
  if valid_615665 != nil:
    section.add "X-Amz-Signature", valid_615665
  var valid_615666 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615666 = validateParameter(valid_615666, JString, required = false,
                                 default = nil)
  if valid_615666 != nil:
    section.add "X-Amz-Content-Sha256", valid_615666
  var valid_615667 = header.getOrDefault("X-Amz-Date")
  valid_615667 = validateParameter(valid_615667, JString, required = false,
                                 default = nil)
  if valid_615667 != nil:
    section.add "X-Amz-Date", valid_615667
  var valid_615668 = header.getOrDefault("X-Amz-Credential")
  valid_615668 = validateParameter(valid_615668, JString, required = false,
                                 default = nil)
  if valid_615668 != nil:
    section.add "X-Amz-Credential", valid_615668
  var valid_615669 = header.getOrDefault("X-Amz-Security-Token")
  valid_615669 = validateParameter(valid_615669, JString, required = false,
                                 default = nil)
  if valid_615669 != nil:
    section.add "X-Amz-Security-Token", valid_615669
  var valid_615670 = header.getOrDefault("X-Amz-Algorithm")
  valid_615670 = validateParameter(valid_615670, JString, required = false,
                                 default = nil)
  if valid_615670 != nil:
    section.add "X-Amz-Algorithm", valid_615670
  var valid_615671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615671 = validateParameter(valid_615671, JString, required = false,
                                 default = nil)
  if valid_615671 != nil:
    section.add "X-Amz-SignedHeaders", valid_615671
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  section = newJObject()
  var valid_615672 = formData.getOrDefault("MaxRecords")
  valid_615672 = validateParameter(valid_615672, JInt, required = false, default = nil)
  if valid_615672 != nil:
    section.add "MaxRecords", valid_615672
  var valid_615673 = formData.getOrDefault("Marker")
  valid_615673 = validateParameter(valid_615673, JString, required = false,
                                 default = nil)
  if valid_615673 != nil:
    section.add "Marker", valid_615673
  var valid_615674 = formData.getOrDefault("DBInstanceIdentifier")
  valid_615674 = validateParameter(valid_615674, JString, required = false,
                                 default = nil)
  if valid_615674 != nil:
    section.add "DBInstanceIdentifier", valid_615674
  var valid_615675 = formData.getOrDefault("Filters")
  valid_615675 = validateParameter(valid_615675, JArray, required = false,
                                 default = nil)
  if valid_615675 != nil:
    section.add "Filters", valid_615675
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615676: Call_PostDescribeDBInstances_615660; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_615676.validator(path, query, header, formData, body)
  let scheme = call_615676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615676.url(scheme.get, call_615676.host, call_615676.base,
                         call_615676.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615676, url, valid)

proc call*(call_615677: Call_PostDescribeDBInstances_615660; MaxRecords: int = 0;
          Marker: string = ""; DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_615678 = newJObject()
  var formData_615679 = newJObject()
  add(formData_615679, "MaxRecords", newJInt(MaxRecords))
  add(formData_615679, "Marker", newJString(Marker))
  add(formData_615679, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615678, "Action", newJString(Action))
  if Filters != nil:
    formData_615679.add "Filters", Filters
  add(query_615678, "Version", newJString(Version))
  result = call_615677.call(nil, query_615678, nil, formData_615679, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_615660(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_615661, base: "/",
    url: url_PostDescribeDBInstances_615662, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_615641 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBInstances_615643(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstances_615642(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615644 = query.getOrDefault("Marker")
  valid_615644 = validateParameter(valid_615644, JString, required = false,
                                 default = nil)
  if valid_615644 != nil:
    section.add "Marker", valid_615644
  var valid_615645 = query.getOrDefault("DBInstanceIdentifier")
  valid_615645 = validateParameter(valid_615645, JString, required = false,
                                 default = nil)
  if valid_615645 != nil:
    section.add "DBInstanceIdentifier", valid_615645
  var valid_615646 = query.getOrDefault("Action")
  valid_615646 = validateParameter(valid_615646, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_615646 != nil:
    section.add "Action", valid_615646
  var valid_615647 = query.getOrDefault("Version")
  valid_615647 = validateParameter(valid_615647, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615647 != nil:
    section.add "Version", valid_615647
  var valid_615648 = query.getOrDefault("Filters")
  valid_615648 = validateParameter(valid_615648, JArray, required = false,
                                 default = nil)
  if valid_615648 != nil:
    section.add "Filters", valid_615648
  var valid_615649 = query.getOrDefault("MaxRecords")
  valid_615649 = validateParameter(valid_615649, JInt, required = false, default = nil)
  if valid_615649 != nil:
    section.add "MaxRecords", valid_615649
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615650 = header.getOrDefault("X-Amz-Signature")
  valid_615650 = validateParameter(valid_615650, JString, required = false,
                                 default = nil)
  if valid_615650 != nil:
    section.add "X-Amz-Signature", valid_615650
  var valid_615651 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615651 = validateParameter(valid_615651, JString, required = false,
                                 default = nil)
  if valid_615651 != nil:
    section.add "X-Amz-Content-Sha256", valid_615651
  var valid_615652 = header.getOrDefault("X-Amz-Date")
  valid_615652 = validateParameter(valid_615652, JString, required = false,
                                 default = nil)
  if valid_615652 != nil:
    section.add "X-Amz-Date", valid_615652
  var valid_615653 = header.getOrDefault("X-Amz-Credential")
  valid_615653 = validateParameter(valid_615653, JString, required = false,
                                 default = nil)
  if valid_615653 != nil:
    section.add "X-Amz-Credential", valid_615653
  var valid_615654 = header.getOrDefault("X-Amz-Security-Token")
  valid_615654 = validateParameter(valid_615654, JString, required = false,
                                 default = nil)
  if valid_615654 != nil:
    section.add "X-Amz-Security-Token", valid_615654
  var valid_615655 = header.getOrDefault("X-Amz-Algorithm")
  valid_615655 = validateParameter(valid_615655, JString, required = false,
                                 default = nil)
  if valid_615655 != nil:
    section.add "X-Amz-Algorithm", valid_615655
  var valid_615656 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615656 = validateParameter(valid_615656, JString, required = false,
                                 default = nil)
  if valid_615656 != nil:
    section.add "X-Amz-SignedHeaders", valid_615656
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615657: Call_GetDescribeDBInstances_615641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_615657.validator(path, query, header, formData, body)
  let scheme = call_615657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615657.url(scheme.get, call_615657.host, call_615657.base,
                         call_615657.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615657, url, valid)

proc call*(call_615658: Call_GetDescribeDBInstances_615641; Marker: string = "";
          DBInstanceIdentifier: string = ""; Action: string = "DescribeDBInstances";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstances
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615659 = newJObject()
  add(query_615659, "Marker", newJString(Marker))
  add(query_615659, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615659, "Action", newJString(Action))
  add(query_615659, "Version", newJString(Version))
  if Filters != nil:
    query_615659.add "Filters", Filters
  add(query_615659, "MaxRecords", newJInt(MaxRecords))
  result = call_615658.call(nil, query_615659, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_615641(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_615642, base: "/",
    url: url_GetDescribeDBInstances_615643, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBLogFiles_615702 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBLogFiles_615704(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBLogFiles_615703(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615705 = query.getOrDefault("Action")
  valid_615705 = validateParameter(valid_615705, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_615705 != nil:
    section.add "Action", valid_615705
  var valid_615706 = query.getOrDefault("Version")
  valid_615706 = validateParameter(valid_615706, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615706 != nil:
    section.add "Version", valid_615706
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615707 = header.getOrDefault("X-Amz-Signature")
  valid_615707 = validateParameter(valid_615707, JString, required = false,
                                 default = nil)
  if valid_615707 != nil:
    section.add "X-Amz-Signature", valid_615707
  var valid_615708 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615708 = validateParameter(valid_615708, JString, required = false,
                                 default = nil)
  if valid_615708 != nil:
    section.add "X-Amz-Content-Sha256", valid_615708
  var valid_615709 = header.getOrDefault("X-Amz-Date")
  valid_615709 = validateParameter(valid_615709, JString, required = false,
                                 default = nil)
  if valid_615709 != nil:
    section.add "X-Amz-Date", valid_615709
  var valid_615710 = header.getOrDefault("X-Amz-Credential")
  valid_615710 = validateParameter(valid_615710, JString, required = false,
                                 default = nil)
  if valid_615710 != nil:
    section.add "X-Amz-Credential", valid_615710
  var valid_615711 = header.getOrDefault("X-Amz-Security-Token")
  valid_615711 = validateParameter(valid_615711, JString, required = false,
                                 default = nil)
  if valid_615711 != nil:
    section.add "X-Amz-Security-Token", valid_615711
  var valid_615712 = header.getOrDefault("X-Amz-Algorithm")
  valid_615712 = validateParameter(valid_615712, JString, required = false,
                                 default = nil)
  if valid_615712 != nil:
    section.add "X-Amz-Algorithm", valid_615712
  var valid_615713 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615713 = validateParameter(valid_615713, JString, required = false,
                                 default = nil)
  if valid_615713 != nil:
    section.add "X-Amz-SignedHeaders", valid_615713
  result.add "header", section
  ## parameters in `formData` object:
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  section = newJObject()
  var valid_615714 = formData.getOrDefault("FileSize")
  valid_615714 = validateParameter(valid_615714, JInt, required = false, default = nil)
  if valid_615714 != nil:
    section.add "FileSize", valid_615714
  var valid_615715 = formData.getOrDefault("MaxRecords")
  valid_615715 = validateParameter(valid_615715, JInt, required = false, default = nil)
  if valid_615715 != nil:
    section.add "MaxRecords", valid_615715
  var valid_615716 = formData.getOrDefault("Marker")
  valid_615716 = validateParameter(valid_615716, JString, required = false,
                                 default = nil)
  if valid_615716 != nil:
    section.add "Marker", valid_615716
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_615717 = formData.getOrDefault("DBInstanceIdentifier")
  valid_615717 = validateParameter(valid_615717, JString, required = true,
                                 default = nil)
  if valid_615717 != nil:
    section.add "DBInstanceIdentifier", valid_615717
  var valid_615718 = formData.getOrDefault("FilenameContains")
  valid_615718 = validateParameter(valid_615718, JString, required = false,
                                 default = nil)
  if valid_615718 != nil:
    section.add "FilenameContains", valid_615718
  var valid_615719 = formData.getOrDefault("Filters")
  valid_615719 = validateParameter(valid_615719, JArray, required = false,
                                 default = nil)
  if valid_615719 != nil:
    section.add "Filters", valid_615719
  var valid_615720 = formData.getOrDefault("FileLastWritten")
  valid_615720 = validateParameter(valid_615720, JInt, required = false, default = nil)
  if valid_615720 != nil:
    section.add "FileLastWritten", valid_615720
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615721: Call_PostDescribeDBLogFiles_615702; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_615721.validator(path, query, header, formData, body)
  let scheme = call_615721.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615721.url(scheme.get, call_615721.host, call_615721.base,
                         call_615721.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615721, url, valid)

proc call*(call_615722: Call_PostDescribeDBLogFiles_615702;
          DBInstanceIdentifier: string; FileSize: int = 0; MaxRecords: int = 0;
          Marker: string = ""; FilenameContains: string = "";
          Action: string = "DescribeDBLogFiles"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; FileLastWritten: int = 0): Recallable =
  ## postDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  var query_615723 = newJObject()
  var formData_615724 = newJObject()
  add(formData_615724, "FileSize", newJInt(FileSize))
  add(formData_615724, "MaxRecords", newJInt(MaxRecords))
  add(formData_615724, "Marker", newJString(Marker))
  add(formData_615724, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_615724, "FilenameContains", newJString(FilenameContains))
  add(query_615723, "Action", newJString(Action))
  if Filters != nil:
    formData_615724.add "Filters", Filters
  add(query_615723, "Version", newJString(Version))
  add(formData_615724, "FileLastWritten", newJInt(FileLastWritten))
  result = call_615722.call(nil, query_615723, nil, formData_615724, nil)

var postDescribeDBLogFiles* = Call_PostDescribeDBLogFiles_615702(
    name: "postDescribeDBLogFiles", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_PostDescribeDBLogFiles_615703, base: "/",
    url: url_PostDescribeDBLogFiles_615704, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBLogFiles_615680 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBLogFiles_615682(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBLogFiles_615681(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: JString (required)
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  section = newJObject()
  var valid_615683 = query.getOrDefault("Marker")
  valid_615683 = validateParameter(valid_615683, JString, required = false,
                                 default = nil)
  if valid_615683 != nil:
    section.add "Marker", valid_615683
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_615684 = query.getOrDefault("DBInstanceIdentifier")
  valid_615684 = validateParameter(valid_615684, JString, required = true,
                                 default = nil)
  if valid_615684 != nil:
    section.add "DBInstanceIdentifier", valid_615684
  var valid_615685 = query.getOrDefault("FileLastWritten")
  valid_615685 = validateParameter(valid_615685, JInt, required = false, default = nil)
  if valid_615685 != nil:
    section.add "FileLastWritten", valid_615685
  var valid_615686 = query.getOrDefault("Action")
  valid_615686 = validateParameter(valid_615686, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_615686 != nil:
    section.add "Action", valid_615686
  var valid_615687 = query.getOrDefault("FilenameContains")
  valid_615687 = validateParameter(valid_615687, JString, required = false,
                                 default = nil)
  if valid_615687 != nil:
    section.add "FilenameContains", valid_615687
  var valid_615688 = query.getOrDefault("Version")
  valid_615688 = validateParameter(valid_615688, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615688 != nil:
    section.add "Version", valid_615688
  var valid_615689 = query.getOrDefault("Filters")
  valid_615689 = validateParameter(valid_615689, JArray, required = false,
                                 default = nil)
  if valid_615689 != nil:
    section.add "Filters", valid_615689
  var valid_615690 = query.getOrDefault("MaxRecords")
  valid_615690 = validateParameter(valid_615690, JInt, required = false, default = nil)
  if valid_615690 != nil:
    section.add "MaxRecords", valid_615690
  var valid_615691 = query.getOrDefault("FileSize")
  valid_615691 = validateParameter(valid_615691, JInt, required = false, default = nil)
  if valid_615691 != nil:
    section.add "FileSize", valid_615691
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615692 = header.getOrDefault("X-Amz-Signature")
  valid_615692 = validateParameter(valid_615692, JString, required = false,
                                 default = nil)
  if valid_615692 != nil:
    section.add "X-Amz-Signature", valid_615692
  var valid_615693 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615693 = validateParameter(valid_615693, JString, required = false,
                                 default = nil)
  if valid_615693 != nil:
    section.add "X-Amz-Content-Sha256", valid_615693
  var valid_615694 = header.getOrDefault("X-Amz-Date")
  valid_615694 = validateParameter(valid_615694, JString, required = false,
                                 default = nil)
  if valid_615694 != nil:
    section.add "X-Amz-Date", valid_615694
  var valid_615695 = header.getOrDefault("X-Amz-Credential")
  valid_615695 = validateParameter(valid_615695, JString, required = false,
                                 default = nil)
  if valid_615695 != nil:
    section.add "X-Amz-Credential", valid_615695
  var valid_615696 = header.getOrDefault("X-Amz-Security-Token")
  valid_615696 = validateParameter(valid_615696, JString, required = false,
                                 default = nil)
  if valid_615696 != nil:
    section.add "X-Amz-Security-Token", valid_615696
  var valid_615697 = header.getOrDefault("X-Amz-Algorithm")
  valid_615697 = validateParameter(valid_615697, JString, required = false,
                                 default = nil)
  if valid_615697 != nil:
    section.add "X-Amz-Algorithm", valid_615697
  var valid_615698 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615698 = validateParameter(valid_615698, JString, required = false,
                                 default = nil)
  if valid_615698 != nil:
    section.add "X-Amz-SignedHeaders", valid_615698
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615699: Call_GetDescribeDBLogFiles_615680; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_615699.validator(path, query, header, formData, body)
  let scheme = call_615699.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615699.url(scheme.get, call_615699.host, call_615699.base,
                         call_615699.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615699, url, valid)

proc call*(call_615700: Call_GetDescribeDBLogFiles_615680;
          DBInstanceIdentifier: string; Marker: string = ""; FileLastWritten: int = 0;
          Action: string = "DescribeDBLogFiles"; FilenameContains: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          FileSize: int = 0): Recallable =
  ## getDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: string (required)
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  var query_615701 = newJObject()
  add(query_615701, "Marker", newJString(Marker))
  add(query_615701, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_615701, "FileLastWritten", newJInt(FileLastWritten))
  add(query_615701, "Action", newJString(Action))
  add(query_615701, "FilenameContains", newJString(FilenameContains))
  add(query_615701, "Version", newJString(Version))
  if Filters != nil:
    query_615701.add "Filters", Filters
  add(query_615701, "MaxRecords", newJInt(MaxRecords))
  add(query_615701, "FileSize", newJInt(FileSize))
  result = call_615700.call(nil, query_615701, nil, nil, nil)

var getDescribeDBLogFiles* = Call_GetDescribeDBLogFiles_615680(
    name: "getDescribeDBLogFiles", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_GetDescribeDBLogFiles_615681, base: "/",
    url: url_GetDescribeDBLogFiles_615682, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_615744 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBParameterGroups_615746(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameterGroups_615745(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615747 = query.getOrDefault("Action")
  valid_615747 = validateParameter(valid_615747, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_615747 != nil:
    section.add "Action", valid_615747
  var valid_615748 = query.getOrDefault("Version")
  valid_615748 = validateParameter(valid_615748, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615748 != nil:
    section.add "Version", valid_615748
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615749 = header.getOrDefault("X-Amz-Signature")
  valid_615749 = validateParameter(valid_615749, JString, required = false,
                                 default = nil)
  if valid_615749 != nil:
    section.add "X-Amz-Signature", valid_615749
  var valid_615750 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615750 = validateParameter(valid_615750, JString, required = false,
                                 default = nil)
  if valid_615750 != nil:
    section.add "X-Amz-Content-Sha256", valid_615750
  var valid_615751 = header.getOrDefault("X-Amz-Date")
  valid_615751 = validateParameter(valid_615751, JString, required = false,
                                 default = nil)
  if valid_615751 != nil:
    section.add "X-Amz-Date", valid_615751
  var valid_615752 = header.getOrDefault("X-Amz-Credential")
  valid_615752 = validateParameter(valid_615752, JString, required = false,
                                 default = nil)
  if valid_615752 != nil:
    section.add "X-Amz-Credential", valid_615752
  var valid_615753 = header.getOrDefault("X-Amz-Security-Token")
  valid_615753 = validateParameter(valid_615753, JString, required = false,
                                 default = nil)
  if valid_615753 != nil:
    section.add "X-Amz-Security-Token", valid_615753
  var valid_615754 = header.getOrDefault("X-Amz-Algorithm")
  valid_615754 = validateParameter(valid_615754, JString, required = false,
                                 default = nil)
  if valid_615754 != nil:
    section.add "X-Amz-Algorithm", valid_615754
  var valid_615755 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615755 = validateParameter(valid_615755, JString, required = false,
                                 default = nil)
  if valid_615755 != nil:
    section.add "X-Amz-SignedHeaders", valid_615755
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_615756 = formData.getOrDefault("MaxRecords")
  valid_615756 = validateParameter(valid_615756, JInt, required = false, default = nil)
  if valid_615756 != nil:
    section.add "MaxRecords", valid_615756
  var valid_615757 = formData.getOrDefault("DBParameterGroupName")
  valid_615757 = validateParameter(valid_615757, JString, required = false,
                                 default = nil)
  if valid_615757 != nil:
    section.add "DBParameterGroupName", valid_615757
  var valid_615758 = formData.getOrDefault("Marker")
  valid_615758 = validateParameter(valid_615758, JString, required = false,
                                 default = nil)
  if valid_615758 != nil:
    section.add "Marker", valid_615758
  var valid_615759 = formData.getOrDefault("Filters")
  valid_615759 = validateParameter(valid_615759, JArray, required = false,
                                 default = nil)
  if valid_615759 != nil:
    section.add "Filters", valid_615759
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615760: Call_PostDescribeDBParameterGroups_615744; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_615760.validator(path, query, header, formData, body)
  let scheme = call_615760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615760.url(scheme.get, call_615760.host, call_615760.base,
                         call_615760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615760, url, valid)

proc call*(call_615761: Call_PostDescribeDBParameterGroups_615744;
          MaxRecords: int = 0; DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_615762 = newJObject()
  var formData_615763 = newJObject()
  add(formData_615763, "MaxRecords", newJInt(MaxRecords))
  add(formData_615763, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_615763, "Marker", newJString(Marker))
  add(query_615762, "Action", newJString(Action))
  if Filters != nil:
    formData_615763.add "Filters", Filters
  add(query_615762, "Version", newJString(Version))
  result = call_615761.call(nil, query_615762, nil, formData_615763, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_615744(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_615745, base: "/",
    url: url_PostDescribeDBParameterGroups_615746,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_615725 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBParameterGroups_615727(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameterGroups_615726(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615728 = query.getOrDefault("Marker")
  valid_615728 = validateParameter(valid_615728, JString, required = false,
                                 default = nil)
  if valid_615728 != nil:
    section.add "Marker", valid_615728
  var valid_615729 = query.getOrDefault("DBParameterGroupName")
  valid_615729 = validateParameter(valid_615729, JString, required = false,
                                 default = nil)
  if valid_615729 != nil:
    section.add "DBParameterGroupName", valid_615729
  var valid_615730 = query.getOrDefault("Action")
  valid_615730 = validateParameter(valid_615730, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_615730 != nil:
    section.add "Action", valid_615730
  var valid_615731 = query.getOrDefault("Version")
  valid_615731 = validateParameter(valid_615731, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615731 != nil:
    section.add "Version", valid_615731
  var valid_615732 = query.getOrDefault("Filters")
  valid_615732 = validateParameter(valid_615732, JArray, required = false,
                                 default = nil)
  if valid_615732 != nil:
    section.add "Filters", valid_615732
  var valid_615733 = query.getOrDefault("MaxRecords")
  valid_615733 = validateParameter(valid_615733, JInt, required = false, default = nil)
  if valid_615733 != nil:
    section.add "MaxRecords", valid_615733
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615734 = header.getOrDefault("X-Amz-Signature")
  valid_615734 = validateParameter(valid_615734, JString, required = false,
                                 default = nil)
  if valid_615734 != nil:
    section.add "X-Amz-Signature", valid_615734
  var valid_615735 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615735 = validateParameter(valid_615735, JString, required = false,
                                 default = nil)
  if valid_615735 != nil:
    section.add "X-Amz-Content-Sha256", valid_615735
  var valid_615736 = header.getOrDefault("X-Amz-Date")
  valid_615736 = validateParameter(valid_615736, JString, required = false,
                                 default = nil)
  if valid_615736 != nil:
    section.add "X-Amz-Date", valid_615736
  var valid_615737 = header.getOrDefault("X-Amz-Credential")
  valid_615737 = validateParameter(valid_615737, JString, required = false,
                                 default = nil)
  if valid_615737 != nil:
    section.add "X-Amz-Credential", valid_615737
  var valid_615738 = header.getOrDefault("X-Amz-Security-Token")
  valid_615738 = validateParameter(valid_615738, JString, required = false,
                                 default = nil)
  if valid_615738 != nil:
    section.add "X-Amz-Security-Token", valid_615738
  var valid_615739 = header.getOrDefault("X-Amz-Algorithm")
  valid_615739 = validateParameter(valid_615739, JString, required = false,
                                 default = nil)
  if valid_615739 != nil:
    section.add "X-Amz-Algorithm", valid_615739
  var valid_615740 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615740 = validateParameter(valid_615740, JString, required = false,
                                 default = nil)
  if valid_615740 != nil:
    section.add "X-Amz-SignedHeaders", valid_615740
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615741: Call_GetDescribeDBParameterGroups_615725; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_615741.validator(path, query, header, formData, body)
  let scheme = call_615741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615741.url(scheme.get, call_615741.host, call_615741.base,
                         call_615741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615741, url, valid)

proc call*(call_615742: Call_GetDescribeDBParameterGroups_615725;
          Marker: string = ""; DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615743 = newJObject()
  add(query_615743, "Marker", newJString(Marker))
  add(query_615743, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_615743, "Action", newJString(Action))
  add(query_615743, "Version", newJString(Version))
  if Filters != nil:
    query_615743.add "Filters", Filters
  add(query_615743, "MaxRecords", newJInt(MaxRecords))
  result = call_615742.call(nil, query_615743, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_615725(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_615726, base: "/",
    url: url_GetDescribeDBParameterGroups_615727,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_615784 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBParameters_615786(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameters_615785(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615787 = query.getOrDefault("Action")
  valid_615787 = validateParameter(valid_615787, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_615787 != nil:
    section.add "Action", valid_615787
  var valid_615788 = query.getOrDefault("Version")
  valid_615788 = validateParameter(valid_615788, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615788 != nil:
    section.add "Version", valid_615788
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615789 = header.getOrDefault("X-Amz-Signature")
  valid_615789 = validateParameter(valid_615789, JString, required = false,
                                 default = nil)
  if valid_615789 != nil:
    section.add "X-Amz-Signature", valid_615789
  var valid_615790 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615790 = validateParameter(valid_615790, JString, required = false,
                                 default = nil)
  if valid_615790 != nil:
    section.add "X-Amz-Content-Sha256", valid_615790
  var valid_615791 = header.getOrDefault("X-Amz-Date")
  valid_615791 = validateParameter(valid_615791, JString, required = false,
                                 default = nil)
  if valid_615791 != nil:
    section.add "X-Amz-Date", valid_615791
  var valid_615792 = header.getOrDefault("X-Amz-Credential")
  valid_615792 = validateParameter(valid_615792, JString, required = false,
                                 default = nil)
  if valid_615792 != nil:
    section.add "X-Amz-Credential", valid_615792
  var valid_615793 = header.getOrDefault("X-Amz-Security-Token")
  valid_615793 = validateParameter(valid_615793, JString, required = false,
                                 default = nil)
  if valid_615793 != nil:
    section.add "X-Amz-Security-Token", valid_615793
  var valid_615794 = header.getOrDefault("X-Amz-Algorithm")
  valid_615794 = validateParameter(valid_615794, JString, required = false,
                                 default = nil)
  if valid_615794 != nil:
    section.add "X-Amz-Algorithm", valid_615794
  var valid_615795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615795 = validateParameter(valid_615795, JString, required = false,
                                 default = nil)
  if valid_615795 != nil:
    section.add "X-Amz-SignedHeaders", valid_615795
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_615796 = formData.getOrDefault("Source")
  valid_615796 = validateParameter(valid_615796, JString, required = false,
                                 default = nil)
  if valid_615796 != nil:
    section.add "Source", valid_615796
  var valid_615797 = formData.getOrDefault("MaxRecords")
  valid_615797 = validateParameter(valid_615797, JInt, required = false, default = nil)
  if valid_615797 != nil:
    section.add "MaxRecords", valid_615797
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_615798 = formData.getOrDefault("DBParameterGroupName")
  valid_615798 = validateParameter(valid_615798, JString, required = true,
                                 default = nil)
  if valid_615798 != nil:
    section.add "DBParameterGroupName", valid_615798
  var valid_615799 = formData.getOrDefault("Marker")
  valid_615799 = validateParameter(valid_615799, JString, required = false,
                                 default = nil)
  if valid_615799 != nil:
    section.add "Marker", valid_615799
  var valid_615800 = formData.getOrDefault("Filters")
  valid_615800 = validateParameter(valid_615800, JArray, required = false,
                                 default = nil)
  if valid_615800 != nil:
    section.add "Filters", valid_615800
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615801: Call_PostDescribeDBParameters_615784; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_615801.validator(path, query, header, formData, body)
  let scheme = call_615801.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615801.url(scheme.get, call_615801.host, call_615801.base,
                         call_615801.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615801, url, valid)

proc call*(call_615802: Call_PostDescribeDBParameters_615784;
          DBParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_615803 = newJObject()
  var formData_615804 = newJObject()
  add(formData_615804, "Source", newJString(Source))
  add(formData_615804, "MaxRecords", newJInt(MaxRecords))
  add(formData_615804, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_615804, "Marker", newJString(Marker))
  add(query_615803, "Action", newJString(Action))
  if Filters != nil:
    formData_615804.add "Filters", Filters
  add(query_615803, "Version", newJString(Version))
  result = call_615802.call(nil, query_615803, nil, formData_615804, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_615784(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_615785, base: "/",
    url: url_PostDescribeDBParameters_615786, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_615764 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBParameters_615766(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameters_615765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615767 = query.getOrDefault("Marker")
  valid_615767 = validateParameter(valid_615767, JString, required = false,
                                 default = nil)
  if valid_615767 != nil:
    section.add "Marker", valid_615767
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_615768 = query.getOrDefault("DBParameterGroupName")
  valid_615768 = validateParameter(valid_615768, JString, required = true,
                                 default = nil)
  if valid_615768 != nil:
    section.add "DBParameterGroupName", valid_615768
  var valid_615769 = query.getOrDefault("Source")
  valid_615769 = validateParameter(valid_615769, JString, required = false,
                                 default = nil)
  if valid_615769 != nil:
    section.add "Source", valid_615769
  var valid_615770 = query.getOrDefault("Action")
  valid_615770 = validateParameter(valid_615770, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_615770 != nil:
    section.add "Action", valid_615770
  var valid_615771 = query.getOrDefault("Version")
  valid_615771 = validateParameter(valid_615771, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615771 != nil:
    section.add "Version", valid_615771
  var valid_615772 = query.getOrDefault("Filters")
  valid_615772 = validateParameter(valid_615772, JArray, required = false,
                                 default = nil)
  if valid_615772 != nil:
    section.add "Filters", valid_615772
  var valid_615773 = query.getOrDefault("MaxRecords")
  valid_615773 = validateParameter(valid_615773, JInt, required = false, default = nil)
  if valid_615773 != nil:
    section.add "MaxRecords", valid_615773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615774 = header.getOrDefault("X-Amz-Signature")
  valid_615774 = validateParameter(valid_615774, JString, required = false,
                                 default = nil)
  if valid_615774 != nil:
    section.add "X-Amz-Signature", valid_615774
  var valid_615775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615775 = validateParameter(valid_615775, JString, required = false,
                                 default = nil)
  if valid_615775 != nil:
    section.add "X-Amz-Content-Sha256", valid_615775
  var valid_615776 = header.getOrDefault("X-Amz-Date")
  valid_615776 = validateParameter(valid_615776, JString, required = false,
                                 default = nil)
  if valid_615776 != nil:
    section.add "X-Amz-Date", valid_615776
  var valid_615777 = header.getOrDefault("X-Amz-Credential")
  valid_615777 = validateParameter(valid_615777, JString, required = false,
                                 default = nil)
  if valid_615777 != nil:
    section.add "X-Amz-Credential", valid_615777
  var valid_615778 = header.getOrDefault("X-Amz-Security-Token")
  valid_615778 = validateParameter(valid_615778, JString, required = false,
                                 default = nil)
  if valid_615778 != nil:
    section.add "X-Amz-Security-Token", valid_615778
  var valid_615779 = header.getOrDefault("X-Amz-Algorithm")
  valid_615779 = validateParameter(valid_615779, JString, required = false,
                                 default = nil)
  if valid_615779 != nil:
    section.add "X-Amz-Algorithm", valid_615779
  var valid_615780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615780 = validateParameter(valid_615780, JString, required = false,
                                 default = nil)
  if valid_615780 != nil:
    section.add "X-Amz-SignedHeaders", valid_615780
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615781: Call_GetDescribeDBParameters_615764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_615781.validator(path, query, header, formData, body)
  let scheme = call_615781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615781.url(scheme.get, call_615781.host, call_615781.base,
                         call_615781.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615781, url, valid)

proc call*(call_615782: Call_GetDescribeDBParameters_615764;
          DBParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeDBParameters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615783 = newJObject()
  add(query_615783, "Marker", newJString(Marker))
  add(query_615783, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_615783, "Source", newJString(Source))
  add(query_615783, "Action", newJString(Action))
  add(query_615783, "Version", newJString(Version))
  if Filters != nil:
    query_615783.add "Filters", Filters
  add(query_615783, "MaxRecords", newJInt(MaxRecords))
  result = call_615782.call(nil, query_615783, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_615764(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_615765, base: "/",
    url: url_GetDescribeDBParameters_615766, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxies_615824 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBProxies_615826(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxies_615825(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615827 = query.getOrDefault("Action")
  valid_615827 = validateParameter(valid_615827, JString, required = true,
                                 default = newJString("DescribeDBProxies"))
  if valid_615827 != nil:
    section.add "Action", valid_615827
  var valid_615828 = query.getOrDefault("Version")
  valid_615828 = validateParameter(valid_615828, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615828 != nil:
    section.add "Version", valid_615828
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615829 = header.getOrDefault("X-Amz-Signature")
  valid_615829 = validateParameter(valid_615829, JString, required = false,
                                 default = nil)
  if valid_615829 != nil:
    section.add "X-Amz-Signature", valid_615829
  var valid_615830 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615830 = validateParameter(valid_615830, JString, required = false,
                                 default = nil)
  if valid_615830 != nil:
    section.add "X-Amz-Content-Sha256", valid_615830
  var valid_615831 = header.getOrDefault("X-Amz-Date")
  valid_615831 = validateParameter(valid_615831, JString, required = false,
                                 default = nil)
  if valid_615831 != nil:
    section.add "X-Amz-Date", valid_615831
  var valid_615832 = header.getOrDefault("X-Amz-Credential")
  valid_615832 = validateParameter(valid_615832, JString, required = false,
                                 default = nil)
  if valid_615832 != nil:
    section.add "X-Amz-Credential", valid_615832
  var valid_615833 = header.getOrDefault("X-Amz-Security-Token")
  valid_615833 = validateParameter(valid_615833, JString, required = false,
                                 default = nil)
  if valid_615833 != nil:
    section.add "X-Amz-Security-Token", valid_615833
  var valid_615834 = header.getOrDefault("X-Amz-Algorithm")
  valid_615834 = validateParameter(valid_615834, JString, required = false,
                                 default = nil)
  if valid_615834 != nil:
    section.add "X-Amz-Algorithm", valid_615834
  var valid_615835 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615835 = validateParameter(valid_615835, JString, required = false,
                                 default = nil)
  if valid_615835 != nil:
    section.add "X-Amz-SignedHeaders", valid_615835
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_615836 = formData.getOrDefault("MaxRecords")
  valid_615836 = validateParameter(valid_615836, JInt, required = false, default = nil)
  if valid_615836 != nil:
    section.add "MaxRecords", valid_615836
  var valid_615837 = formData.getOrDefault("Marker")
  valid_615837 = validateParameter(valid_615837, JString, required = false,
                                 default = nil)
  if valid_615837 != nil:
    section.add "Marker", valid_615837
  var valid_615838 = formData.getOrDefault("DBProxyName")
  valid_615838 = validateParameter(valid_615838, JString, required = false,
                                 default = nil)
  if valid_615838 != nil:
    section.add "DBProxyName", valid_615838
  var valid_615839 = formData.getOrDefault("Filters")
  valid_615839 = validateParameter(valid_615839, JArray, required = false,
                                 default = nil)
  if valid_615839 != nil:
    section.add "Filters", valid_615839
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615840: Call_PostDescribeDBProxies_615824; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  let valid = call_615840.validator(path, query, header, formData, body)
  let scheme = call_615840.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615840.url(scheme.get, call_615840.host, call_615840.base,
                         call_615840.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615840, url, valid)

proc call*(call_615841: Call_PostDescribeDBProxies_615824; MaxRecords: int = 0;
          Marker: string = ""; DBProxyName: string = "";
          Action: string = "DescribeDBProxies"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxies
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string
  ##              : The name of the DB proxy.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_615842 = newJObject()
  var formData_615843 = newJObject()
  add(formData_615843, "MaxRecords", newJInt(MaxRecords))
  add(formData_615843, "Marker", newJString(Marker))
  add(formData_615843, "DBProxyName", newJString(DBProxyName))
  add(query_615842, "Action", newJString(Action))
  if Filters != nil:
    formData_615843.add "Filters", Filters
  add(query_615842, "Version", newJString(Version))
  result = call_615841.call(nil, query_615842, nil, formData_615843, nil)

var postDescribeDBProxies* = Call_PostDescribeDBProxies_615824(
    name: "postDescribeDBProxies", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxies",
    validator: validate_PostDescribeDBProxies_615825, base: "/",
    url: url_PostDescribeDBProxies_615826, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxies_615805 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBProxies_615807(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxies_615806(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615808 = query.getOrDefault("Marker")
  valid_615808 = validateParameter(valid_615808, JString, required = false,
                                 default = nil)
  if valid_615808 != nil:
    section.add "Marker", valid_615808
  var valid_615809 = query.getOrDefault("Action")
  valid_615809 = validateParameter(valid_615809, JString, required = true,
                                 default = newJString("DescribeDBProxies"))
  if valid_615809 != nil:
    section.add "Action", valid_615809
  var valid_615810 = query.getOrDefault("Version")
  valid_615810 = validateParameter(valid_615810, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615810 != nil:
    section.add "Version", valid_615810
  var valid_615811 = query.getOrDefault("DBProxyName")
  valid_615811 = validateParameter(valid_615811, JString, required = false,
                                 default = nil)
  if valid_615811 != nil:
    section.add "DBProxyName", valid_615811
  var valid_615812 = query.getOrDefault("Filters")
  valid_615812 = validateParameter(valid_615812, JArray, required = false,
                                 default = nil)
  if valid_615812 != nil:
    section.add "Filters", valid_615812
  var valid_615813 = query.getOrDefault("MaxRecords")
  valid_615813 = validateParameter(valid_615813, JInt, required = false, default = nil)
  if valid_615813 != nil:
    section.add "MaxRecords", valid_615813
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615814 = header.getOrDefault("X-Amz-Signature")
  valid_615814 = validateParameter(valid_615814, JString, required = false,
                                 default = nil)
  if valid_615814 != nil:
    section.add "X-Amz-Signature", valid_615814
  var valid_615815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615815 = validateParameter(valid_615815, JString, required = false,
                                 default = nil)
  if valid_615815 != nil:
    section.add "X-Amz-Content-Sha256", valid_615815
  var valid_615816 = header.getOrDefault("X-Amz-Date")
  valid_615816 = validateParameter(valid_615816, JString, required = false,
                                 default = nil)
  if valid_615816 != nil:
    section.add "X-Amz-Date", valid_615816
  var valid_615817 = header.getOrDefault("X-Amz-Credential")
  valid_615817 = validateParameter(valid_615817, JString, required = false,
                                 default = nil)
  if valid_615817 != nil:
    section.add "X-Amz-Credential", valid_615817
  var valid_615818 = header.getOrDefault("X-Amz-Security-Token")
  valid_615818 = validateParameter(valid_615818, JString, required = false,
                                 default = nil)
  if valid_615818 != nil:
    section.add "X-Amz-Security-Token", valid_615818
  var valid_615819 = header.getOrDefault("X-Amz-Algorithm")
  valid_615819 = validateParameter(valid_615819, JString, required = false,
                                 default = nil)
  if valid_615819 != nil:
    section.add "X-Amz-Algorithm", valid_615819
  var valid_615820 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615820 = validateParameter(valid_615820, JString, required = false,
                                 default = nil)
  if valid_615820 != nil:
    section.add "X-Amz-SignedHeaders", valid_615820
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615821: Call_GetDescribeDBProxies_615805; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  let valid = call_615821.validator(path, query, header, formData, body)
  let scheme = call_615821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615821.url(scheme.get, call_615821.host, call_615821.base,
                         call_615821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615821, url, valid)

proc call*(call_615822: Call_GetDescribeDBProxies_615805; Marker: string = "";
          Action: string = "DescribeDBProxies"; Version: string = "2014-10-31";
          DBProxyName: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxies
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615823 = newJObject()
  add(query_615823, "Marker", newJString(Marker))
  add(query_615823, "Action", newJString(Action))
  add(query_615823, "Version", newJString(Version))
  add(query_615823, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_615823.add "Filters", Filters
  add(query_615823, "MaxRecords", newJInt(MaxRecords))
  result = call_615822.call(nil, query_615823, nil, nil, nil)

var getDescribeDBProxies* = Call_GetDescribeDBProxies_615805(
    name: "getDescribeDBProxies", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxies",
    validator: validate_GetDescribeDBProxies_615806, base: "/",
    url: url_GetDescribeDBProxies_615807, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxyTargetGroups_615864 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBProxyTargetGroups_615866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxyTargetGroups_615865(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615867 = query.getOrDefault("Action")
  valid_615867 = validateParameter(valid_615867, JString, required = true, default = newJString(
      "DescribeDBProxyTargetGroups"))
  if valid_615867 != nil:
    section.add "Action", valid_615867
  var valid_615868 = query.getOrDefault("Version")
  valid_615868 = validateParameter(valid_615868, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615868 != nil:
    section.add "Version", valid_615868
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615869 = header.getOrDefault("X-Amz-Signature")
  valid_615869 = validateParameter(valid_615869, JString, required = false,
                                 default = nil)
  if valid_615869 != nil:
    section.add "X-Amz-Signature", valid_615869
  var valid_615870 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615870 = validateParameter(valid_615870, JString, required = false,
                                 default = nil)
  if valid_615870 != nil:
    section.add "X-Amz-Content-Sha256", valid_615870
  var valid_615871 = header.getOrDefault("X-Amz-Date")
  valid_615871 = validateParameter(valid_615871, JString, required = false,
                                 default = nil)
  if valid_615871 != nil:
    section.add "X-Amz-Date", valid_615871
  var valid_615872 = header.getOrDefault("X-Amz-Credential")
  valid_615872 = validateParameter(valid_615872, JString, required = false,
                                 default = nil)
  if valid_615872 != nil:
    section.add "X-Amz-Credential", valid_615872
  var valid_615873 = header.getOrDefault("X-Amz-Security-Token")
  valid_615873 = validateParameter(valid_615873, JString, required = false,
                                 default = nil)
  if valid_615873 != nil:
    section.add "X-Amz-Security-Token", valid_615873
  var valid_615874 = header.getOrDefault("X-Amz-Algorithm")
  valid_615874 = validateParameter(valid_615874, JString, required = false,
                                 default = nil)
  if valid_615874 != nil:
    section.add "X-Amz-Algorithm", valid_615874
  var valid_615875 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615875 = validateParameter(valid_615875, JString, required = false,
                                 default = nil)
  if valid_615875 != nil:
    section.add "X-Amz-SignedHeaders", valid_615875
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_615876 = formData.getOrDefault("MaxRecords")
  valid_615876 = validateParameter(valid_615876, JInt, required = false, default = nil)
  if valid_615876 != nil:
    section.add "MaxRecords", valid_615876
  var valid_615877 = formData.getOrDefault("TargetGroupName")
  valid_615877 = validateParameter(valid_615877, JString, required = false,
                                 default = nil)
  if valid_615877 != nil:
    section.add "TargetGroupName", valid_615877
  var valid_615878 = formData.getOrDefault("Marker")
  valid_615878 = validateParameter(valid_615878, JString, required = false,
                                 default = nil)
  if valid_615878 != nil:
    section.add "Marker", valid_615878
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_615879 = formData.getOrDefault("DBProxyName")
  valid_615879 = validateParameter(valid_615879, JString, required = true,
                                 default = nil)
  if valid_615879 != nil:
    section.add "DBProxyName", valid_615879
  var valid_615880 = formData.getOrDefault("Filters")
  valid_615880 = validateParameter(valid_615880, JArray, required = false,
                                 default = nil)
  if valid_615880 != nil:
    section.add "Filters", valid_615880
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615881: Call_PostDescribeDBProxyTargetGroups_615864;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  let valid = call_615881.validator(path, query, header, formData, body)
  let scheme = call_615881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615881.url(scheme.get, call_615881.host, call_615881.base,
                         call_615881.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615881, url, valid)

proc call*(call_615882: Call_PostDescribeDBProxyTargetGroups_615864;
          DBProxyName: string; MaxRecords: int = 0; TargetGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeDBProxyTargetGroups";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxyTargetGroups
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_615883 = newJObject()
  var formData_615884 = newJObject()
  add(formData_615884, "MaxRecords", newJInt(MaxRecords))
  add(formData_615884, "TargetGroupName", newJString(TargetGroupName))
  add(formData_615884, "Marker", newJString(Marker))
  add(formData_615884, "DBProxyName", newJString(DBProxyName))
  add(query_615883, "Action", newJString(Action))
  if Filters != nil:
    formData_615884.add "Filters", Filters
  add(query_615883, "Version", newJString(Version))
  result = call_615882.call(nil, query_615883, nil, formData_615884, nil)

var postDescribeDBProxyTargetGroups* = Call_PostDescribeDBProxyTargetGroups_615864(
    name: "postDescribeDBProxyTargetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargetGroups",
    validator: validate_PostDescribeDBProxyTargetGroups_615865, base: "/",
    url: url_PostDescribeDBProxyTargetGroups_615866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxyTargetGroups_615844 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBProxyTargetGroups_615846(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxyTargetGroups_615845(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615847 = query.getOrDefault("Marker")
  valid_615847 = validateParameter(valid_615847, JString, required = false,
                                 default = nil)
  if valid_615847 != nil:
    section.add "Marker", valid_615847
  var valid_615848 = query.getOrDefault("TargetGroupName")
  valid_615848 = validateParameter(valid_615848, JString, required = false,
                                 default = nil)
  if valid_615848 != nil:
    section.add "TargetGroupName", valid_615848
  var valid_615849 = query.getOrDefault("Action")
  valid_615849 = validateParameter(valid_615849, JString, required = true, default = newJString(
      "DescribeDBProxyTargetGroups"))
  if valid_615849 != nil:
    section.add "Action", valid_615849
  var valid_615850 = query.getOrDefault("Version")
  valid_615850 = validateParameter(valid_615850, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615850 != nil:
    section.add "Version", valid_615850
  var valid_615851 = query.getOrDefault("DBProxyName")
  valid_615851 = validateParameter(valid_615851, JString, required = true,
                                 default = nil)
  if valid_615851 != nil:
    section.add "DBProxyName", valid_615851
  var valid_615852 = query.getOrDefault("Filters")
  valid_615852 = validateParameter(valid_615852, JArray, required = false,
                                 default = nil)
  if valid_615852 != nil:
    section.add "Filters", valid_615852
  var valid_615853 = query.getOrDefault("MaxRecords")
  valid_615853 = validateParameter(valid_615853, JInt, required = false, default = nil)
  if valid_615853 != nil:
    section.add "MaxRecords", valid_615853
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615854 = header.getOrDefault("X-Amz-Signature")
  valid_615854 = validateParameter(valid_615854, JString, required = false,
                                 default = nil)
  if valid_615854 != nil:
    section.add "X-Amz-Signature", valid_615854
  var valid_615855 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615855 = validateParameter(valid_615855, JString, required = false,
                                 default = nil)
  if valid_615855 != nil:
    section.add "X-Amz-Content-Sha256", valid_615855
  var valid_615856 = header.getOrDefault("X-Amz-Date")
  valid_615856 = validateParameter(valid_615856, JString, required = false,
                                 default = nil)
  if valid_615856 != nil:
    section.add "X-Amz-Date", valid_615856
  var valid_615857 = header.getOrDefault("X-Amz-Credential")
  valid_615857 = validateParameter(valid_615857, JString, required = false,
                                 default = nil)
  if valid_615857 != nil:
    section.add "X-Amz-Credential", valid_615857
  var valid_615858 = header.getOrDefault("X-Amz-Security-Token")
  valid_615858 = validateParameter(valid_615858, JString, required = false,
                                 default = nil)
  if valid_615858 != nil:
    section.add "X-Amz-Security-Token", valid_615858
  var valid_615859 = header.getOrDefault("X-Amz-Algorithm")
  valid_615859 = validateParameter(valid_615859, JString, required = false,
                                 default = nil)
  if valid_615859 != nil:
    section.add "X-Amz-Algorithm", valid_615859
  var valid_615860 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615860 = validateParameter(valid_615860, JString, required = false,
                                 default = nil)
  if valid_615860 != nil:
    section.add "X-Amz-SignedHeaders", valid_615860
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615861: Call_GetDescribeDBProxyTargetGroups_615844; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  let valid = call_615861.validator(path, query, header, formData, body)
  let scheme = call_615861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615861.url(scheme.get, call_615861.host, call_615861.base,
                         call_615861.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615861, url, valid)

proc call*(call_615862: Call_GetDescribeDBProxyTargetGroups_615844;
          DBProxyName: string; Marker: string = ""; TargetGroupName: string = "";
          Action: string = "DescribeDBProxyTargetGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxyTargetGroups
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615863 = newJObject()
  add(query_615863, "Marker", newJString(Marker))
  add(query_615863, "TargetGroupName", newJString(TargetGroupName))
  add(query_615863, "Action", newJString(Action))
  add(query_615863, "Version", newJString(Version))
  add(query_615863, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_615863.add "Filters", Filters
  add(query_615863, "MaxRecords", newJInt(MaxRecords))
  result = call_615862.call(nil, query_615863, nil, nil, nil)

var getDescribeDBProxyTargetGroups* = Call_GetDescribeDBProxyTargetGroups_615844(
    name: "getDescribeDBProxyTargetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargetGroups",
    validator: validate_GetDescribeDBProxyTargetGroups_615845, base: "/",
    url: url_GetDescribeDBProxyTargetGroups_615846,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxyTargets_615905 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBProxyTargets_615907(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxyTargets_615906(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615908 = query.getOrDefault("Action")
  valid_615908 = validateParameter(valid_615908, JString, required = true,
                                 default = newJString("DescribeDBProxyTargets"))
  if valid_615908 != nil:
    section.add "Action", valid_615908
  var valid_615909 = query.getOrDefault("Version")
  valid_615909 = validateParameter(valid_615909, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615909 != nil:
    section.add "Version", valid_615909
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615910 = header.getOrDefault("X-Amz-Signature")
  valid_615910 = validateParameter(valid_615910, JString, required = false,
                                 default = nil)
  if valid_615910 != nil:
    section.add "X-Amz-Signature", valid_615910
  var valid_615911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615911 = validateParameter(valid_615911, JString, required = false,
                                 default = nil)
  if valid_615911 != nil:
    section.add "X-Amz-Content-Sha256", valid_615911
  var valid_615912 = header.getOrDefault("X-Amz-Date")
  valid_615912 = validateParameter(valid_615912, JString, required = false,
                                 default = nil)
  if valid_615912 != nil:
    section.add "X-Amz-Date", valid_615912
  var valid_615913 = header.getOrDefault("X-Amz-Credential")
  valid_615913 = validateParameter(valid_615913, JString, required = false,
                                 default = nil)
  if valid_615913 != nil:
    section.add "X-Amz-Credential", valid_615913
  var valid_615914 = header.getOrDefault("X-Amz-Security-Token")
  valid_615914 = validateParameter(valid_615914, JString, required = false,
                                 default = nil)
  if valid_615914 != nil:
    section.add "X-Amz-Security-Token", valid_615914
  var valid_615915 = header.getOrDefault("X-Amz-Algorithm")
  valid_615915 = validateParameter(valid_615915, JString, required = false,
                                 default = nil)
  if valid_615915 != nil:
    section.add "X-Amz-Algorithm", valid_615915
  var valid_615916 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615916 = validateParameter(valid_615916, JString, required = false,
                                 default = nil)
  if valid_615916 != nil:
    section.add "X-Amz-SignedHeaders", valid_615916
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_615917 = formData.getOrDefault("MaxRecords")
  valid_615917 = validateParameter(valid_615917, JInt, required = false, default = nil)
  if valid_615917 != nil:
    section.add "MaxRecords", valid_615917
  var valid_615918 = formData.getOrDefault("TargetGroupName")
  valid_615918 = validateParameter(valid_615918, JString, required = false,
                                 default = nil)
  if valid_615918 != nil:
    section.add "TargetGroupName", valid_615918
  var valid_615919 = formData.getOrDefault("Marker")
  valid_615919 = validateParameter(valid_615919, JString, required = false,
                                 default = nil)
  if valid_615919 != nil:
    section.add "Marker", valid_615919
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_615920 = formData.getOrDefault("DBProxyName")
  valid_615920 = validateParameter(valid_615920, JString, required = true,
                                 default = nil)
  if valid_615920 != nil:
    section.add "DBProxyName", valid_615920
  var valid_615921 = formData.getOrDefault("Filters")
  valid_615921 = validateParameter(valid_615921, JArray, required = false,
                                 default = nil)
  if valid_615921 != nil:
    section.add "Filters", valid_615921
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615922: Call_PostDescribeDBProxyTargets_615905; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  let valid = call_615922.validator(path, query, header, formData, body)
  let scheme = call_615922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615922.url(scheme.get, call_615922.host, call_615922.base,
                         call_615922.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615922, url, valid)

proc call*(call_615923: Call_PostDescribeDBProxyTargets_615905;
          DBProxyName: string; MaxRecords: int = 0; TargetGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeDBProxyTargets";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_615924 = newJObject()
  var formData_615925 = newJObject()
  add(formData_615925, "MaxRecords", newJInt(MaxRecords))
  add(formData_615925, "TargetGroupName", newJString(TargetGroupName))
  add(formData_615925, "Marker", newJString(Marker))
  add(formData_615925, "DBProxyName", newJString(DBProxyName))
  add(query_615924, "Action", newJString(Action))
  if Filters != nil:
    formData_615925.add "Filters", Filters
  add(query_615924, "Version", newJString(Version))
  result = call_615923.call(nil, query_615924, nil, formData_615925, nil)

var postDescribeDBProxyTargets* = Call_PostDescribeDBProxyTargets_615905(
    name: "postDescribeDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargets",
    validator: validate_PostDescribeDBProxyTargets_615906, base: "/",
    url: url_PostDescribeDBProxyTargets_615907,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxyTargets_615885 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBProxyTargets_615887(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxyTargets_615886(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615888 = query.getOrDefault("Marker")
  valid_615888 = validateParameter(valid_615888, JString, required = false,
                                 default = nil)
  if valid_615888 != nil:
    section.add "Marker", valid_615888
  var valid_615889 = query.getOrDefault("TargetGroupName")
  valid_615889 = validateParameter(valid_615889, JString, required = false,
                                 default = nil)
  if valid_615889 != nil:
    section.add "TargetGroupName", valid_615889
  var valid_615890 = query.getOrDefault("Action")
  valid_615890 = validateParameter(valid_615890, JString, required = true,
                                 default = newJString("DescribeDBProxyTargets"))
  if valid_615890 != nil:
    section.add "Action", valid_615890
  var valid_615891 = query.getOrDefault("Version")
  valid_615891 = validateParameter(valid_615891, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615891 != nil:
    section.add "Version", valid_615891
  var valid_615892 = query.getOrDefault("DBProxyName")
  valid_615892 = validateParameter(valid_615892, JString, required = true,
                                 default = nil)
  if valid_615892 != nil:
    section.add "DBProxyName", valid_615892
  var valid_615893 = query.getOrDefault("Filters")
  valid_615893 = validateParameter(valid_615893, JArray, required = false,
                                 default = nil)
  if valid_615893 != nil:
    section.add "Filters", valid_615893
  var valid_615894 = query.getOrDefault("MaxRecords")
  valid_615894 = validateParameter(valid_615894, JInt, required = false, default = nil)
  if valid_615894 != nil:
    section.add "MaxRecords", valid_615894
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615895 = header.getOrDefault("X-Amz-Signature")
  valid_615895 = validateParameter(valid_615895, JString, required = false,
                                 default = nil)
  if valid_615895 != nil:
    section.add "X-Amz-Signature", valid_615895
  var valid_615896 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615896 = validateParameter(valid_615896, JString, required = false,
                                 default = nil)
  if valid_615896 != nil:
    section.add "X-Amz-Content-Sha256", valid_615896
  var valid_615897 = header.getOrDefault("X-Amz-Date")
  valid_615897 = validateParameter(valid_615897, JString, required = false,
                                 default = nil)
  if valid_615897 != nil:
    section.add "X-Amz-Date", valid_615897
  var valid_615898 = header.getOrDefault("X-Amz-Credential")
  valid_615898 = validateParameter(valid_615898, JString, required = false,
                                 default = nil)
  if valid_615898 != nil:
    section.add "X-Amz-Credential", valid_615898
  var valid_615899 = header.getOrDefault("X-Amz-Security-Token")
  valid_615899 = validateParameter(valid_615899, JString, required = false,
                                 default = nil)
  if valid_615899 != nil:
    section.add "X-Amz-Security-Token", valid_615899
  var valid_615900 = header.getOrDefault("X-Amz-Algorithm")
  valid_615900 = validateParameter(valid_615900, JString, required = false,
                                 default = nil)
  if valid_615900 != nil:
    section.add "X-Amz-Algorithm", valid_615900
  var valid_615901 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615901 = validateParameter(valid_615901, JString, required = false,
                                 default = nil)
  if valid_615901 != nil:
    section.add "X-Amz-SignedHeaders", valid_615901
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615902: Call_GetDescribeDBProxyTargets_615885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  let valid = call_615902.validator(path, query, header, formData, body)
  let scheme = call_615902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615902.url(scheme.get, call_615902.host, call_615902.base,
                         call_615902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615902, url, valid)

proc call*(call_615903: Call_GetDescribeDBProxyTargets_615885; DBProxyName: string;
          Marker: string = ""; TargetGroupName: string = "";
          Action: string = "DescribeDBProxyTargets"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615904 = newJObject()
  add(query_615904, "Marker", newJString(Marker))
  add(query_615904, "TargetGroupName", newJString(TargetGroupName))
  add(query_615904, "Action", newJString(Action))
  add(query_615904, "Version", newJString(Version))
  add(query_615904, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_615904.add "Filters", Filters
  add(query_615904, "MaxRecords", newJInt(MaxRecords))
  result = call_615903.call(nil, query_615904, nil, nil, nil)

var getDescribeDBProxyTargets* = Call_GetDescribeDBProxyTargets_615885(
    name: "getDescribeDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargets",
    validator: validate_GetDescribeDBProxyTargets_615886, base: "/",
    url: url_GetDescribeDBProxyTargets_615887,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSecurityGroups_615945 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBSecurityGroups_615947(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSecurityGroups_615946(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615948 = query.getOrDefault("Action")
  valid_615948 = validateParameter(valid_615948, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_615948 != nil:
    section.add "Action", valid_615948
  var valid_615949 = query.getOrDefault("Version")
  valid_615949 = validateParameter(valid_615949, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615949 != nil:
    section.add "Version", valid_615949
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615950 = header.getOrDefault("X-Amz-Signature")
  valid_615950 = validateParameter(valid_615950, JString, required = false,
                                 default = nil)
  if valid_615950 != nil:
    section.add "X-Amz-Signature", valid_615950
  var valid_615951 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615951 = validateParameter(valid_615951, JString, required = false,
                                 default = nil)
  if valid_615951 != nil:
    section.add "X-Amz-Content-Sha256", valid_615951
  var valid_615952 = header.getOrDefault("X-Amz-Date")
  valid_615952 = validateParameter(valid_615952, JString, required = false,
                                 default = nil)
  if valid_615952 != nil:
    section.add "X-Amz-Date", valid_615952
  var valid_615953 = header.getOrDefault("X-Amz-Credential")
  valid_615953 = validateParameter(valid_615953, JString, required = false,
                                 default = nil)
  if valid_615953 != nil:
    section.add "X-Amz-Credential", valid_615953
  var valid_615954 = header.getOrDefault("X-Amz-Security-Token")
  valid_615954 = validateParameter(valid_615954, JString, required = false,
                                 default = nil)
  if valid_615954 != nil:
    section.add "X-Amz-Security-Token", valid_615954
  var valid_615955 = header.getOrDefault("X-Amz-Algorithm")
  valid_615955 = validateParameter(valid_615955, JString, required = false,
                                 default = nil)
  if valid_615955 != nil:
    section.add "X-Amz-Algorithm", valid_615955
  var valid_615956 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615956 = validateParameter(valid_615956, JString, required = false,
                                 default = nil)
  if valid_615956 != nil:
    section.add "X-Amz-SignedHeaders", valid_615956
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_615957 = formData.getOrDefault("DBSecurityGroupName")
  valid_615957 = validateParameter(valid_615957, JString, required = false,
                                 default = nil)
  if valid_615957 != nil:
    section.add "DBSecurityGroupName", valid_615957
  var valid_615958 = formData.getOrDefault("MaxRecords")
  valid_615958 = validateParameter(valid_615958, JInt, required = false, default = nil)
  if valid_615958 != nil:
    section.add "MaxRecords", valid_615958
  var valid_615959 = formData.getOrDefault("Marker")
  valid_615959 = validateParameter(valid_615959, JString, required = false,
                                 default = nil)
  if valid_615959 != nil:
    section.add "Marker", valid_615959
  var valid_615960 = formData.getOrDefault("Filters")
  valid_615960 = validateParameter(valid_615960, JArray, required = false,
                                 default = nil)
  if valid_615960 != nil:
    section.add "Filters", valid_615960
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615961: Call_PostDescribeDBSecurityGroups_615945; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_615961.validator(path, query, header, formData, body)
  let scheme = call_615961.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615961.url(scheme.get, call_615961.host, call_615961.base,
                         call_615961.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615961, url, valid)

proc call*(call_615962: Call_PostDescribeDBSecurityGroups_615945;
          DBSecurityGroupName: string = ""; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSecurityGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_615963 = newJObject()
  var formData_615964 = newJObject()
  add(formData_615964, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_615964, "MaxRecords", newJInt(MaxRecords))
  add(formData_615964, "Marker", newJString(Marker))
  add(query_615963, "Action", newJString(Action))
  if Filters != nil:
    formData_615964.add "Filters", Filters
  add(query_615963, "Version", newJString(Version))
  result = call_615962.call(nil, query_615963, nil, formData_615964, nil)

var postDescribeDBSecurityGroups* = Call_PostDescribeDBSecurityGroups_615945(
    name: "postDescribeDBSecurityGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_PostDescribeDBSecurityGroups_615946, base: "/",
    url: url_PostDescribeDBSecurityGroups_615947,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSecurityGroups_615926 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBSecurityGroups_615928(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSecurityGroups_615927(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_615929 = query.getOrDefault("Marker")
  valid_615929 = validateParameter(valid_615929, JString, required = false,
                                 default = nil)
  if valid_615929 != nil:
    section.add "Marker", valid_615929
  var valid_615930 = query.getOrDefault("DBSecurityGroupName")
  valid_615930 = validateParameter(valid_615930, JString, required = false,
                                 default = nil)
  if valid_615930 != nil:
    section.add "DBSecurityGroupName", valid_615930
  var valid_615931 = query.getOrDefault("Action")
  valid_615931 = validateParameter(valid_615931, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_615931 != nil:
    section.add "Action", valid_615931
  var valid_615932 = query.getOrDefault("Version")
  valid_615932 = validateParameter(valid_615932, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615932 != nil:
    section.add "Version", valid_615932
  var valid_615933 = query.getOrDefault("Filters")
  valid_615933 = validateParameter(valid_615933, JArray, required = false,
                                 default = nil)
  if valid_615933 != nil:
    section.add "Filters", valid_615933
  var valid_615934 = query.getOrDefault("MaxRecords")
  valid_615934 = validateParameter(valid_615934, JInt, required = false, default = nil)
  if valid_615934 != nil:
    section.add "MaxRecords", valid_615934
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615935 = header.getOrDefault("X-Amz-Signature")
  valid_615935 = validateParameter(valid_615935, JString, required = false,
                                 default = nil)
  if valid_615935 != nil:
    section.add "X-Amz-Signature", valid_615935
  var valid_615936 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615936 = validateParameter(valid_615936, JString, required = false,
                                 default = nil)
  if valid_615936 != nil:
    section.add "X-Amz-Content-Sha256", valid_615936
  var valid_615937 = header.getOrDefault("X-Amz-Date")
  valid_615937 = validateParameter(valid_615937, JString, required = false,
                                 default = nil)
  if valid_615937 != nil:
    section.add "X-Amz-Date", valid_615937
  var valid_615938 = header.getOrDefault("X-Amz-Credential")
  valid_615938 = validateParameter(valid_615938, JString, required = false,
                                 default = nil)
  if valid_615938 != nil:
    section.add "X-Amz-Credential", valid_615938
  var valid_615939 = header.getOrDefault("X-Amz-Security-Token")
  valid_615939 = validateParameter(valid_615939, JString, required = false,
                                 default = nil)
  if valid_615939 != nil:
    section.add "X-Amz-Security-Token", valid_615939
  var valid_615940 = header.getOrDefault("X-Amz-Algorithm")
  valid_615940 = validateParameter(valid_615940, JString, required = false,
                                 default = nil)
  if valid_615940 != nil:
    section.add "X-Amz-Algorithm", valid_615940
  var valid_615941 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615941 = validateParameter(valid_615941, JString, required = false,
                                 default = nil)
  if valid_615941 != nil:
    section.add "X-Amz-SignedHeaders", valid_615941
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615942: Call_GetDescribeDBSecurityGroups_615926; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_615942.validator(path, query, header, formData, body)
  let scheme = call_615942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615942.url(scheme.get, call_615942.host, call_615942.base,
                         call_615942.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615942, url, valid)

proc call*(call_615943: Call_GetDescribeDBSecurityGroups_615926;
          Marker: string = ""; DBSecurityGroupName: string = "";
          Action: string = "DescribeDBSecurityGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_615944 = newJObject()
  add(query_615944, "Marker", newJString(Marker))
  add(query_615944, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_615944, "Action", newJString(Action))
  add(query_615944, "Version", newJString(Version))
  if Filters != nil:
    query_615944.add "Filters", Filters
  add(query_615944, "MaxRecords", newJInt(MaxRecords))
  result = call_615943.call(nil, query_615944, nil, nil, nil)

var getDescribeDBSecurityGroups* = Call_GetDescribeDBSecurityGroups_615926(
    name: "getDescribeDBSecurityGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_GetDescribeDBSecurityGroups_615927, base: "/",
    url: url_GetDescribeDBSecurityGroups_615928,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshotAttributes_615981 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBSnapshotAttributes_615983(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSnapshotAttributes_615982(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615984 = query.getOrDefault("Action")
  valid_615984 = validateParameter(valid_615984, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_615984 != nil:
    section.add "Action", valid_615984
  var valid_615985 = query.getOrDefault("Version")
  valid_615985 = validateParameter(valid_615985, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615985 != nil:
    section.add "Version", valid_615985
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615986 = header.getOrDefault("X-Amz-Signature")
  valid_615986 = validateParameter(valid_615986, JString, required = false,
                                 default = nil)
  if valid_615986 != nil:
    section.add "X-Amz-Signature", valid_615986
  var valid_615987 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615987 = validateParameter(valid_615987, JString, required = false,
                                 default = nil)
  if valid_615987 != nil:
    section.add "X-Amz-Content-Sha256", valid_615987
  var valid_615988 = header.getOrDefault("X-Amz-Date")
  valid_615988 = validateParameter(valid_615988, JString, required = false,
                                 default = nil)
  if valid_615988 != nil:
    section.add "X-Amz-Date", valid_615988
  var valid_615989 = header.getOrDefault("X-Amz-Credential")
  valid_615989 = validateParameter(valid_615989, JString, required = false,
                                 default = nil)
  if valid_615989 != nil:
    section.add "X-Amz-Credential", valid_615989
  var valid_615990 = header.getOrDefault("X-Amz-Security-Token")
  valid_615990 = validateParameter(valid_615990, JString, required = false,
                                 default = nil)
  if valid_615990 != nil:
    section.add "X-Amz-Security-Token", valid_615990
  var valid_615991 = header.getOrDefault("X-Amz-Algorithm")
  valid_615991 = validateParameter(valid_615991, JString, required = false,
                                 default = nil)
  if valid_615991 != nil:
    section.add "X-Amz-Algorithm", valid_615991
  var valid_615992 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615992 = validateParameter(valid_615992, JString, required = false,
                                 default = nil)
  if valid_615992 != nil:
    section.add "X-Amz-SignedHeaders", valid_615992
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_615993 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_615993 = validateParameter(valid_615993, JString, required = true,
                                 default = nil)
  if valid_615993 != nil:
    section.add "DBSnapshotIdentifier", valid_615993
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615994: Call_PostDescribeDBSnapshotAttributes_615981;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_615994.validator(path, query, header, formData, body)
  let scheme = call_615994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615994.url(scheme.get, call_615994.host, call_615994.base,
                         call_615994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615994, url, valid)

proc call*(call_615995: Call_PostDescribeDBSnapshotAttributes_615981;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615996 = newJObject()
  var formData_615997 = newJObject()
  add(formData_615997, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_615996, "Action", newJString(Action))
  add(query_615996, "Version", newJString(Version))
  result = call_615995.call(nil, query_615996, nil, formData_615997, nil)

var postDescribeDBSnapshotAttributes* = Call_PostDescribeDBSnapshotAttributes_615981(
    name: "postDescribeDBSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_PostDescribeDBSnapshotAttributes_615982, base: "/",
    url: url_PostDescribeDBSnapshotAttributes_615983,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshotAttributes_615965 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBSnapshotAttributes_615967(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSnapshotAttributes_615966(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_615968 = query.getOrDefault("DBSnapshotIdentifier")
  valid_615968 = validateParameter(valid_615968, JString, required = true,
                                 default = nil)
  if valid_615968 != nil:
    section.add "DBSnapshotIdentifier", valid_615968
  var valid_615969 = query.getOrDefault("Action")
  valid_615969 = validateParameter(valid_615969, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_615969 != nil:
    section.add "Action", valid_615969
  var valid_615970 = query.getOrDefault("Version")
  valid_615970 = validateParameter(valid_615970, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_615970 != nil:
    section.add "Version", valid_615970
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615971 = header.getOrDefault("X-Amz-Signature")
  valid_615971 = validateParameter(valid_615971, JString, required = false,
                                 default = nil)
  if valid_615971 != nil:
    section.add "X-Amz-Signature", valid_615971
  var valid_615972 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615972 = validateParameter(valid_615972, JString, required = false,
                                 default = nil)
  if valid_615972 != nil:
    section.add "X-Amz-Content-Sha256", valid_615972
  var valid_615973 = header.getOrDefault("X-Amz-Date")
  valid_615973 = validateParameter(valid_615973, JString, required = false,
                                 default = nil)
  if valid_615973 != nil:
    section.add "X-Amz-Date", valid_615973
  var valid_615974 = header.getOrDefault("X-Amz-Credential")
  valid_615974 = validateParameter(valid_615974, JString, required = false,
                                 default = nil)
  if valid_615974 != nil:
    section.add "X-Amz-Credential", valid_615974
  var valid_615975 = header.getOrDefault("X-Amz-Security-Token")
  valid_615975 = validateParameter(valid_615975, JString, required = false,
                                 default = nil)
  if valid_615975 != nil:
    section.add "X-Amz-Security-Token", valid_615975
  var valid_615976 = header.getOrDefault("X-Amz-Algorithm")
  valid_615976 = validateParameter(valid_615976, JString, required = false,
                                 default = nil)
  if valid_615976 != nil:
    section.add "X-Amz-Algorithm", valid_615976
  var valid_615977 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615977 = validateParameter(valid_615977, JString, required = false,
                                 default = nil)
  if valid_615977 != nil:
    section.add "X-Amz-SignedHeaders", valid_615977
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615978: Call_GetDescribeDBSnapshotAttributes_615965;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_615978.validator(path, query, header, formData, body)
  let scheme = call_615978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615978.url(scheme.get, call_615978.host, call_615978.base,
                         call_615978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615978, url, valid)

proc call*(call_615979: Call_GetDescribeDBSnapshotAttributes_615965;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615980 = newJObject()
  add(query_615980, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_615980, "Action", newJString(Action))
  add(query_615980, "Version", newJString(Version))
  result = call_615979.call(nil, query_615980, nil, nil, nil)

var getDescribeDBSnapshotAttributes* = Call_GetDescribeDBSnapshotAttributes_615965(
    name: "getDescribeDBSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_GetDescribeDBSnapshotAttributes_615966, base: "/",
    url: url_GetDescribeDBSnapshotAttributes_615967,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshots_616022 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBSnapshots_616024(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSnapshots_616023(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616025 = query.getOrDefault("Action")
  valid_616025 = validateParameter(valid_616025, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_616025 != nil:
    section.add "Action", valid_616025
  var valid_616026 = query.getOrDefault("Version")
  valid_616026 = validateParameter(valid_616026, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616026 != nil:
    section.add "Version", valid_616026
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616027 = header.getOrDefault("X-Amz-Signature")
  valid_616027 = validateParameter(valid_616027, JString, required = false,
                                 default = nil)
  if valid_616027 != nil:
    section.add "X-Amz-Signature", valid_616027
  var valid_616028 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616028 = validateParameter(valid_616028, JString, required = false,
                                 default = nil)
  if valid_616028 != nil:
    section.add "X-Amz-Content-Sha256", valid_616028
  var valid_616029 = header.getOrDefault("X-Amz-Date")
  valid_616029 = validateParameter(valid_616029, JString, required = false,
                                 default = nil)
  if valid_616029 != nil:
    section.add "X-Amz-Date", valid_616029
  var valid_616030 = header.getOrDefault("X-Amz-Credential")
  valid_616030 = validateParameter(valid_616030, JString, required = false,
                                 default = nil)
  if valid_616030 != nil:
    section.add "X-Amz-Credential", valid_616030
  var valid_616031 = header.getOrDefault("X-Amz-Security-Token")
  valid_616031 = validateParameter(valid_616031, JString, required = false,
                                 default = nil)
  if valid_616031 != nil:
    section.add "X-Amz-Security-Token", valid_616031
  var valid_616032 = header.getOrDefault("X-Amz-Algorithm")
  valid_616032 = validateParameter(valid_616032, JString, required = false,
                                 default = nil)
  if valid_616032 != nil:
    section.add "X-Amz-Algorithm", valid_616032
  var valid_616033 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616033 = validateParameter(valid_616033, JString, required = false,
                                 default = nil)
  if valid_616033 != nil:
    section.add "X-Amz-SignedHeaders", valid_616033
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  section = newJObject()
  var valid_616034 = formData.getOrDefault("SnapshotType")
  valid_616034 = validateParameter(valid_616034, JString, required = false,
                                 default = nil)
  if valid_616034 != nil:
    section.add "SnapshotType", valid_616034
  var valid_616035 = formData.getOrDefault("MaxRecords")
  valid_616035 = validateParameter(valid_616035, JInt, required = false, default = nil)
  if valid_616035 != nil:
    section.add "MaxRecords", valid_616035
  var valid_616036 = formData.getOrDefault("IncludePublic")
  valid_616036 = validateParameter(valid_616036, JBool, required = false, default = nil)
  if valid_616036 != nil:
    section.add "IncludePublic", valid_616036
  var valid_616037 = formData.getOrDefault("Marker")
  valid_616037 = validateParameter(valid_616037, JString, required = false,
                                 default = nil)
  if valid_616037 != nil:
    section.add "Marker", valid_616037
  var valid_616038 = formData.getOrDefault("DbiResourceId")
  valid_616038 = validateParameter(valid_616038, JString, required = false,
                                 default = nil)
  if valid_616038 != nil:
    section.add "DbiResourceId", valid_616038
  var valid_616039 = formData.getOrDefault("IncludeShared")
  valid_616039 = validateParameter(valid_616039, JBool, required = false, default = nil)
  if valid_616039 != nil:
    section.add "IncludeShared", valid_616039
  var valid_616040 = formData.getOrDefault("DBInstanceIdentifier")
  valid_616040 = validateParameter(valid_616040, JString, required = false,
                                 default = nil)
  if valid_616040 != nil:
    section.add "DBInstanceIdentifier", valid_616040
  var valid_616041 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_616041 = validateParameter(valid_616041, JString, required = false,
                                 default = nil)
  if valid_616041 != nil:
    section.add "DBSnapshotIdentifier", valid_616041
  var valid_616042 = formData.getOrDefault("Filters")
  valid_616042 = validateParameter(valid_616042, JArray, required = false,
                                 default = nil)
  if valid_616042 != nil:
    section.add "Filters", valid_616042
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616043: Call_PostDescribeDBSnapshots_616022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_616043.validator(path, query, header, formData, body)
  let scheme = call_616043.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616043.url(scheme.get, call_616043.host, call_616043.base,
                         call_616043.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616043, url, valid)

proc call*(call_616044: Call_PostDescribeDBSnapshots_616022;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DbiResourceId: string = ""; IncludeShared: bool = false;
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          Action: string = "DescribeDBSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_616045 = newJObject()
  var formData_616046 = newJObject()
  add(formData_616046, "SnapshotType", newJString(SnapshotType))
  add(formData_616046, "MaxRecords", newJInt(MaxRecords))
  add(formData_616046, "IncludePublic", newJBool(IncludePublic))
  add(formData_616046, "Marker", newJString(Marker))
  add(formData_616046, "DbiResourceId", newJString(DbiResourceId))
  add(formData_616046, "IncludeShared", newJBool(IncludeShared))
  add(formData_616046, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_616046, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_616045, "Action", newJString(Action))
  if Filters != nil:
    formData_616046.add "Filters", Filters
  add(query_616045, "Version", newJString(Version))
  result = call_616044.call(nil, query_616045, nil, formData_616046, nil)

var postDescribeDBSnapshots* = Call_PostDescribeDBSnapshots_616022(
    name: "postDescribeDBSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_PostDescribeDBSnapshots_616023, base: "/",
    url: url_PostDescribeDBSnapshots_616024, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshots_615998 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBSnapshots_616000(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSnapshots_615999(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616001 = query.getOrDefault("DbiResourceId")
  valid_616001 = validateParameter(valid_616001, JString, required = false,
                                 default = nil)
  if valid_616001 != nil:
    section.add "DbiResourceId", valid_616001
  var valid_616002 = query.getOrDefault("Marker")
  valid_616002 = validateParameter(valid_616002, JString, required = false,
                                 default = nil)
  if valid_616002 != nil:
    section.add "Marker", valid_616002
  var valid_616003 = query.getOrDefault("DBInstanceIdentifier")
  valid_616003 = validateParameter(valid_616003, JString, required = false,
                                 default = nil)
  if valid_616003 != nil:
    section.add "DBInstanceIdentifier", valid_616003
  var valid_616004 = query.getOrDefault("DBSnapshotIdentifier")
  valid_616004 = validateParameter(valid_616004, JString, required = false,
                                 default = nil)
  if valid_616004 != nil:
    section.add "DBSnapshotIdentifier", valid_616004
  var valid_616005 = query.getOrDefault("SnapshotType")
  valid_616005 = validateParameter(valid_616005, JString, required = false,
                                 default = nil)
  if valid_616005 != nil:
    section.add "SnapshotType", valid_616005
  var valid_616006 = query.getOrDefault("IncludePublic")
  valid_616006 = validateParameter(valid_616006, JBool, required = false, default = nil)
  if valid_616006 != nil:
    section.add "IncludePublic", valid_616006
  var valid_616007 = query.getOrDefault("Action")
  valid_616007 = validateParameter(valid_616007, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_616007 != nil:
    section.add "Action", valid_616007
  var valid_616008 = query.getOrDefault("IncludeShared")
  valid_616008 = validateParameter(valid_616008, JBool, required = false, default = nil)
  if valid_616008 != nil:
    section.add "IncludeShared", valid_616008
  var valid_616009 = query.getOrDefault("Version")
  valid_616009 = validateParameter(valid_616009, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616009 != nil:
    section.add "Version", valid_616009
  var valid_616010 = query.getOrDefault("Filters")
  valid_616010 = validateParameter(valid_616010, JArray, required = false,
                                 default = nil)
  if valid_616010 != nil:
    section.add "Filters", valid_616010
  var valid_616011 = query.getOrDefault("MaxRecords")
  valid_616011 = validateParameter(valid_616011, JInt, required = false, default = nil)
  if valid_616011 != nil:
    section.add "MaxRecords", valid_616011
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616012 = header.getOrDefault("X-Amz-Signature")
  valid_616012 = validateParameter(valid_616012, JString, required = false,
                                 default = nil)
  if valid_616012 != nil:
    section.add "X-Amz-Signature", valid_616012
  var valid_616013 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616013 = validateParameter(valid_616013, JString, required = false,
                                 default = nil)
  if valid_616013 != nil:
    section.add "X-Amz-Content-Sha256", valid_616013
  var valid_616014 = header.getOrDefault("X-Amz-Date")
  valid_616014 = validateParameter(valid_616014, JString, required = false,
                                 default = nil)
  if valid_616014 != nil:
    section.add "X-Amz-Date", valid_616014
  var valid_616015 = header.getOrDefault("X-Amz-Credential")
  valid_616015 = validateParameter(valid_616015, JString, required = false,
                                 default = nil)
  if valid_616015 != nil:
    section.add "X-Amz-Credential", valid_616015
  var valid_616016 = header.getOrDefault("X-Amz-Security-Token")
  valid_616016 = validateParameter(valid_616016, JString, required = false,
                                 default = nil)
  if valid_616016 != nil:
    section.add "X-Amz-Security-Token", valid_616016
  var valid_616017 = header.getOrDefault("X-Amz-Algorithm")
  valid_616017 = validateParameter(valid_616017, JString, required = false,
                                 default = nil)
  if valid_616017 != nil:
    section.add "X-Amz-Algorithm", valid_616017
  var valid_616018 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616018 = validateParameter(valid_616018, JString, required = false,
                                 default = nil)
  if valid_616018 != nil:
    section.add "X-Amz-SignedHeaders", valid_616018
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616019: Call_GetDescribeDBSnapshots_615998; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_616019.validator(path, query, header, formData, body)
  let scheme = call_616019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616019.url(scheme.get, call_616019.host, call_616019.base,
                         call_616019.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616019, url, valid)

proc call*(call_616020: Call_GetDescribeDBSnapshots_615998;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          SnapshotType: string = ""; IncludePublic: bool = false;
          Action: string = "DescribeDBSnapshots"; IncludeShared: bool = false;
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616021 = newJObject()
  add(query_616021, "DbiResourceId", newJString(DbiResourceId))
  add(query_616021, "Marker", newJString(Marker))
  add(query_616021, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_616021, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_616021, "SnapshotType", newJString(SnapshotType))
  add(query_616021, "IncludePublic", newJBool(IncludePublic))
  add(query_616021, "Action", newJString(Action))
  add(query_616021, "IncludeShared", newJBool(IncludeShared))
  add(query_616021, "Version", newJString(Version))
  if Filters != nil:
    query_616021.add "Filters", Filters
  add(query_616021, "MaxRecords", newJInt(MaxRecords))
  result = call_616020.call(nil, query_616021, nil, nil, nil)

var getDescribeDBSnapshots* = Call_GetDescribeDBSnapshots_615998(
    name: "getDescribeDBSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_GetDescribeDBSnapshots_615999, base: "/",
    url: url_GetDescribeDBSnapshots_616000, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_616066 = ref object of OpenApiRestCall_612658
proc url_PostDescribeDBSubnetGroups_616068(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSubnetGroups_616067(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616069 = query.getOrDefault("Action")
  valid_616069 = validateParameter(valid_616069, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_616069 != nil:
    section.add "Action", valid_616069
  var valid_616070 = query.getOrDefault("Version")
  valid_616070 = validateParameter(valid_616070, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616070 != nil:
    section.add "Version", valid_616070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616071 = header.getOrDefault("X-Amz-Signature")
  valid_616071 = validateParameter(valid_616071, JString, required = false,
                                 default = nil)
  if valid_616071 != nil:
    section.add "X-Amz-Signature", valid_616071
  var valid_616072 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616072 = validateParameter(valid_616072, JString, required = false,
                                 default = nil)
  if valid_616072 != nil:
    section.add "X-Amz-Content-Sha256", valid_616072
  var valid_616073 = header.getOrDefault("X-Amz-Date")
  valid_616073 = validateParameter(valid_616073, JString, required = false,
                                 default = nil)
  if valid_616073 != nil:
    section.add "X-Amz-Date", valid_616073
  var valid_616074 = header.getOrDefault("X-Amz-Credential")
  valid_616074 = validateParameter(valid_616074, JString, required = false,
                                 default = nil)
  if valid_616074 != nil:
    section.add "X-Amz-Credential", valid_616074
  var valid_616075 = header.getOrDefault("X-Amz-Security-Token")
  valid_616075 = validateParameter(valid_616075, JString, required = false,
                                 default = nil)
  if valid_616075 != nil:
    section.add "X-Amz-Security-Token", valid_616075
  var valid_616076 = header.getOrDefault("X-Amz-Algorithm")
  valid_616076 = validateParameter(valid_616076, JString, required = false,
                                 default = nil)
  if valid_616076 != nil:
    section.add "X-Amz-Algorithm", valid_616076
  var valid_616077 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616077 = validateParameter(valid_616077, JString, required = false,
                                 default = nil)
  if valid_616077 != nil:
    section.add "X-Amz-SignedHeaders", valid_616077
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_616078 = formData.getOrDefault("MaxRecords")
  valid_616078 = validateParameter(valid_616078, JInt, required = false, default = nil)
  if valid_616078 != nil:
    section.add "MaxRecords", valid_616078
  var valid_616079 = formData.getOrDefault("Marker")
  valid_616079 = validateParameter(valid_616079, JString, required = false,
                                 default = nil)
  if valid_616079 != nil:
    section.add "Marker", valid_616079
  var valid_616080 = formData.getOrDefault("DBSubnetGroupName")
  valid_616080 = validateParameter(valid_616080, JString, required = false,
                                 default = nil)
  if valid_616080 != nil:
    section.add "DBSubnetGroupName", valid_616080
  var valid_616081 = formData.getOrDefault("Filters")
  valid_616081 = validateParameter(valid_616081, JArray, required = false,
                                 default = nil)
  if valid_616081 != nil:
    section.add "Filters", valid_616081
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616082: Call_PostDescribeDBSubnetGroups_616066; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_616082.validator(path, query, header, formData, body)
  let scheme = call_616082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616082.url(scheme.get, call_616082.host, call_616082.base,
                         call_616082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616082, url, valid)

proc call*(call_616083: Call_PostDescribeDBSubnetGroups_616066;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_616084 = newJObject()
  var formData_616085 = newJObject()
  add(formData_616085, "MaxRecords", newJInt(MaxRecords))
  add(formData_616085, "Marker", newJString(Marker))
  add(query_616084, "Action", newJString(Action))
  add(formData_616085, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if Filters != nil:
    formData_616085.add "Filters", Filters
  add(query_616084, "Version", newJString(Version))
  result = call_616083.call(nil, query_616084, nil, formData_616085, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_616066(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_616067, base: "/",
    url: url_PostDescribeDBSubnetGroups_616068,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_616047 = ref object of OpenApiRestCall_612658
proc url_GetDescribeDBSubnetGroups_616049(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSubnetGroups_616048(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616050 = query.getOrDefault("Marker")
  valid_616050 = validateParameter(valid_616050, JString, required = false,
                                 default = nil)
  if valid_616050 != nil:
    section.add "Marker", valid_616050
  var valid_616051 = query.getOrDefault("Action")
  valid_616051 = validateParameter(valid_616051, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_616051 != nil:
    section.add "Action", valid_616051
  var valid_616052 = query.getOrDefault("DBSubnetGroupName")
  valid_616052 = validateParameter(valid_616052, JString, required = false,
                                 default = nil)
  if valid_616052 != nil:
    section.add "DBSubnetGroupName", valid_616052
  var valid_616053 = query.getOrDefault("Version")
  valid_616053 = validateParameter(valid_616053, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616053 != nil:
    section.add "Version", valid_616053
  var valid_616054 = query.getOrDefault("Filters")
  valid_616054 = validateParameter(valid_616054, JArray, required = false,
                                 default = nil)
  if valid_616054 != nil:
    section.add "Filters", valid_616054
  var valid_616055 = query.getOrDefault("MaxRecords")
  valid_616055 = validateParameter(valid_616055, JInt, required = false, default = nil)
  if valid_616055 != nil:
    section.add "MaxRecords", valid_616055
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616056 = header.getOrDefault("X-Amz-Signature")
  valid_616056 = validateParameter(valid_616056, JString, required = false,
                                 default = nil)
  if valid_616056 != nil:
    section.add "X-Amz-Signature", valid_616056
  var valid_616057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616057 = validateParameter(valid_616057, JString, required = false,
                                 default = nil)
  if valid_616057 != nil:
    section.add "X-Amz-Content-Sha256", valid_616057
  var valid_616058 = header.getOrDefault("X-Amz-Date")
  valid_616058 = validateParameter(valid_616058, JString, required = false,
                                 default = nil)
  if valid_616058 != nil:
    section.add "X-Amz-Date", valid_616058
  var valid_616059 = header.getOrDefault("X-Amz-Credential")
  valid_616059 = validateParameter(valid_616059, JString, required = false,
                                 default = nil)
  if valid_616059 != nil:
    section.add "X-Amz-Credential", valid_616059
  var valid_616060 = header.getOrDefault("X-Amz-Security-Token")
  valid_616060 = validateParameter(valid_616060, JString, required = false,
                                 default = nil)
  if valid_616060 != nil:
    section.add "X-Amz-Security-Token", valid_616060
  var valid_616061 = header.getOrDefault("X-Amz-Algorithm")
  valid_616061 = validateParameter(valid_616061, JString, required = false,
                                 default = nil)
  if valid_616061 != nil:
    section.add "X-Amz-Algorithm", valid_616061
  var valid_616062 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616062 = validateParameter(valid_616062, JString, required = false,
                                 default = nil)
  if valid_616062 != nil:
    section.add "X-Amz-SignedHeaders", valid_616062
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616063: Call_GetDescribeDBSubnetGroups_616047; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_616063.validator(path, query, header, formData, body)
  let scheme = call_616063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616063.url(scheme.get, call_616063.host, call_616063.base,
                         call_616063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616063, url, valid)

proc call*(call_616064: Call_GetDescribeDBSubnetGroups_616047; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616065 = newJObject()
  add(query_616065, "Marker", newJString(Marker))
  add(query_616065, "Action", newJString(Action))
  add(query_616065, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_616065, "Version", newJString(Version))
  if Filters != nil:
    query_616065.add "Filters", Filters
  add(query_616065, "MaxRecords", newJInt(MaxRecords))
  result = call_616064.call(nil, query_616065, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_616047(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_616048, base: "/",
    url: url_GetDescribeDBSubnetGroups_616049,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_616105 = ref object of OpenApiRestCall_612658
proc url_PostDescribeEngineDefaultClusterParameters_616107(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_616106(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616108 = query.getOrDefault("Action")
  valid_616108 = validateParameter(valid_616108, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_616108 != nil:
    section.add "Action", valid_616108
  var valid_616109 = query.getOrDefault("Version")
  valid_616109 = validateParameter(valid_616109, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616109 != nil:
    section.add "Version", valid_616109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616110 = header.getOrDefault("X-Amz-Signature")
  valid_616110 = validateParameter(valid_616110, JString, required = false,
                                 default = nil)
  if valid_616110 != nil:
    section.add "X-Amz-Signature", valid_616110
  var valid_616111 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616111 = validateParameter(valid_616111, JString, required = false,
                                 default = nil)
  if valid_616111 != nil:
    section.add "X-Amz-Content-Sha256", valid_616111
  var valid_616112 = header.getOrDefault("X-Amz-Date")
  valid_616112 = validateParameter(valid_616112, JString, required = false,
                                 default = nil)
  if valid_616112 != nil:
    section.add "X-Amz-Date", valid_616112
  var valid_616113 = header.getOrDefault("X-Amz-Credential")
  valid_616113 = validateParameter(valid_616113, JString, required = false,
                                 default = nil)
  if valid_616113 != nil:
    section.add "X-Amz-Credential", valid_616113
  var valid_616114 = header.getOrDefault("X-Amz-Security-Token")
  valid_616114 = validateParameter(valid_616114, JString, required = false,
                                 default = nil)
  if valid_616114 != nil:
    section.add "X-Amz-Security-Token", valid_616114
  var valid_616115 = header.getOrDefault("X-Amz-Algorithm")
  valid_616115 = validateParameter(valid_616115, JString, required = false,
                                 default = nil)
  if valid_616115 != nil:
    section.add "X-Amz-Algorithm", valid_616115
  var valid_616116 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616116 = validateParameter(valid_616116, JString, required = false,
                                 default = nil)
  if valid_616116 != nil:
    section.add "X-Amz-SignedHeaders", valid_616116
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  section = newJObject()
  var valid_616117 = formData.getOrDefault("MaxRecords")
  valid_616117 = validateParameter(valid_616117, JInt, required = false, default = nil)
  if valid_616117 != nil:
    section.add "MaxRecords", valid_616117
  var valid_616118 = formData.getOrDefault("Marker")
  valid_616118 = validateParameter(valid_616118, JString, required = false,
                                 default = nil)
  if valid_616118 != nil:
    section.add "Marker", valid_616118
  var valid_616119 = formData.getOrDefault("Filters")
  valid_616119 = validateParameter(valid_616119, JArray, required = false,
                                 default = nil)
  if valid_616119 != nil:
    section.add "Filters", valid_616119
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_616120 = formData.getOrDefault("DBParameterGroupFamily")
  valid_616120 = validateParameter(valid_616120, JString, required = true,
                                 default = nil)
  if valid_616120 != nil:
    section.add "DBParameterGroupFamily", valid_616120
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616121: Call_PostDescribeEngineDefaultClusterParameters_616105;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_616121.validator(path, query, header, formData, body)
  let scheme = call_616121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616121.url(scheme.get, call_616121.host, call_616121.base,
                         call_616121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616121, url, valid)

proc call*(call_616122: Call_PostDescribeEngineDefaultClusterParameters_616105;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  var query_616123 = newJObject()
  var formData_616124 = newJObject()
  add(formData_616124, "MaxRecords", newJInt(MaxRecords))
  add(formData_616124, "Marker", newJString(Marker))
  add(query_616123, "Action", newJString(Action))
  if Filters != nil:
    formData_616124.add "Filters", Filters
  add(query_616123, "Version", newJString(Version))
  add(formData_616124, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_616122.call(nil, query_616123, nil, formData_616124, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_616105(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_616106,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_616107,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_616086 = ref object of OpenApiRestCall_612658
proc url_GetDescribeEngineDefaultClusterParameters_616088(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_616087(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616089 = query.getOrDefault("Marker")
  valid_616089 = validateParameter(valid_616089, JString, required = false,
                                 default = nil)
  if valid_616089 != nil:
    section.add "Marker", valid_616089
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_616090 = query.getOrDefault("DBParameterGroupFamily")
  valid_616090 = validateParameter(valid_616090, JString, required = true,
                                 default = nil)
  if valid_616090 != nil:
    section.add "DBParameterGroupFamily", valid_616090
  var valid_616091 = query.getOrDefault("Action")
  valid_616091 = validateParameter(valid_616091, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_616091 != nil:
    section.add "Action", valid_616091
  var valid_616092 = query.getOrDefault("Version")
  valid_616092 = validateParameter(valid_616092, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616092 != nil:
    section.add "Version", valid_616092
  var valid_616093 = query.getOrDefault("Filters")
  valid_616093 = validateParameter(valid_616093, JArray, required = false,
                                 default = nil)
  if valid_616093 != nil:
    section.add "Filters", valid_616093
  var valid_616094 = query.getOrDefault("MaxRecords")
  valid_616094 = validateParameter(valid_616094, JInt, required = false, default = nil)
  if valid_616094 != nil:
    section.add "MaxRecords", valid_616094
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616095 = header.getOrDefault("X-Amz-Signature")
  valid_616095 = validateParameter(valid_616095, JString, required = false,
                                 default = nil)
  if valid_616095 != nil:
    section.add "X-Amz-Signature", valid_616095
  var valid_616096 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616096 = validateParameter(valid_616096, JString, required = false,
                                 default = nil)
  if valid_616096 != nil:
    section.add "X-Amz-Content-Sha256", valid_616096
  var valid_616097 = header.getOrDefault("X-Amz-Date")
  valid_616097 = validateParameter(valid_616097, JString, required = false,
                                 default = nil)
  if valid_616097 != nil:
    section.add "X-Amz-Date", valid_616097
  var valid_616098 = header.getOrDefault("X-Amz-Credential")
  valid_616098 = validateParameter(valid_616098, JString, required = false,
                                 default = nil)
  if valid_616098 != nil:
    section.add "X-Amz-Credential", valid_616098
  var valid_616099 = header.getOrDefault("X-Amz-Security-Token")
  valid_616099 = validateParameter(valid_616099, JString, required = false,
                                 default = nil)
  if valid_616099 != nil:
    section.add "X-Amz-Security-Token", valid_616099
  var valid_616100 = header.getOrDefault("X-Amz-Algorithm")
  valid_616100 = validateParameter(valid_616100, JString, required = false,
                                 default = nil)
  if valid_616100 != nil:
    section.add "X-Amz-Algorithm", valid_616100
  var valid_616101 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616101 = validateParameter(valid_616101, JString, required = false,
                                 default = nil)
  if valid_616101 != nil:
    section.add "X-Amz-SignedHeaders", valid_616101
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616102: Call_GetDescribeEngineDefaultClusterParameters_616086;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_616102.validator(path, query, header, formData, body)
  let scheme = call_616102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616102.url(scheme.get, call_616102.host, call_616102.base,
                         call_616102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616102, url, valid)

proc call*(call_616103: Call_GetDescribeEngineDefaultClusterParameters_616086;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616104 = newJObject()
  add(query_616104, "Marker", newJString(Marker))
  add(query_616104, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_616104, "Action", newJString(Action))
  add(query_616104, "Version", newJString(Version))
  if Filters != nil:
    query_616104.add "Filters", Filters
  add(query_616104, "MaxRecords", newJInt(MaxRecords))
  result = call_616103.call(nil, query_616104, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_616086(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_616087,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_616088,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_616144 = ref object of OpenApiRestCall_612658
proc url_PostDescribeEngineDefaultParameters_616146(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_616145(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616147 = query.getOrDefault("Action")
  valid_616147 = validateParameter(valid_616147, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_616147 != nil:
    section.add "Action", valid_616147
  var valid_616148 = query.getOrDefault("Version")
  valid_616148 = validateParameter(valid_616148, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616148 != nil:
    section.add "Version", valid_616148
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616149 = header.getOrDefault("X-Amz-Signature")
  valid_616149 = validateParameter(valid_616149, JString, required = false,
                                 default = nil)
  if valid_616149 != nil:
    section.add "X-Amz-Signature", valid_616149
  var valid_616150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616150 = validateParameter(valid_616150, JString, required = false,
                                 default = nil)
  if valid_616150 != nil:
    section.add "X-Amz-Content-Sha256", valid_616150
  var valid_616151 = header.getOrDefault("X-Amz-Date")
  valid_616151 = validateParameter(valid_616151, JString, required = false,
                                 default = nil)
  if valid_616151 != nil:
    section.add "X-Amz-Date", valid_616151
  var valid_616152 = header.getOrDefault("X-Amz-Credential")
  valid_616152 = validateParameter(valid_616152, JString, required = false,
                                 default = nil)
  if valid_616152 != nil:
    section.add "X-Amz-Credential", valid_616152
  var valid_616153 = header.getOrDefault("X-Amz-Security-Token")
  valid_616153 = validateParameter(valid_616153, JString, required = false,
                                 default = nil)
  if valid_616153 != nil:
    section.add "X-Amz-Security-Token", valid_616153
  var valid_616154 = header.getOrDefault("X-Amz-Algorithm")
  valid_616154 = validateParameter(valid_616154, JString, required = false,
                                 default = nil)
  if valid_616154 != nil:
    section.add "X-Amz-Algorithm", valid_616154
  var valid_616155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616155 = validateParameter(valid_616155, JString, required = false,
                                 default = nil)
  if valid_616155 != nil:
    section.add "X-Amz-SignedHeaders", valid_616155
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  section = newJObject()
  var valid_616156 = formData.getOrDefault("MaxRecords")
  valid_616156 = validateParameter(valid_616156, JInt, required = false, default = nil)
  if valid_616156 != nil:
    section.add "MaxRecords", valid_616156
  var valid_616157 = formData.getOrDefault("Marker")
  valid_616157 = validateParameter(valid_616157, JString, required = false,
                                 default = nil)
  if valid_616157 != nil:
    section.add "Marker", valid_616157
  var valid_616158 = formData.getOrDefault("Filters")
  valid_616158 = validateParameter(valid_616158, JArray, required = false,
                                 default = nil)
  if valid_616158 != nil:
    section.add "Filters", valid_616158
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_616159 = formData.getOrDefault("DBParameterGroupFamily")
  valid_616159 = validateParameter(valid_616159, JString, required = true,
                                 default = nil)
  if valid_616159 != nil:
    section.add "DBParameterGroupFamily", valid_616159
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616160: Call_PostDescribeEngineDefaultParameters_616144;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_616160.validator(path, query, header, formData, body)
  let scheme = call_616160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616160.url(scheme.get, call_616160.host, call_616160.base,
                         call_616160.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616160, url, valid)

proc call*(call_616161: Call_PostDescribeEngineDefaultParameters_616144;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  var query_616162 = newJObject()
  var formData_616163 = newJObject()
  add(formData_616163, "MaxRecords", newJInt(MaxRecords))
  add(formData_616163, "Marker", newJString(Marker))
  add(query_616162, "Action", newJString(Action))
  if Filters != nil:
    formData_616163.add "Filters", Filters
  add(query_616162, "Version", newJString(Version))
  add(formData_616163, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_616161.call(nil, query_616162, nil, formData_616163, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_616144(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_616145, base: "/",
    url: url_PostDescribeEngineDefaultParameters_616146,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_616125 = ref object of OpenApiRestCall_612658
proc url_GetDescribeEngineDefaultParameters_616127(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_616126(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616128 = query.getOrDefault("Marker")
  valid_616128 = validateParameter(valid_616128, JString, required = false,
                                 default = nil)
  if valid_616128 != nil:
    section.add "Marker", valid_616128
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_616129 = query.getOrDefault("DBParameterGroupFamily")
  valid_616129 = validateParameter(valid_616129, JString, required = true,
                                 default = nil)
  if valid_616129 != nil:
    section.add "DBParameterGroupFamily", valid_616129
  var valid_616130 = query.getOrDefault("Action")
  valid_616130 = validateParameter(valid_616130, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_616130 != nil:
    section.add "Action", valid_616130
  var valid_616131 = query.getOrDefault("Version")
  valid_616131 = validateParameter(valid_616131, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616131 != nil:
    section.add "Version", valid_616131
  var valid_616132 = query.getOrDefault("Filters")
  valid_616132 = validateParameter(valid_616132, JArray, required = false,
                                 default = nil)
  if valid_616132 != nil:
    section.add "Filters", valid_616132
  var valid_616133 = query.getOrDefault("MaxRecords")
  valid_616133 = validateParameter(valid_616133, JInt, required = false, default = nil)
  if valid_616133 != nil:
    section.add "MaxRecords", valid_616133
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616134 = header.getOrDefault("X-Amz-Signature")
  valid_616134 = validateParameter(valid_616134, JString, required = false,
                                 default = nil)
  if valid_616134 != nil:
    section.add "X-Amz-Signature", valid_616134
  var valid_616135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616135 = validateParameter(valid_616135, JString, required = false,
                                 default = nil)
  if valid_616135 != nil:
    section.add "X-Amz-Content-Sha256", valid_616135
  var valid_616136 = header.getOrDefault("X-Amz-Date")
  valid_616136 = validateParameter(valid_616136, JString, required = false,
                                 default = nil)
  if valid_616136 != nil:
    section.add "X-Amz-Date", valid_616136
  var valid_616137 = header.getOrDefault("X-Amz-Credential")
  valid_616137 = validateParameter(valid_616137, JString, required = false,
                                 default = nil)
  if valid_616137 != nil:
    section.add "X-Amz-Credential", valid_616137
  var valid_616138 = header.getOrDefault("X-Amz-Security-Token")
  valid_616138 = validateParameter(valid_616138, JString, required = false,
                                 default = nil)
  if valid_616138 != nil:
    section.add "X-Amz-Security-Token", valid_616138
  var valid_616139 = header.getOrDefault("X-Amz-Algorithm")
  valid_616139 = validateParameter(valid_616139, JString, required = false,
                                 default = nil)
  if valid_616139 != nil:
    section.add "X-Amz-Algorithm", valid_616139
  var valid_616140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616140 = validateParameter(valid_616140, JString, required = false,
                                 default = nil)
  if valid_616140 != nil:
    section.add "X-Amz-SignedHeaders", valid_616140
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616141: Call_GetDescribeEngineDefaultParameters_616125;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_616141.validator(path, query, header, formData, body)
  let scheme = call_616141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616141.url(scheme.get, call_616141.host, call_616141.base,
                         call_616141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616141, url, valid)

proc call*(call_616142: Call_GetDescribeEngineDefaultParameters_616125;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616143 = newJObject()
  add(query_616143, "Marker", newJString(Marker))
  add(query_616143, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_616143, "Action", newJString(Action))
  add(query_616143, "Version", newJString(Version))
  if Filters != nil:
    query_616143.add "Filters", Filters
  add(query_616143, "MaxRecords", newJInt(MaxRecords))
  result = call_616142.call(nil, query_616143, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_616125(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_616126, base: "/",
    url: url_GetDescribeEngineDefaultParameters_616127,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_616181 = ref object of OpenApiRestCall_612658
proc url_PostDescribeEventCategories_616183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventCategories_616182(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616184 = query.getOrDefault("Action")
  valid_616184 = validateParameter(valid_616184, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_616184 != nil:
    section.add "Action", valid_616184
  var valid_616185 = query.getOrDefault("Version")
  valid_616185 = validateParameter(valid_616185, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616185 != nil:
    section.add "Version", valid_616185
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616186 = header.getOrDefault("X-Amz-Signature")
  valid_616186 = validateParameter(valid_616186, JString, required = false,
                                 default = nil)
  if valid_616186 != nil:
    section.add "X-Amz-Signature", valid_616186
  var valid_616187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616187 = validateParameter(valid_616187, JString, required = false,
                                 default = nil)
  if valid_616187 != nil:
    section.add "X-Amz-Content-Sha256", valid_616187
  var valid_616188 = header.getOrDefault("X-Amz-Date")
  valid_616188 = validateParameter(valid_616188, JString, required = false,
                                 default = nil)
  if valid_616188 != nil:
    section.add "X-Amz-Date", valid_616188
  var valid_616189 = header.getOrDefault("X-Amz-Credential")
  valid_616189 = validateParameter(valid_616189, JString, required = false,
                                 default = nil)
  if valid_616189 != nil:
    section.add "X-Amz-Credential", valid_616189
  var valid_616190 = header.getOrDefault("X-Amz-Security-Token")
  valid_616190 = validateParameter(valid_616190, JString, required = false,
                                 default = nil)
  if valid_616190 != nil:
    section.add "X-Amz-Security-Token", valid_616190
  var valid_616191 = header.getOrDefault("X-Amz-Algorithm")
  valid_616191 = validateParameter(valid_616191, JString, required = false,
                                 default = nil)
  if valid_616191 != nil:
    section.add "X-Amz-Algorithm", valid_616191
  var valid_616192 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616192 = validateParameter(valid_616192, JString, required = false,
                                 default = nil)
  if valid_616192 != nil:
    section.add "X-Amz-SignedHeaders", valid_616192
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_616193 = formData.getOrDefault("SourceType")
  valid_616193 = validateParameter(valid_616193, JString, required = false,
                                 default = nil)
  if valid_616193 != nil:
    section.add "SourceType", valid_616193
  var valid_616194 = formData.getOrDefault("Filters")
  valid_616194 = validateParameter(valid_616194, JArray, required = false,
                                 default = nil)
  if valid_616194 != nil:
    section.add "Filters", valid_616194
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616195: Call_PostDescribeEventCategories_616181; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_616195.validator(path, query, header, formData, body)
  let scheme = call_616195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616195.url(scheme.get, call_616195.host, call_616195.base,
                         call_616195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616195, url, valid)

proc call*(call_616196: Call_PostDescribeEventCategories_616181;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_616197 = newJObject()
  var formData_616198 = newJObject()
  add(formData_616198, "SourceType", newJString(SourceType))
  add(query_616197, "Action", newJString(Action))
  if Filters != nil:
    formData_616198.add "Filters", Filters
  add(query_616197, "Version", newJString(Version))
  result = call_616196.call(nil, query_616197, nil, formData_616198, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_616181(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_616182, base: "/",
    url: url_PostDescribeEventCategories_616183,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_616164 = ref object of OpenApiRestCall_612658
proc url_GetDescribeEventCategories_616166(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventCategories_616165(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_616167 = query.getOrDefault("SourceType")
  valid_616167 = validateParameter(valid_616167, JString, required = false,
                                 default = nil)
  if valid_616167 != nil:
    section.add "SourceType", valid_616167
  var valid_616168 = query.getOrDefault("Action")
  valid_616168 = validateParameter(valid_616168, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_616168 != nil:
    section.add "Action", valid_616168
  var valid_616169 = query.getOrDefault("Version")
  valid_616169 = validateParameter(valid_616169, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616169 != nil:
    section.add "Version", valid_616169
  var valid_616170 = query.getOrDefault("Filters")
  valid_616170 = validateParameter(valid_616170, JArray, required = false,
                                 default = nil)
  if valid_616170 != nil:
    section.add "Filters", valid_616170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616171 = header.getOrDefault("X-Amz-Signature")
  valid_616171 = validateParameter(valid_616171, JString, required = false,
                                 default = nil)
  if valid_616171 != nil:
    section.add "X-Amz-Signature", valid_616171
  var valid_616172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616172 = validateParameter(valid_616172, JString, required = false,
                                 default = nil)
  if valid_616172 != nil:
    section.add "X-Amz-Content-Sha256", valid_616172
  var valid_616173 = header.getOrDefault("X-Amz-Date")
  valid_616173 = validateParameter(valid_616173, JString, required = false,
                                 default = nil)
  if valid_616173 != nil:
    section.add "X-Amz-Date", valid_616173
  var valid_616174 = header.getOrDefault("X-Amz-Credential")
  valid_616174 = validateParameter(valid_616174, JString, required = false,
                                 default = nil)
  if valid_616174 != nil:
    section.add "X-Amz-Credential", valid_616174
  var valid_616175 = header.getOrDefault("X-Amz-Security-Token")
  valid_616175 = validateParameter(valid_616175, JString, required = false,
                                 default = nil)
  if valid_616175 != nil:
    section.add "X-Amz-Security-Token", valid_616175
  var valid_616176 = header.getOrDefault("X-Amz-Algorithm")
  valid_616176 = validateParameter(valid_616176, JString, required = false,
                                 default = nil)
  if valid_616176 != nil:
    section.add "X-Amz-Algorithm", valid_616176
  var valid_616177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616177 = validateParameter(valid_616177, JString, required = false,
                                 default = nil)
  if valid_616177 != nil:
    section.add "X-Amz-SignedHeaders", valid_616177
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616178: Call_GetDescribeEventCategories_616164; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_616178.validator(path, query, header, formData, body)
  let scheme = call_616178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616178.url(scheme.get, call_616178.host, call_616178.base,
                         call_616178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616178, url, valid)

proc call*(call_616179: Call_GetDescribeEventCategories_616164;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Version: string = "2014-10-31"; Filters: JsonNode = nil): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  var query_616180 = newJObject()
  add(query_616180, "SourceType", newJString(SourceType))
  add(query_616180, "Action", newJString(Action))
  add(query_616180, "Version", newJString(Version))
  if Filters != nil:
    query_616180.add "Filters", Filters
  result = call_616179.call(nil, query_616180, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_616164(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_616165, base: "/",
    url: url_GetDescribeEventCategories_616166,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_616218 = ref object of OpenApiRestCall_612658
proc url_PostDescribeEventSubscriptions_616220(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventSubscriptions_616219(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616221 = query.getOrDefault("Action")
  valid_616221 = validateParameter(valid_616221, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_616221 != nil:
    section.add "Action", valid_616221
  var valid_616222 = query.getOrDefault("Version")
  valid_616222 = validateParameter(valid_616222, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616222 != nil:
    section.add "Version", valid_616222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616223 = header.getOrDefault("X-Amz-Signature")
  valid_616223 = validateParameter(valid_616223, JString, required = false,
                                 default = nil)
  if valid_616223 != nil:
    section.add "X-Amz-Signature", valid_616223
  var valid_616224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616224 = validateParameter(valid_616224, JString, required = false,
                                 default = nil)
  if valid_616224 != nil:
    section.add "X-Amz-Content-Sha256", valid_616224
  var valid_616225 = header.getOrDefault("X-Amz-Date")
  valid_616225 = validateParameter(valid_616225, JString, required = false,
                                 default = nil)
  if valid_616225 != nil:
    section.add "X-Amz-Date", valid_616225
  var valid_616226 = header.getOrDefault("X-Amz-Credential")
  valid_616226 = validateParameter(valid_616226, JString, required = false,
                                 default = nil)
  if valid_616226 != nil:
    section.add "X-Amz-Credential", valid_616226
  var valid_616227 = header.getOrDefault("X-Amz-Security-Token")
  valid_616227 = validateParameter(valid_616227, JString, required = false,
                                 default = nil)
  if valid_616227 != nil:
    section.add "X-Amz-Security-Token", valid_616227
  var valid_616228 = header.getOrDefault("X-Amz-Algorithm")
  valid_616228 = validateParameter(valid_616228, JString, required = false,
                                 default = nil)
  if valid_616228 != nil:
    section.add "X-Amz-Algorithm", valid_616228
  var valid_616229 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616229 = validateParameter(valid_616229, JString, required = false,
                                 default = nil)
  if valid_616229 != nil:
    section.add "X-Amz-SignedHeaders", valid_616229
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_616230 = formData.getOrDefault("MaxRecords")
  valid_616230 = validateParameter(valid_616230, JInt, required = false, default = nil)
  if valid_616230 != nil:
    section.add "MaxRecords", valid_616230
  var valid_616231 = formData.getOrDefault("Marker")
  valid_616231 = validateParameter(valid_616231, JString, required = false,
                                 default = nil)
  if valid_616231 != nil:
    section.add "Marker", valid_616231
  var valid_616232 = formData.getOrDefault("SubscriptionName")
  valid_616232 = validateParameter(valid_616232, JString, required = false,
                                 default = nil)
  if valid_616232 != nil:
    section.add "SubscriptionName", valid_616232
  var valid_616233 = formData.getOrDefault("Filters")
  valid_616233 = validateParameter(valid_616233, JArray, required = false,
                                 default = nil)
  if valid_616233 != nil:
    section.add "Filters", valid_616233
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616234: Call_PostDescribeEventSubscriptions_616218; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_616234.validator(path, query, header, formData, body)
  let scheme = call_616234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616234.url(scheme.get, call_616234.host, call_616234.base,
                         call_616234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616234, url, valid)

proc call*(call_616235: Call_PostDescribeEventSubscriptions_616218;
          MaxRecords: int = 0; Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_616236 = newJObject()
  var formData_616237 = newJObject()
  add(formData_616237, "MaxRecords", newJInt(MaxRecords))
  add(formData_616237, "Marker", newJString(Marker))
  add(formData_616237, "SubscriptionName", newJString(SubscriptionName))
  add(query_616236, "Action", newJString(Action))
  if Filters != nil:
    formData_616237.add "Filters", Filters
  add(query_616236, "Version", newJString(Version))
  result = call_616235.call(nil, query_616236, nil, formData_616237, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_616218(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_616219, base: "/",
    url: url_PostDescribeEventSubscriptions_616220,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_616199 = ref object of OpenApiRestCall_612658
proc url_GetDescribeEventSubscriptions_616201(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventSubscriptions_616200(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616202 = query.getOrDefault("Marker")
  valid_616202 = validateParameter(valid_616202, JString, required = false,
                                 default = nil)
  if valid_616202 != nil:
    section.add "Marker", valid_616202
  var valid_616203 = query.getOrDefault("SubscriptionName")
  valid_616203 = validateParameter(valid_616203, JString, required = false,
                                 default = nil)
  if valid_616203 != nil:
    section.add "SubscriptionName", valid_616203
  var valid_616204 = query.getOrDefault("Action")
  valid_616204 = validateParameter(valid_616204, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_616204 != nil:
    section.add "Action", valid_616204
  var valid_616205 = query.getOrDefault("Version")
  valid_616205 = validateParameter(valid_616205, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616205 != nil:
    section.add "Version", valid_616205
  var valid_616206 = query.getOrDefault("Filters")
  valid_616206 = validateParameter(valid_616206, JArray, required = false,
                                 default = nil)
  if valid_616206 != nil:
    section.add "Filters", valid_616206
  var valid_616207 = query.getOrDefault("MaxRecords")
  valid_616207 = validateParameter(valid_616207, JInt, required = false, default = nil)
  if valid_616207 != nil:
    section.add "MaxRecords", valid_616207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616208 = header.getOrDefault("X-Amz-Signature")
  valid_616208 = validateParameter(valid_616208, JString, required = false,
                                 default = nil)
  if valid_616208 != nil:
    section.add "X-Amz-Signature", valid_616208
  var valid_616209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616209 = validateParameter(valid_616209, JString, required = false,
                                 default = nil)
  if valid_616209 != nil:
    section.add "X-Amz-Content-Sha256", valid_616209
  var valid_616210 = header.getOrDefault("X-Amz-Date")
  valid_616210 = validateParameter(valid_616210, JString, required = false,
                                 default = nil)
  if valid_616210 != nil:
    section.add "X-Amz-Date", valid_616210
  var valid_616211 = header.getOrDefault("X-Amz-Credential")
  valid_616211 = validateParameter(valid_616211, JString, required = false,
                                 default = nil)
  if valid_616211 != nil:
    section.add "X-Amz-Credential", valid_616211
  var valid_616212 = header.getOrDefault("X-Amz-Security-Token")
  valid_616212 = validateParameter(valid_616212, JString, required = false,
                                 default = nil)
  if valid_616212 != nil:
    section.add "X-Amz-Security-Token", valid_616212
  var valid_616213 = header.getOrDefault("X-Amz-Algorithm")
  valid_616213 = validateParameter(valid_616213, JString, required = false,
                                 default = nil)
  if valid_616213 != nil:
    section.add "X-Amz-Algorithm", valid_616213
  var valid_616214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616214 = validateParameter(valid_616214, JString, required = false,
                                 default = nil)
  if valid_616214 != nil:
    section.add "X-Amz-SignedHeaders", valid_616214
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616215: Call_GetDescribeEventSubscriptions_616199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_616215.validator(path, query, header, formData, body)
  let scheme = call_616215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616215.url(scheme.get, call_616215.host, call_616215.base,
                         call_616215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616215, url, valid)

proc call*(call_616216: Call_GetDescribeEventSubscriptions_616199;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616217 = newJObject()
  add(query_616217, "Marker", newJString(Marker))
  add(query_616217, "SubscriptionName", newJString(SubscriptionName))
  add(query_616217, "Action", newJString(Action))
  add(query_616217, "Version", newJString(Version))
  if Filters != nil:
    query_616217.add "Filters", Filters
  add(query_616217, "MaxRecords", newJInt(MaxRecords))
  result = call_616216.call(nil, query_616217, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_616199(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_616200, base: "/",
    url: url_GetDescribeEventSubscriptions_616201,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_616262 = ref object of OpenApiRestCall_612658
proc url_PostDescribeEvents_616264(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_616263(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616265 = query.getOrDefault("Action")
  valid_616265 = validateParameter(valid_616265, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_616265 != nil:
    section.add "Action", valid_616265
  var valid_616266 = query.getOrDefault("Version")
  valid_616266 = validateParameter(valid_616266, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616266 != nil:
    section.add "Version", valid_616266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616267 = header.getOrDefault("X-Amz-Signature")
  valid_616267 = validateParameter(valid_616267, JString, required = false,
                                 default = nil)
  if valid_616267 != nil:
    section.add "X-Amz-Signature", valid_616267
  var valid_616268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616268 = validateParameter(valid_616268, JString, required = false,
                                 default = nil)
  if valid_616268 != nil:
    section.add "X-Amz-Content-Sha256", valid_616268
  var valid_616269 = header.getOrDefault("X-Amz-Date")
  valid_616269 = validateParameter(valid_616269, JString, required = false,
                                 default = nil)
  if valid_616269 != nil:
    section.add "X-Amz-Date", valid_616269
  var valid_616270 = header.getOrDefault("X-Amz-Credential")
  valid_616270 = validateParameter(valid_616270, JString, required = false,
                                 default = nil)
  if valid_616270 != nil:
    section.add "X-Amz-Credential", valid_616270
  var valid_616271 = header.getOrDefault("X-Amz-Security-Token")
  valid_616271 = validateParameter(valid_616271, JString, required = false,
                                 default = nil)
  if valid_616271 != nil:
    section.add "X-Amz-Security-Token", valid_616271
  var valid_616272 = header.getOrDefault("X-Amz-Algorithm")
  valid_616272 = validateParameter(valid_616272, JString, required = false,
                                 default = nil)
  if valid_616272 != nil:
    section.add "X-Amz-Algorithm", valid_616272
  var valid_616273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616273 = validateParameter(valid_616273, JString, required = false,
                                 default = nil)
  if valid_616273 != nil:
    section.add "X-Amz-SignedHeaders", valid_616273
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_616274 = formData.getOrDefault("MaxRecords")
  valid_616274 = validateParameter(valid_616274, JInt, required = false, default = nil)
  if valid_616274 != nil:
    section.add "MaxRecords", valid_616274
  var valid_616275 = formData.getOrDefault("Marker")
  valid_616275 = validateParameter(valid_616275, JString, required = false,
                                 default = nil)
  if valid_616275 != nil:
    section.add "Marker", valid_616275
  var valid_616276 = formData.getOrDefault("SourceIdentifier")
  valid_616276 = validateParameter(valid_616276, JString, required = false,
                                 default = nil)
  if valid_616276 != nil:
    section.add "SourceIdentifier", valid_616276
  var valid_616277 = formData.getOrDefault("SourceType")
  valid_616277 = validateParameter(valid_616277, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_616277 != nil:
    section.add "SourceType", valid_616277
  var valid_616278 = formData.getOrDefault("Duration")
  valid_616278 = validateParameter(valid_616278, JInt, required = false, default = nil)
  if valid_616278 != nil:
    section.add "Duration", valid_616278
  var valid_616279 = formData.getOrDefault("EndTime")
  valid_616279 = validateParameter(valid_616279, JString, required = false,
                                 default = nil)
  if valid_616279 != nil:
    section.add "EndTime", valid_616279
  var valid_616280 = formData.getOrDefault("StartTime")
  valid_616280 = validateParameter(valid_616280, JString, required = false,
                                 default = nil)
  if valid_616280 != nil:
    section.add "StartTime", valid_616280
  var valid_616281 = formData.getOrDefault("EventCategories")
  valid_616281 = validateParameter(valid_616281, JArray, required = false,
                                 default = nil)
  if valid_616281 != nil:
    section.add "EventCategories", valid_616281
  var valid_616282 = formData.getOrDefault("Filters")
  valid_616282 = validateParameter(valid_616282, JArray, required = false,
                                 default = nil)
  if valid_616282 != nil:
    section.add "Filters", valid_616282
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616283: Call_PostDescribeEvents_616262; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_616283.validator(path, query, header, formData, body)
  let scheme = call_616283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616283.url(scheme.get, call_616283.host, call_616283.base,
                         call_616283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616283, url, valid)

proc call*(call_616284: Call_PostDescribeEvents_616262; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "db-instance"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; EventCategories: JsonNode = nil;
          Action: string = "DescribeEvents"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_616285 = newJObject()
  var formData_616286 = newJObject()
  add(formData_616286, "MaxRecords", newJInt(MaxRecords))
  add(formData_616286, "Marker", newJString(Marker))
  add(formData_616286, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_616286, "SourceType", newJString(SourceType))
  add(formData_616286, "Duration", newJInt(Duration))
  add(formData_616286, "EndTime", newJString(EndTime))
  add(formData_616286, "StartTime", newJString(StartTime))
  if EventCategories != nil:
    formData_616286.add "EventCategories", EventCategories
  add(query_616285, "Action", newJString(Action))
  if Filters != nil:
    formData_616286.add "Filters", Filters
  add(query_616285, "Version", newJString(Version))
  result = call_616284.call(nil, query_616285, nil, formData_616286, nil)

var postDescribeEvents* = Call_PostDescribeEvents_616262(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_616263, base: "/",
    url: url_PostDescribeEvents_616264, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_616238 = ref object of OpenApiRestCall_612658
proc url_GetDescribeEvents_616240(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_616239(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616241 = query.getOrDefault("Marker")
  valid_616241 = validateParameter(valid_616241, JString, required = false,
                                 default = nil)
  if valid_616241 != nil:
    section.add "Marker", valid_616241
  var valid_616242 = query.getOrDefault("SourceType")
  valid_616242 = validateParameter(valid_616242, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_616242 != nil:
    section.add "SourceType", valid_616242
  var valid_616243 = query.getOrDefault("SourceIdentifier")
  valid_616243 = validateParameter(valid_616243, JString, required = false,
                                 default = nil)
  if valid_616243 != nil:
    section.add "SourceIdentifier", valid_616243
  var valid_616244 = query.getOrDefault("EventCategories")
  valid_616244 = validateParameter(valid_616244, JArray, required = false,
                                 default = nil)
  if valid_616244 != nil:
    section.add "EventCategories", valid_616244
  var valid_616245 = query.getOrDefault("Action")
  valid_616245 = validateParameter(valid_616245, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_616245 != nil:
    section.add "Action", valid_616245
  var valid_616246 = query.getOrDefault("StartTime")
  valid_616246 = validateParameter(valid_616246, JString, required = false,
                                 default = nil)
  if valid_616246 != nil:
    section.add "StartTime", valid_616246
  var valid_616247 = query.getOrDefault("Duration")
  valid_616247 = validateParameter(valid_616247, JInt, required = false, default = nil)
  if valid_616247 != nil:
    section.add "Duration", valid_616247
  var valid_616248 = query.getOrDefault("EndTime")
  valid_616248 = validateParameter(valid_616248, JString, required = false,
                                 default = nil)
  if valid_616248 != nil:
    section.add "EndTime", valid_616248
  var valid_616249 = query.getOrDefault("Version")
  valid_616249 = validateParameter(valid_616249, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616249 != nil:
    section.add "Version", valid_616249
  var valid_616250 = query.getOrDefault("Filters")
  valid_616250 = validateParameter(valid_616250, JArray, required = false,
                                 default = nil)
  if valid_616250 != nil:
    section.add "Filters", valid_616250
  var valid_616251 = query.getOrDefault("MaxRecords")
  valid_616251 = validateParameter(valid_616251, JInt, required = false, default = nil)
  if valid_616251 != nil:
    section.add "MaxRecords", valid_616251
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616252 = header.getOrDefault("X-Amz-Signature")
  valid_616252 = validateParameter(valid_616252, JString, required = false,
                                 default = nil)
  if valid_616252 != nil:
    section.add "X-Amz-Signature", valid_616252
  var valid_616253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616253 = validateParameter(valid_616253, JString, required = false,
                                 default = nil)
  if valid_616253 != nil:
    section.add "X-Amz-Content-Sha256", valid_616253
  var valid_616254 = header.getOrDefault("X-Amz-Date")
  valid_616254 = validateParameter(valid_616254, JString, required = false,
                                 default = nil)
  if valid_616254 != nil:
    section.add "X-Amz-Date", valid_616254
  var valid_616255 = header.getOrDefault("X-Amz-Credential")
  valid_616255 = validateParameter(valid_616255, JString, required = false,
                                 default = nil)
  if valid_616255 != nil:
    section.add "X-Amz-Credential", valid_616255
  var valid_616256 = header.getOrDefault("X-Amz-Security-Token")
  valid_616256 = validateParameter(valid_616256, JString, required = false,
                                 default = nil)
  if valid_616256 != nil:
    section.add "X-Amz-Security-Token", valid_616256
  var valid_616257 = header.getOrDefault("X-Amz-Algorithm")
  valid_616257 = validateParameter(valid_616257, JString, required = false,
                                 default = nil)
  if valid_616257 != nil:
    section.add "X-Amz-Algorithm", valid_616257
  var valid_616258 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616258 = validateParameter(valid_616258, JString, required = false,
                                 default = nil)
  if valid_616258 != nil:
    section.add "X-Amz-SignedHeaders", valid_616258
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616259: Call_GetDescribeEvents_616238; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_616259.validator(path, query, header, formData, body)
  let scheme = call_616259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616259.url(scheme.get, call_616259.host, call_616259.base,
                         call_616259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616259, url, valid)

proc call*(call_616260: Call_GetDescribeEvents_616238; Marker: string = "";
          SourceType: string = "db-instance"; SourceIdentifier: string = "";
          EventCategories: JsonNode = nil; Action: string = "DescribeEvents";
          StartTime: string = ""; Duration: int = 0; EndTime: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616261 = newJObject()
  add(query_616261, "Marker", newJString(Marker))
  add(query_616261, "SourceType", newJString(SourceType))
  add(query_616261, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    query_616261.add "EventCategories", EventCategories
  add(query_616261, "Action", newJString(Action))
  add(query_616261, "StartTime", newJString(StartTime))
  add(query_616261, "Duration", newJInt(Duration))
  add(query_616261, "EndTime", newJString(EndTime))
  add(query_616261, "Version", newJString(Version))
  if Filters != nil:
    query_616261.add "Filters", Filters
  add(query_616261, "MaxRecords", newJInt(MaxRecords))
  result = call_616260.call(nil, query_616261, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_616238(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_616239,
    base: "/", url: url_GetDescribeEvents_616240,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeExportTasks_616307 = ref object of OpenApiRestCall_612658
proc url_PostDescribeExportTasks_616309(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeExportTasks_616308(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616310 = query.getOrDefault("Action")
  valid_616310 = validateParameter(valid_616310, JString, required = true,
                                 default = newJString("DescribeExportTasks"))
  if valid_616310 != nil:
    section.add "Action", valid_616310
  var valid_616311 = query.getOrDefault("Version")
  valid_616311 = validateParameter(valid_616311, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616311 != nil:
    section.add "Version", valid_616311
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616312 = header.getOrDefault("X-Amz-Signature")
  valid_616312 = validateParameter(valid_616312, JString, required = false,
                                 default = nil)
  if valid_616312 != nil:
    section.add "X-Amz-Signature", valid_616312
  var valid_616313 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616313 = validateParameter(valid_616313, JString, required = false,
                                 default = nil)
  if valid_616313 != nil:
    section.add "X-Amz-Content-Sha256", valid_616313
  var valid_616314 = header.getOrDefault("X-Amz-Date")
  valid_616314 = validateParameter(valid_616314, JString, required = false,
                                 default = nil)
  if valid_616314 != nil:
    section.add "X-Amz-Date", valid_616314
  var valid_616315 = header.getOrDefault("X-Amz-Credential")
  valid_616315 = validateParameter(valid_616315, JString, required = false,
                                 default = nil)
  if valid_616315 != nil:
    section.add "X-Amz-Credential", valid_616315
  var valid_616316 = header.getOrDefault("X-Amz-Security-Token")
  valid_616316 = validateParameter(valid_616316, JString, required = false,
                                 default = nil)
  if valid_616316 != nil:
    section.add "X-Amz-Security-Token", valid_616316
  var valid_616317 = header.getOrDefault("X-Amz-Algorithm")
  valid_616317 = validateParameter(valid_616317, JString, required = false,
                                 default = nil)
  if valid_616317 != nil:
    section.add "X-Amz-Algorithm", valid_616317
  var valid_616318 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616318 = validateParameter(valid_616318, JString, required = false,
                                 default = nil)
  if valid_616318 != nil:
    section.add "X-Amz-SignedHeaders", valid_616318
  result.add "header", section
  ## parameters in `formData` object:
  ##   ExportTaskIdentifier: JString
  ##                       : The identifier of the snapshot export task to be described.
  ##   MaxRecords: JString
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. 
  ##   SourceArn: JString
  ##            : The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
  ##   Filters: JArray
  ##          : <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task.</p> </li> </ul>
  section = newJObject()
  var valid_616319 = formData.getOrDefault("ExportTaskIdentifier")
  valid_616319 = validateParameter(valid_616319, JString, required = false,
                                 default = nil)
  if valid_616319 != nil:
    section.add "ExportTaskIdentifier", valid_616319
  var valid_616320 = formData.getOrDefault("MaxRecords")
  valid_616320 = validateParameter(valid_616320, JString, required = false,
                                 default = nil)
  if valid_616320 != nil:
    section.add "MaxRecords", valid_616320
  var valid_616321 = formData.getOrDefault("Marker")
  valid_616321 = validateParameter(valid_616321, JString, required = false,
                                 default = nil)
  if valid_616321 != nil:
    section.add "Marker", valid_616321
  var valid_616322 = formData.getOrDefault("SourceArn")
  valid_616322 = validateParameter(valid_616322, JString, required = false,
                                 default = nil)
  if valid_616322 != nil:
    section.add "SourceArn", valid_616322
  var valid_616323 = formData.getOrDefault("Filters")
  valid_616323 = validateParameter(valid_616323, JArray, required = false,
                                 default = nil)
  if valid_616323 != nil:
    section.add "Filters", valid_616323
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616324: Call_PostDescribeExportTasks_616307; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ## 
  let valid = call_616324.validator(path, query, header, formData, body)
  let scheme = call_616324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616324.url(scheme.get, call_616324.host, call_616324.base,
                         call_616324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616324, url, valid)

proc call*(call_616325: Call_PostDescribeExportTasks_616307;
          ExportTaskIdentifier: string = ""; MaxRecords: string = "";
          Marker: string = ""; SourceArn: string = "";
          Action: string = "DescribeExportTasks"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeExportTasks
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ##   ExportTaskIdentifier: string
  ##                       : The identifier of the snapshot export task to be described.
  ##   MaxRecords: string
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. 
  ##   SourceArn: string
  ##            : The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task.</p> </li> </ul>
  ##   Version: string (required)
  var query_616326 = newJObject()
  var formData_616327 = newJObject()
  add(formData_616327, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(formData_616327, "MaxRecords", newJString(MaxRecords))
  add(formData_616327, "Marker", newJString(Marker))
  add(formData_616327, "SourceArn", newJString(SourceArn))
  add(query_616326, "Action", newJString(Action))
  if Filters != nil:
    formData_616327.add "Filters", Filters
  add(query_616326, "Version", newJString(Version))
  result = call_616325.call(nil, query_616326, nil, formData_616327, nil)

var postDescribeExportTasks* = Call_PostDescribeExportTasks_616307(
    name: "postDescribeExportTasks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeExportTasks",
    validator: validate_PostDescribeExportTasks_616308, base: "/",
    url: url_PostDescribeExportTasks_616309, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeExportTasks_616287 = ref object of OpenApiRestCall_612658
proc url_GetDescribeExportTasks_616289(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeExportTasks_616288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceArn: JString
  ##            : The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. 
  ##   ExportTaskIdentifier: JString
  ##                       : The identifier of the snapshot export task to be described.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task.</p> </li> </ul>
  ##   MaxRecords: JString
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616290 = query.getOrDefault("SourceArn")
  valid_616290 = validateParameter(valid_616290, JString, required = false,
                                 default = nil)
  if valid_616290 != nil:
    section.add "SourceArn", valid_616290
  var valid_616291 = query.getOrDefault("Marker")
  valid_616291 = validateParameter(valid_616291, JString, required = false,
                                 default = nil)
  if valid_616291 != nil:
    section.add "Marker", valid_616291
  var valid_616292 = query.getOrDefault("ExportTaskIdentifier")
  valid_616292 = validateParameter(valid_616292, JString, required = false,
                                 default = nil)
  if valid_616292 != nil:
    section.add "ExportTaskIdentifier", valid_616292
  var valid_616293 = query.getOrDefault("Action")
  valid_616293 = validateParameter(valid_616293, JString, required = true,
                                 default = newJString("DescribeExportTasks"))
  if valid_616293 != nil:
    section.add "Action", valid_616293
  var valid_616294 = query.getOrDefault("Version")
  valid_616294 = validateParameter(valid_616294, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616294 != nil:
    section.add "Version", valid_616294
  var valid_616295 = query.getOrDefault("Filters")
  valid_616295 = validateParameter(valid_616295, JArray, required = false,
                                 default = nil)
  if valid_616295 != nil:
    section.add "Filters", valid_616295
  var valid_616296 = query.getOrDefault("MaxRecords")
  valid_616296 = validateParameter(valid_616296, JString, required = false,
                                 default = nil)
  if valid_616296 != nil:
    section.add "MaxRecords", valid_616296
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616297 = header.getOrDefault("X-Amz-Signature")
  valid_616297 = validateParameter(valid_616297, JString, required = false,
                                 default = nil)
  if valid_616297 != nil:
    section.add "X-Amz-Signature", valid_616297
  var valid_616298 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616298 = validateParameter(valid_616298, JString, required = false,
                                 default = nil)
  if valid_616298 != nil:
    section.add "X-Amz-Content-Sha256", valid_616298
  var valid_616299 = header.getOrDefault("X-Amz-Date")
  valid_616299 = validateParameter(valid_616299, JString, required = false,
                                 default = nil)
  if valid_616299 != nil:
    section.add "X-Amz-Date", valid_616299
  var valid_616300 = header.getOrDefault("X-Amz-Credential")
  valid_616300 = validateParameter(valid_616300, JString, required = false,
                                 default = nil)
  if valid_616300 != nil:
    section.add "X-Amz-Credential", valid_616300
  var valid_616301 = header.getOrDefault("X-Amz-Security-Token")
  valid_616301 = validateParameter(valid_616301, JString, required = false,
                                 default = nil)
  if valid_616301 != nil:
    section.add "X-Amz-Security-Token", valid_616301
  var valid_616302 = header.getOrDefault("X-Amz-Algorithm")
  valid_616302 = validateParameter(valid_616302, JString, required = false,
                                 default = nil)
  if valid_616302 != nil:
    section.add "X-Amz-Algorithm", valid_616302
  var valid_616303 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616303 = validateParameter(valid_616303, JString, required = false,
                                 default = nil)
  if valid_616303 != nil:
    section.add "X-Amz-SignedHeaders", valid_616303
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616304: Call_GetDescribeExportTasks_616287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ## 
  let valid = call_616304.validator(path, query, header, formData, body)
  let scheme = call_616304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616304.url(scheme.get, call_616304.host, call_616304.base,
                         call_616304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616304, url, valid)

proc call*(call_616305: Call_GetDescribeExportTasks_616287; SourceArn: string = "";
          Marker: string = ""; ExportTaskIdentifier: string = "";
          Action: string = "DescribeExportTasks"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: string = ""): Recallable =
  ## getDescribeExportTasks
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ##   SourceArn: string
  ##            : The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. 
  ##   ExportTaskIdentifier: string
  ##                       : The identifier of the snapshot export task to be described.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task.</p> </li> </ul>
  ##   MaxRecords: string
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616306 = newJObject()
  add(query_616306, "SourceArn", newJString(SourceArn))
  add(query_616306, "Marker", newJString(Marker))
  add(query_616306, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(query_616306, "Action", newJString(Action))
  add(query_616306, "Version", newJString(Version))
  if Filters != nil:
    query_616306.add "Filters", Filters
  add(query_616306, "MaxRecords", newJString(MaxRecords))
  result = call_616305.call(nil, query_616306, nil, nil, nil)

var getDescribeExportTasks* = Call_GetDescribeExportTasks_616287(
    name: "getDescribeExportTasks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeExportTasks",
    validator: validate_GetDescribeExportTasks_616288, base: "/",
    url: url_GetDescribeExportTasks_616289, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeGlobalClusters_616347 = ref object of OpenApiRestCall_612658
proc url_PostDescribeGlobalClusters_616349(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeGlobalClusters_616348(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616350 = query.getOrDefault("Action")
  valid_616350 = validateParameter(valid_616350, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_616350 != nil:
    section.add "Action", valid_616350
  var valid_616351 = query.getOrDefault("Version")
  valid_616351 = validateParameter(valid_616351, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616351 != nil:
    section.add "Version", valid_616351
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616352 = header.getOrDefault("X-Amz-Signature")
  valid_616352 = validateParameter(valid_616352, JString, required = false,
                                 default = nil)
  if valid_616352 != nil:
    section.add "X-Amz-Signature", valid_616352
  var valid_616353 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616353 = validateParameter(valid_616353, JString, required = false,
                                 default = nil)
  if valid_616353 != nil:
    section.add "X-Amz-Content-Sha256", valid_616353
  var valid_616354 = header.getOrDefault("X-Amz-Date")
  valid_616354 = validateParameter(valid_616354, JString, required = false,
                                 default = nil)
  if valid_616354 != nil:
    section.add "X-Amz-Date", valid_616354
  var valid_616355 = header.getOrDefault("X-Amz-Credential")
  valid_616355 = validateParameter(valid_616355, JString, required = false,
                                 default = nil)
  if valid_616355 != nil:
    section.add "X-Amz-Credential", valid_616355
  var valid_616356 = header.getOrDefault("X-Amz-Security-Token")
  valid_616356 = validateParameter(valid_616356, JString, required = false,
                                 default = nil)
  if valid_616356 != nil:
    section.add "X-Amz-Security-Token", valid_616356
  var valid_616357 = header.getOrDefault("X-Amz-Algorithm")
  valid_616357 = validateParameter(valid_616357, JString, required = false,
                                 default = nil)
  if valid_616357 != nil:
    section.add "X-Amz-Algorithm", valid_616357
  var valid_616358 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616358 = validateParameter(valid_616358, JString, required = false,
                                 default = nil)
  if valid_616358 != nil:
    section.add "X-Amz-SignedHeaders", valid_616358
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_616359 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_616359 = validateParameter(valid_616359, JString, required = false,
                                 default = nil)
  if valid_616359 != nil:
    section.add "GlobalClusterIdentifier", valid_616359
  var valid_616360 = formData.getOrDefault("MaxRecords")
  valid_616360 = validateParameter(valid_616360, JInt, required = false, default = nil)
  if valid_616360 != nil:
    section.add "MaxRecords", valid_616360
  var valid_616361 = formData.getOrDefault("Marker")
  valid_616361 = validateParameter(valid_616361, JString, required = false,
                                 default = nil)
  if valid_616361 != nil:
    section.add "Marker", valid_616361
  var valid_616362 = formData.getOrDefault("Filters")
  valid_616362 = validateParameter(valid_616362, JArray, required = false,
                                 default = nil)
  if valid_616362 != nil:
    section.add "Filters", valid_616362
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616363: Call_PostDescribeGlobalClusters_616347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616363.validator(path, query, header, formData, body)
  let scheme = call_616363.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616363.url(scheme.get, call_616363.host, call_616363.base,
                         call_616363.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616363, url, valid)

proc call*(call_616364: Call_PostDescribeGlobalClusters_616347;
          GlobalClusterIdentifier: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeGlobalClusters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_616365 = newJObject()
  var formData_616366 = newJObject()
  add(formData_616366, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_616366, "MaxRecords", newJInt(MaxRecords))
  add(formData_616366, "Marker", newJString(Marker))
  add(query_616365, "Action", newJString(Action))
  if Filters != nil:
    formData_616366.add "Filters", Filters
  add(query_616365, "Version", newJString(Version))
  result = call_616364.call(nil, query_616365, nil, formData_616366, nil)

var postDescribeGlobalClusters* = Call_PostDescribeGlobalClusters_616347(
    name: "postDescribeGlobalClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_PostDescribeGlobalClusters_616348, base: "/",
    url: url_PostDescribeGlobalClusters_616349,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeGlobalClusters_616328 = ref object of OpenApiRestCall_612658
proc url_GetDescribeGlobalClusters_616330(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeGlobalClusters_616329(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616331 = query.getOrDefault("Marker")
  valid_616331 = validateParameter(valid_616331, JString, required = false,
                                 default = nil)
  if valid_616331 != nil:
    section.add "Marker", valid_616331
  var valid_616332 = query.getOrDefault("GlobalClusterIdentifier")
  valid_616332 = validateParameter(valid_616332, JString, required = false,
                                 default = nil)
  if valid_616332 != nil:
    section.add "GlobalClusterIdentifier", valid_616332
  var valid_616333 = query.getOrDefault("Action")
  valid_616333 = validateParameter(valid_616333, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_616333 != nil:
    section.add "Action", valid_616333
  var valid_616334 = query.getOrDefault("Version")
  valid_616334 = validateParameter(valid_616334, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616334 != nil:
    section.add "Version", valid_616334
  var valid_616335 = query.getOrDefault("Filters")
  valid_616335 = validateParameter(valid_616335, JArray, required = false,
                                 default = nil)
  if valid_616335 != nil:
    section.add "Filters", valid_616335
  var valid_616336 = query.getOrDefault("MaxRecords")
  valid_616336 = validateParameter(valid_616336, JInt, required = false, default = nil)
  if valid_616336 != nil:
    section.add "MaxRecords", valid_616336
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616337 = header.getOrDefault("X-Amz-Signature")
  valid_616337 = validateParameter(valid_616337, JString, required = false,
                                 default = nil)
  if valid_616337 != nil:
    section.add "X-Amz-Signature", valid_616337
  var valid_616338 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616338 = validateParameter(valid_616338, JString, required = false,
                                 default = nil)
  if valid_616338 != nil:
    section.add "X-Amz-Content-Sha256", valid_616338
  var valid_616339 = header.getOrDefault("X-Amz-Date")
  valid_616339 = validateParameter(valid_616339, JString, required = false,
                                 default = nil)
  if valid_616339 != nil:
    section.add "X-Amz-Date", valid_616339
  var valid_616340 = header.getOrDefault("X-Amz-Credential")
  valid_616340 = validateParameter(valid_616340, JString, required = false,
                                 default = nil)
  if valid_616340 != nil:
    section.add "X-Amz-Credential", valid_616340
  var valid_616341 = header.getOrDefault("X-Amz-Security-Token")
  valid_616341 = validateParameter(valid_616341, JString, required = false,
                                 default = nil)
  if valid_616341 != nil:
    section.add "X-Amz-Security-Token", valid_616341
  var valid_616342 = header.getOrDefault("X-Amz-Algorithm")
  valid_616342 = validateParameter(valid_616342, JString, required = false,
                                 default = nil)
  if valid_616342 != nil:
    section.add "X-Amz-Algorithm", valid_616342
  var valid_616343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616343 = validateParameter(valid_616343, JString, required = false,
                                 default = nil)
  if valid_616343 != nil:
    section.add "X-Amz-SignedHeaders", valid_616343
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616344: Call_GetDescribeGlobalClusters_616328; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616344.validator(path, query, header, formData, body)
  let scheme = call_616344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616344.url(scheme.get, call_616344.host, call_616344.base,
                         call_616344.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616344, url, valid)

proc call*(call_616345: Call_GetDescribeGlobalClusters_616328; Marker: string = "";
          GlobalClusterIdentifier: string = "";
          Action: string = "DescribeGlobalClusters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616346 = newJObject()
  add(query_616346, "Marker", newJString(Marker))
  add(query_616346, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_616346, "Action", newJString(Action))
  add(query_616346, "Version", newJString(Version))
  if Filters != nil:
    query_616346.add "Filters", Filters
  add(query_616346, "MaxRecords", newJInt(MaxRecords))
  result = call_616345.call(nil, query_616346, nil, nil, nil)

var getDescribeGlobalClusters* = Call_GetDescribeGlobalClusters_616328(
    name: "getDescribeGlobalClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_GetDescribeGlobalClusters_616329, base: "/",
    url: url_GetDescribeGlobalClusters_616330,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeInstallationMedia_616386 = ref object of OpenApiRestCall_612658
proc url_PostDescribeInstallationMedia_616388(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeInstallationMedia_616387(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616389 = query.getOrDefault("Action")
  valid_616389 = validateParameter(valid_616389, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_616389 != nil:
    section.add "Action", valid_616389
  var valid_616390 = query.getOrDefault("Version")
  valid_616390 = validateParameter(valid_616390, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616390 != nil:
    section.add "Version", valid_616390
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616391 = header.getOrDefault("X-Amz-Signature")
  valid_616391 = validateParameter(valid_616391, JString, required = false,
                                 default = nil)
  if valid_616391 != nil:
    section.add "X-Amz-Signature", valid_616391
  var valid_616392 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616392 = validateParameter(valid_616392, JString, required = false,
                                 default = nil)
  if valid_616392 != nil:
    section.add "X-Amz-Content-Sha256", valid_616392
  var valid_616393 = header.getOrDefault("X-Amz-Date")
  valid_616393 = validateParameter(valid_616393, JString, required = false,
                                 default = nil)
  if valid_616393 != nil:
    section.add "X-Amz-Date", valid_616393
  var valid_616394 = header.getOrDefault("X-Amz-Credential")
  valid_616394 = validateParameter(valid_616394, JString, required = false,
                                 default = nil)
  if valid_616394 != nil:
    section.add "X-Amz-Credential", valid_616394
  var valid_616395 = header.getOrDefault("X-Amz-Security-Token")
  valid_616395 = validateParameter(valid_616395, JString, required = false,
                                 default = nil)
  if valid_616395 != nil:
    section.add "X-Amz-Security-Token", valid_616395
  var valid_616396 = header.getOrDefault("X-Amz-Algorithm")
  valid_616396 = validateParameter(valid_616396, JString, required = false,
                                 default = nil)
  if valid_616396 != nil:
    section.add "X-Amz-Algorithm", valid_616396
  var valid_616397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616397 = validateParameter(valid_616397, JString, required = false,
                                 default = nil)
  if valid_616397 != nil:
    section.add "X-Amz-SignedHeaders", valid_616397
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: JString
  ##                      : The installation medium ID.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  section = newJObject()
  var valid_616398 = formData.getOrDefault("MaxRecords")
  valid_616398 = validateParameter(valid_616398, JInt, required = false, default = nil)
  if valid_616398 != nil:
    section.add "MaxRecords", valid_616398
  var valid_616399 = formData.getOrDefault("Marker")
  valid_616399 = validateParameter(valid_616399, JString, required = false,
                                 default = nil)
  if valid_616399 != nil:
    section.add "Marker", valid_616399
  var valid_616400 = formData.getOrDefault("InstallationMediaId")
  valid_616400 = validateParameter(valid_616400, JString, required = false,
                                 default = nil)
  if valid_616400 != nil:
    section.add "InstallationMediaId", valid_616400
  var valid_616401 = formData.getOrDefault("Filters")
  valid_616401 = validateParameter(valid_616401, JArray, required = false,
                                 default = nil)
  if valid_616401 != nil:
    section.add "Filters", valid_616401
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616402: Call_PostDescribeInstallationMedia_616386; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_616402.validator(path, query, header, formData, body)
  let scheme = call_616402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616402.url(scheme.get, call_616402.host, call_616402.base,
                         call_616402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616402, url, valid)

proc call*(call_616403: Call_PostDescribeInstallationMedia_616386;
          MaxRecords: int = 0; Marker: string = ""; InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeInstallationMedia
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: string
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   Version: string (required)
  var query_616404 = newJObject()
  var formData_616405 = newJObject()
  add(formData_616405, "MaxRecords", newJInt(MaxRecords))
  add(formData_616405, "Marker", newJString(Marker))
  add(formData_616405, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_616404, "Action", newJString(Action))
  if Filters != nil:
    formData_616405.add "Filters", Filters
  add(query_616404, "Version", newJString(Version))
  result = call_616403.call(nil, query_616404, nil, formData_616405, nil)

var postDescribeInstallationMedia* = Call_PostDescribeInstallationMedia_616386(
    name: "postDescribeInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_PostDescribeInstallationMedia_616387, base: "/",
    url: url_PostDescribeInstallationMedia_616388,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeInstallationMedia_616367 = ref object of OpenApiRestCall_612658
proc url_GetDescribeInstallationMedia_616369(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeInstallationMedia_616368(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: JString
  ##                      : The installation medium ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_616370 = query.getOrDefault("Marker")
  valid_616370 = validateParameter(valid_616370, JString, required = false,
                                 default = nil)
  if valid_616370 != nil:
    section.add "Marker", valid_616370
  var valid_616371 = query.getOrDefault("InstallationMediaId")
  valid_616371 = validateParameter(valid_616371, JString, required = false,
                                 default = nil)
  if valid_616371 != nil:
    section.add "InstallationMediaId", valid_616371
  var valid_616372 = query.getOrDefault("Action")
  valid_616372 = validateParameter(valid_616372, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_616372 != nil:
    section.add "Action", valid_616372
  var valid_616373 = query.getOrDefault("Version")
  valid_616373 = validateParameter(valid_616373, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616373 != nil:
    section.add "Version", valid_616373
  var valid_616374 = query.getOrDefault("Filters")
  valid_616374 = validateParameter(valid_616374, JArray, required = false,
                                 default = nil)
  if valid_616374 != nil:
    section.add "Filters", valid_616374
  var valid_616375 = query.getOrDefault("MaxRecords")
  valid_616375 = validateParameter(valid_616375, JInt, required = false, default = nil)
  if valid_616375 != nil:
    section.add "MaxRecords", valid_616375
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616376 = header.getOrDefault("X-Amz-Signature")
  valid_616376 = validateParameter(valid_616376, JString, required = false,
                                 default = nil)
  if valid_616376 != nil:
    section.add "X-Amz-Signature", valid_616376
  var valid_616377 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616377 = validateParameter(valid_616377, JString, required = false,
                                 default = nil)
  if valid_616377 != nil:
    section.add "X-Amz-Content-Sha256", valid_616377
  var valid_616378 = header.getOrDefault("X-Amz-Date")
  valid_616378 = validateParameter(valid_616378, JString, required = false,
                                 default = nil)
  if valid_616378 != nil:
    section.add "X-Amz-Date", valid_616378
  var valid_616379 = header.getOrDefault("X-Amz-Credential")
  valid_616379 = validateParameter(valid_616379, JString, required = false,
                                 default = nil)
  if valid_616379 != nil:
    section.add "X-Amz-Credential", valid_616379
  var valid_616380 = header.getOrDefault("X-Amz-Security-Token")
  valid_616380 = validateParameter(valid_616380, JString, required = false,
                                 default = nil)
  if valid_616380 != nil:
    section.add "X-Amz-Security-Token", valid_616380
  var valid_616381 = header.getOrDefault("X-Amz-Algorithm")
  valid_616381 = validateParameter(valid_616381, JString, required = false,
                                 default = nil)
  if valid_616381 != nil:
    section.add "X-Amz-Algorithm", valid_616381
  var valid_616382 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616382 = validateParameter(valid_616382, JString, required = false,
                                 default = nil)
  if valid_616382 != nil:
    section.add "X-Amz-SignedHeaders", valid_616382
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616383: Call_GetDescribeInstallationMedia_616367; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_616383.validator(path, query, header, formData, body)
  let scheme = call_616383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616383.url(scheme.get, call_616383.host, call_616383.base,
                         call_616383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616383, url, valid)

proc call*(call_616384: Call_GetDescribeInstallationMedia_616367;
          Marker: string = ""; InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeInstallationMedia
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: string
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  var query_616385 = newJObject()
  add(query_616385, "Marker", newJString(Marker))
  add(query_616385, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_616385, "Action", newJString(Action))
  add(query_616385, "Version", newJString(Version))
  if Filters != nil:
    query_616385.add "Filters", Filters
  add(query_616385, "MaxRecords", newJInt(MaxRecords))
  result = call_616384.call(nil, query_616385, nil, nil, nil)

var getDescribeInstallationMedia* = Call_GetDescribeInstallationMedia_616367(
    name: "getDescribeInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_GetDescribeInstallationMedia_616368, base: "/",
    url: url_GetDescribeInstallationMedia_616369,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroupOptions_616426 = ref object of OpenApiRestCall_612658
proc url_PostDescribeOptionGroupOptions_616428(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOptionGroupOptions_616427(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616429 = query.getOrDefault("Action")
  valid_616429 = validateParameter(valid_616429, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_616429 != nil:
    section.add "Action", valid_616429
  var valid_616430 = query.getOrDefault("Version")
  valid_616430 = validateParameter(valid_616430, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616430 != nil:
    section.add "Version", valid_616430
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616431 = header.getOrDefault("X-Amz-Signature")
  valid_616431 = validateParameter(valid_616431, JString, required = false,
                                 default = nil)
  if valid_616431 != nil:
    section.add "X-Amz-Signature", valid_616431
  var valid_616432 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616432 = validateParameter(valid_616432, JString, required = false,
                                 default = nil)
  if valid_616432 != nil:
    section.add "X-Amz-Content-Sha256", valid_616432
  var valid_616433 = header.getOrDefault("X-Amz-Date")
  valid_616433 = validateParameter(valid_616433, JString, required = false,
                                 default = nil)
  if valid_616433 != nil:
    section.add "X-Amz-Date", valid_616433
  var valid_616434 = header.getOrDefault("X-Amz-Credential")
  valid_616434 = validateParameter(valid_616434, JString, required = false,
                                 default = nil)
  if valid_616434 != nil:
    section.add "X-Amz-Credential", valid_616434
  var valid_616435 = header.getOrDefault("X-Amz-Security-Token")
  valid_616435 = validateParameter(valid_616435, JString, required = false,
                                 default = nil)
  if valid_616435 != nil:
    section.add "X-Amz-Security-Token", valid_616435
  var valid_616436 = header.getOrDefault("X-Amz-Algorithm")
  valid_616436 = validateParameter(valid_616436, JString, required = false,
                                 default = nil)
  if valid_616436 != nil:
    section.add "X-Amz-Algorithm", valid_616436
  var valid_616437 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616437 = validateParameter(valid_616437, JString, required = false,
                                 default = nil)
  if valid_616437 != nil:
    section.add "X-Amz-SignedHeaders", valid_616437
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_616438 = formData.getOrDefault("MaxRecords")
  valid_616438 = validateParameter(valid_616438, JInt, required = false, default = nil)
  if valid_616438 != nil:
    section.add "MaxRecords", valid_616438
  var valid_616439 = formData.getOrDefault("Marker")
  valid_616439 = validateParameter(valid_616439, JString, required = false,
                                 default = nil)
  if valid_616439 != nil:
    section.add "Marker", valid_616439
  assert formData != nil,
        "formData argument is necessary due to required `EngineName` field"
  var valid_616440 = formData.getOrDefault("EngineName")
  valid_616440 = validateParameter(valid_616440, JString, required = true,
                                 default = nil)
  if valid_616440 != nil:
    section.add "EngineName", valid_616440
  var valid_616441 = formData.getOrDefault("MajorEngineVersion")
  valid_616441 = validateParameter(valid_616441, JString, required = false,
                                 default = nil)
  if valid_616441 != nil:
    section.add "MajorEngineVersion", valid_616441
  var valid_616442 = formData.getOrDefault("Filters")
  valid_616442 = validateParameter(valid_616442, JArray, required = false,
                                 default = nil)
  if valid_616442 != nil:
    section.add "Filters", valid_616442
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616443: Call_PostDescribeOptionGroupOptions_616426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_616443.validator(path, query, header, formData, body)
  let scheme = call_616443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616443.url(scheme.get, call_616443.host, call_616443.base,
                         call_616443.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616443, url, valid)

proc call*(call_616444: Call_PostDescribeOptionGroupOptions_616426;
          EngineName: string; MaxRecords: int = 0; Marker: string = "";
          MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroupOptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_616445 = newJObject()
  var formData_616446 = newJObject()
  add(formData_616446, "MaxRecords", newJInt(MaxRecords))
  add(formData_616446, "Marker", newJString(Marker))
  add(formData_616446, "EngineName", newJString(EngineName))
  add(formData_616446, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_616445, "Action", newJString(Action))
  if Filters != nil:
    formData_616446.add "Filters", Filters
  add(query_616445, "Version", newJString(Version))
  result = call_616444.call(nil, query_616445, nil, formData_616446, nil)

var postDescribeOptionGroupOptions* = Call_PostDescribeOptionGroupOptions_616426(
    name: "postDescribeOptionGroupOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_PostDescribeOptionGroupOptions_616427, base: "/",
    url: url_PostDescribeOptionGroupOptions_616428,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroupOptions_616406 = ref object of OpenApiRestCall_612658
proc url_GetDescribeOptionGroupOptions_616408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOptionGroupOptions_616407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_616409 = query.getOrDefault("EngineName")
  valid_616409 = validateParameter(valid_616409, JString, required = true,
                                 default = nil)
  if valid_616409 != nil:
    section.add "EngineName", valid_616409
  var valid_616410 = query.getOrDefault("Marker")
  valid_616410 = validateParameter(valid_616410, JString, required = false,
                                 default = nil)
  if valid_616410 != nil:
    section.add "Marker", valid_616410
  var valid_616411 = query.getOrDefault("Action")
  valid_616411 = validateParameter(valid_616411, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_616411 != nil:
    section.add "Action", valid_616411
  var valid_616412 = query.getOrDefault("Version")
  valid_616412 = validateParameter(valid_616412, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616412 != nil:
    section.add "Version", valid_616412
  var valid_616413 = query.getOrDefault("Filters")
  valid_616413 = validateParameter(valid_616413, JArray, required = false,
                                 default = nil)
  if valid_616413 != nil:
    section.add "Filters", valid_616413
  var valid_616414 = query.getOrDefault("MaxRecords")
  valid_616414 = validateParameter(valid_616414, JInt, required = false, default = nil)
  if valid_616414 != nil:
    section.add "MaxRecords", valid_616414
  var valid_616415 = query.getOrDefault("MajorEngineVersion")
  valid_616415 = validateParameter(valid_616415, JString, required = false,
                                 default = nil)
  if valid_616415 != nil:
    section.add "MajorEngineVersion", valid_616415
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616416 = header.getOrDefault("X-Amz-Signature")
  valid_616416 = validateParameter(valid_616416, JString, required = false,
                                 default = nil)
  if valid_616416 != nil:
    section.add "X-Amz-Signature", valid_616416
  var valid_616417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616417 = validateParameter(valid_616417, JString, required = false,
                                 default = nil)
  if valid_616417 != nil:
    section.add "X-Amz-Content-Sha256", valid_616417
  var valid_616418 = header.getOrDefault("X-Amz-Date")
  valid_616418 = validateParameter(valid_616418, JString, required = false,
                                 default = nil)
  if valid_616418 != nil:
    section.add "X-Amz-Date", valid_616418
  var valid_616419 = header.getOrDefault("X-Amz-Credential")
  valid_616419 = validateParameter(valid_616419, JString, required = false,
                                 default = nil)
  if valid_616419 != nil:
    section.add "X-Amz-Credential", valid_616419
  var valid_616420 = header.getOrDefault("X-Amz-Security-Token")
  valid_616420 = validateParameter(valid_616420, JString, required = false,
                                 default = nil)
  if valid_616420 != nil:
    section.add "X-Amz-Security-Token", valid_616420
  var valid_616421 = header.getOrDefault("X-Amz-Algorithm")
  valid_616421 = validateParameter(valid_616421, JString, required = false,
                                 default = nil)
  if valid_616421 != nil:
    section.add "X-Amz-Algorithm", valid_616421
  var valid_616422 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616422 = validateParameter(valid_616422, JString, required = false,
                                 default = nil)
  if valid_616422 != nil:
    section.add "X-Amz-SignedHeaders", valid_616422
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616423: Call_GetDescribeOptionGroupOptions_616406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_616423.validator(path, query, header, formData, body)
  let scheme = call_616423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616423.url(scheme.get, call_616423.host, call_616423.base,
                         call_616423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616423, url, valid)

proc call*(call_616424: Call_GetDescribeOptionGroupOptions_616406;
          EngineName: string; Marker: string = "";
          Action: string = "DescribeOptionGroupOptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroupOptions
  ## Describes all available options.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  var query_616425 = newJObject()
  add(query_616425, "EngineName", newJString(EngineName))
  add(query_616425, "Marker", newJString(Marker))
  add(query_616425, "Action", newJString(Action))
  add(query_616425, "Version", newJString(Version))
  if Filters != nil:
    query_616425.add "Filters", Filters
  add(query_616425, "MaxRecords", newJInt(MaxRecords))
  add(query_616425, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_616424.call(nil, query_616425, nil, nil, nil)

var getDescribeOptionGroupOptions* = Call_GetDescribeOptionGroupOptions_616406(
    name: "getDescribeOptionGroupOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_GetDescribeOptionGroupOptions_616407, base: "/",
    url: url_GetDescribeOptionGroupOptions_616408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroups_616468 = ref object of OpenApiRestCall_612658
proc url_PostDescribeOptionGroups_616470(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOptionGroups_616469(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616471 = query.getOrDefault("Action")
  valid_616471 = validateParameter(valid_616471, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_616471 != nil:
    section.add "Action", valid_616471
  var valid_616472 = query.getOrDefault("Version")
  valid_616472 = validateParameter(valid_616472, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616472 != nil:
    section.add "Version", valid_616472
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616473 = header.getOrDefault("X-Amz-Signature")
  valid_616473 = validateParameter(valid_616473, JString, required = false,
                                 default = nil)
  if valid_616473 != nil:
    section.add "X-Amz-Signature", valid_616473
  var valid_616474 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616474 = validateParameter(valid_616474, JString, required = false,
                                 default = nil)
  if valid_616474 != nil:
    section.add "X-Amz-Content-Sha256", valid_616474
  var valid_616475 = header.getOrDefault("X-Amz-Date")
  valid_616475 = validateParameter(valid_616475, JString, required = false,
                                 default = nil)
  if valid_616475 != nil:
    section.add "X-Amz-Date", valid_616475
  var valid_616476 = header.getOrDefault("X-Amz-Credential")
  valid_616476 = validateParameter(valid_616476, JString, required = false,
                                 default = nil)
  if valid_616476 != nil:
    section.add "X-Amz-Credential", valid_616476
  var valid_616477 = header.getOrDefault("X-Amz-Security-Token")
  valid_616477 = validateParameter(valid_616477, JString, required = false,
                                 default = nil)
  if valid_616477 != nil:
    section.add "X-Amz-Security-Token", valid_616477
  var valid_616478 = header.getOrDefault("X-Amz-Algorithm")
  valid_616478 = validateParameter(valid_616478, JString, required = false,
                                 default = nil)
  if valid_616478 != nil:
    section.add "X-Amz-Algorithm", valid_616478
  var valid_616479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616479 = validateParameter(valid_616479, JString, required = false,
                                 default = nil)
  if valid_616479 != nil:
    section.add "X-Amz-SignedHeaders", valid_616479
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_616480 = formData.getOrDefault("MaxRecords")
  valid_616480 = validateParameter(valid_616480, JInt, required = false, default = nil)
  if valid_616480 != nil:
    section.add "MaxRecords", valid_616480
  var valid_616481 = formData.getOrDefault("Marker")
  valid_616481 = validateParameter(valid_616481, JString, required = false,
                                 default = nil)
  if valid_616481 != nil:
    section.add "Marker", valid_616481
  var valid_616482 = formData.getOrDefault("EngineName")
  valid_616482 = validateParameter(valid_616482, JString, required = false,
                                 default = nil)
  if valid_616482 != nil:
    section.add "EngineName", valid_616482
  var valid_616483 = formData.getOrDefault("MajorEngineVersion")
  valid_616483 = validateParameter(valid_616483, JString, required = false,
                                 default = nil)
  if valid_616483 != nil:
    section.add "MajorEngineVersion", valid_616483
  var valid_616484 = formData.getOrDefault("OptionGroupName")
  valid_616484 = validateParameter(valid_616484, JString, required = false,
                                 default = nil)
  if valid_616484 != nil:
    section.add "OptionGroupName", valid_616484
  var valid_616485 = formData.getOrDefault("Filters")
  valid_616485 = validateParameter(valid_616485, JArray, required = false,
                                 default = nil)
  if valid_616485 != nil:
    section.add "Filters", valid_616485
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616486: Call_PostDescribeOptionGroups_616468; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_616486.validator(path, query, header, formData, body)
  let scheme = call_616486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616486.url(scheme.get, call_616486.host, call_616486.base,
                         call_616486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616486, url, valid)

proc call*(call_616487: Call_PostDescribeOptionGroups_616468; MaxRecords: int = 0;
          Marker: string = ""; EngineName: string = ""; MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroups
  ## Describes the available option groups.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_616488 = newJObject()
  var formData_616489 = newJObject()
  add(formData_616489, "MaxRecords", newJInt(MaxRecords))
  add(formData_616489, "Marker", newJString(Marker))
  add(formData_616489, "EngineName", newJString(EngineName))
  add(formData_616489, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_616488, "Action", newJString(Action))
  add(formData_616489, "OptionGroupName", newJString(OptionGroupName))
  if Filters != nil:
    formData_616489.add "Filters", Filters
  add(query_616488, "Version", newJString(Version))
  result = call_616487.call(nil, query_616488, nil, formData_616489, nil)

var postDescribeOptionGroups* = Call_PostDescribeOptionGroups_616468(
    name: "postDescribeOptionGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_PostDescribeOptionGroups_616469, base: "/",
    url: url_PostDescribeOptionGroups_616470, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroups_616447 = ref object of OpenApiRestCall_612658
proc url_GetDescribeOptionGroups_616449(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOptionGroups_616448(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  section = newJObject()
  var valid_616450 = query.getOrDefault("EngineName")
  valid_616450 = validateParameter(valid_616450, JString, required = false,
                                 default = nil)
  if valid_616450 != nil:
    section.add "EngineName", valid_616450
  var valid_616451 = query.getOrDefault("Marker")
  valid_616451 = validateParameter(valid_616451, JString, required = false,
                                 default = nil)
  if valid_616451 != nil:
    section.add "Marker", valid_616451
  var valid_616452 = query.getOrDefault("Action")
  valid_616452 = validateParameter(valid_616452, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_616452 != nil:
    section.add "Action", valid_616452
  var valid_616453 = query.getOrDefault("OptionGroupName")
  valid_616453 = validateParameter(valid_616453, JString, required = false,
                                 default = nil)
  if valid_616453 != nil:
    section.add "OptionGroupName", valid_616453
  var valid_616454 = query.getOrDefault("Version")
  valid_616454 = validateParameter(valid_616454, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616454 != nil:
    section.add "Version", valid_616454
  var valid_616455 = query.getOrDefault("Filters")
  valid_616455 = validateParameter(valid_616455, JArray, required = false,
                                 default = nil)
  if valid_616455 != nil:
    section.add "Filters", valid_616455
  var valid_616456 = query.getOrDefault("MaxRecords")
  valid_616456 = validateParameter(valid_616456, JInt, required = false, default = nil)
  if valid_616456 != nil:
    section.add "MaxRecords", valid_616456
  var valid_616457 = query.getOrDefault("MajorEngineVersion")
  valid_616457 = validateParameter(valid_616457, JString, required = false,
                                 default = nil)
  if valid_616457 != nil:
    section.add "MajorEngineVersion", valid_616457
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616458 = header.getOrDefault("X-Amz-Signature")
  valid_616458 = validateParameter(valid_616458, JString, required = false,
                                 default = nil)
  if valid_616458 != nil:
    section.add "X-Amz-Signature", valid_616458
  var valid_616459 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616459 = validateParameter(valid_616459, JString, required = false,
                                 default = nil)
  if valid_616459 != nil:
    section.add "X-Amz-Content-Sha256", valid_616459
  var valid_616460 = header.getOrDefault("X-Amz-Date")
  valid_616460 = validateParameter(valid_616460, JString, required = false,
                                 default = nil)
  if valid_616460 != nil:
    section.add "X-Amz-Date", valid_616460
  var valid_616461 = header.getOrDefault("X-Amz-Credential")
  valid_616461 = validateParameter(valid_616461, JString, required = false,
                                 default = nil)
  if valid_616461 != nil:
    section.add "X-Amz-Credential", valid_616461
  var valid_616462 = header.getOrDefault("X-Amz-Security-Token")
  valid_616462 = validateParameter(valid_616462, JString, required = false,
                                 default = nil)
  if valid_616462 != nil:
    section.add "X-Amz-Security-Token", valid_616462
  var valid_616463 = header.getOrDefault("X-Amz-Algorithm")
  valid_616463 = validateParameter(valid_616463, JString, required = false,
                                 default = nil)
  if valid_616463 != nil:
    section.add "X-Amz-Algorithm", valid_616463
  var valid_616464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616464 = validateParameter(valid_616464, JString, required = false,
                                 default = nil)
  if valid_616464 != nil:
    section.add "X-Amz-SignedHeaders", valid_616464
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616465: Call_GetDescribeOptionGroups_616447; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_616465.validator(path, query, header, formData, body)
  let scheme = call_616465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616465.url(scheme.get, call_616465.host, call_616465.base,
                         call_616465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616465, url, valid)

proc call*(call_616466: Call_GetDescribeOptionGroups_616447;
          EngineName: string = ""; Marker: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroups
  ## Describes the available option groups.
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  var query_616467 = newJObject()
  add(query_616467, "EngineName", newJString(EngineName))
  add(query_616467, "Marker", newJString(Marker))
  add(query_616467, "Action", newJString(Action))
  add(query_616467, "OptionGroupName", newJString(OptionGroupName))
  add(query_616467, "Version", newJString(Version))
  if Filters != nil:
    query_616467.add "Filters", Filters
  add(query_616467, "MaxRecords", newJInt(MaxRecords))
  add(query_616467, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_616466.call(nil, query_616467, nil, nil, nil)

var getDescribeOptionGroups* = Call_GetDescribeOptionGroups_616447(
    name: "getDescribeOptionGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_GetDescribeOptionGroups_616448, base: "/",
    url: url_GetDescribeOptionGroups_616449, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_616513 = ref object of OpenApiRestCall_612658
proc url_PostDescribeOrderableDBInstanceOptions_616515(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_616514(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616516 = query.getOrDefault("Action")
  valid_616516 = validateParameter(valid_616516, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_616516 != nil:
    section.add "Action", valid_616516
  var valid_616517 = query.getOrDefault("Version")
  valid_616517 = validateParameter(valid_616517, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616517 != nil:
    section.add "Version", valid_616517
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616518 = header.getOrDefault("X-Amz-Signature")
  valid_616518 = validateParameter(valid_616518, JString, required = false,
                                 default = nil)
  if valid_616518 != nil:
    section.add "X-Amz-Signature", valid_616518
  var valid_616519 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616519 = validateParameter(valid_616519, JString, required = false,
                                 default = nil)
  if valid_616519 != nil:
    section.add "X-Amz-Content-Sha256", valid_616519
  var valid_616520 = header.getOrDefault("X-Amz-Date")
  valid_616520 = validateParameter(valid_616520, JString, required = false,
                                 default = nil)
  if valid_616520 != nil:
    section.add "X-Amz-Date", valid_616520
  var valid_616521 = header.getOrDefault("X-Amz-Credential")
  valid_616521 = validateParameter(valid_616521, JString, required = false,
                                 default = nil)
  if valid_616521 != nil:
    section.add "X-Amz-Credential", valid_616521
  var valid_616522 = header.getOrDefault("X-Amz-Security-Token")
  valid_616522 = validateParameter(valid_616522, JString, required = false,
                                 default = nil)
  if valid_616522 != nil:
    section.add "X-Amz-Security-Token", valid_616522
  var valid_616523 = header.getOrDefault("X-Amz-Algorithm")
  valid_616523 = validateParameter(valid_616523, JString, required = false,
                                 default = nil)
  if valid_616523 != nil:
    section.add "X-Amz-Algorithm", valid_616523
  var valid_616524 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616524 = validateParameter(valid_616524, JString, required = false,
                                 default = nil)
  if valid_616524 != nil:
    section.add "X-Amz-SignedHeaders", valid_616524
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_616525 = formData.getOrDefault("DBInstanceClass")
  valid_616525 = validateParameter(valid_616525, JString, required = false,
                                 default = nil)
  if valid_616525 != nil:
    section.add "DBInstanceClass", valid_616525
  var valid_616526 = formData.getOrDefault("MaxRecords")
  valid_616526 = validateParameter(valid_616526, JInt, required = false, default = nil)
  if valid_616526 != nil:
    section.add "MaxRecords", valid_616526
  var valid_616527 = formData.getOrDefault("EngineVersion")
  valid_616527 = validateParameter(valid_616527, JString, required = false,
                                 default = nil)
  if valid_616527 != nil:
    section.add "EngineVersion", valid_616527
  var valid_616528 = formData.getOrDefault("Marker")
  valid_616528 = validateParameter(valid_616528, JString, required = false,
                                 default = nil)
  if valid_616528 != nil:
    section.add "Marker", valid_616528
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_616529 = formData.getOrDefault("Engine")
  valid_616529 = validateParameter(valid_616529, JString, required = true,
                                 default = nil)
  if valid_616529 != nil:
    section.add "Engine", valid_616529
  var valid_616530 = formData.getOrDefault("Vpc")
  valid_616530 = validateParameter(valid_616530, JBool, required = false, default = nil)
  if valid_616530 != nil:
    section.add "Vpc", valid_616530
  var valid_616531 = formData.getOrDefault("LicenseModel")
  valid_616531 = validateParameter(valid_616531, JString, required = false,
                                 default = nil)
  if valid_616531 != nil:
    section.add "LicenseModel", valid_616531
  var valid_616532 = formData.getOrDefault("Filters")
  valid_616532 = validateParameter(valid_616532, JArray, required = false,
                                 default = nil)
  if valid_616532 != nil:
    section.add "Filters", valid_616532
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616533: Call_PostDescribeOrderableDBInstanceOptions_616513;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_616533.validator(path, query, header, formData, body)
  let scheme = call_616533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616533.url(scheme.get, call_616533.host, call_616533.base,
                         call_616533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616533, url, valid)

proc call*(call_616534: Call_PostDescribeOrderableDBInstanceOptions_616513;
          Engine: string; DBInstanceClass: string = ""; MaxRecords: int = 0;
          EngineVersion: string = ""; Marker: string = ""; Vpc: bool = false;
          Action: string = "DescribeOrderableDBInstanceOptions";
          LicenseModel: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_616535 = newJObject()
  var formData_616536 = newJObject()
  add(formData_616536, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_616536, "MaxRecords", newJInt(MaxRecords))
  add(formData_616536, "EngineVersion", newJString(EngineVersion))
  add(formData_616536, "Marker", newJString(Marker))
  add(formData_616536, "Engine", newJString(Engine))
  add(formData_616536, "Vpc", newJBool(Vpc))
  add(query_616535, "Action", newJString(Action))
  add(formData_616536, "LicenseModel", newJString(LicenseModel))
  if Filters != nil:
    formData_616536.add "Filters", Filters
  add(query_616535, "Version", newJString(Version))
  result = call_616534.call(nil, query_616535, nil, formData_616536, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_616513(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_616514, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_616515,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_616490 = ref object of OpenApiRestCall_612658
proc url_GetDescribeOrderableDBInstanceOptions_616492(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_616491(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616493 = query.getOrDefault("Marker")
  valid_616493 = validateParameter(valid_616493, JString, required = false,
                                 default = nil)
  if valid_616493 != nil:
    section.add "Marker", valid_616493
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_616494 = query.getOrDefault("Engine")
  valid_616494 = validateParameter(valid_616494, JString, required = true,
                                 default = nil)
  if valid_616494 != nil:
    section.add "Engine", valid_616494
  var valid_616495 = query.getOrDefault("LicenseModel")
  valid_616495 = validateParameter(valid_616495, JString, required = false,
                                 default = nil)
  if valid_616495 != nil:
    section.add "LicenseModel", valid_616495
  var valid_616496 = query.getOrDefault("Vpc")
  valid_616496 = validateParameter(valid_616496, JBool, required = false, default = nil)
  if valid_616496 != nil:
    section.add "Vpc", valid_616496
  var valid_616497 = query.getOrDefault("EngineVersion")
  valid_616497 = validateParameter(valid_616497, JString, required = false,
                                 default = nil)
  if valid_616497 != nil:
    section.add "EngineVersion", valid_616497
  var valid_616498 = query.getOrDefault("Action")
  valid_616498 = validateParameter(valid_616498, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_616498 != nil:
    section.add "Action", valid_616498
  var valid_616499 = query.getOrDefault("Version")
  valid_616499 = validateParameter(valid_616499, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616499 != nil:
    section.add "Version", valid_616499
  var valid_616500 = query.getOrDefault("DBInstanceClass")
  valid_616500 = validateParameter(valid_616500, JString, required = false,
                                 default = nil)
  if valid_616500 != nil:
    section.add "DBInstanceClass", valid_616500
  var valid_616501 = query.getOrDefault("Filters")
  valid_616501 = validateParameter(valid_616501, JArray, required = false,
                                 default = nil)
  if valid_616501 != nil:
    section.add "Filters", valid_616501
  var valid_616502 = query.getOrDefault("MaxRecords")
  valid_616502 = validateParameter(valid_616502, JInt, required = false, default = nil)
  if valid_616502 != nil:
    section.add "MaxRecords", valid_616502
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616503 = header.getOrDefault("X-Amz-Signature")
  valid_616503 = validateParameter(valid_616503, JString, required = false,
                                 default = nil)
  if valid_616503 != nil:
    section.add "X-Amz-Signature", valid_616503
  var valid_616504 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616504 = validateParameter(valid_616504, JString, required = false,
                                 default = nil)
  if valid_616504 != nil:
    section.add "X-Amz-Content-Sha256", valid_616504
  var valid_616505 = header.getOrDefault("X-Amz-Date")
  valid_616505 = validateParameter(valid_616505, JString, required = false,
                                 default = nil)
  if valid_616505 != nil:
    section.add "X-Amz-Date", valid_616505
  var valid_616506 = header.getOrDefault("X-Amz-Credential")
  valid_616506 = validateParameter(valid_616506, JString, required = false,
                                 default = nil)
  if valid_616506 != nil:
    section.add "X-Amz-Credential", valid_616506
  var valid_616507 = header.getOrDefault("X-Amz-Security-Token")
  valid_616507 = validateParameter(valid_616507, JString, required = false,
                                 default = nil)
  if valid_616507 != nil:
    section.add "X-Amz-Security-Token", valid_616507
  var valid_616508 = header.getOrDefault("X-Amz-Algorithm")
  valid_616508 = validateParameter(valid_616508, JString, required = false,
                                 default = nil)
  if valid_616508 != nil:
    section.add "X-Amz-Algorithm", valid_616508
  var valid_616509 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616509 = validateParameter(valid_616509, JString, required = false,
                                 default = nil)
  if valid_616509 != nil:
    section.add "X-Amz-SignedHeaders", valid_616509
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616510: Call_GetDescribeOrderableDBInstanceOptions_616490;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_616510.validator(path, query, header, formData, body)
  let scheme = call_616510.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616510.url(scheme.get, call_616510.host, call_616510.base,
                         call_616510.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616510, url, valid)

proc call*(call_616511: Call_GetDescribeOrderableDBInstanceOptions_616490;
          Engine: string; Marker: string = ""; LicenseModel: string = "";
          Vpc: bool = false; EngineVersion: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616512 = newJObject()
  add(query_616512, "Marker", newJString(Marker))
  add(query_616512, "Engine", newJString(Engine))
  add(query_616512, "LicenseModel", newJString(LicenseModel))
  add(query_616512, "Vpc", newJBool(Vpc))
  add(query_616512, "EngineVersion", newJString(EngineVersion))
  add(query_616512, "Action", newJString(Action))
  add(query_616512, "Version", newJString(Version))
  add(query_616512, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_616512.add "Filters", Filters
  add(query_616512, "MaxRecords", newJInt(MaxRecords))
  result = call_616511.call(nil, query_616512, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_616490(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_616491, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_616492,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_616556 = ref object of OpenApiRestCall_612658
proc url_PostDescribePendingMaintenanceActions_616558(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_616557(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616559 = query.getOrDefault("Action")
  valid_616559 = validateParameter(valid_616559, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_616559 != nil:
    section.add "Action", valid_616559
  var valid_616560 = query.getOrDefault("Version")
  valid_616560 = validateParameter(valid_616560, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616560 != nil:
    section.add "Version", valid_616560
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616561 = header.getOrDefault("X-Amz-Signature")
  valid_616561 = validateParameter(valid_616561, JString, required = false,
                                 default = nil)
  if valid_616561 != nil:
    section.add "X-Amz-Signature", valid_616561
  var valid_616562 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616562 = validateParameter(valid_616562, JString, required = false,
                                 default = nil)
  if valid_616562 != nil:
    section.add "X-Amz-Content-Sha256", valid_616562
  var valid_616563 = header.getOrDefault("X-Amz-Date")
  valid_616563 = validateParameter(valid_616563, JString, required = false,
                                 default = nil)
  if valid_616563 != nil:
    section.add "X-Amz-Date", valid_616563
  var valid_616564 = header.getOrDefault("X-Amz-Credential")
  valid_616564 = validateParameter(valid_616564, JString, required = false,
                                 default = nil)
  if valid_616564 != nil:
    section.add "X-Amz-Credential", valid_616564
  var valid_616565 = header.getOrDefault("X-Amz-Security-Token")
  valid_616565 = validateParameter(valid_616565, JString, required = false,
                                 default = nil)
  if valid_616565 != nil:
    section.add "X-Amz-Security-Token", valid_616565
  var valid_616566 = header.getOrDefault("X-Amz-Algorithm")
  valid_616566 = validateParameter(valid_616566, JString, required = false,
                                 default = nil)
  if valid_616566 != nil:
    section.add "X-Amz-Algorithm", valid_616566
  var valid_616567 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616567 = validateParameter(valid_616567, JString, required = false,
                                 default = nil)
  if valid_616567 != nil:
    section.add "X-Amz-SignedHeaders", valid_616567
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_616568 = formData.getOrDefault("MaxRecords")
  valid_616568 = validateParameter(valid_616568, JInt, required = false, default = nil)
  if valid_616568 != nil:
    section.add "MaxRecords", valid_616568
  var valid_616569 = formData.getOrDefault("Marker")
  valid_616569 = validateParameter(valid_616569, JString, required = false,
                                 default = nil)
  if valid_616569 != nil:
    section.add "Marker", valid_616569
  var valid_616570 = formData.getOrDefault("ResourceIdentifier")
  valid_616570 = validateParameter(valid_616570, JString, required = false,
                                 default = nil)
  if valid_616570 != nil:
    section.add "ResourceIdentifier", valid_616570
  var valid_616571 = formData.getOrDefault("Filters")
  valid_616571 = validateParameter(valid_616571, JArray, required = false,
                                 default = nil)
  if valid_616571 != nil:
    section.add "Filters", valid_616571
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616572: Call_PostDescribePendingMaintenanceActions_616556;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_616572.validator(path, query, header, formData, body)
  let scheme = call_616572.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616572.url(scheme.get, call_616572.host, call_616572.base,
                         call_616572.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616572, url, valid)

proc call*(call_616573: Call_PostDescribePendingMaintenanceActions_616556;
          MaxRecords: int = 0; Marker: string = ""; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_616574 = newJObject()
  var formData_616575 = newJObject()
  add(formData_616575, "MaxRecords", newJInt(MaxRecords))
  add(formData_616575, "Marker", newJString(Marker))
  add(formData_616575, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_616574, "Action", newJString(Action))
  if Filters != nil:
    formData_616575.add "Filters", Filters
  add(query_616574, "Version", newJString(Version))
  result = call_616573.call(nil, query_616574, nil, formData_616575, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_616556(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_616557, base: "/",
    url: url_PostDescribePendingMaintenanceActions_616558,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_616537 = ref object of OpenApiRestCall_612658
proc url_GetDescribePendingMaintenanceActions_616539(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_616538(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616540 = query.getOrDefault("ResourceIdentifier")
  valid_616540 = validateParameter(valid_616540, JString, required = false,
                                 default = nil)
  if valid_616540 != nil:
    section.add "ResourceIdentifier", valid_616540
  var valid_616541 = query.getOrDefault("Marker")
  valid_616541 = validateParameter(valid_616541, JString, required = false,
                                 default = nil)
  if valid_616541 != nil:
    section.add "Marker", valid_616541
  var valid_616542 = query.getOrDefault("Action")
  valid_616542 = validateParameter(valid_616542, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_616542 != nil:
    section.add "Action", valid_616542
  var valid_616543 = query.getOrDefault("Version")
  valid_616543 = validateParameter(valid_616543, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616543 != nil:
    section.add "Version", valid_616543
  var valid_616544 = query.getOrDefault("Filters")
  valid_616544 = validateParameter(valid_616544, JArray, required = false,
                                 default = nil)
  if valid_616544 != nil:
    section.add "Filters", valid_616544
  var valid_616545 = query.getOrDefault("MaxRecords")
  valid_616545 = validateParameter(valid_616545, JInt, required = false, default = nil)
  if valid_616545 != nil:
    section.add "MaxRecords", valid_616545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616546 = header.getOrDefault("X-Amz-Signature")
  valid_616546 = validateParameter(valid_616546, JString, required = false,
                                 default = nil)
  if valid_616546 != nil:
    section.add "X-Amz-Signature", valid_616546
  var valid_616547 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616547 = validateParameter(valid_616547, JString, required = false,
                                 default = nil)
  if valid_616547 != nil:
    section.add "X-Amz-Content-Sha256", valid_616547
  var valid_616548 = header.getOrDefault("X-Amz-Date")
  valid_616548 = validateParameter(valid_616548, JString, required = false,
                                 default = nil)
  if valid_616548 != nil:
    section.add "X-Amz-Date", valid_616548
  var valid_616549 = header.getOrDefault("X-Amz-Credential")
  valid_616549 = validateParameter(valid_616549, JString, required = false,
                                 default = nil)
  if valid_616549 != nil:
    section.add "X-Amz-Credential", valid_616549
  var valid_616550 = header.getOrDefault("X-Amz-Security-Token")
  valid_616550 = validateParameter(valid_616550, JString, required = false,
                                 default = nil)
  if valid_616550 != nil:
    section.add "X-Amz-Security-Token", valid_616550
  var valid_616551 = header.getOrDefault("X-Amz-Algorithm")
  valid_616551 = validateParameter(valid_616551, JString, required = false,
                                 default = nil)
  if valid_616551 != nil:
    section.add "X-Amz-Algorithm", valid_616551
  var valid_616552 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616552 = validateParameter(valid_616552, JString, required = false,
                                 default = nil)
  if valid_616552 != nil:
    section.add "X-Amz-SignedHeaders", valid_616552
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616553: Call_GetDescribePendingMaintenanceActions_616537;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_616553.validator(path, query, header, formData, body)
  let scheme = call_616553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616553.url(scheme.get, call_616553.host, call_616553.base,
                         call_616553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616553, url, valid)

proc call*(call_616554: Call_GetDescribePendingMaintenanceActions_616537;
          ResourceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616555 = newJObject()
  add(query_616555, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_616555, "Marker", newJString(Marker))
  add(query_616555, "Action", newJString(Action))
  add(query_616555, "Version", newJString(Version))
  if Filters != nil:
    query_616555.add "Filters", Filters
  add(query_616555, "MaxRecords", newJInt(MaxRecords))
  result = call_616554.call(nil, query_616555, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_616537(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_616538, base: "/",
    url: url_GetDescribePendingMaintenanceActions_616539,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstances_616602 = ref object of OpenApiRestCall_612658
proc url_PostDescribeReservedDBInstances_616604(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedDBInstances_616603(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616605 = query.getOrDefault("Action")
  valid_616605 = validateParameter(valid_616605, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_616605 != nil:
    section.add "Action", valid_616605
  var valid_616606 = query.getOrDefault("Version")
  valid_616606 = validateParameter(valid_616606, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616606 != nil:
    section.add "Version", valid_616606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616607 = header.getOrDefault("X-Amz-Signature")
  valid_616607 = validateParameter(valid_616607, JString, required = false,
                                 default = nil)
  if valid_616607 != nil:
    section.add "X-Amz-Signature", valid_616607
  var valid_616608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616608 = validateParameter(valid_616608, JString, required = false,
                                 default = nil)
  if valid_616608 != nil:
    section.add "X-Amz-Content-Sha256", valid_616608
  var valid_616609 = header.getOrDefault("X-Amz-Date")
  valid_616609 = validateParameter(valid_616609, JString, required = false,
                                 default = nil)
  if valid_616609 != nil:
    section.add "X-Amz-Date", valid_616609
  var valid_616610 = header.getOrDefault("X-Amz-Credential")
  valid_616610 = validateParameter(valid_616610, JString, required = false,
                                 default = nil)
  if valid_616610 != nil:
    section.add "X-Amz-Credential", valid_616610
  var valid_616611 = header.getOrDefault("X-Amz-Security-Token")
  valid_616611 = validateParameter(valid_616611, JString, required = false,
                                 default = nil)
  if valid_616611 != nil:
    section.add "X-Amz-Security-Token", valid_616611
  var valid_616612 = header.getOrDefault("X-Amz-Algorithm")
  valid_616612 = validateParameter(valid_616612, JString, required = false,
                                 default = nil)
  if valid_616612 != nil:
    section.add "X-Amz-Algorithm", valid_616612
  var valid_616613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616613 = validateParameter(valid_616613, JString, required = false,
                                 default = nil)
  if valid_616613 != nil:
    section.add "X-Amz-SignedHeaders", valid_616613
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_616614 = formData.getOrDefault("DBInstanceClass")
  valid_616614 = validateParameter(valid_616614, JString, required = false,
                                 default = nil)
  if valid_616614 != nil:
    section.add "DBInstanceClass", valid_616614
  var valid_616615 = formData.getOrDefault("MultiAZ")
  valid_616615 = validateParameter(valid_616615, JBool, required = false, default = nil)
  if valid_616615 != nil:
    section.add "MultiAZ", valid_616615
  var valid_616616 = formData.getOrDefault("MaxRecords")
  valid_616616 = validateParameter(valid_616616, JInt, required = false, default = nil)
  if valid_616616 != nil:
    section.add "MaxRecords", valid_616616
  var valid_616617 = formData.getOrDefault("LeaseId")
  valid_616617 = validateParameter(valid_616617, JString, required = false,
                                 default = nil)
  if valid_616617 != nil:
    section.add "LeaseId", valid_616617
  var valid_616618 = formData.getOrDefault("ReservedDBInstanceId")
  valid_616618 = validateParameter(valid_616618, JString, required = false,
                                 default = nil)
  if valid_616618 != nil:
    section.add "ReservedDBInstanceId", valid_616618
  var valid_616619 = formData.getOrDefault("Marker")
  valid_616619 = validateParameter(valid_616619, JString, required = false,
                                 default = nil)
  if valid_616619 != nil:
    section.add "Marker", valid_616619
  var valid_616620 = formData.getOrDefault("Duration")
  valid_616620 = validateParameter(valid_616620, JString, required = false,
                                 default = nil)
  if valid_616620 != nil:
    section.add "Duration", valid_616620
  var valid_616621 = formData.getOrDefault("OfferingType")
  valid_616621 = validateParameter(valid_616621, JString, required = false,
                                 default = nil)
  if valid_616621 != nil:
    section.add "OfferingType", valid_616621
  var valid_616622 = formData.getOrDefault("ProductDescription")
  valid_616622 = validateParameter(valid_616622, JString, required = false,
                                 default = nil)
  if valid_616622 != nil:
    section.add "ProductDescription", valid_616622
  var valid_616623 = formData.getOrDefault("Filters")
  valid_616623 = validateParameter(valid_616623, JArray, required = false,
                                 default = nil)
  if valid_616623 != nil:
    section.add "Filters", valid_616623
  var valid_616624 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_616624 = validateParameter(valid_616624, JString, required = false,
                                 default = nil)
  if valid_616624 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_616624
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616625: Call_PostDescribeReservedDBInstances_616602;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_616625.validator(path, query, header, formData, body)
  let scheme = call_616625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616625.url(scheme.get, call_616625.host, call_616625.base,
                         call_616625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616625, url, valid)

proc call*(call_616626: Call_PostDescribeReservedDBInstances_616602;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          LeaseId: string = ""; ReservedDBInstanceId: string = ""; Marker: string = "";
          Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstances"; Filters: JsonNode = nil;
          ReservedDBInstancesOfferingId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  var query_616627 = newJObject()
  var formData_616628 = newJObject()
  add(formData_616628, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_616628, "MultiAZ", newJBool(MultiAZ))
  add(formData_616628, "MaxRecords", newJInt(MaxRecords))
  add(formData_616628, "LeaseId", newJString(LeaseId))
  add(formData_616628, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(formData_616628, "Marker", newJString(Marker))
  add(formData_616628, "Duration", newJString(Duration))
  add(formData_616628, "OfferingType", newJString(OfferingType))
  add(formData_616628, "ProductDescription", newJString(ProductDescription))
  add(query_616627, "Action", newJString(Action))
  if Filters != nil:
    formData_616628.add "Filters", Filters
  add(formData_616628, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_616627, "Version", newJString(Version))
  result = call_616626.call(nil, query_616627, nil, formData_616628, nil)

var postDescribeReservedDBInstances* = Call_PostDescribeReservedDBInstances_616602(
    name: "postDescribeReservedDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_PostDescribeReservedDBInstances_616603, base: "/",
    url: url_PostDescribeReservedDBInstances_616604,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstances_616576 = ref object of OpenApiRestCall_612658
proc url_GetDescribeReservedDBInstances_616578(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedDBInstances_616577(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616579 = query.getOrDefault("Marker")
  valid_616579 = validateParameter(valid_616579, JString, required = false,
                                 default = nil)
  if valid_616579 != nil:
    section.add "Marker", valid_616579
  var valid_616580 = query.getOrDefault("ProductDescription")
  valid_616580 = validateParameter(valid_616580, JString, required = false,
                                 default = nil)
  if valid_616580 != nil:
    section.add "ProductDescription", valid_616580
  var valid_616581 = query.getOrDefault("OfferingType")
  valid_616581 = validateParameter(valid_616581, JString, required = false,
                                 default = nil)
  if valid_616581 != nil:
    section.add "OfferingType", valid_616581
  var valid_616582 = query.getOrDefault("ReservedDBInstanceId")
  valid_616582 = validateParameter(valid_616582, JString, required = false,
                                 default = nil)
  if valid_616582 != nil:
    section.add "ReservedDBInstanceId", valid_616582
  var valid_616583 = query.getOrDefault("LeaseId")
  valid_616583 = validateParameter(valid_616583, JString, required = false,
                                 default = nil)
  if valid_616583 != nil:
    section.add "LeaseId", valid_616583
  var valid_616584 = query.getOrDefault("Action")
  valid_616584 = validateParameter(valid_616584, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_616584 != nil:
    section.add "Action", valid_616584
  var valid_616585 = query.getOrDefault("MultiAZ")
  valid_616585 = validateParameter(valid_616585, JBool, required = false, default = nil)
  if valid_616585 != nil:
    section.add "MultiAZ", valid_616585
  var valid_616586 = query.getOrDefault("Duration")
  valid_616586 = validateParameter(valid_616586, JString, required = false,
                                 default = nil)
  if valid_616586 != nil:
    section.add "Duration", valid_616586
  var valid_616587 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_616587 = validateParameter(valid_616587, JString, required = false,
                                 default = nil)
  if valid_616587 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_616587
  var valid_616588 = query.getOrDefault("Version")
  valid_616588 = validateParameter(valid_616588, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616588 != nil:
    section.add "Version", valid_616588
  var valid_616589 = query.getOrDefault("DBInstanceClass")
  valid_616589 = validateParameter(valid_616589, JString, required = false,
                                 default = nil)
  if valid_616589 != nil:
    section.add "DBInstanceClass", valid_616589
  var valid_616590 = query.getOrDefault("Filters")
  valid_616590 = validateParameter(valid_616590, JArray, required = false,
                                 default = nil)
  if valid_616590 != nil:
    section.add "Filters", valid_616590
  var valid_616591 = query.getOrDefault("MaxRecords")
  valid_616591 = validateParameter(valid_616591, JInt, required = false, default = nil)
  if valid_616591 != nil:
    section.add "MaxRecords", valid_616591
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616592 = header.getOrDefault("X-Amz-Signature")
  valid_616592 = validateParameter(valid_616592, JString, required = false,
                                 default = nil)
  if valid_616592 != nil:
    section.add "X-Amz-Signature", valid_616592
  var valid_616593 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616593 = validateParameter(valid_616593, JString, required = false,
                                 default = nil)
  if valid_616593 != nil:
    section.add "X-Amz-Content-Sha256", valid_616593
  var valid_616594 = header.getOrDefault("X-Amz-Date")
  valid_616594 = validateParameter(valid_616594, JString, required = false,
                                 default = nil)
  if valid_616594 != nil:
    section.add "X-Amz-Date", valid_616594
  var valid_616595 = header.getOrDefault("X-Amz-Credential")
  valid_616595 = validateParameter(valid_616595, JString, required = false,
                                 default = nil)
  if valid_616595 != nil:
    section.add "X-Amz-Credential", valid_616595
  var valid_616596 = header.getOrDefault("X-Amz-Security-Token")
  valid_616596 = validateParameter(valid_616596, JString, required = false,
                                 default = nil)
  if valid_616596 != nil:
    section.add "X-Amz-Security-Token", valid_616596
  var valid_616597 = header.getOrDefault("X-Amz-Algorithm")
  valid_616597 = validateParameter(valid_616597, JString, required = false,
                                 default = nil)
  if valid_616597 != nil:
    section.add "X-Amz-Algorithm", valid_616597
  var valid_616598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616598 = validateParameter(valid_616598, JString, required = false,
                                 default = nil)
  if valid_616598 != nil:
    section.add "X-Amz-SignedHeaders", valid_616598
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616599: Call_GetDescribeReservedDBInstances_616576; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_616599.validator(path, query, header, formData, body)
  let scheme = call_616599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616599.url(scheme.get, call_616599.host, call_616599.base,
                         call_616599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616599, url, valid)

proc call*(call_616600: Call_GetDescribeReservedDBInstances_616576;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; ReservedDBInstanceId: string = "";
          LeaseId: string = ""; Action: string = "DescribeReservedDBInstances";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616601 = newJObject()
  add(query_616601, "Marker", newJString(Marker))
  add(query_616601, "ProductDescription", newJString(ProductDescription))
  add(query_616601, "OfferingType", newJString(OfferingType))
  add(query_616601, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_616601, "LeaseId", newJString(LeaseId))
  add(query_616601, "Action", newJString(Action))
  add(query_616601, "MultiAZ", newJBool(MultiAZ))
  add(query_616601, "Duration", newJString(Duration))
  add(query_616601, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_616601, "Version", newJString(Version))
  add(query_616601, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_616601.add "Filters", Filters
  add(query_616601, "MaxRecords", newJInt(MaxRecords))
  result = call_616600.call(nil, query_616601, nil, nil, nil)

var getDescribeReservedDBInstances* = Call_GetDescribeReservedDBInstances_616576(
    name: "getDescribeReservedDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_GetDescribeReservedDBInstances_616577, base: "/",
    url: url_GetDescribeReservedDBInstances_616578,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstancesOfferings_616653 = ref object of OpenApiRestCall_612658
proc url_PostDescribeReservedDBInstancesOfferings_616655(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedDBInstancesOfferings_616654(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616656 = query.getOrDefault("Action")
  valid_616656 = validateParameter(valid_616656, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_616656 != nil:
    section.add "Action", valid_616656
  var valid_616657 = query.getOrDefault("Version")
  valid_616657 = validateParameter(valid_616657, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616657 != nil:
    section.add "Version", valid_616657
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616658 = header.getOrDefault("X-Amz-Signature")
  valid_616658 = validateParameter(valid_616658, JString, required = false,
                                 default = nil)
  if valid_616658 != nil:
    section.add "X-Amz-Signature", valid_616658
  var valid_616659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616659 = validateParameter(valid_616659, JString, required = false,
                                 default = nil)
  if valid_616659 != nil:
    section.add "X-Amz-Content-Sha256", valid_616659
  var valid_616660 = header.getOrDefault("X-Amz-Date")
  valid_616660 = validateParameter(valid_616660, JString, required = false,
                                 default = nil)
  if valid_616660 != nil:
    section.add "X-Amz-Date", valid_616660
  var valid_616661 = header.getOrDefault("X-Amz-Credential")
  valid_616661 = validateParameter(valid_616661, JString, required = false,
                                 default = nil)
  if valid_616661 != nil:
    section.add "X-Amz-Credential", valid_616661
  var valid_616662 = header.getOrDefault("X-Amz-Security-Token")
  valid_616662 = validateParameter(valid_616662, JString, required = false,
                                 default = nil)
  if valid_616662 != nil:
    section.add "X-Amz-Security-Token", valid_616662
  var valid_616663 = header.getOrDefault("X-Amz-Algorithm")
  valid_616663 = validateParameter(valid_616663, JString, required = false,
                                 default = nil)
  if valid_616663 != nil:
    section.add "X-Amz-Algorithm", valid_616663
  var valid_616664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616664 = validateParameter(valid_616664, JString, required = false,
                                 default = nil)
  if valid_616664 != nil:
    section.add "X-Amz-SignedHeaders", valid_616664
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_616665 = formData.getOrDefault("DBInstanceClass")
  valid_616665 = validateParameter(valid_616665, JString, required = false,
                                 default = nil)
  if valid_616665 != nil:
    section.add "DBInstanceClass", valid_616665
  var valid_616666 = formData.getOrDefault("MultiAZ")
  valid_616666 = validateParameter(valid_616666, JBool, required = false, default = nil)
  if valid_616666 != nil:
    section.add "MultiAZ", valid_616666
  var valid_616667 = formData.getOrDefault("MaxRecords")
  valid_616667 = validateParameter(valid_616667, JInt, required = false, default = nil)
  if valid_616667 != nil:
    section.add "MaxRecords", valid_616667
  var valid_616668 = formData.getOrDefault("Marker")
  valid_616668 = validateParameter(valid_616668, JString, required = false,
                                 default = nil)
  if valid_616668 != nil:
    section.add "Marker", valid_616668
  var valid_616669 = formData.getOrDefault("Duration")
  valid_616669 = validateParameter(valid_616669, JString, required = false,
                                 default = nil)
  if valid_616669 != nil:
    section.add "Duration", valid_616669
  var valid_616670 = formData.getOrDefault("OfferingType")
  valid_616670 = validateParameter(valid_616670, JString, required = false,
                                 default = nil)
  if valid_616670 != nil:
    section.add "OfferingType", valid_616670
  var valid_616671 = formData.getOrDefault("ProductDescription")
  valid_616671 = validateParameter(valid_616671, JString, required = false,
                                 default = nil)
  if valid_616671 != nil:
    section.add "ProductDescription", valid_616671
  var valid_616672 = formData.getOrDefault("Filters")
  valid_616672 = validateParameter(valid_616672, JArray, required = false,
                                 default = nil)
  if valid_616672 != nil:
    section.add "Filters", valid_616672
  var valid_616673 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_616673 = validateParameter(valid_616673, JString, required = false,
                                 default = nil)
  if valid_616673 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_616673
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616674: Call_PostDescribeReservedDBInstancesOfferings_616653;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_616674.validator(path, query, header, formData, body)
  let scheme = call_616674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616674.url(scheme.get, call_616674.host, call_616674.base,
                         call_616674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616674, url, valid)

proc call*(call_616675: Call_PostDescribeReservedDBInstancesOfferings_616653;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          Marker: string = ""; Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          Filters: JsonNode = nil; ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_616676 = newJObject()
  var formData_616677 = newJObject()
  add(formData_616677, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_616677, "MultiAZ", newJBool(MultiAZ))
  add(formData_616677, "MaxRecords", newJInt(MaxRecords))
  add(formData_616677, "Marker", newJString(Marker))
  add(formData_616677, "Duration", newJString(Duration))
  add(formData_616677, "OfferingType", newJString(OfferingType))
  add(formData_616677, "ProductDescription", newJString(ProductDescription))
  add(query_616676, "Action", newJString(Action))
  if Filters != nil:
    formData_616677.add "Filters", Filters
  add(formData_616677, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_616676, "Version", newJString(Version))
  result = call_616675.call(nil, query_616676, nil, formData_616677, nil)

var postDescribeReservedDBInstancesOfferings* = Call_PostDescribeReservedDBInstancesOfferings_616653(
    name: "postDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_PostDescribeReservedDBInstancesOfferings_616654,
    base: "/", url: url_PostDescribeReservedDBInstancesOfferings_616655,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstancesOfferings_616629 = ref object of OpenApiRestCall_612658
proc url_GetDescribeReservedDBInstancesOfferings_616631(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedDBInstancesOfferings_616630(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616632 = query.getOrDefault("Marker")
  valid_616632 = validateParameter(valid_616632, JString, required = false,
                                 default = nil)
  if valid_616632 != nil:
    section.add "Marker", valid_616632
  var valid_616633 = query.getOrDefault("ProductDescription")
  valid_616633 = validateParameter(valid_616633, JString, required = false,
                                 default = nil)
  if valid_616633 != nil:
    section.add "ProductDescription", valid_616633
  var valid_616634 = query.getOrDefault("OfferingType")
  valid_616634 = validateParameter(valid_616634, JString, required = false,
                                 default = nil)
  if valid_616634 != nil:
    section.add "OfferingType", valid_616634
  var valid_616635 = query.getOrDefault("Action")
  valid_616635 = validateParameter(valid_616635, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_616635 != nil:
    section.add "Action", valid_616635
  var valid_616636 = query.getOrDefault("MultiAZ")
  valid_616636 = validateParameter(valid_616636, JBool, required = false, default = nil)
  if valid_616636 != nil:
    section.add "MultiAZ", valid_616636
  var valid_616637 = query.getOrDefault("Duration")
  valid_616637 = validateParameter(valid_616637, JString, required = false,
                                 default = nil)
  if valid_616637 != nil:
    section.add "Duration", valid_616637
  var valid_616638 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_616638 = validateParameter(valid_616638, JString, required = false,
                                 default = nil)
  if valid_616638 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_616638
  var valid_616639 = query.getOrDefault("Version")
  valid_616639 = validateParameter(valid_616639, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616639 != nil:
    section.add "Version", valid_616639
  var valid_616640 = query.getOrDefault("DBInstanceClass")
  valid_616640 = validateParameter(valid_616640, JString, required = false,
                                 default = nil)
  if valid_616640 != nil:
    section.add "DBInstanceClass", valid_616640
  var valid_616641 = query.getOrDefault("Filters")
  valid_616641 = validateParameter(valid_616641, JArray, required = false,
                                 default = nil)
  if valid_616641 != nil:
    section.add "Filters", valid_616641
  var valid_616642 = query.getOrDefault("MaxRecords")
  valid_616642 = validateParameter(valid_616642, JInt, required = false, default = nil)
  if valid_616642 != nil:
    section.add "MaxRecords", valid_616642
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616643 = header.getOrDefault("X-Amz-Signature")
  valid_616643 = validateParameter(valid_616643, JString, required = false,
                                 default = nil)
  if valid_616643 != nil:
    section.add "X-Amz-Signature", valid_616643
  var valid_616644 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616644 = validateParameter(valid_616644, JString, required = false,
                                 default = nil)
  if valid_616644 != nil:
    section.add "X-Amz-Content-Sha256", valid_616644
  var valid_616645 = header.getOrDefault("X-Amz-Date")
  valid_616645 = validateParameter(valid_616645, JString, required = false,
                                 default = nil)
  if valid_616645 != nil:
    section.add "X-Amz-Date", valid_616645
  var valid_616646 = header.getOrDefault("X-Amz-Credential")
  valid_616646 = validateParameter(valid_616646, JString, required = false,
                                 default = nil)
  if valid_616646 != nil:
    section.add "X-Amz-Credential", valid_616646
  var valid_616647 = header.getOrDefault("X-Amz-Security-Token")
  valid_616647 = validateParameter(valid_616647, JString, required = false,
                                 default = nil)
  if valid_616647 != nil:
    section.add "X-Amz-Security-Token", valid_616647
  var valid_616648 = header.getOrDefault("X-Amz-Algorithm")
  valid_616648 = validateParameter(valid_616648, JString, required = false,
                                 default = nil)
  if valid_616648 != nil:
    section.add "X-Amz-Algorithm", valid_616648
  var valid_616649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616649 = validateParameter(valid_616649, JString, required = false,
                                 default = nil)
  if valid_616649 != nil:
    section.add "X-Amz-SignedHeaders", valid_616649
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616650: Call_GetDescribeReservedDBInstancesOfferings_616629;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_616650.validator(path, query, header, formData, body)
  let scheme = call_616650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616650.url(scheme.get, call_616650.host, call_616650.base,
                         call_616650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616650, url, valid)

proc call*(call_616651: Call_GetDescribeReservedDBInstancesOfferings_616629;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616652 = newJObject()
  add(query_616652, "Marker", newJString(Marker))
  add(query_616652, "ProductDescription", newJString(ProductDescription))
  add(query_616652, "OfferingType", newJString(OfferingType))
  add(query_616652, "Action", newJString(Action))
  add(query_616652, "MultiAZ", newJBool(MultiAZ))
  add(query_616652, "Duration", newJString(Duration))
  add(query_616652, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_616652, "Version", newJString(Version))
  add(query_616652, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_616652.add "Filters", Filters
  add(query_616652, "MaxRecords", newJInt(MaxRecords))
  result = call_616651.call(nil, query_616652, nil, nil, nil)

var getDescribeReservedDBInstancesOfferings* = Call_GetDescribeReservedDBInstancesOfferings_616629(
    name: "getDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_GetDescribeReservedDBInstancesOfferings_616630, base: "/",
    url: url_GetDescribeReservedDBInstancesOfferings_616631,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSourceRegions_616697 = ref object of OpenApiRestCall_612658
proc url_PostDescribeSourceRegions_616699(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeSourceRegions_616698(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616700 = query.getOrDefault("Action")
  valid_616700 = validateParameter(valid_616700, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_616700 != nil:
    section.add "Action", valid_616700
  var valid_616701 = query.getOrDefault("Version")
  valid_616701 = validateParameter(valid_616701, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616701 != nil:
    section.add "Version", valid_616701
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616702 = header.getOrDefault("X-Amz-Signature")
  valid_616702 = validateParameter(valid_616702, JString, required = false,
                                 default = nil)
  if valid_616702 != nil:
    section.add "X-Amz-Signature", valid_616702
  var valid_616703 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616703 = validateParameter(valid_616703, JString, required = false,
                                 default = nil)
  if valid_616703 != nil:
    section.add "X-Amz-Content-Sha256", valid_616703
  var valid_616704 = header.getOrDefault("X-Amz-Date")
  valid_616704 = validateParameter(valid_616704, JString, required = false,
                                 default = nil)
  if valid_616704 != nil:
    section.add "X-Amz-Date", valid_616704
  var valid_616705 = header.getOrDefault("X-Amz-Credential")
  valid_616705 = validateParameter(valid_616705, JString, required = false,
                                 default = nil)
  if valid_616705 != nil:
    section.add "X-Amz-Credential", valid_616705
  var valid_616706 = header.getOrDefault("X-Amz-Security-Token")
  valid_616706 = validateParameter(valid_616706, JString, required = false,
                                 default = nil)
  if valid_616706 != nil:
    section.add "X-Amz-Security-Token", valid_616706
  var valid_616707 = header.getOrDefault("X-Amz-Algorithm")
  valid_616707 = validateParameter(valid_616707, JString, required = false,
                                 default = nil)
  if valid_616707 != nil:
    section.add "X-Amz-Algorithm", valid_616707
  var valid_616708 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616708 = validateParameter(valid_616708, JString, required = false,
                                 default = nil)
  if valid_616708 != nil:
    section.add "X-Amz-SignedHeaders", valid_616708
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  section = newJObject()
  var valid_616709 = formData.getOrDefault("MaxRecords")
  valid_616709 = validateParameter(valid_616709, JInt, required = false, default = nil)
  if valid_616709 != nil:
    section.add "MaxRecords", valid_616709
  var valid_616710 = formData.getOrDefault("Marker")
  valid_616710 = validateParameter(valid_616710, JString, required = false,
                                 default = nil)
  if valid_616710 != nil:
    section.add "Marker", valid_616710
  var valid_616711 = formData.getOrDefault("Filters")
  valid_616711 = validateParameter(valid_616711, JArray, required = false,
                                 default = nil)
  if valid_616711 != nil:
    section.add "Filters", valid_616711
  var valid_616712 = formData.getOrDefault("RegionName")
  valid_616712 = validateParameter(valid_616712, JString, required = false,
                                 default = nil)
  if valid_616712 != nil:
    section.add "RegionName", valid_616712
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616713: Call_PostDescribeSourceRegions_616697; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_616713.validator(path, query, header, formData, body)
  let scheme = call_616713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616713.url(scheme.get, call_616713.host, call_616713.base,
                         call_616713.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616713, url, valid)

proc call*(call_616714: Call_PostDescribeSourceRegions_616697; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeSourceRegions";
          Filters: JsonNode = nil; Version: string = "2014-10-31";
          RegionName: string = ""): Recallable =
  ## postDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  var query_616715 = newJObject()
  var formData_616716 = newJObject()
  add(formData_616716, "MaxRecords", newJInt(MaxRecords))
  add(formData_616716, "Marker", newJString(Marker))
  add(query_616715, "Action", newJString(Action))
  if Filters != nil:
    formData_616716.add "Filters", Filters
  add(query_616715, "Version", newJString(Version))
  add(formData_616716, "RegionName", newJString(RegionName))
  result = call_616714.call(nil, query_616715, nil, formData_616716, nil)

var postDescribeSourceRegions* = Call_PostDescribeSourceRegions_616697(
    name: "postDescribeSourceRegions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_PostDescribeSourceRegions_616698, base: "/",
    url: url_PostDescribeSourceRegions_616699,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSourceRegions_616678 = ref object of OpenApiRestCall_612658
proc url_GetDescribeSourceRegions_616680(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeSourceRegions_616679(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_616681 = query.getOrDefault("Marker")
  valid_616681 = validateParameter(valid_616681, JString, required = false,
                                 default = nil)
  if valid_616681 != nil:
    section.add "Marker", valid_616681
  var valid_616682 = query.getOrDefault("RegionName")
  valid_616682 = validateParameter(valid_616682, JString, required = false,
                                 default = nil)
  if valid_616682 != nil:
    section.add "RegionName", valid_616682
  var valid_616683 = query.getOrDefault("Action")
  valid_616683 = validateParameter(valid_616683, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_616683 != nil:
    section.add "Action", valid_616683
  var valid_616684 = query.getOrDefault("Version")
  valid_616684 = validateParameter(valid_616684, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616684 != nil:
    section.add "Version", valid_616684
  var valid_616685 = query.getOrDefault("Filters")
  valid_616685 = validateParameter(valid_616685, JArray, required = false,
                                 default = nil)
  if valid_616685 != nil:
    section.add "Filters", valid_616685
  var valid_616686 = query.getOrDefault("MaxRecords")
  valid_616686 = validateParameter(valid_616686, JInt, required = false, default = nil)
  if valid_616686 != nil:
    section.add "MaxRecords", valid_616686
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616687 = header.getOrDefault("X-Amz-Signature")
  valid_616687 = validateParameter(valid_616687, JString, required = false,
                                 default = nil)
  if valid_616687 != nil:
    section.add "X-Amz-Signature", valid_616687
  var valid_616688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616688 = validateParameter(valid_616688, JString, required = false,
                                 default = nil)
  if valid_616688 != nil:
    section.add "X-Amz-Content-Sha256", valid_616688
  var valid_616689 = header.getOrDefault("X-Amz-Date")
  valid_616689 = validateParameter(valid_616689, JString, required = false,
                                 default = nil)
  if valid_616689 != nil:
    section.add "X-Amz-Date", valid_616689
  var valid_616690 = header.getOrDefault("X-Amz-Credential")
  valid_616690 = validateParameter(valid_616690, JString, required = false,
                                 default = nil)
  if valid_616690 != nil:
    section.add "X-Amz-Credential", valid_616690
  var valid_616691 = header.getOrDefault("X-Amz-Security-Token")
  valid_616691 = validateParameter(valid_616691, JString, required = false,
                                 default = nil)
  if valid_616691 != nil:
    section.add "X-Amz-Security-Token", valid_616691
  var valid_616692 = header.getOrDefault("X-Amz-Algorithm")
  valid_616692 = validateParameter(valid_616692, JString, required = false,
                                 default = nil)
  if valid_616692 != nil:
    section.add "X-Amz-Algorithm", valid_616692
  var valid_616693 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616693 = validateParameter(valid_616693, JString, required = false,
                                 default = nil)
  if valid_616693 != nil:
    section.add "X-Amz-SignedHeaders", valid_616693
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616694: Call_GetDescribeSourceRegions_616678; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_616694.validator(path, query, header, formData, body)
  let scheme = call_616694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616694.url(scheme.get, call_616694.host, call_616694.base,
                         call_616694.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616694, url, valid)

proc call*(call_616695: Call_GetDescribeSourceRegions_616678; Marker: string = "";
          RegionName: string = ""; Action: string = "DescribeSourceRegions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_616696 = newJObject()
  add(query_616696, "Marker", newJString(Marker))
  add(query_616696, "RegionName", newJString(RegionName))
  add(query_616696, "Action", newJString(Action))
  add(query_616696, "Version", newJString(Version))
  if Filters != nil:
    query_616696.add "Filters", Filters
  add(query_616696, "MaxRecords", newJInt(MaxRecords))
  result = call_616695.call(nil, query_616696, nil, nil, nil)

var getDescribeSourceRegions* = Call_GetDescribeSourceRegions_616678(
    name: "getDescribeSourceRegions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_GetDescribeSourceRegions_616679, base: "/",
    url: url_GetDescribeSourceRegions_616680, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_616733 = ref object of OpenApiRestCall_612658
proc url_PostDescribeValidDBInstanceModifications_616735(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_616734(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616736 = query.getOrDefault("Action")
  valid_616736 = validateParameter(valid_616736, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_616736 != nil:
    section.add "Action", valid_616736
  var valid_616737 = query.getOrDefault("Version")
  valid_616737 = validateParameter(valid_616737, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616737 != nil:
    section.add "Version", valid_616737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616738 = header.getOrDefault("X-Amz-Signature")
  valid_616738 = validateParameter(valid_616738, JString, required = false,
                                 default = nil)
  if valid_616738 != nil:
    section.add "X-Amz-Signature", valid_616738
  var valid_616739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616739 = validateParameter(valid_616739, JString, required = false,
                                 default = nil)
  if valid_616739 != nil:
    section.add "X-Amz-Content-Sha256", valid_616739
  var valid_616740 = header.getOrDefault("X-Amz-Date")
  valid_616740 = validateParameter(valid_616740, JString, required = false,
                                 default = nil)
  if valid_616740 != nil:
    section.add "X-Amz-Date", valid_616740
  var valid_616741 = header.getOrDefault("X-Amz-Credential")
  valid_616741 = validateParameter(valid_616741, JString, required = false,
                                 default = nil)
  if valid_616741 != nil:
    section.add "X-Amz-Credential", valid_616741
  var valid_616742 = header.getOrDefault("X-Amz-Security-Token")
  valid_616742 = validateParameter(valid_616742, JString, required = false,
                                 default = nil)
  if valid_616742 != nil:
    section.add "X-Amz-Security-Token", valid_616742
  var valid_616743 = header.getOrDefault("X-Amz-Algorithm")
  valid_616743 = validateParameter(valid_616743, JString, required = false,
                                 default = nil)
  if valid_616743 != nil:
    section.add "X-Amz-Algorithm", valid_616743
  var valid_616744 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616744 = validateParameter(valid_616744, JString, required = false,
                                 default = nil)
  if valid_616744 != nil:
    section.add "X-Amz-SignedHeaders", valid_616744
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_616745 = formData.getOrDefault("DBInstanceIdentifier")
  valid_616745 = validateParameter(valid_616745, JString, required = true,
                                 default = nil)
  if valid_616745 != nil:
    section.add "DBInstanceIdentifier", valid_616745
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616746: Call_PostDescribeValidDBInstanceModifications_616733;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_616746.validator(path, query, header, formData, body)
  let scheme = call_616746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616746.url(scheme.get, call_616746.host, call_616746.base,
                         call_616746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616746, url, valid)

proc call*(call_616747: Call_PostDescribeValidDBInstanceModifications_616733;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616748 = newJObject()
  var formData_616749 = newJObject()
  add(formData_616749, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_616748, "Action", newJString(Action))
  add(query_616748, "Version", newJString(Version))
  result = call_616747.call(nil, query_616748, nil, formData_616749, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_616733(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_616734,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_616735,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_616717 = ref object of OpenApiRestCall_612658
proc url_GetDescribeValidDBInstanceModifications_616719(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_616718(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_616720 = query.getOrDefault("DBInstanceIdentifier")
  valid_616720 = validateParameter(valid_616720, JString, required = true,
                                 default = nil)
  if valid_616720 != nil:
    section.add "DBInstanceIdentifier", valid_616720
  var valid_616721 = query.getOrDefault("Action")
  valid_616721 = validateParameter(valid_616721, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_616721 != nil:
    section.add "Action", valid_616721
  var valid_616722 = query.getOrDefault("Version")
  valid_616722 = validateParameter(valid_616722, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616722 != nil:
    section.add "Version", valid_616722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616723 = header.getOrDefault("X-Amz-Signature")
  valid_616723 = validateParameter(valid_616723, JString, required = false,
                                 default = nil)
  if valid_616723 != nil:
    section.add "X-Amz-Signature", valid_616723
  var valid_616724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616724 = validateParameter(valid_616724, JString, required = false,
                                 default = nil)
  if valid_616724 != nil:
    section.add "X-Amz-Content-Sha256", valid_616724
  var valid_616725 = header.getOrDefault("X-Amz-Date")
  valid_616725 = validateParameter(valid_616725, JString, required = false,
                                 default = nil)
  if valid_616725 != nil:
    section.add "X-Amz-Date", valid_616725
  var valid_616726 = header.getOrDefault("X-Amz-Credential")
  valid_616726 = validateParameter(valid_616726, JString, required = false,
                                 default = nil)
  if valid_616726 != nil:
    section.add "X-Amz-Credential", valid_616726
  var valid_616727 = header.getOrDefault("X-Amz-Security-Token")
  valid_616727 = validateParameter(valid_616727, JString, required = false,
                                 default = nil)
  if valid_616727 != nil:
    section.add "X-Amz-Security-Token", valid_616727
  var valid_616728 = header.getOrDefault("X-Amz-Algorithm")
  valid_616728 = validateParameter(valid_616728, JString, required = false,
                                 default = nil)
  if valid_616728 != nil:
    section.add "X-Amz-Algorithm", valid_616728
  var valid_616729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616729 = validateParameter(valid_616729, JString, required = false,
                                 default = nil)
  if valid_616729 != nil:
    section.add "X-Amz-SignedHeaders", valid_616729
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616730: Call_GetDescribeValidDBInstanceModifications_616717;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_616730.validator(path, query, header, formData, body)
  let scheme = call_616730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616730.url(scheme.get, call_616730.host, call_616730.base,
                         call_616730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616730, url, valid)

proc call*(call_616731: Call_GetDescribeValidDBInstanceModifications_616717;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616732 = newJObject()
  add(query_616732, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_616732, "Action", newJString(Action))
  add(query_616732, "Version", newJString(Version))
  result = call_616731.call(nil, query_616732, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_616717(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_616718, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_616719,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDownloadDBLogFilePortion_616769 = ref object of OpenApiRestCall_612658
proc url_PostDownloadDBLogFilePortion_616771(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDownloadDBLogFilePortion_616770(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616772 = query.getOrDefault("Action")
  valid_616772 = validateParameter(valid_616772, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_616772 != nil:
    section.add "Action", valid_616772
  var valid_616773 = query.getOrDefault("Version")
  valid_616773 = validateParameter(valid_616773, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616773 != nil:
    section.add "Version", valid_616773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616774 = header.getOrDefault("X-Amz-Signature")
  valid_616774 = validateParameter(valid_616774, JString, required = false,
                                 default = nil)
  if valid_616774 != nil:
    section.add "X-Amz-Signature", valid_616774
  var valid_616775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616775 = validateParameter(valid_616775, JString, required = false,
                                 default = nil)
  if valid_616775 != nil:
    section.add "X-Amz-Content-Sha256", valid_616775
  var valid_616776 = header.getOrDefault("X-Amz-Date")
  valid_616776 = validateParameter(valid_616776, JString, required = false,
                                 default = nil)
  if valid_616776 != nil:
    section.add "X-Amz-Date", valid_616776
  var valid_616777 = header.getOrDefault("X-Amz-Credential")
  valid_616777 = validateParameter(valid_616777, JString, required = false,
                                 default = nil)
  if valid_616777 != nil:
    section.add "X-Amz-Credential", valid_616777
  var valid_616778 = header.getOrDefault("X-Amz-Security-Token")
  valid_616778 = validateParameter(valid_616778, JString, required = false,
                                 default = nil)
  if valid_616778 != nil:
    section.add "X-Amz-Security-Token", valid_616778
  var valid_616779 = header.getOrDefault("X-Amz-Algorithm")
  valid_616779 = validateParameter(valid_616779, JString, required = false,
                                 default = nil)
  if valid_616779 != nil:
    section.add "X-Amz-Algorithm", valid_616779
  var valid_616780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616780 = validateParameter(valid_616780, JString, required = false,
                                 default = nil)
  if valid_616780 != nil:
    section.add "X-Amz-SignedHeaders", valid_616780
  result.add "header", section
  ## parameters in `formData` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_616781 = formData.getOrDefault("NumberOfLines")
  valid_616781 = validateParameter(valid_616781, JInt, required = false, default = nil)
  if valid_616781 != nil:
    section.add "NumberOfLines", valid_616781
  var valid_616782 = formData.getOrDefault("Marker")
  valid_616782 = validateParameter(valid_616782, JString, required = false,
                                 default = nil)
  if valid_616782 != nil:
    section.add "Marker", valid_616782
  assert formData != nil,
        "formData argument is necessary due to required `LogFileName` field"
  var valid_616783 = formData.getOrDefault("LogFileName")
  valid_616783 = validateParameter(valid_616783, JString, required = true,
                                 default = nil)
  if valid_616783 != nil:
    section.add "LogFileName", valid_616783
  var valid_616784 = formData.getOrDefault("DBInstanceIdentifier")
  valid_616784 = validateParameter(valid_616784, JString, required = true,
                                 default = nil)
  if valid_616784 != nil:
    section.add "DBInstanceIdentifier", valid_616784
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616785: Call_PostDownloadDBLogFilePortion_616769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_616785.validator(path, query, header, formData, body)
  let scheme = call_616785.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616785.url(scheme.get, call_616785.host, call_616785.base,
                         call_616785.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616785, url, valid)

proc call*(call_616786: Call_PostDownloadDBLogFilePortion_616769;
          LogFileName: string; DBInstanceIdentifier: string; NumberOfLines: int = 0;
          Marker: string = ""; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## postDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616787 = newJObject()
  var formData_616788 = newJObject()
  add(formData_616788, "NumberOfLines", newJInt(NumberOfLines))
  add(formData_616788, "Marker", newJString(Marker))
  add(formData_616788, "LogFileName", newJString(LogFileName))
  add(formData_616788, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_616787, "Action", newJString(Action))
  add(query_616787, "Version", newJString(Version))
  result = call_616786.call(nil, query_616787, nil, formData_616788, nil)

var postDownloadDBLogFilePortion* = Call_PostDownloadDBLogFilePortion_616769(
    name: "postDownloadDBLogFilePortion", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_PostDownloadDBLogFilePortion_616770, base: "/",
    url: url_PostDownloadDBLogFilePortion_616771,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDownloadDBLogFilePortion_616750 = ref object of OpenApiRestCall_612658
proc url_GetDownloadDBLogFilePortion_616752(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDownloadDBLogFilePortion_616751(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: JString (required)
  section = newJObject()
  var valid_616753 = query.getOrDefault("Marker")
  valid_616753 = validateParameter(valid_616753, JString, required = false,
                                 default = nil)
  if valid_616753 != nil:
    section.add "Marker", valid_616753
  var valid_616754 = query.getOrDefault("NumberOfLines")
  valid_616754 = validateParameter(valid_616754, JInt, required = false, default = nil)
  if valid_616754 != nil:
    section.add "NumberOfLines", valid_616754
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_616755 = query.getOrDefault("DBInstanceIdentifier")
  valid_616755 = validateParameter(valid_616755, JString, required = true,
                                 default = nil)
  if valid_616755 != nil:
    section.add "DBInstanceIdentifier", valid_616755
  var valid_616756 = query.getOrDefault("Action")
  valid_616756 = validateParameter(valid_616756, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_616756 != nil:
    section.add "Action", valid_616756
  var valid_616757 = query.getOrDefault("LogFileName")
  valid_616757 = validateParameter(valid_616757, JString, required = true,
                                 default = nil)
  if valid_616757 != nil:
    section.add "LogFileName", valid_616757
  var valid_616758 = query.getOrDefault("Version")
  valid_616758 = validateParameter(valid_616758, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616758 != nil:
    section.add "Version", valid_616758
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616759 = header.getOrDefault("X-Amz-Signature")
  valid_616759 = validateParameter(valid_616759, JString, required = false,
                                 default = nil)
  if valid_616759 != nil:
    section.add "X-Amz-Signature", valid_616759
  var valid_616760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616760 = validateParameter(valid_616760, JString, required = false,
                                 default = nil)
  if valid_616760 != nil:
    section.add "X-Amz-Content-Sha256", valid_616760
  var valid_616761 = header.getOrDefault("X-Amz-Date")
  valid_616761 = validateParameter(valid_616761, JString, required = false,
                                 default = nil)
  if valid_616761 != nil:
    section.add "X-Amz-Date", valid_616761
  var valid_616762 = header.getOrDefault("X-Amz-Credential")
  valid_616762 = validateParameter(valid_616762, JString, required = false,
                                 default = nil)
  if valid_616762 != nil:
    section.add "X-Amz-Credential", valid_616762
  var valid_616763 = header.getOrDefault("X-Amz-Security-Token")
  valid_616763 = validateParameter(valid_616763, JString, required = false,
                                 default = nil)
  if valid_616763 != nil:
    section.add "X-Amz-Security-Token", valid_616763
  var valid_616764 = header.getOrDefault("X-Amz-Algorithm")
  valid_616764 = validateParameter(valid_616764, JString, required = false,
                                 default = nil)
  if valid_616764 != nil:
    section.add "X-Amz-Algorithm", valid_616764
  var valid_616765 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616765 = validateParameter(valid_616765, JString, required = false,
                                 default = nil)
  if valid_616765 != nil:
    section.add "X-Amz-SignedHeaders", valid_616765
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616766: Call_GetDownloadDBLogFilePortion_616750; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_616766.validator(path, query, header, formData, body)
  let scheme = call_616766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616766.url(scheme.get, call_616766.host, call_616766.base,
                         call_616766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616766, url, valid)

proc call*(call_616767: Call_GetDownloadDBLogFilePortion_616750;
          DBInstanceIdentifier: string; LogFileName: string; Marker: string = "";
          NumberOfLines: int = 0; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## getDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: string (required)
  var query_616768 = newJObject()
  add(query_616768, "Marker", newJString(Marker))
  add(query_616768, "NumberOfLines", newJInt(NumberOfLines))
  add(query_616768, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_616768, "Action", newJString(Action))
  add(query_616768, "LogFileName", newJString(LogFileName))
  add(query_616768, "Version", newJString(Version))
  result = call_616767.call(nil, query_616768, nil, nil, nil)

var getDownloadDBLogFilePortion* = Call_GetDownloadDBLogFilePortion_616750(
    name: "getDownloadDBLogFilePortion", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_GetDownloadDBLogFilePortion_616751, base: "/",
    url: url_GetDownloadDBLogFilePortion_616752,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_616806 = ref object of OpenApiRestCall_612658
proc url_PostFailoverDBCluster_616808(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostFailoverDBCluster_616807(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616809 = query.getOrDefault("Action")
  valid_616809 = validateParameter(valid_616809, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_616809 != nil:
    section.add "Action", valid_616809
  var valid_616810 = query.getOrDefault("Version")
  valid_616810 = validateParameter(valid_616810, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616810 != nil:
    section.add "Version", valid_616810
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616811 = header.getOrDefault("X-Amz-Signature")
  valid_616811 = validateParameter(valid_616811, JString, required = false,
                                 default = nil)
  if valid_616811 != nil:
    section.add "X-Amz-Signature", valid_616811
  var valid_616812 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616812 = validateParameter(valid_616812, JString, required = false,
                                 default = nil)
  if valid_616812 != nil:
    section.add "X-Amz-Content-Sha256", valid_616812
  var valid_616813 = header.getOrDefault("X-Amz-Date")
  valid_616813 = validateParameter(valid_616813, JString, required = false,
                                 default = nil)
  if valid_616813 != nil:
    section.add "X-Amz-Date", valid_616813
  var valid_616814 = header.getOrDefault("X-Amz-Credential")
  valid_616814 = validateParameter(valid_616814, JString, required = false,
                                 default = nil)
  if valid_616814 != nil:
    section.add "X-Amz-Credential", valid_616814
  var valid_616815 = header.getOrDefault("X-Amz-Security-Token")
  valid_616815 = validateParameter(valid_616815, JString, required = false,
                                 default = nil)
  if valid_616815 != nil:
    section.add "X-Amz-Security-Token", valid_616815
  var valid_616816 = header.getOrDefault("X-Amz-Algorithm")
  valid_616816 = validateParameter(valid_616816, JString, required = false,
                                 default = nil)
  if valid_616816 != nil:
    section.add "X-Amz-Algorithm", valid_616816
  var valid_616817 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616817 = validateParameter(valid_616817, JString, required = false,
                                 default = nil)
  if valid_616817 != nil:
    section.add "X-Amz-SignedHeaders", valid_616817
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_616818 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_616818 = validateParameter(valid_616818, JString, required = false,
                                 default = nil)
  if valid_616818 != nil:
    section.add "TargetDBInstanceIdentifier", valid_616818
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_616819 = formData.getOrDefault("DBClusterIdentifier")
  valid_616819 = validateParameter(valid_616819, JString, required = true,
                                 default = nil)
  if valid_616819 != nil:
    section.add "DBClusterIdentifier", valid_616819
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616820: Call_PostFailoverDBCluster_616806; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616820.validator(path, query, header, formData, body)
  let scheme = call_616820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616820.url(scheme.get, call_616820.host, call_616820.base,
                         call_616820.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616820, url, valid)

proc call*(call_616821: Call_PostFailoverDBCluster_616806;
          DBClusterIdentifier: string; Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_616822 = newJObject()
  var formData_616823 = newJObject()
  add(query_616822, "Action", newJString(Action))
  add(formData_616823, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_616822, "Version", newJString(Version))
  add(formData_616823, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_616821.call(nil, query_616822, nil, formData_616823, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_616806(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_616807, base: "/",
    url: url_PostFailoverDBCluster_616808, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_616789 = ref object of OpenApiRestCall_612658
proc url_GetFailoverDBCluster_616791(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetFailoverDBCluster_616790(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_616792 = query.getOrDefault("DBClusterIdentifier")
  valid_616792 = validateParameter(valid_616792, JString, required = true,
                                 default = nil)
  if valid_616792 != nil:
    section.add "DBClusterIdentifier", valid_616792
  var valid_616793 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_616793 = validateParameter(valid_616793, JString, required = false,
                                 default = nil)
  if valid_616793 != nil:
    section.add "TargetDBInstanceIdentifier", valid_616793
  var valid_616794 = query.getOrDefault("Action")
  valid_616794 = validateParameter(valid_616794, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_616794 != nil:
    section.add "Action", valid_616794
  var valid_616795 = query.getOrDefault("Version")
  valid_616795 = validateParameter(valid_616795, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616795 != nil:
    section.add "Version", valid_616795
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616796 = header.getOrDefault("X-Amz-Signature")
  valid_616796 = validateParameter(valid_616796, JString, required = false,
                                 default = nil)
  if valid_616796 != nil:
    section.add "X-Amz-Signature", valid_616796
  var valid_616797 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616797 = validateParameter(valid_616797, JString, required = false,
                                 default = nil)
  if valid_616797 != nil:
    section.add "X-Amz-Content-Sha256", valid_616797
  var valid_616798 = header.getOrDefault("X-Amz-Date")
  valid_616798 = validateParameter(valid_616798, JString, required = false,
                                 default = nil)
  if valid_616798 != nil:
    section.add "X-Amz-Date", valid_616798
  var valid_616799 = header.getOrDefault("X-Amz-Credential")
  valid_616799 = validateParameter(valid_616799, JString, required = false,
                                 default = nil)
  if valid_616799 != nil:
    section.add "X-Amz-Credential", valid_616799
  var valid_616800 = header.getOrDefault("X-Amz-Security-Token")
  valid_616800 = validateParameter(valid_616800, JString, required = false,
                                 default = nil)
  if valid_616800 != nil:
    section.add "X-Amz-Security-Token", valid_616800
  var valid_616801 = header.getOrDefault("X-Amz-Algorithm")
  valid_616801 = validateParameter(valid_616801, JString, required = false,
                                 default = nil)
  if valid_616801 != nil:
    section.add "X-Amz-Algorithm", valid_616801
  var valid_616802 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616802 = validateParameter(valid_616802, JString, required = false,
                                 default = nil)
  if valid_616802 != nil:
    section.add "X-Amz-SignedHeaders", valid_616802
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616803: Call_GetFailoverDBCluster_616789; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616803.validator(path, query, header, formData, body)
  let scheme = call_616803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616803.url(scheme.get, call_616803.host, call_616803.base,
                         call_616803.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616803, url, valid)

proc call*(call_616804: Call_GetFailoverDBCluster_616789;
          DBClusterIdentifier: string; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616805 = newJObject()
  add(query_616805, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_616805, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_616805, "Action", newJString(Action))
  add(query_616805, "Version", newJString(Version))
  result = call_616804.call(nil, query_616805, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_616789(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_616790, base: "/",
    url: url_GetFailoverDBCluster_616791, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostImportInstallationMedia_616844 = ref object of OpenApiRestCall_612658
proc url_PostImportInstallationMedia_616846(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostImportInstallationMedia_616845(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616847 = query.getOrDefault("Action")
  valid_616847 = validateParameter(valid_616847, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_616847 != nil:
    section.add "Action", valid_616847
  var valid_616848 = query.getOrDefault("Version")
  valid_616848 = validateParameter(valid_616848, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616848 != nil:
    section.add "Version", valid_616848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616849 = header.getOrDefault("X-Amz-Signature")
  valid_616849 = validateParameter(valid_616849, JString, required = false,
                                 default = nil)
  if valid_616849 != nil:
    section.add "X-Amz-Signature", valid_616849
  var valid_616850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616850 = validateParameter(valid_616850, JString, required = false,
                                 default = nil)
  if valid_616850 != nil:
    section.add "X-Amz-Content-Sha256", valid_616850
  var valid_616851 = header.getOrDefault("X-Amz-Date")
  valid_616851 = validateParameter(valid_616851, JString, required = false,
                                 default = nil)
  if valid_616851 != nil:
    section.add "X-Amz-Date", valid_616851
  var valid_616852 = header.getOrDefault("X-Amz-Credential")
  valid_616852 = validateParameter(valid_616852, JString, required = false,
                                 default = nil)
  if valid_616852 != nil:
    section.add "X-Amz-Credential", valid_616852
  var valid_616853 = header.getOrDefault("X-Amz-Security-Token")
  valid_616853 = validateParameter(valid_616853, JString, required = false,
                                 default = nil)
  if valid_616853 != nil:
    section.add "X-Amz-Security-Token", valid_616853
  var valid_616854 = header.getOrDefault("X-Amz-Algorithm")
  valid_616854 = validateParameter(valid_616854, JString, required = false,
                                 default = nil)
  if valid_616854 != nil:
    section.add "X-Amz-Algorithm", valid_616854
  var valid_616855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616855 = validateParameter(valid_616855, JString, required = false,
                                 default = nil)
  if valid_616855 != nil:
    section.add "X-Amz-SignedHeaders", valid_616855
  result.add "header", section
  ## parameters in `formData` object:
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OSInstallationMediaPath` field"
  var valid_616856 = formData.getOrDefault("OSInstallationMediaPath")
  valid_616856 = validateParameter(valid_616856, JString, required = true,
                                 default = nil)
  if valid_616856 != nil:
    section.add "OSInstallationMediaPath", valid_616856
  var valid_616857 = formData.getOrDefault("EngineInstallationMediaPath")
  valid_616857 = validateParameter(valid_616857, JString, required = true,
                                 default = nil)
  if valid_616857 != nil:
    section.add "EngineInstallationMediaPath", valid_616857
  var valid_616858 = formData.getOrDefault("EngineVersion")
  valid_616858 = validateParameter(valid_616858, JString, required = true,
                                 default = nil)
  if valid_616858 != nil:
    section.add "EngineVersion", valid_616858
  var valid_616859 = formData.getOrDefault("Engine")
  valid_616859 = validateParameter(valid_616859, JString, required = true,
                                 default = nil)
  if valid_616859 != nil:
    section.add "Engine", valid_616859
  var valid_616860 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_616860 = validateParameter(valid_616860, JString, required = true,
                                 default = nil)
  if valid_616860 != nil:
    section.add "CustomAvailabilityZoneId", valid_616860
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616861: Call_PostImportInstallationMedia_616844; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  let valid = call_616861.validator(path, query, header, formData, body)
  let scheme = call_616861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616861.url(scheme.get, call_616861.host, call_616861.base,
                         call_616861.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616861, url, valid)

proc call*(call_616862: Call_PostImportInstallationMedia_616844;
          OSInstallationMediaPath: string; EngineInstallationMediaPath: string;
          EngineVersion: string; Engine: string; CustomAvailabilityZoneId: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## postImportInstallationMedia
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   Version: string (required)
  var query_616863 = newJObject()
  var formData_616864 = newJObject()
  add(formData_616864, "OSInstallationMediaPath",
      newJString(OSInstallationMediaPath))
  add(formData_616864, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(formData_616864, "EngineVersion", newJString(EngineVersion))
  add(formData_616864, "Engine", newJString(Engine))
  add(query_616863, "Action", newJString(Action))
  add(formData_616864, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_616863, "Version", newJString(Version))
  result = call_616862.call(nil, query_616863, nil, formData_616864, nil)

var postImportInstallationMedia* = Call_PostImportInstallationMedia_616844(
    name: "postImportInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_PostImportInstallationMedia_616845, base: "/",
    url: url_PostImportInstallationMedia_616846,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImportInstallationMedia_616824 = ref object of OpenApiRestCall_612658
proc url_GetImportInstallationMedia_616826(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetImportInstallationMedia_616825(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_616827 = query.getOrDefault("Engine")
  valid_616827 = validateParameter(valid_616827, JString, required = true,
                                 default = nil)
  if valid_616827 != nil:
    section.add "Engine", valid_616827
  var valid_616828 = query.getOrDefault("EngineInstallationMediaPath")
  valid_616828 = validateParameter(valid_616828, JString, required = true,
                                 default = nil)
  if valid_616828 != nil:
    section.add "EngineInstallationMediaPath", valid_616828
  var valid_616829 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_616829 = validateParameter(valid_616829, JString, required = true,
                                 default = nil)
  if valid_616829 != nil:
    section.add "CustomAvailabilityZoneId", valid_616829
  var valid_616830 = query.getOrDefault("EngineVersion")
  valid_616830 = validateParameter(valid_616830, JString, required = true,
                                 default = nil)
  if valid_616830 != nil:
    section.add "EngineVersion", valid_616830
  var valid_616831 = query.getOrDefault("Action")
  valid_616831 = validateParameter(valid_616831, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_616831 != nil:
    section.add "Action", valid_616831
  var valid_616832 = query.getOrDefault("OSInstallationMediaPath")
  valid_616832 = validateParameter(valid_616832, JString, required = true,
                                 default = nil)
  if valid_616832 != nil:
    section.add "OSInstallationMediaPath", valid_616832
  var valid_616833 = query.getOrDefault("Version")
  valid_616833 = validateParameter(valid_616833, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616833 != nil:
    section.add "Version", valid_616833
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616834 = header.getOrDefault("X-Amz-Signature")
  valid_616834 = validateParameter(valid_616834, JString, required = false,
                                 default = nil)
  if valid_616834 != nil:
    section.add "X-Amz-Signature", valid_616834
  var valid_616835 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616835 = validateParameter(valid_616835, JString, required = false,
                                 default = nil)
  if valid_616835 != nil:
    section.add "X-Amz-Content-Sha256", valid_616835
  var valid_616836 = header.getOrDefault("X-Amz-Date")
  valid_616836 = validateParameter(valid_616836, JString, required = false,
                                 default = nil)
  if valid_616836 != nil:
    section.add "X-Amz-Date", valid_616836
  var valid_616837 = header.getOrDefault("X-Amz-Credential")
  valid_616837 = validateParameter(valid_616837, JString, required = false,
                                 default = nil)
  if valid_616837 != nil:
    section.add "X-Amz-Credential", valid_616837
  var valid_616838 = header.getOrDefault("X-Amz-Security-Token")
  valid_616838 = validateParameter(valid_616838, JString, required = false,
                                 default = nil)
  if valid_616838 != nil:
    section.add "X-Amz-Security-Token", valid_616838
  var valid_616839 = header.getOrDefault("X-Amz-Algorithm")
  valid_616839 = validateParameter(valid_616839, JString, required = false,
                                 default = nil)
  if valid_616839 != nil:
    section.add "X-Amz-Algorithm", valid_616839
  var valid_616840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616840 = validateParameter(valid_616840, JString, required = false,
                                 default = nil)
  if valid_616840 != nil:
    section.add "X-Amz-SignedHeaders", valid_616840
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616841: Call_GetImportInstallationMedia_616824; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  let valid = call_616841.validator(path, query, header, formData, body)
  let scheme = call_616841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616841.url(scheme.get, call_616841.host, call_616841.base,
                         call_616841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616841, url, valid)

proc call*(call_616842: Call_GetImportInstallationMedia_616824; Engine: string;
          EngineInstallationMediaPath: string; CustomAvailabilityZoneId: string;
          EngineVersion: string; OSInstallationMediaPath: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## getImportInstallationMedia
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: string (required)
  var query_616843 = newJObject()
  add(query_616843, "Engine", newJString(Engine))
  add(query_616843, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(query_616843, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_616843, "EngineVersion", newJString(EngineVersion))
  add(query_616843, "Action", newJString(Action))
  add(query_616843, "OSInstallationMediaPath", newJString(OSInstallationMediaPath))
  add(query_616843, "Version", newJString(Version))
  result = call_616842.call(nil, query_616843, nil, nil, nil)

var getImportInstallationMedia* = Call_GetImportInstallationMedia_616824(
    name: "getImportInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_GetImportInstallationMedia_616825, base: "/",
    url: url_GetImportInstallationMedia_616826,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_616882 = ref object of OpenApiRestCall_612658
proc url_PostListTagsForResource_616884(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_616883(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616885 = query.getOrDefault("Action")
  valid_616885 = validateParameter(valid_616885, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_616885 != nil:
    section.add "Action", valid_616885
  var valid_616886 = query.getOrDefault("Version")
  valid_616886 = validateParameter(valid_616886, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616886 != nil:
    section.add "Version", valid_616886
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616887 = header.getOrDefault("X-Amz-Signature")
  valid_616887 = validateParameter(valid_616887, JString, required = false,
                                 default = nil)
  if valid_616887 != nil:
    section.add "X-Amz-Signature", valid_616887
  var valid_616888 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616888 = validateParameter(valid_616888, JString, required = false,
                                 default = nil)
  if valid_616888 != nil:
    section.add "X-Amz-Content-Sha256", valid_616888
  var valid_616889 = header.getOrDefault("X-Amz-Date")
  valid_616889 = validateParameter(valid_616889, JString, required = false,
                                 default = nil)
  if valid_616889 != nil:
    section.add "X-Amz-Date", valid_616889
  var valid_616890 = header.getOrDefault("X-Amz-Credential")
  valid_616890 = validateParameter(valid_616890, JString, required = false,
                                 default = nil)
  if valid_616890 != nil:
    section.add "X-Amz-Credential", valid_616890
  var valid_616891 = header.getOrDefault("X-Amz-Security-Token")
  valid_616891 = validateParameter(valid_616891, JString, required = false,
                                 default = nil)
  if valid_616891 != nil:
    section.add "X-Amz-Security-Token", valid_616891
  var valid_616892 = header.getOrDefault("X-Amz-Algorithm")
  valid_616892 = validateParameter(valid_616892, JString, required = false,
                                 default = nil)
  if valid_616892 != nil:
    section.add "X-Amz-Algorithm", valid_616892
  var valid_616893 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616893 = validateParameter(valid_616893, JString, required = false,
                                 default = nil)
  if valid_616893 != nil:
    section.add "X-Amz-SignedHeaders", valid_616893
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  section = newJObject()
  var valid_616894 = formData.getOrDefault("Filters")
  valid_616894 = validateParameter(valid_616894, JArray, required = false,
                                 default = nil)
  if valid_616894 != nil:
    section.add "Filters", valid_616894
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_616895 = formData.getOrDefault("ResourceName")
  valid_616895 = validateParameter(valid_616895, JString, required = true,
                                 default = nil)
  if valid_616895 != nil:
    section.add "ResourceName", valid_616895
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616896: Call_PostListTagsForResource_616882; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_616896.validator(path, query, header, formData, body)
  let scheme = call_616896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616896.url(scheme.get, call_616896.host, call_616896.base,
                         call_616896.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616896, url, valid)

proc call*(call_616897: Call_PostListTagsForResource_616882; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  var query_616898 = newJObject()
  var formData_616899 = newJObject()
  add(query_616898, "Action", newJString(Action))
  if Filters != nil:
    formData_616899.add "Filters", Filters
  add(query_616898, "Version", newJString(Version))
  add(formData_616899, "ResourceName", newJString(ResourceName))
  result = call_616897.call(nil, query_616898, nil, formData_616899, nil)

var postListTagsForResource* = Call_PostListTagsForResource_616882(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_616883, base: "/",
    url: url_PostListTagsForResource_616884, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_616865 = ref object of OpenApiRestCall_612658
proc url_GetListTagsForResource_616867(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_616866(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_616868 = query.getOrDefault("ResourceName")
  valid_616868 = validateParameter(valid_616868, JString, required = true,
                                 default = nil)
  if valid_616868 != nil:
    section.add "ResourceName", valid_616868
  var valid_616869 = query.getOrDefault("Action")
  valid_616869 = validateParameter(valid_616869, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_616869 != nil:
    section.add "Action", valid_616869
  var valid_616870 = query.getOrDefault("Version")
  valid_616870 = validateParameter(valid_616870, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616870 != nil:
    section.add "Version", valid_616870
  var valid_616871 = query.getOrDefault("Filters")
  valid_616871 = validateParameter(valid_616871, JArray, required = false,
                                 default = nil)
  if valid_616871 != nil:
    section.add "Filters", valid_616871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616872 = header.getOrDefault("X-Amz-Signature")
  valid_616872 = validateParameter(valid_616872, JString, required = false,
                                 default = nil)
  if valid_616872 != nil:
    section.add "X-Amz-Signature", valid_616872
  var valid_616873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616873 = validateParameter(valid_616873, JString, required = false,
                                 default = nil)
  if valid_616873 != nil:
    section.add "X-Amz-Content-Sha256", valid_616873
  var valid_616874 = header.getOrDefault("X-Amz-Date")
  valid_616874 = validateParameter(valid_616874, JString, required = false,
                                 default = nil)
  if valid_616874 != nil:
    section.add "X-Amz-Date", valid_616874
  var valid_616875 = header.getOrDefault("X-Amz-Credential")
  valid_616875 = validateParameter(valid_616875, JString, required = false,
                                 default = nil)
  if valid_616875 != nil:
    section.add "X-Amz-Credential", valid_616875
  var valid_616876 = header.getOrDefault("X-Amz-Security-Token")
  valid_616876 = validateParameter(valid_616876, JString, required = false,
                                 default = nil)
  if valid_616876 != nil:
    section.add "X-Amz-Security-Token", valid_616876
  var valid_616877 = header.getOrDefault("X-Amz-Algorithm")
  valid_616877 = validateParameter(valid_616877, JString, required = false,
                                 default = nil)
  if valid_616877 != nil:
    section.add "X-Amz-Algorithm", valid_616877
  var valid_616878 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616878 = validateParameter(valid_616878, JString, required = false,
                                 default = nil)
  if valid_616878 != nil:
    section.add "X-Amz-SignedHeaders", valid_616878
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616879: Call_GetListTagsForResource_616865; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_616879.validator(path, query, header, formData, body)
  let scheme = call_616879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616879.url(scheme.get, call_616879.host, call_616879.base,
                         call_616879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616879, url, valid)

proc call*(call_616880: Call_GetListTagsForResource_616865; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2014-10-31";
          Filters: JsonNode = nil): Recallable =
  ## getListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  var query_616881 = newJObject()
  add(query_616881, "ResourceName", newJString(ResourceName))
  add(query_616881, "Action", newJString(Action))
  add(query_616881, "Version", newJString(Version))
  if Filters != nil:
    query_616881.add "Filters", Filters
  result = call_616880.call(nil, query_616881, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_616865(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_616866, base: "/",
    url: url_GetListTagsForResource_616867, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCertificates_616917 = ref object of OpenApiRestCall_612658
proc url_PostModifyCertificates_616919(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCertificates_616918(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616920 = query.getOrDefault("Action")
  valid_616920 = validateParameter(valid_616920, JString, required = true,
                                 default = newJString("ModifyCertificates"))
  if valid_616920 != nil:
    section.add "Action", valid_616920
  var valid_616921 = query.getOrDefault("Version")
  valid_616921 = validateParameter(valid_616921, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616921 != nil:
    section.add "Version", valid_616921
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616922 = header.getOrDefault("X-Amz-Signature")
  valid_616922 = validateParameter(valid_616922, JString, required = false,
                                 default = nil)
  if valid_616922 != nil:
    section.add "X-Amz-Signature", valid_616922
  var valid_616923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616923 = validateParameter(valid_616923, JString, required = false,
                                 default = nil)
  if valid_616923 != nil:
    section.add "X-Amz-Content-Sha256", valid_616923
  var valid_616924 = header.getOrDefault("X-Amz-Date")
  valid_616924 = validateParameter(valid_616924, JString, required = false,
                                 default = nil)
  if valid_616924 != nil:
    section.add "X-Amz-Date", valid_616924
  var valid_616925 = header.getOrDefault("X-Amz-Credential")
  valid_616925 = validateParameter(valid_616925, JString, required = false,
                                 default = nil)
  if valid_616925 != nil:
    section.add "X-Amz-Credential", valid_616925
  var valid_616926 = header.getOrDefault("X-Amz-Security-Token")
  valid_616926 = validateParameter(valid_616926, JString, required = false,
                                 default = nil)
  if valid_616926 != nil:
    section.add "X-Amz-Security-Token", valid_616926
  var valid_616927 = header.getOrDefault("X-Amz-Algorithm")
  valid_616927 = validateParameter(valid_616927, JString, required = false,
                                 default = nil)
  if valid_616927 != nil:
    section.add "X-Amz-Algorithm", valid_616927
  var valid_616928 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616928 = validateParameter(valid_616928, JString, required = false,
                                 default = nil)
  if valid_616928 != nil:
    section.add "X-Amz-SignedHeaders", valid_616928
  result.add "header", section
  ## parameters in `formData` object:
  ##   RemoveCustomerOverride: JBool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   CertificateIdentifier: JString
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  section = newJObject()
  var valid_616929 = formData.getOrDefault("RemoveCustomerOverride")
  valid_616929 = validateParameter(valid_616929, JBool, required = false, default = nil)
  if valid_616929 != nil:
    section.add "RemoveCustomerOverride", valid_616929
  var valid_616930 = formData.getOrDefault("CertificateIdentifier")
  valid_616930 = validateParameter(valid_616930, JString, required = false,
                                 default = nil)
  if valid_616930 != nil:
    section.add "CertificateIdentifier", valid_616930
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616931: Call_PostModifyCertificates_616917; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_616931.validator(path, query, header, formData, body)
  let scheme = call_616931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616931.url(scheme.get, call_616931.host, call_616931.base,
                         call_616931.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616931, url, valid)

proc call*(call_616932: Call_PostModifyCertificates_616917;
          RemoveCustomerOverride: bool = false; CertificateIdentifier: string = "";
          Action: string = "ModifyCertificates"; Version: string = "2014-10-31"): Recallable =
  ## postModifyCertificates
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   RemoveCustomerOverride: bool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   CertificateIdentifier: string
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616933 = newJObject()
  var formData_616934 = newJObject()
  add(formData_616934, "RemoveCustomerOverride", newJBool(RemoveCustomerOverride))
  add(formData_616934, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(query_616933, "Action", newJString(Action))
  add(query_616933, "Version", newJString(Version))
  result = call_616932.call(nil, query_616933, nil, formData_616934, nil)

var postModifyCertificates* = Call_PostModifyCertificates_616917(
    name: "postModifyCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCertificates",
    validator: validate_PostModifyCertificates_616918, base: "/",
    url: url_PostModifyCertificates_616919, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCertificates_616900 = ref object of OpenApiRestCall_612658
proc url_GetModifyCertificates_616902(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCertificates_616901(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RemoveCustomerOverride: JBool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateIdentifier: JString
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  section = newJObject()
  var valid_616903 = query.getOrDefault("RemoveCustomerOverride")
  valid_616903 = validateParameter(valid_616903, JBool, required = false, default = nil)
  if valid_616903 != nil:
    section.add "RemoveCustomerOverride", valid_616903
  var valid_616904 = query.getOrDefault("Action")
  valid_616904 = validateParameter(valid_616904, JString, required = true,
                                 default = newJString("ModifyCertificates"))
  if valid_616904 != nil:
    section.add "Action", valid_616904
  var valid_616905 = query.getOrDefault("Version")
  valid_616905 = validateParameter(valid_616905, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616905 != nil:
    section.add "Version", valid_616905
  var valid_616906 = query.getOrDefault("CertificateIdentifier")
  valid_616906 = validateParameter(valid_616906, JString, required = false,
                                 default = nil)
  if valid_616906 != nil:
    section.add "CertificateIdentifier", valid_616906
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616907 = header.getOrDefault("X-Amz-Signature")
  valid_616907 = validateParameter(valid_616907, JString, required = false,
                                 default = nil)
  if valid_616907 != nil:
    section.add "X-Amz-Signature", valid_616907
  var valid_616908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616908 = validateParameter(valid_616908, JString, required = false,
                                 default = nil)
  if valid_616908 != nil:
    section.add "X-Amz-Content-Sha256", valid_616908
  var valid_616909 = header.getOrDefault("X-Amz-Date")
  valid_616909 = validateParameter(valid_616909, JString, required = false,
                                 default = nil)
  if valid_616909 != nil:
    section.add "X-Amz-Date", valid_616909
  var valid_616910 = header.getOrDefault("X-Amz-Credential")
  valid_616910 = validateParameter(valid_616910, JString, required = false,
                                 default = nil)
  if valid_616910 != nil:
    section.add "X-Amz-Credential", valid_616910
  var valid_616911 = header.getOrDefault("X-Amz-Security-Token")
  valid_616911 = validateParameter(valid_616911, JString, required = false,
                                 default = nil)
  if valid_616911 != nil:
    section.add "X-Amz-Security-Token", valid_616911
  var valid_616912 = header.getOrDefault("X-Amz-Algorithm")
  valid_616912 = validateParameter(valid_616912, JString, required = false,
                                 default = nil)
  if valid_616912 != nil:
    section.add "X-Amz-Algorithm", valid_616912
  var valid_616913 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616913 = validateParameter(valid_616913, JString, required = false,
                                 default = nil)
  if valid_616913 != nil:
    section.add "X-Amz-SignedHeaders", valid_616913
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616914: Call_GetModifyCertificates_616900; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_616914.validator(path, query, header, formData, body)
  let scheme = call_616914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616914.url(scheme.get, call_616914.host, call_616914.base,
                         call_616914.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616914, url, valid)

proc call*(call_616915: Call_GetModifyCertificates_616900;
          RemoveCustomerOverride: bool = false;
          Action: string = "ModifyCertificates"; Version: string = "2014-10-31";
          CertificateIdentifier: string = ""): Recallable =
  ## getModifyCertificates
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   RemoveCustomerOverride: bool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateIdentifier: string
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  var query_616916 = newJObject()
  add(query_616916, "RemoveCustomerOverride", newJBool(RemoveCustomerOverride))
  add(query_616916, "Action", newJString(Action))
  add(query_616916, "Version", newJString(Version))
  add(query_616916, "CertificateIdentifier", newJString(CertificateIdentifier))
  result = call_616915.call(nil, query_616916, nil, nil, nil)

var getModifyCertificates* = Call_GetModifyCertificates_616900(
    name: "getModifyCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCertificates",
    validator: validate_GetModifyCertificates_616901, base: "/",
    url: url_GetModifyCertificates_616902, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCurrentDBClusterCapacity_616954 = ref object of OpenApiRestCall_612658
proc url_PostModifyCurrentDBClusterCapacity_616956(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCurrentDBClusterCapacity_616955(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616957 = query.getOrDefault("Action")
  valid_616957 = validateParameter(valid_616957, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_616957 != nil:
    section.add "Action", valid_616957
  var valid_616958 = query.getOrDefault("Version")
  valid_616958 = validateParameter(valid_616958, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616958 != nil:
    section.add "Version", valid_616958
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616959 = header.getOrDefault("X-Amz-Signature")
  valid_616959 = validateParameter(valid_616959, JString, required = false,
                                 default = nil)
  if valid_616959 != nil:
    section.add "X-Amz-Signature", valid_616959
  var valid_616960 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616960 = validateParameter(valid_616960, JString, required = false,
                                 default = nil)
  if valid_616960 != nil:
    section.add "X-Amz-Content-Sha256", valid_616960
  var valid_616961 = header.getOrDefault("X-Amz-Date")
  valid_616961 = validateParameter(valid_616961, JString, required = false,
                                 default = nil)
  if valid_616961 != nil:
    section.add "X-Amz-Date", valid_616961
  var valid_616962 = header.getOrDefault("X-Amz-Credential")
  valid_616962 = validateParameter(valid_616962, JString, required = false,
                                 default = nil)
  if valid_616962 != nil:
    section.add "X-Amz-Credential", valid_616962
  var valid_616963 = header.getOrDefault("X-Amz-Security-Token")
  valid_616963 = validateParameter(valid_616963, JString, required = false,
                                 default = nil)
  if valid_616963 != nil:
    section.add "X-Amz-Security-Token", valid_616963
  var valid_616964 = header.getOrDefault("X-Amz-Algorithm")
  valid_616964 = validateParameter(valid_616964, JString, required = false,
                                 default = nil)
  if valid_616964 != nil:
    section.add "X-Amz-Algorithm", valid_616964
  var valid_616965 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616965 = validateParameter(valid_616965, JString, required = false,
                                 default = nil)
  if valid_616965 != nil:
    section.add "X-Amz-SignedHeaders", valid_616965
  result.add "header", section
  ## parameters in `formData` object:
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  section = newJObject()
  var valid_616966 = formData.getOrDefault("TimeoutAction")
  valid_616966 = validateParameter(valid_616966, JString, required = false,
                                 default = nil)
  if valid_616966 != nil:
    section.add "TimeoutAction", valid_616966
  var valid_616967 = formData.getOrDefault("SecondsBeforeTimeout")
  valid_616967 = validateParameter(valid_616967, JInt, required = false, default = nil)
  if valid_616967 != nil:
    section.add "SecondsBeforeTimeout", valid_616967
  var valid_616968 = formData.getOrDefault("Capacity")
  valid_616968 = validateParameter(valid_616968, JInt, required = false, default = nil)
  if valid_616968 != nil:
    section.add "Capacity", valid_616968
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_616969 = formData.getOrDefault("DBClusterIdentifier")
  valid_616969 = validateParameter(valid_616969, JString, required = true,
                                 default = nil)
  if valid_616969 != nil:
    section.add "DBClusterIdentifier", valid_616969
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616970: Call_PostModifyCurrentDBClusterCapacity_616954;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616970.validator(path, query, header, formData, body)
  let scheme = call_616970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616970.url(scheme.get, call_616970.host, call_616970.base,
                         call_616970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616970, url, valid)

proc call*(call_616971: Call_PostModifyCurrentDBClusterCapacity_616954;
          DBClusterIdentifier: string; TimeoutAction: string = "";
          Action: string = "ModifyCurrentDBClusterCapacity";
          SecondsBeforeTimeout: int = 0; Version: string = "2014-10-31";
          Capacity: int = 0): Recallable =
  ## postModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   Action: string (required)
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Version: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  var query_616972 = newJObject()
  var formData_616973 = newJObject()
  add(formData_616973, "TimeoutAction", newJString(TimeoutAction))
  add(query_616972, "Action", newJString(Action))
  add(formData_616973, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_616972, "Version", newJString(Version))
  add(formData_616973, "Capacity", newJInt(Capacity))
  add(formData_616973, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_616971.call(nil, query_616972, nil, formData_616973, nil)

var postModifyCurrentDBClusterCapacity* = Call_PostModifyCurrentDBClusterCapacity_616954(
    name: "postModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_PostModifyCurrentDBClusterCapacity_616955, base: "/",
    url: url_PostModifyCurrentDBClusterCapacity_616956,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCurrentDBClusterCapacity_616935 = ref object of OpenApiRestCall_612658
proc url_GetModifyCurrentDBClusterCapacity_616937(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCurrentDBClusterCapacity_616936(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616938 = query.getOrDefault("Capacity")
  valid_616938 = validateParameter(valid_616938, JInt, required = false, default = nil)
  if valid_616938 != nil:
    section.add "Capacity", valid_616938
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_616939 = query.getOrDefault("DBClusterIdentifier")
  valid_616939 = validateParameter(valid_616939, JString, required = true,
                                 default = nil)
  if valid_616939 != nil:
    section.add "DBClusterIdentifier", valid_616939
  var valid_616940 = query.getOrDefault("TimeoutAction")
  valid_616940 = validateParameter(valid_616940, JString, required = false,
                                 default = nil)
  if valid_616940 != nil:
    section.add "TimeoutAction", valid_616940
  var valid_616941 = query.getOrDefault("SecondsBeforeTimeout")
  valid_616941 = validateParameter(valid_616941, JInt, required = false, default = nil)
  if valid_616941 != nil:
    section.add "SecondsBeforeTimeout", valid_616941
  var valid_616942 = query.getOrDefault("Action")
  valid_616942 = validateParameter(valid_616942, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_616942 != nil:
    section.add "Action", valid_616942
  var valid_616943 = query.getOrDefault("Version")
  valid_616943 = validateParameter(valid_616943, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_616943 != nil:
    section.add "Version", valid_616943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616944 = header.getOrDefault("X-Amz-Signature")
  valid_616944 = validateParameter(valid_616944, JString, required = false,
                                 default = nil)
  if valid_616944 != nil:
    section.add "X-Amz-Signature", valid_616944
  var valid_616945 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616945 = validateParameter(valid_616945, JString, required = false,
                                 default = nil)
  if valid_616945 != nil:
    section.add "X-Amz-Content-Sha256", valid_616945
  var valid_616946 = header.getOrDefault("X-Amz-Date")
  valid_616946 = validateParameter(valid_616946, JString, required = false,
                                 default = nil)
  if valid_616946 != nil:
    section.add "X-Amz-Date", valid_616946
  var valid_616947 = header.getOrDefault("X-Amz-Credential")
  valid_616947 = validateParameter(valid_616947, JString, required = false,
                                 default = nil)
  if valid_616947 != nil:
    section.add "X-Amz-Credential", valid_616947
  var valid_616948 = header.getOrDefault("X-Amz-Security-Token")
  valid_616948 = validateParameter(valid_616948, JString, required = false,
                                 default = nil)
  if valid_616948 != nil:
    section.add "X-Amz-Security-Token", valid_616948
  var valid_616949 = header.getOrDefault("X-Amz-Algorithm")
  valid_616949 = validateParameter(valid_616949, JString, required = false,
                                 default = nil)
  if valid_616949 != nil:
    section.add "X-Amz-Algorithm", valid_616949
  var valid_616950 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616950 = validateParameter(valid_616950, JString, required = false,
                                 default = nil)
  if valid_616950 != nil:
    section.add "X-Amz-SignedHeaders", valid_616950
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616951: Call_GetModifyCurrentDBClusterCapacity_616935;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_616951.validator(path, query, header, formData, body)
  let scheme = call_616951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616951.url(scheme.get, call_616951.host, call_616951.base,
                         call_616951.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616951, url, valid)

proc call*(call_616952: Call_GetModifyCurrentDBClusterCapacity_616935;
          DBClusterIdentifier: string; Capacity: int = 0; TimeoutAction: string = "";
          SecondsBeforeTimeout: int = 0;
          Action: string = "ModifyCurrentDBClusterCapacity";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616953 = newJObject()
  add(query_616953, "Capacity", newJInt(Capacity))
  add(query_616953, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_616953, "TimeoutAction", newJString(TimeoutAction))
  add(query_616953, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_616953, "Action", newJString(Action))
  add(query_616953, "Version", newJString(Version))
  result = call_616952.call(nil, query_616953, nil, nil, nil)

var getModifyCurrentDBClusterCapacity* = Call_GetModifyCurrentDBClusterCapacity_616935(
    name: "getModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_GetModifyCurrentDBClusterCapacity_616936, base: "/",
    url: url_GetModifyCurrentDBClusterCapacity_616937,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_617015 = ref object of OpenApiRestCall_612658
proc url_PostModifyDBCluster_617017(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBCluster_617016(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617018 = query.getOrDefault("Action")
  valid_617018 = validateParameter(valid_617018, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_617018 != nil:
    section.add "Action", valid_617018
  var valid_617019 = query.getOrDefault("Version")
  valid_617019 = validateParameter(valid_617019, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617019 != nil:
    section.add "Version", valid_617019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617020 = header.getOrDefault("X-Amz-Signature")
  valid_617020 = validateParameter(valid_617020, JString, required = false,
                                 default = nil)
  if valid_617020 != nil:
    section.add "X-Amz-Signature", valid_617020
  var valid_617021 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617021 = validateParameter(valid_617021, JString, required = false,
                                 default = nil)
  if valid_617021 != nil:
    section.add "X-Amz-Content-Sha256", valid_617021
  var valid_617022 = header.getOrDefault("X-Amz-Date")
  valid_617022 = validateParameter(valid_617022, JString, required = false,
                                 default = nil)
  if valid_617022 != nil:
    section.add "X-Amz-Date", valid_617022
  var valid_617023 = header.getOrDefault("X-Amz-Credential")
  valid_617023 = validateParameter(valid_617023, JString, required = false,
                                 default = nil)
  if valid_617023 != nil:
    section.add "X-Amz-Credential", valid_617023
  var valid_617024 = header.getOrDefault("X-Amz-Security-Token")
  valid_617024 = validateParameter(valid_617024, JString, required = false,
                                 default = nil)
  if valid_617024 != nil:
    section.add "X-Amz-Security-Token", valid_617024
  var valid_617025 = header.getOrDefault("X-Amz-Algorithm")
  valid_617025 = validateParameter(valid_617025, JString, required = false,
                                 default = nil)
  if valid_617025 != nil:
    section.add "X-Amz-Algorithm", valid_617025
  var valid_617026 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617026 = validateParameter(valid_617026, JString, required = false,
                                 default = nil)
  if valid_617026 != nil:
    section.add "X-Amz-SignedHeaders", valid_617026
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_617027 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_617027 = validateParameter(valid_617027, JString, required = false,
                                 default = nil)
  if valid_617027 != nil:
    section.add "NewDBClusterIdentifier", valid_617027
  var valid_617028 = formData.getOrDefault("Port")
  valid_617028 = validateParameter(valid_617028, JInt, required = false, default = nil)
  if valid_617028 != nil:
    section.add "Port", valid_617028
  var valid_617029 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_617029 = validateParameter(valid_617029, JString, required = false,
                                 default = nil)
  if valid_617029 != nil:
    section.add "PreferredMaintenanceWindow", valid_617029
  var valid_617030 = formData.getOrDefault("PreferredBackupWindow")
  valid_617030 = validateParameter(valid_617030, JString, required = false,
                                 default = nil)
  if valid_617030 != nil:
    section.add "PreferredBackupWindow", valid_617030
  var valid_617031 = formData.getOrDefault("MasterUserPassword")
  valid_617031 = validateParameter(valid_617031, JString, required = false,
                                 default = nil)
  if valid_617031 != nil:
    section.add "MasterUserPassword", valid_617031
  var valid_617032 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_617032 = validateParameter(valid_617032, JArray, required = false,
                                 default = nil)
  if valid_617032 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_617032
  var valid_617033 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_617033 = validateParameter(valid_617033, JString, required = false,
                                 default = nil)
  if valid_617033 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_617033
  var valid_617034 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_617034 = validateParameter(valid_617034, JArray, required = false,
                                 default = nil)
  if valid_617034 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_617034
  var valid_617035 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_617035 = validateParameter(valid_617035, JString, required = false,
                                 default = nil)
  if valid_617035 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_617035
  var valid_617036 = formData.getOrDefault("EngineVersion")
  valid_617036 = validateParameter(valid_617036, JString, required = false,
                                 default = nil)
  if valid_617036 != nil:
    section.add "EngineVersion", valid_617036
  var valid_617037 = formData.getOrDefault("BacktrackWindow")
  valid_617037 = validateParameter(valid_617037, JInt, required = false, default = nil)
  if valid_617037 != nil:
    section.add "BacktrackWindow", valid_617037
  var valid_617038 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_617038 = validateParameter(valid_617038, JArray, required = false,
                                 default = nil)
  if valid_617038 != nil:
    section.add "VpcSecurityGroupIds", valid_617038
  var valid_617039 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_617039 = validateParameter(valid_617039, JBool, required = false, default = nil)
  if valid_617039 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_617039
  var valid_617040 = formData.getOrDefault("BackupRetentionPeriod")
  valid_617040 = validateParameter(valid_617040, JInt, required = false, default = nil)
  if valid_617040 != nil:
    section.add "BackupRetentionPeriod", valid_617040
  var valid_617041 = formData.getOrDefault("ApplyImmediately")
  valid_617041 = validateParameter(valid_617041, JBool, required = false, default = nil)
  if valid_617041 != nil:
    section.add "ApplyImmediately", valid_617041
  var valid_617042 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_617042 = validateParameter(valid_617042, JString, required = false,
                                 default = nil)
  if valid_617042 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_617042
  var valid_617043 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_617043 = validateParameter(valid_617043, JBool, required = false, default = nil)
  if valid_617043 != nil:
    section.add "AllowMajorVersionUpgrade", valid_617043
  var valid_617044 = formData.getOrDefault("EnableHttpEndpoint")
  valid_617044 = validateParameter(valid_617044, JBool, required = false, default = nil)
  if valid_617044 != nil:
    section.add "EnableHttpEndpoint", valid_617044
  var valid_617045 = formData.getOrDefault("OptionGroupName")
  valid_617045 = validateParameter(valid_617045, JString, required = false,
                                 default = nil)
  if valid_617045 != nil:
    section.add "OptionGroupName", valid_617045
  var valid_617046 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_617046 = validateParameter(valid_617046, JString, required = false,
                                 default = nil)
  if valid_617046 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_617046
  var valid_617047 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_617047 = validateParameter(valid_617047, JString, required = false,
                                 default = nil)
  if valid_617047 != nil:
    section.add "DBClusterParameterGroupName", valid_617047
  var valid_617048 = formData.getOrDefault("DBInstanceParameterGroupName")
  valid_617048 = validateParameter(valid_617048, JString, required = false,
                                 default = nil)
  if valid_617048 != nil:
    section.add "DBInstanceParameterGroupName", valid_617048
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_617049 = formData.getOrDefault("DBClusterIdentifier")
  valid_617049 = validateParameter(valid_617049, JString, required = true,
                                 default = nil)
  if valid_617049 != nil:
    section.add "DBClusterIdentifier", valid_617049
  var valid_617050 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_617050 = validateParameter(valid_617050, JString, required = false,
                                 default = nil)
  if valid_617050 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_617050
  var valid_617051 = formData.getOrDefault("DeletionProtection")
  valid_617051 = validateParameter(valid_617051, JBool, required = false, default = nil)
  if valid_617051 != nil:
    section.add "DeletionProtection", valid_617051
  var valid_617052 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_617052 = validateParameter(valid_617052, JBool, required = false, default = nil)
  if valid_617052 != nil:
    section.add "CopyTagsToSnapshot", valid_617052
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617053: Call_PostModifyDBCluster_617015; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617053.validator(path, query, header, formData, body)
  let scheme = call_617053.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617053.url(scheme.get, call_617053.host, call_617053.base,
                         call_617053.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617053, url, valid)

proc call*(call_617054: Call_PostModifyDBCluster_617015;
          DBClusterIdentifier: string; NewDBClusterIdentifier: string = "";
          Port: int = 0; PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; ApplyImmediately: bool = false;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "ModifyDBCluster";
          AllowMajorVersionUpgrade: bool = false; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = "";
          DBInstanceParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  var query_617055 = newJObject()
  var formData_617056 = newJObject()
  add(formData_617056, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  add(formData_617056, "Port", newJInt(Port))
  add(formData_617056, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_617056, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_617056, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_617056.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_617056, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_617056.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_617056, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_617056, "EngineVersion", newJString(EngineVersion))
  add(formData_617056, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_617056.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_617056, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_617056, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_617056, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_617056, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_617055, "Action", newJString(Action))
  add(formData_617056, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_617056, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_617056, "OptionGroupName", newJString(OptionGroupName))
  add(formData_617056, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_617056, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_617056, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_617055, "Version", newJString(Version))
  add(formData_617056, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_617056, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_617056, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_617056, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_617054.call(nil, query_617055, nil, formData_617056, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_617015(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_617016, base: "/",
    url: url_PostModifyDBCluster_617017, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_616974 = ref object of OpenApiRestCall_612658
proc url_GetModifyDBCluster_616976(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBCluster_616975(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_616977 = query.getOrDefault("DeletionProtection")
  valid_616977 = validateParameter(valid_616977, JBool, required = false, default = nil)
  if valid_616977 != nil:
    section.add "DeletionProtection", valid_616977
  var valid_616978 = query.getOrDefault("CopyTagsToSnapshot")
  valid_616978 = validateParameter(valid_616978, JBool, required = false, default = nil)
  if valid_616978 != nil:
    section.add "CopyTagsToSnapshot", valid_616978
  var valid_616979 = query.getOrDefault("EnableHttpEndpoint")
  valid_616979 = validateParameter(valid_616979, JBool, required = false, default = nil)
  if valid_616979 != nil:
    section.add "EnableHttpEndpoint", valid_616979
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_616980 = query.getOrDefault("DBClusterIdentifier")
  valid_616980 = validateParameter(valid_616980, JString, required = true,
                                 default = nil)
  if valid_616980 != nil:
    section.add "DBClusterIdentifier", valid_616980
  var valid_616981 = query.getOrDefault("BacktrackWindow")
  valid_616981 = validateParameter(valid_616981, JInt, required = false, default = nil)
  if valid_616981 != nil:
    section.add "BacktrackWindow", valid_616981
  var valid_616982 = query.getOrDefault("DBClusterParameterGroupName")
  valid_616982 = validateParameter(valid_616982, JString, required = false,
                                 default = nil)
  if valid_616982 != nil:
    section.add "DBClusterParameterGroupName", valid_616982
  var valid_616983 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_616983 = validateParameter(valid_616983, JArray, required = false,
                                 default = nil)
  if valid_616983 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_616983
  var valid_616984 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_616984 = validateParameter(valid_616984, JArray, required = false,
                                 default = nil)
  if valid_616984 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_616984
  var valid_616985 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_616985 = validateParameter(valid_616985, JString, required = false,
                                 default = nil)
  if valid_616985 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_616985
  var valid_616986 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_616986 = validateParameter(valid_616986, JString, required = false,
                                 default = nil)
  if valid_616986 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_616986
  var valid_616987 = query.getOrDefault("BackupRetentionPeriod")
  valid_616987 = validateParameter(valid_616987, JInt, required = false, default = nil)
  if valid_616987 != nil:
    section.add "BackupRetentionPeriod", valid_616987
  var valid_616988 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_616988 = validateParameter(valid_616988, JString, required = false,
                                 default = nil)
  if valid_616988 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_616988
  var valid_616989 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_616989 = validateParameter(valid_616989, JBool, required = false, default = nil)
  if valid_616989 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_616989
  var valid_616990 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_616990 = validateParameter(valid_616990, JString, required = false,
                                 default = nil)
  if valid_616990 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_616990
  var valid_616991 = query.getOrDefault("EngineVersion")
  valid_616991 = validateParameter(valid_616991, JString, required = false,
                                 default = nil)
  if valid_616991 != nil:
    section.add "EngineVersion", valid_616991
  var valid_616992 = query.getOrDefault("DBInstanceParameterGroupName")
  valid_616992 = validateParameter(valid_616992, JString, required = false,
                                 default = nil)
  if valid_616992 != nil:
    section.add "DBInstanceParameterGroupName", valid_616992
  var valid_616993 = query.getOrDefault("Action")
  valid_616993 = validateParameter(valid_616993, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_616993 != nil:
    section.add "Action", valid_616993
  var valid_616994 = query.getOrDefault("ApplyImmediately")
  valid_616994 = validateParameter(valid_616994, JBool, required = false, default = nil)
  if valid_616994 != nil:
    section.add "ApplyImmediately", valid_616994
  var valid_616995 = query.getOrDefault("NewDBClusterIdentifier")
  valid_616995 = validateParameter(valid_616995, JString, required = false,
                                 default = nil)
  if valid_616995 != nil:
    section.add "NewDBClusterIdentifier", valid_616995
  var valid_616996 = query.getOrDefault("Port")
  valid_616996 = validateParameter(valid_616996, JInt, required = false, default = nil)
  if valid_616996 != nil:
    section.add "Port", valid_616996
  var valid_616997 = query.getOrDefault("VpcSecurityGroupIds")
  valid_616997 = validateParameter(valid_616997, JArray, required = false,
                                 default = nil)
  if valid_616997 != nil:
    section.add "VpcSecurityGroupIds", valid_616997
  var valid_616998 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_616998 = validateParameter(valid_616998, JBool, required = false, default = nil)
  if valid_616998 != nil:
    section.add "AllowMajorVersionUpgrade", valid_616998
  var valid_616999 = query.getOrDefault("MasterUserPassword")
  valid_616999 = validateParameter(valid_616999, JString, required = false,
                                 default = nil)
  if valid_616999 != nil:
    section.add "MasterUserPassword", valid_616999
  var valid_617000 = query.getOrDefault("OptionGroupName")
  valid_617000 = validateParameter(valid_617000, JString, required = false,
                                 default = nil)
  if valid_617000 != nil:
    section.add "OptionGroupName", valid_617000
  var valid_617001 = query.getOrDefault("Version")
  valid_617001 = validateParameter(valid_617001, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617001 != nil:
    section.add "Version", valid_617001
  var valid_617002 = query.getOrDefault("PreferredBackupWindow")
  valid_617002 = validateParameter(valid_617002, JString, required = false,
                                 default = nil)
  if valid_617002 != nil:
    section.add "PreferredBackupWindow", valid_617002
  var valid_617003 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_617003 = validateParameter(valid_617003, JString, required = false,
                                 default = nil)
  if valid_617003 != nil:
    section.add "PreferredMaintenanceWindow", valid_617003
  var valid_617004 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_617004 = validateParameter(valid_617004, JString, required = false,
                                 default = nil)
  if valid_617004 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_617004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617005 = header.getOrDefault("X-Amz-Signature")
  valid_617005 = validateParameter(valid_617005, JString, required = false,
                                 default = nil)
  if valid_617005 != nil:
    section.add "X-Amz-Signature", valid_617005
  var valid_617006 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617006 = validateParameter(valid_617006, JString, required = false,
                                 default = nil)
  if valid_617006 != nil:
    section.add "X-Amz-Content-Sha256", valid_617006
  var valid_617007 = header.getOrDefault("X-Amz-Date")
  valid_617007 = validateParameter(valid_617007, JString, required = false,
                                 default = nil)
  if valid_617007 != nil:
    section.add "X-Amz-Date", valid_617007
  var valid_617008 = header.getOrDefault("X-Amz-Credential")
  valid_617008 = validateParameter(valid_617008, JString, required = false,
                                 default = nil)
  if valid_617008 != nil:
    section.add "X-Amz-Credential", valid_617008
  var valid_617009 = header.getOrDefault("X-Amz-Security-Token")
  valid_617009 = validateParameter(valid_617009, JString, required = false,
                                 default = nil)
  if valid_617009 != nil:
    section.add "X-Amz-Security-Token", valid_617009
  var valid_617010 = header.getOrDefault("X-Amz-Algorithm")
  valid_617010 = validateParameter(valid_617010, JString, required = false,
                                 default = nil)
  if valid_617010 != nil:
    section.add "X-Amz-Algorithm", valid_617010
  var valid_617011 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617011 = validateParameter(valid_617011, JString, required = false,
                                 default = nil)
  if valid_617011 != nil:
    section.add "X-Amz-SignedHeaders", valid_617011
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617012: Call_GetModifyDBCluster_616974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617012.validator(path, query, header, formData, body)
  let scheme = call_617012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617012.url(scheme.get, call_617012.host, call_617012.base,
                         call_617012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617012, url, valid)

proc call*(call_617013: Call_GetModifyDBCluster_616974;
          DBClusterIdentifier: string; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; EnableHttpEndpoint: bool = false;
          BacktrackWindow: int = 0; DBClusterParameterGroupName: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EngineVersion: string = ""; DBInstanceParameterGroupName: string = "";
          Action: string = "ModifyDBCluster"; ApplyImmediately: bool = false;
          NewDBClusterIdentifier: string = ""; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = "";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_617014 = newJObject()
  add(query_617014, "DeletionProtection", newJBool(DeletionProtection))
  add(query_617014, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_617014, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_617014, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_617014, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_617014, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_617014.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_617014.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_617014, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_617014, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_617014, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_617014, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_617014, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_617014, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_617014, "EngineVersion", newJString(EngineVersion))
  add(query_617014, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_617014, "Action", newJString(Action))
  add(query_617014, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_617014, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_617014, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_617014.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_617014, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_617014, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_617014, "OptionGroupName", newJString(OptionGroupName))
  add(query_617014, "Version", newJString(Version))
  add(query_617014, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_617014, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_617014, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_617013.call(nil, query_617014, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_616974(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_616975,
    base: "/", url: url_GetModifyDBCluster_616976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterEndpoint_617076 = ref object of OpenApiRestCall_612658
proc url_PostModifyDBClusterEndpoint_617078(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterEndpoint_617077(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617079 = query.getOrDefault("Action")
  valid_617079 = validateParameter(valid_617079, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_617079 != nil:
    section.add "Action", valid_617079
  var valid_617080 = query.getOrDefault("Version")
  valid_617080 = validateParameter(valid_617080, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617080 != nil:
    section.add "Version", valid_617080
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617081 = header.getOrDefault("X-Amz-Signature")
  valid_617081 = validateParameter(valid_617081, JString, required = false,
                                 default = nil)
  if valid_617081 != nil:
    section.add "X-Amz-Signature", valid_617081
  var valid_617082 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617082 = validateParameter(valid_617082, JString, required = false,
                                 default = nil)
  if valid_617082 != nil:
    section.add "X-Amz-Content-Sha256", valid_617082
  var valid_617083 = header.getOrDefault("X-Amz-Date")
  valid_617083 = validateParameter(valid_617083, JString, required = false,
                                 default = nil)
  if valid_617083 != nil:
    section.add "X-Amz-Date", valid_617083
  var valid_617084 = header.getOrDefault("X-Amz-Credential")
  valid_617084 = validateParameter(valid_617084, JString, required = false,
                                 default = nil)
  if valid_617084 != nil:
    section.add "X-Amz-Credential", valid_617084
  var valid_617085 = header.getOrDefault("X-Amz-Security-Token")
  valid_617085 = validateParameter(valid_617085, JString, required = false,
                                 default = nil)
  if valid_617085 != nil:
    section.add "X-Amz-Security-Token", valid_617085
  var valid_617086 = header.getOrDefault("X-Amz-Algorithm")
  valid_617086 = validateParameter(valid_617086, JString, required = false,
                                 default = nil)
  if valid_617086 != nil:
    section.add "X-Amz-Algorithm", valid_617086
  var valid_617087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617087 = validateParameter(valid_617087, JString, required = false,
                                 default = nil)
  if valid_617087 != nil:
    section.add "X-Amz-SignedHeaders", valid_617087
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_617088 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_617088 = validateParameter(valid_617088, JString, required = true,
                                 default = nil)
  if valid_617088 != nil:
    section.add "DBClusterEndpointIdentifier", valid_617088
  var valid_617089 = formData.getOrDefault("StaticMembers")
  valid_617089 = validateParameter(valid_617089, JArray, required = false,
                                 default = nil)
  if valid_617089 != nil:
    section.add "StaticMembers", valid_617089
  var valid_617090 = formData.getOrDefault("EndpointType")
  valid_617090 = validateParameter(valid_617090, JString, required = false,
                                 default = nil)
  if valid_617090 != nil:
    section.add "EndpointType", valid_617090
  var valid_617091 = formData.getOrDefault("ExcludedMembers")
  valid_617091 = validateParameter(valid_617091, JArray, required = false,
                                 default = nil)
  if valid_617091 != nil:
    section.add "ExcludedMembers", valid_617091
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617092: Call_PostModifyDBClusterEndpoint_617076; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617092.validator(path, query, header, formData, body)
  let scheme = call_617092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617092.url(scheme.get, call_617092.host, call_617092.base,
                         call_617092.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617092, url, valid)

proc call*(call_617093: Call_PostModifyDBClusterEndpoint_617076;
          DBClusterEndpointIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "ModifyDBClusterEndpoint"; EndpointType: string = "";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_617094 = newJObject()
  var formData_617095 = newJObject()
  add(formData_617095, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_617095.add "StaticMembers", StaticMembers
  add(query_617094, "Action", newJString(Action))
  add(formData_617095, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_617095.add "ExcludedMembers", ExcludedMembers
  add(query_617094, "Version", newJString(Version))
  result = call_617093.call(nil, query_617094, nil, formData_617095, nil)

var postModifyDBClusterEndpoint* = Call_PostModifyDBClusterEndpoint_617076(
    name: "postModifyDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_PostModifyDBClusterEndpoint_617077, base: "/",
    url: url_PostModifyDBClusterEndpoint_617078,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterEndpoint_617057 = ref object of OpenApiRestCall_612658
proc url_GetModifyDBClusterEndpoint_617059(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterEndpoint_617058(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617060 = query.getOrDefault("ExcludedMembers")
  valid_617060 = validateParameter(valid_617060, JArray, required = false,
                                 default = nil)
  if valid_617060 != nil:
    section.add "ExcludedMembers", valid_617060
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_617061 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_617061 = validateParameter(valid_617061, JString, required = true,
                                 default = nil)
  if valid_617061 != nil:
    section.add "DBClusterEndpointIdentifier", valid_617061
  var valid_617062 = query.getOrDefault("StaticMembers")
  valid_617062 = validateParameter(valid_617062, JArray, required = false,
                                 default = nil)
  if valid_617062 != nil:
    section.add "StaticMembers", valid_617062
  var valid_617063 = query.getOrDefault("EndpointType")
  valid_617063 = validateParameter(valid_617063, JString, required = false,
                                 default = nil)
  if valid_617063 != nil:
    section.add "EndpointType", valid_617063
  var valid_617064 = query.getOrDefault("Action")
  valid_617064 = validateParameter(valid_617064, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_617064 != nil:
    section.add "Action", valid_617064
  var valid_617065 = query.getOrDefault("Version")
  valid_617065 = validateParameter(valid_617065, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617065 != nil:
    section.add "Version", valid_617065
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617066 = header.getOrDefault("X-Amz-Signature")
  valid_617066 = validateParameter(valid_617066, JString, required = false,
                                 default = nil)
  if valid_617066 != nil:
    section.add "X-Amz-Signature", valid_617066
  var valid_617067 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617067 = validateParameter(valid_617067, JString, required = false,
                                 default = nil)
  if valid_617067 != nil:
    section.add "X-Amz-Content-Sha256", valid_617067
  var valid_617068 = header.getOrDefault("X-Amz-Date")
  valid_617068 = validateParameter(valid_617068, JString, required = false,
                                 default = nil)
  if valid_617068 != nil:
    section.add "X-Amz-Date", valid_617068
  var valid_617069 = header.getOrDefault("X-Amz-Credential")
  valid_617069 = validateParameter(valid_617069, JString, required = false,
                                 default = nil)
  if valid_617069 != nil:
    section.add "X-Amz-Credential", valid_617069
  var valid_617070 = header.getOrDefault("X-Amz-Security-Token")
  valid_617070 = validateParameter(valid_617070, JString, required = false,
                                 default = nil)
  if valid_617070 != nil:
    section.add "X-Amz-Security-Token", valid_617070
  var valid_617071 = header.getOrDefault("X-Amz-Algorithm")
  valid_617071 = validateParameter(valid_617071, JString, required = false,
                                 default = nil)
  if valid_617071 != nil:
    section.add "X-Amz-Algorithm", valid_617071
  var valid_617072 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617072 = validateParameter(valid_617072, JString, required = false,
                                 default = nil)
  if valid_617072 != nil:
    section.add "X-Amz-SignedHeaders", valid_617072
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617073: Call_GetModifyDBClusterEndpoint_617057; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617073.validator(path, query, header, formData, body)
  let scheme = call_617073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617073.url(scheme.get, call_617073.host, call_617073.base,
                         call_617073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617073, url, valid)

proc call*(call_617074: Call_GetModifyDBClusterEndpoint_617057;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          StaticMembers: JsonNode = nil; EndpointType: string = "";
          Action: string = "ModifyDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617075 = newJObject()
  if ExcludedMembers != nil:
    query_617075.add "ExcludedMembers", ExcludedMembers
  add(query_617075, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_617075.add "StaticMembers", StaticMembers
  add(query_617075, "EndpointType", newJString(EndpointType))
  add(query_617075, "Action", newJString(Action))
  add(query_617075, "Version", newJString(Version))
  result = call_617074.call(nil, query_617075, nil, nil, nil)

var getModifyDBClusterEndpoint* = Call_GetModifyDBClusterEndpoint_617057(
    name: "getModifyDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_GetModifyDBClusterEndpoint_617058, base: "/",
    url: url_GetModifyDBClusterEndpoint_617059,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_617113 = ref object of OpenApiRestCall_612658
proc url_PostModifyDBClusterParameterGroup_617115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_617114(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617116 = query.getOrDefault("Action")
  valid_617116 = validateParameter(valid_617116, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_617116 != nil:
    section.add "Action", valid_617116
  var valid_617117 = query.getOrDefault("Version")
  valid_617117 = validateParameter(valid_617117, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617117 != nil:
    section.add "Version", valid_617117
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617118 = header.getOrDefault("X-Amz-Signature")
  valid_617118 = validateParameter(valid_617118, JString, required = false,
                                 default = nil)
  if valid_617118 != nil:
    section.add "X-Amz-Signature", valid_617118
  var valid_617119 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617119 = validateParameter(valid_617119, JString, required = false,
                                 default = nil)
  if valid_617119 != nil:
    section.add "X-Amz-Content-Sha256", valid_617119
  var valid_617120 = header.getOrDefault("X-Amz-Date")
  valid_617120 = validateParameter(valid_617120, JString, required = false,
                                 default = nil)
  if valid_617120 != nil:
    section.add "X-Amz-Date", valid_617120
  var valid_617121 = header.getOrDefault("X-Amz-Credential")
  valid_617121 = validateParameter(valid_617121, JString, required = false,
                                 default = nil)
  if valid_617121 != nil:
    section.add "X-Amz-Credential", valid_617121
  var valid_617122 = header.getOrDefault("X-Amz-Security-Token")
  valid_617122 = validateParameter(valid_617122, JString, required = false,
                                 default = nil)
  if valid_617122 != nil:
    section.add "X-Amz-Security-Token", valid_617122
  var valid_617123 = header.getOrDefault("X-Amz-Algorithm")
  valid_617123 = validateParameter(valid_617123, JString, required = false,
                                 default = nil)
  if valid_617123 != nil:
    section.add "X-Amz-Algorithm", valid_617123
  var valid_617124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617124 = validateParameter(valid_617124, JString, required = false,
                                 default = nil)
  if valid_617124 != nil:
    section.add "X-Amz-SignedHeaders", valid_617124
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_617125 = formData.getOrDefault("Parameters")
  valid_617125 = validateParameter(valid_617125, JArray, required = true, default = nil)
  if valid_617125 != nil:
    section.add "Parameters", valid_617125
  var valid_617126 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_617126 = validateParameter(valid_617126, JString, required = true,
                                 default = nil)
  if valid_617126 != nil:
    section.add "DBClusterParameterGroupName", valid_617126
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617127: Call_PostModifyDBClusterParameterGroup_617113;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617127.validator(path, query, header, formData, body)
  let scheme = call_617127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617127.url(scheme.get, call_617127.host, call_617127.base,
                         call_617127.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617127, url, valid)

proc call*(call_617128: Call_PostModifyDBClusterParameterGroup_617113;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_617129 = newJObject()
  var formData_617130 = newJObject()
  add(query_617129, "Action", newJString(Action))
  if Parameters != nil:
    formData_617130.add "Parameters", Parameters
  add(formData_617130, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_617129, "Version", newJString(Version))
  result = call_617128.call(nil, query_617129, nil, formData_617130, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_617113(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_617114, base: "/",
    url: url_PostModifyDBClusterParameterGroup_617115,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_617096 = ref object of OpenApiRestCall_612658
proc url_GetModifyDBClusterParameterGroup_617098(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_617097(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Parameters` field"
  var valid_617099 = query.getOrDefault("Parameters")
  valid_617099 = validateParameter(valid_617099, JArray, required = true, default = nil)
  if valid_617099 != nil:
    section.add "Parameters", valid_617099
  var valid_617100 = query.getOrDefault("DBClusterParameterGroupName")
  valid_617100 = validateParameter(valid_617100, JString, required = true,
                                 default = nil)
  if valid_617100 != nil:
    section.add "DBClusterParameterGroupName", valid_617100
  var valid_617101 = query.getOrDefault("Action")
  valid_617101 = validateParameter(valid_617101, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_617101 != nil:
    section.add "Action", valid_617101
  var valid_617102 = query.getOrDefault("Version")
  valid_617102 = validateParameter(valid_617102, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617102 != nil:
    section.add "Version", valid_617102
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617103 = header.getOrDefault("X-Amz-Signature")
  valid_617103 = validateParameter(valid_617103, JString, required = false,
                                 default = nil)
  if valid_617103 != nil:
    section.add "X-Amz-Signature", valid_617103
  var valid_617104 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617104 = validateParameter(valid_617104, JString, required = false,
                                 default = nil)
  if valid_617104 != nil:
    section.add "X-Amz-Content-Sha256", valid_617104
  var valid_617105 = header.getOrDefault("X-Amz-Date")
  valid_617105 = validateParameter(valid_617105, JString, required = false,
                                 default = nil)
  if valid_617105 != nil:
    section.add "X-Amz-Date", valid_617105
  var valid_617106 = header.getOrDefault("X-Amz-Credential")
  valid_617106 = validateParameter(valid_617106, JString, required = false,
                                 default = nil)
  if valid_617106 != nil:
    section.add "X-Amz-Credential", valid_617106
  var valid_617107 = header.getOrDefault("X-Amz-Security-Token")
  valid_617107 = validateParameter(valid_617107, JString, required = false,
                                 default = nil)
  if valid_617107 != nil:
    section.add "X-Amz-Security-Token", valid_617107
  var valid_617108 = header.getOrDefault("X-Amz-Algorithm")
  valid_617108 = validateParameter(valid_617108, JString, required = false,
                                 default = nil)
  if valid_617108 != nil:
    section.add "X-Amz-Algorithm", valid_617108
  var valid_617109 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617109 = validateParameter(valid_617109, JString, required = false,
                                 default = nil)
  if valid_617109 != nil:
    section.add "X-Amz-SignedHeaders", valid_617109
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617110: Call_GetModifyDBClusterParameterGroup_617096;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617110.validator(path, query, header, formData, body)
  let scheme = call_617110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617110.url(scheme.get, call_617110.host, call_617110.base,
                         call_617110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617110, url, valid)

proc call*(call_617111: Call_GetModifyDBClusterParameterGroup_617096;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617112 = newJObject()
  if Parameters != nil:
    query_617112.add "Parameters", Parameters
  add(query_617112, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_617112, "Action", newJString(Action))
  add(query_617112, "Version", newJString(Version))
  result = call_617111.call(nil, query_617112, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_617096(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_617097, base: "/",
    url: url_GetModifyDBClusterParameterGroup_617098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_617150 = ref object of OpenApiRestCall_612658
proc url_PostModifyDBClusterSnapshotAttribute_617152(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_617151(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617153 = query.getOrDefault("Action")
  valid_617153 = validateParameter(valid_617153, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_617153 != nil:
    section.add "Action", valid_617153
  var valid_617154 = query.getOrDefault("Version")
  valid_617154 = validateParameter(valid_617154, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617154 != nil:
    section.add "Version", valid_617154
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617155 = header.getOrDefault("X-Amz-Signature")
  valid_617155 = validateParameter(valid_617155, JString, required = false,
                                 default = nil)
  if valid_617155 != nil:
    section.add "X-Amz-Signature", valid_617155
  var valid_617156 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617156 = validateParameter(valid_617156, JString, required = false,
                                 default = nil)
  if valid_617156 != nil:
    section.add "X-Amz-Content-Sha256", valid_617156
  var valid_617157 = header.getOrDefault("X-Amz-Date")
  valid_617157 = validateParameter(valid_617157, JString, required = false,
                                 default = nil)
  if valid_617157 != nil:
    section.add "X-Amz-Date", valid_617157
  var valid_617158 = header.getOrDefault("X-Amz-Credential")
  valid_617158 = validateParameter(valid_617158, JString, required = false,
                                 default = nil)
  if valid_617158 != nil:
    section.add "X-Amz-Credential", valid_617158
  var valid_617159 = header.getOrDefault("X-Amz-Security-Token")
  valid_617159 = validateParameter(valid_617159, JString, required = false,
                                 default = nil)
  if valid_617159 != nil:
    section.add "X-Amz-Security-Token", valid_617159
  var valid_617160 = header.getOrDefault("X-Amz-Algorithm")
  valid_617160 = validateParameter(valid_617160, JString, required = false,
                                 default = nil)
  if valid_617160 != nil:
    section.add "X-Amz-Algorithm", valid_617160
  var valid_617161 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617161 = validateParameter(valid_617161, JString, required = false,
                                 default = nil)
  if valid_617161 != nil:
    section.add "X-Amz-SignedHeaders", valid_617161
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_617162 = formData.getOrDefault("AttributeName")
  valid_617162 = validateParameter(valid_617162, JString, required = true,
                                 default = nil)
  if valid_617162 != nil:
    section.add "AttributeName", valid_617162
  var valid_617163 = formData.getOrDefault("ValuesToAdd")
  valid_617163 = validateParameter(valid_617163, JArray, required = false,
                                 default = nil)
  if valid_617163 != nil:
    section.add "ValuesToAdd", valid_617163
  var valid_617164 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_617164 = validateParameter(valid_617164, JString, required = true,
                                 default = nil)
  if valid_617164 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_617164
  var valid_617165 = formData.getOrDefault("ValuesToRemove")
  valid_617165 = validateParameter(valid_617165, JArray, required = false,
                                 default = nil)
  if valid_617165 != nil:
    section.add "ValuesToRemove", valid_617165
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617166: Call_PostModifyDBClusterSnapshotAttribute_617150;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617166.validator(path, query, header, formData, body)
  let scheme = call_617166.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617166.url(scheme.get, call_617166.host, call_617166.base,
                         call_617166.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617166, url, valid)

proc call*(call_617167: Call_PostModifyDBClusterSnapshotAttribute_617150;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_617168 = newJObject()
  var formData_617169 = newJObject()
  add(formData_617169, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_617169.add "ValuesToAdd", ValuesToAdd
  add(formData_617169, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_617168, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_617169.add "ValuesToRemove", ValuesToRemove
  add(query_617168, "Version", newJString(Version))
  result = call_617167.call(nil, query_617168, nil, formData_617169, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_617150(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_617151, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_617152,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_617131 = ref object of OpenApiRestCall_612658
proc url_GetModifyDBClusterSnapshotAttribute_617133(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_617132(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_617134 = query.getOrDefault("ValuesToRemove")
  valid_617134 = validateParameter(valid_617134, JArray, required = false,
                                 default = nil)
  if valid_617134 != nil:
    section.add "ValuesToRemove", valid_617134
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_617135 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_617135 = validateParameter(valid_617135, JString, required = true,
                                 default = nil)
  if valid_617135 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_617135
  var valid_617136 = query.getOrDefault("Action")
  valid_617136 = validateParameter(valid_617136, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_617136 != nil:
    section.add "Action", valid_617136
  var valid_617137 = query.getOrDefault("AttributeName")
  valid_617137 = validateParameter(valid_617137, JString, required = true,
                                 default = nil)
  if valid_617137 != nil:
    section.add "AttributeName", valid_617137
  var valid_617138 = query.getOrDefault("ValuesToAdd")
  valid_617138 = validateParameter(valid_617138, JArray, required = false,
                                 default = nil)
  if valid_617138 != nil:
    section.add "ValuesToAdd", valid_617138
  var valid_617139 = query.getOrDefault("Version")
  valid_617139 = validateParameter(valid_617139, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617139 != nil:
    section.add "Version", valid_617139
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617140 = header.getOrDefault("X-Amz-Signature")
  valid_617140 = validateParameter(valid_617140, JString, required = false,
                                 default = nil)
  if valid_617140 != nil:
    section.add "X-Amz-Signature", valid_617140
  var valid_617141 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617141 = validateParameter(valid_617141, JString, required = false,
                                 default = nil)
  if valid_617141 != nil:
    section.add "X-Amz-Content-Sha256", valid_617141
  var valid_617142 = header.getOrDefault("X-Amz-Date")
  valid_617142 = validateParameter(valid_617142, JString, required = false,
                                 default = nil)
  if valid_617142 != nil:
    section.add "X-Amz-Date", valid_617142
  var valid_617143 = header.getOrDefault("X-Amz-Credential")
  valid_617143 = validateParameter(valid_617143, JString, required = false,
                                 default = nil)
  if valid_617143 != nil:
    section.add "X-Amz-Credential", valid_617143
  var valid_617144 = header.getOrDefault("X-Amz-Security-Token")
  valid_617144 = validateParameter(valid_617144, JString, required = false,
                                 default = nil)
  if valid_617144 != nil:
    section.add "X-Amz-Security-Token", valid_617144
  var valid_617145 = header.getOrDefault("X-Amz-Algorithm")
  valid_617145 = validateParameter(valid_617145, JString, required = false,
                                 default = nil)
  if valid_617145 != nil:
    section.add "X-Amz-Algorithm", valid_617145
  var valid_617146 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617146 = validateParameter(valid_617146, JString, required = false,
                                 default = nil)
  if valid_617146 != nil:
    section.add "X-Amz-SignedHeaders", valid_617146
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617147: Call_GetModifyDBClusterSnapshotAttribute_617131;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617147.validator(path, query, header, formData, body)
  let scheme = call_617147.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617147.url(scheme.get, call_617147.host, call_617147.base,
                         call_617147.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617147, url, valid)

proc call*(call_617148: Call_GetModifyDBClusterSnapshotAttribute_617131;
          DBClusterSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToAdd: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_617149 = newJObject()
  if ValuesToRemove != nil:
    query_617149.add "ValuesToRemove", ValuesToRemove
  add(query_617149, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_617149, "Action", newJString(Action))
  add(query_617149, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_617149.add "ValuesToAdd", ValuesToAdd
  add(query_617149, "Version", newJString(Version))
  result = call_617148.call(nil, query_617149, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_617131(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_617132, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_617133,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_617228 = ref object of OpenApiRestCall_612658
proc url_PostModifyDBInstance_617230(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBInstance_617229(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617231 = query.getOrDefault("Action")
  valid_617231 = validateParameter(valid_617231, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_617231 != nil:
    section.add "Action", valid_617231
  var valid_617232 = query.getOrDefault("Version")
  valid_617232 = validateParameter(valid_617232, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617232 != nil:
    section.add "Version", valid_617232
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_617233 = header.getOrDefault("X-Amz-Security-Token")
  valid_617233 = validateParameter(valid_617233, JString, required = false,
                                 default = nil)
  if valid_617233 != nil:
    section.add "X-Amz-Security-Token", valid_617233
  var valid_617234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617234 = validateParameter(valid_617234, JString, required = false,
                                 default = nil)
  if valid_617234 != nil:
    section.add "X-Amz-SignedHeaders", valid_617234
  var valid_617235 = header.getOrDefault("X-Amz-Signature")
  valid_617235 = validateParameter(valid_617235, JString, required = false,
                                 default = nil)
  if valid_617235 != nil:
    section.add "X-Amz-Signature", valid_617235
  var valid_617236 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617236 = validateParameter(valid_617236, JString, required = false,
                                 default = nil)
  if valid_617236 != nil:
    section.add "X-Amz-Content-Sha256", valid_617236
  var valid_617237 = header.getOrDefault("X-Amz-Date")
  valid_617237 = validateParameter(valid_617237, JString, required = false,
                                 default = nil)
  if valid_617237 != nil:
    section.add "X-Amz-Date", valid_617237
  var valid_617238 = header.getOrDefault("X-Amz-Credential")
  valid_617238 = validateParameter(valid_617238, JString, required = false,
                                 default = nil)
  if valid_617238 != nil:
    section.add "X-Amz-Credential", valid_617238
  var valid_617239 = header.getOrDefault("X-Amz-Algorithm")
  valid_617239 = validateParameter(valid_617239, JString, required = false,
                                 default = nil)
  if valid_617239 != nil:
    section.add "X-Amz-Algorithm", valid_617239
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   CertificateRotationRestart: JBool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  section = newJObject()
  var valid_617240 = formData.getOrDefault("PromotionTier")
  valid_617240 = validateParameter(valid_617240, JInt, required = false, default = nil)
  if valid_617240 != nil:
    section.add "PromotionTier", valid_617240
  var valid_617241 = formData.getOrDefault("MultiAZ")
  valid_617241 = validateParameter(valid_617241, JBool, required = false, default = nil)
  if valid_617241 != nil:
    section.add "MultiAZ", valid_617241
  var valid_617242 = formData.getOrDefault("MonitoringRoleArn")
  valid_617242 = validateParameter(valid_617242, JString, required = false,
                                 default = nil)
  if valid_617242 != nil:
    section.add "MonitoringRoleArn", valid_617242
  var valid_617243 = formData.getOrDefault("CACertificateIdentifier")
  valid_617243 = validateParameter(valid_617243, JString, required = false,
                                 default = nil)
  if valid_617243 != nil:
    section.add "CACertificateIdentifier", valid_617243
  var valid_617244 = formData.getOrDefault("MonitoringInterval")
  valid_617244 = validateParameter(valid_617244, JInt, required = false, default = nil)
  if valid_617244 != nil:
    section.add "MonitoringInterval", valid_617244
  var valid_617245 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_617245 = validateParameter(valid_617245, JArray, required = false,
                                 default = nil)
  if valid_617245 != nil:
    section.add "VpcSecurityGroupIds", valid_617245
  var valid_617246 = formData.getOrDefault("EnablePerformanceInsights")
  valid_617246 = validateParameter(valid_617246, JBool, required = false, default = nil)
  if valid_617246 != nil:
    section.add "EnablePerformanceInsights", valid_617246
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_617247 = formData.getOrDefault("DBInstanceIdentifier")
  valid_617247 = validateParameter(valid_617247, JString, required = true,
                                 default = nil)
  if valid_617247 != nil:
    section.add "DBInstanceIdentifier", valid_617247
  var valid_617248 = formData.getOrDefault("TdeCredentialArn")
  valid_617248 = validateParameter(valid_617248, JString, required = false,
                                 default = nil)
  if valid_617248 != nil:
    section.add "TdeCredentialArn", valid_617248
  var valid_617249 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_617249 = validateParameter(valid_617249, JInt, required = false, default = nil)
  if valid_617249 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_617249
  var valid_617250 = formData.getOrDefault("DBSubnetGroupName")
  valid_617250 = validateParameter(valid_617250, JString, required = false,
                                 default = nil)
  if valid_617250 != nil:
    section.add "DBSubnetGroupName", valid_617250
  var valid_617251 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_617251 = validateParameter(valid_617251, JBool, required = false, default = nil)
  if valid_617251 != nil:
    section.add "AllowMajorVersionUpgrade", valid_617251
  var valid_617252 = formData.getOrDefault("CertificateRotationRestart")
  valid_617252 = validateParameter(valid_617252, JBool, required = false, default = nil)
  if valid_617252 != nil:
    section.add "CertificateRotationRestart", valid_617252
  var valid_617253 = formData.getOrDefault("StorageType")
  valid_617253 = validateParameter(valid_617253, JString, required = false,
                                 default = nil)
  if valid_617253 != nil:
    section.add "StorageType", valid_617253
  var valid_617254 = formData.getOrDefault("MaxAllocatedStorage")
  valid_617254 = validateParameter(valid_617254, JInt, required = false, default = nil)
  if valid_617254 != nil:
    section.add "MaxAllocatedStorage", valid_617254
  var valid_617255 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_617255 = validateParameter(valid_617255, JBool, required = false, default = nil)
  if valid_617255 != nil:
    section.add "CopyTagsToSnapshot", valid_617255
  var valid_617256 = formData.getOrDefault("DeletionProtection")
  valid_617256 = validateParameter(valid_617256, JBool, required = false, default = nil)
  if valid_617256 != nil:
    section.add "DeletionProtection", valid_617256
  var valid_617257 = formData.getOrDefault("ProcessorFeatures")
  valid_617257 = validateParameter(valid_617257, JArray, required = false,
                                 default = nil)
  if valid_617257 != nil:
    section.add "ProcessorFeatures", valid_617257
  var valid_617258 = formData.getOrDefault("AllocatedStorage")
  valid_617258 = validateParameter(valid_617258, JInt, required = false, default = nil)
  if valid_617258 != nil:
    section.add "AllocatedStorage", valid_617258
  var valid_617259 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_617259 = validateParameter(valid_617259, JString, required = false,
                                 default = nil)
  if valid_617259 != nil:
    section.add "PreferredMaintenanceWindow", valid_617259
  var valid_617260 = formData.getOrDefault("DBInstanceClass")
  valid_617260 = validateParameter(valid_617260, JString, required = false,
                                 default = nil)
  if valid_617260 != nil:
    section.add "DBInstanceClass", valid_617260
  var valid_617261 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_617261 = validateParameter(valid_617261, JBool, required = false, default = nil)
  if valid_617261 != nil:
    section.add "UseDefaultProcessorFeatures", valid_617261
  var valid_617262 = formData.getOrDefault("PreferredBackupWindow")
  valid_617262 = validateParameter(valid_617262, JString, required = false,
                                 default = nil)
  if valid_617262 != nil:
    section.add "PreferredBackupWindow", valid_617262
  var valid_617263 = formData.getOrDefault("MasterUserPassword")
  valid_617263 = validateParameter(valid_617263, JString, required = false,
                                 default = nil)
  if valid_617263 != nil:
    section.add "MasterUserPassword", valid_617263
  var valid_617264 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_617264 = validateParameter(valid_617264, JArray, required = false,
                                 default = nil)
  if valid_617264 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_617264
  var valid_617265 = formData.getOrDefault("Domain")
  valid_617265 = validateParameter(valid_617265, JString, required = false,
                                 default = nil)
  if valid_617265 != nil:
    section.add "Domain", valid_617265
  var valid_617266 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_617266 = validateParameter(valid_617266, JArray, required = false,
                                 default = nil)
  if valid_617266 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_617266
  var valid_617267 = formData.getOrDefault("DBParameterGroupName")
  valid_617267 = validateParameter(valid_617267, JString, required = false,
                                 default = nil)
  if valid_617267 != nil:
    section.add "DBParameterGroupName", valid_617267
  var valid_617268 = formData.getOrDefault("EngineVersion")
  valid_617268 = validateParameter(valid_617268, JString, required = false,
                                 default = nil)
  if valid_617268 != nil:
    section.add "EngineVersion", valid_617268
  var valid_617269 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_617269 = validateParameter(valid_617269, JBool, required = false, default = nil)
  if valid_617269 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_617269
  var valid_617270 = formData.getOrDefault("BackupRetentionPeriod")
  valid_617270 = validateParameter(valid_617270, JInt, required = false, default = nil)
  if valid_617270 != nil:
    section.add "BackupRetentionPeriod", valid_617270
  var valid_617271 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_617271 = validateParameter(valid_617271, JBool, required = false, default = nil)
  if valid_617271 != nil:
    section.add "AutoMinorVersionUpgrade", valid_617271
  var valid_617272 = formData.getOrDefault("TdeCredentialPassword")
  valid_617272 = validateParameter(valid_617272, JString, required = false,
                                 default = nil)
  if valid_617272 != nil:
    section.add "TdeCredentialPassword", valid_617272
  var valid_617273 = formData.getOrDefault("ApplyImmediately")
  valid_617273 = validateParameter(valid_617273, JBool, required = false, default = nil)
  if valid_617273 != nil:
    section.add "ApplyImmediately", valid_617273
  var valid_617274 = formData.getOrDefault("Iops")
  valid_617274 = validateParameter(valid_617274, JInt, required = false, default = nil)
  if valid_617274 != nil:
    section.add "Iops", valid_617274
  var valid_617275 = formData.getOrDefault("PubliclyAccessible")
  valid_617275 = validateParameter(valid_617275, JBool, required = false, default = nil)
  if valid_617275 != nil:
    section.add "PubliclyAccessible", valid_617275
  var valid_617276 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_617276 = validateParameter(valid_617276, JString, required = false,
                                 default = nil)
  if valid_617276 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_617276
  var valid_617277 = formData.getOrDefault("LicenseModel")
  valid_617277 = validateParameter(valid_617277, JString, required = false,
                                 default = nil)
  if valid_617277 != nil:
    section.add "LicenseModel", valid_617277
  var valid_617278 = formData.getOrDefault("DomainIAMRoleName")
  valid_617278 = validateParameter(valid_617278, JString, required = false,
                                 default = nil)
  if valid_617278 != nil:
    section.add "DomainIAMRoleName", valid_617278
  var valid_617279 = formData.getOrDefault("OptionGroupName")
  valid_617279 = validateParameter(valid_617279, JString, required = false,
                                 default = nil)
  if valid_617279 != nil:
    section.add "OptionGroupName", valid_617279
  var valid_617280 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_617280 = validateParameter(valid_617280, JString, required = false,
                                 default = nil)
  if valid_617280 != nil:
    section.add "NewDBInstanceIdentifier", valid_617280
  var valid_617281 = formData.getOrDefault("DBSecurityGroups")
  valid_617281 = validateParameter(valid_617281, JArray, required = false,
                                 default = nil)
  if valid_617281 != nil:
    section.add "DBSecurityGroups", valid_617281
  var valid_617282 = formData.getOrDefault("DBPortNumber")
  valid_617282 = validateParameter(valid_617282, JInt, required = false, default = nil)
  if valid_617282 != nil:
    section.add "DBPortNumber", valid_617282
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617283: Call_PostModifyDBInstance_617228; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_617283.validator(path, query, header, formData, body)
  let scheme = call_617283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617283.url(scheme.get, call_617283.host, call_617283.base,
                         call_617283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617283, url, valid)

proc call*(call_617284: Call_PostModifyDBInstance_617228;
          DBInstanceIdentifier: string; PromotionTier: int = 0; MultiAZ: bool = false;
          MonitoringRoleArn: string = ""; CACertificateIdentifier: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnablePerformanceInsights: bool = false; TdeCredentialArn: string = "";
          Action: string = "ModifyDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; AllowMajorVersionUpgrade: bool = false;
          CertificateRotationRestart: bool = false; StorageType: string = "";
          MaxAllocatedStorage: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil;
          AllocatedStorage: int = 0; PreferredMaintenanceWindow: string = "";
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Domain: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; AutoMinorVersionUpgrade: bool = false;
          TdeCredentialPassword: string = ""; ApplyImmediately: bool = false;
          Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          DomainIAMRoleName: string = ""; OptionGroupName: string = "";
          NewDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; DBPortNumber: int = 0): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   CertificateRotationRestart: bool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  var query_617285 = newJObject()
  var formData_617286 = newJObject()
  add(formData_617286, "PromotionTier", newJInt(PromotionTier))
  add(formData_617286, "MultiAZ", newJBool(MultiAZ))
  add(formData_617286, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_617286, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_617286, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_617286.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_617286, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_617286, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_617286, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_617285, "Action", newJString(Action))
  add(formData_617286, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_617286, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_617286, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_617286, "CertificateRotationRestart",
      newJBool(CertificateRotationRestart))
  add(formData_617286, "StorageType", newJString(StorageType))
  add(formData_617286, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_617286, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_617286, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_617286.add "ProcessorFeatures", ProcessorFeatures
  add(formData_617286, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_617286, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_617286, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_617286, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_617286, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_617286, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_617286.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_617286, "Domain", newJString(Domain))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_617286.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_617286, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_617286, "EngineVersion", newJString(EngineVersion))
  add(formData_617286, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_617286, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_617286, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_617286, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_617286, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_617286, "Iops", newJInt(Iops))
  add(formData_617286, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_617286, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_617286, "LicenseModel", newJString(LicenseModel))
  add(formData_617286, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_617286, "OptionGroupName", newJString(OptionGroupName))
  add(formData_617286, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(query_617285, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_617286.add "DBSecurityGroups", DBSecurityGroups
  add(formData_617286, "DBPortNumber", newJInt(DBPortNumber))
  result = call_617284.call(nil, query_617285, nil, formData_617286, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_617228(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_617229, base: "/",
    url: url_PostModifyDBInstance_617230, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_617170 = ref object of OpenApiRestCall_612658
proc url_GetModifyDBInstance_617172(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBInstance_617171(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CertificateRotationRestart: JBool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  section = newJObject()
  var valid_617173 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_617173 = validateParameter(valid_617173, JBool, required = false, default = nil)
  if valid_617173 != nil:
    section.add "UseDefaultProcessorFeatures", valid_617173
  var valid_617174 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_617174 = validateParameter(valid_617174, JInt, required = false, default = nil)
  if valid_617174 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_617174
  var valid_617175 = query.getOrDefault("CopyTagsToSnapshot")
  valid_617175 = validateParameter(valid_617175, JBool, required = false, default = nil)
  if valid_617175 != nil:
    section.add "CopyTagsToSnapshot", valid_617175
  var valid_617176 = query.getOrDefault("MonitoringInterval")
  valid_617176 = validateParameter(valid_617176, JInt, required = false, default = nil)
  if valid_617176 != nil:
    section.add "MonitoringInterval", valid_617176
  var valid_617177 = query.getOrDefault("MonitoringRoleArn")
  valid_617177 = validateParameter(valid_617177, JString, required = false,
                                 default = nil)
  if valid_617177 != nil:
    section.add "MonitoringRoleArn", valid_617177
  var valid_617178 = query.getOrDefault("DBPortNumber")
  valid_617178 = validateParameter(valid_617178, JInt, required = false, default = nil)
  if valid_617178 != nil:
    section.add "DBPortNumber", valid_617178
  var valid_617179 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_617179 = validateParameter(valid_617179, JArray, required = false,
                                 default = nil)
  if valid_617179 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_617179
  var valid_617180 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_617180 = validateParameter(valid_617180, JArray, required = false,
                                 default = nil)
  if valid_617180 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_617180
  var valid_617181 = query.getOrDefault("ProcessorFeatures")
  valid_617181 = validateParameter(valid_617181, JArray, required = false,
                                 default = nil)
  if valid_617181 != nil:
    section.add "ProcessorFeatures", valid_617181
  var valid_617182 = query.getOrDefault("BackupRetentionPeriod")
  valid_617182 = validateParameter(valid_617182, JInt, required = false, default = nil)
  if valid_617182 != nil:
    section.add "BackupRetentionPeriod", valid_617182
  var valid_617183 = query.getOrDefault("EngineVersion")
  valid_617183 = validateParameter(valid_617183, JString, required = false,
                                 default = nil)
  if valid_617183 != nil:
    section.add "EngineVersion", valid_617183
  var valid_617184 = query.getOrDefault("Action")
  valid_617184 = validateParameter(valid_617184, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_617184 != nil:
    section.add "Action", valid_617184
  var valid_617185 = query.getOrDefault("Domain")
  valid_617185 = validateParameter(valid_617185, JString, required = false,
                                 default = nil)
  if valid_617185 != nil:
    section.add "Domain", valid_617185
  var valid_617186 = query.getOrDefault("VpcSecurityGroupIds")
  valid_617186 = validateParameter(valid_617186, JArray, required = false,
                                 default = nil)
  if valid_617186 != nil:
    section.add "VpcSecurityGroupIds", valid_617186
  var valid_617187 = query.getOrDefault("AllocatedStorage")
  valid_617187 = validateParameter(valid_617187, JInt, required = false, default = nil)
  if valid_617187 != nil:
    section.add "AllocatedStorage", valid_617187
  var valid_617188 = query.getOrDefault("EnablePerformanceInsights")
  valid_617188 = validateParameter(valid_617188, JBool, required = false, default = nil)
  if valid_617188 != nil:
    section.add "EnablePerformanceInsights", valid_617188
  var valid_617189 = query.getOrDefault("PubliclyAccessible")
  valid_617189 = validateParameter(valid_617189, JBool, required = false, default = nil)
  if valid_617189 != nil:
    section.add "PubliclyAccessible", valid_617189
  var valid_617190 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_617190 = validateParameter(valid_617190, JString, required = false,
                                 default = nil)
  if valid_617190 != nil:
    section.add "NewDBInstanceIdentifier", valid_617190
  var valid_617191 = query.getOrDefault("TdeCredentialPassword")
  valid_617191 = validateParameter(valid_617191, JString, required = false,
                                 default = nil)
  if valid_617191 != nil:
    section.add "TdeCredentialPassword", valid_617191
  var valid_617192 = query.getOrDefault("DeletionProtection")
  valid_617192 = validateParameter(valid_617192, JBool, required = false, default = nil)
  if valid_617192 != nil:
    section.add "DeletionProtection", valid_617192
  var valid_617193 = query.getOrDefault("DBParameterGroupName")
  valid_617193 = validateParameter(valid_617193, JString, required = false,
                                 default = nil)
  if valid_617193 != nil:
    section.add "DBParameterGroupName", valid_617193
  var valid_617194 = query.getOrDefault("MaxAllocatedStorage")
  valid_617194 = validateParameter(valid_617194, JInt, required = false, default = nil)
  if valid_617194 != nil:
    section.add "MaxAllocatedStorage", valid_617194
  var valid_617195 = query.getOrDefault("CertificateRotationRestart")
  valid_617195 = validateParameter(valid_617195, JBool, required = false, default = nil)
  if valid_617195 != nil:
    section.add "CertificateRotationRestart", valid_617195
  var valid_617196 = query.getOrDefault("LicenseModel")
  valid_617196 = validateParameter(valid_617196, JString, required = false,
                                 default = nil)
  if valid_617196 != nil:
    section.add "LicenseModel", valid_617196
  var valid_617197 = query.getOrDefault("DBInstanceIdentifier")
  valid_617197 = validateParameter(valid_617197, JString, required = true,
                                 default = nil)
  if valid_617197 != nil:
    section.add "DBInstanceIdentifier", valid_617197
  var valid_617198 = query.getOrDefault("TdeCredentialArn")
  valid_617198 = validateParameter(valid_617198, JString, required = false,
                                 default = nil)
  if valid_617198 != nil:
    section.add "TdeCredentialArn", valid_617198
  var valid_617199 = query.getOrDefault("PromotionTier")
  valid_617199 = validateParameter(valid_617199, JInt, required = false, default = nil)
  if valid_617199 != nil:
    section.add "PromotionTier", valid_617199
  var valid_617200 = query.getOrDefault("CACertificateIdentifier")
  valid_617200 = validateParameter(valid_617200, JString, required = false,
                                 default = nil)
  if valid_617200 != nil:
    section.add "CACertificateIdentifier", valid_617200
  var valid_617201 = query.getOrDefault("StorageType")
  valid_617201 = validateParameter(valid_617201, JString, required = false,
                                 default = nil)
  if valid_617201 != nil:
    section.add "StorageType", valid_617201
  var valid_617202 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_617202 = validateParameter(valid_617202, JBool, required = false, default = nil)
  if valid_617202 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_617202
  var valid_617203 = query.getOrDefault("MultiAZ")
  valid_617203 = validateParameter(valid_617203, JBool, required = false, default = nil)
  if valid_617203 != nil:
    section.add "MultiAZ", valid_617203
  var valid_617204 = query.getOrDefault("DBSecurityGroups")
  valid_617204 = validateParameter(valid_617204, JArray, required = false,
                                 default = nil)
  if valid_617204 != nil:
    section.add "DBSecurityGroups", valid_617204
  var valid_617205 = query.getOrDefault("ApplyImmediately")
  valid_617205 = validateParameter(valid_617205, JBool, required = false, default = nil)
  if valid_617205 != nil:
    section.add "ApplyImmediately", valid_617205
  var valid_617206 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_617206 = validateParameter(valid_617206, JBool, required = false, default = nil)
  if valid_617206 != nil:
    section.add "AllowMajorVersionUpgrade", valid_617206
  var valid_617207 = query.getOrDefault("MasterUserPassword")
  valid_617207 = validateParameter(valid_617207, JString, required = false,
                                 default = nil)
  if valid_617207 != nil:
    section.add "MasterUserPassword", valid_617207
  var valid_617208 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_617208 = validateParameter(valid_617208, JString, required = false,
                                 default = nil)
  if valid_617208 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_617208
  var valid_617209 = query.getOrDefault("OptionGroupName")
  valid_617209 = validateParameter(valid_617209, JString, required = false,
                                 default = nil)
  if valid_617209 != nil:
    section.add "OptionGroupName", valid_617209
  var valid_617210 = query.getOrDefault("DBSubnetGroupName")
  valid_617210 = validateParameter(valid_617210, JString, required = false,
                                 default = nil)
  if valid_617210 != nil:
    section.add "DBSubnetGroupName", valid_617210
  var valid_617211 = query.getOrDefault("PreferredBackupWindow")
  valid_617211 = validateParameter(valid_617211, JString, required = false,
                                 default = nil)
  if valid_617211 != nil:
    section.add "PreferredBackupWindow", valid_617211
  var valid_617212 = query.getOrDefault("DBInstanceClass")
  valid_617212 = validateParameter(valid_617212, JString, required = false,
                                 default = nil)
  if valid_617212 != nil:
    section.add "DBInstanceClass", valid_617212
  var valid_617213 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_617213 = validateParameter(valid_617213, JString, required = false,
                                 default = nil)
  if valid_617213 != nil:
    section.add "PreferredMaintenanceWindow", valid_617213
  var valid_617214 = query.getOrDefault("Version")
  valid_617214 = validateParameter(valid_617214, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617214 != nil:
    section.add "Version", valid_617214
  var valid_617215 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_617215 = validateParameter(valid_617215, JBool, required = false, default = nil)
  if valid_617215 != nil:
    section.add "AutoMinorVersionUpgrade", valid_617215
  var valid_617216 = query.getOrDefault("Iops")
  valid_617216 = validateParameter(valid_617216, JInt, required = false, default = nil)
  if valid_617216 != nil:
    section.add "Iops", valid_617216
  var valid_617217 = query.getOrDefault("DomainIAMRoleName")
  valid_617217 = validateParameter(valid_617217, JString, required = false,
                                 default = nil)
  if valid_617217 != nil:
    section.add "DomainIAMRoleName", valid_617217
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_617218 = header.getOrDefault("X-Amz-Security-Token")
  valid_617218 = validateParameter(valid_617218, JString, required = false,
                                 default = nil)
  if valid_617218 != nil:
    section.add "X-Amz-Security-Token", valid_617218
  var valid_617219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617219 = validateParameter(valid_617219, JString, required = false,
                                 default = nil)
  if valid_617219 != nil:
    section.add "X-Amz-SignedHeaders", valid_617219
  var valid_617220 = header.getOrDefault("X-Amz-Signature")
  valid_617220 = validateParameter(valid_617220, JString, required = false,
                                 default = nil)
  if valid_617220 != nil:
    section.add "X-Amz-Signature", valid_617220
  var valid_617221 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617221 = validateParameter(valid_617221, JString, required = false,
                                 default = nil)
  if valid_617221 != nil:
    section.add "X-Amz-Content-Sha256", valid_617221
  var valid_617222 = header.getOrDefault("X-Amz-Date")
  valid_617222 = validateParameter(valid_617222, JString, required = false,
                                 default = nil)
  if valid_617222 != nil:
    section.add "X-Amz-Date", valid_617222
  var valid_617223 = header.getOrDefault("X-Amz-Credential")
  valid_617223 = validateParameter(valid_617223, JString, required = false,
                                 default = nil)
  if valid_617223 != nil:
    section.add "X-Amz-Credential", valid_617223
  var valid_617224 = header.getOrDefault("X-Amz-Algorithm")
  valid_617224 = validateParameter(valid_617224, JString, required = false,
                                 default = nil)
  if valid_617224 != nil:
    section.add "X-Amz-Algorithm", valid_617224
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617225: Call_GetModifyDBInstance_617170; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_617225.validator(path, query, header, formData, body)
  let scheme = call_617225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617225.url(scheme.get, call_617225.host, call_617225.base,
                         call_617225.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617225, url, valid)

proc call*(call_617226: Call_GetModifyDBInstance_617170;
          DBInstanceIdentifier: string; UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0;
          CopyTagsToSnapshot: bool = false; MonitoringInterval: int = 0;
          MonitoringRoleArn: string = ""; DBPortNumber: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ProcessorFeatures: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EngineVersion: string = ""; Action: string = "ModifyDBInstance";
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AllocatedStorage: int = 0; EnablePerformanceInsights: bool = false;
          PubliclyAccessible: bool = false; NewDBInstanceIdentifier: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          DBParameterGroupName: string = ""; MaxAllocatedStorage: int = 0;
          CertificateRotationRestart: bool = false; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          CACertificateIdentifier: string = ""; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; MultiAZ: bool = false;
          DBSecurityGroups: JsonNode = nil; ApplyImmediately: bool = false;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          PerformanceInsightsKMSKeyId: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          DBInstanceClass: string = ""; PreferredMaintenanceWindow: string = "";
          Version: string = "2014-10-31"; AutoMinorVersionUpgrade: bool = false;
          Iops: int = 0; DomainIAMRoleName: string = ""): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CertificateRotationRestart: bool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  var query_617227 = newJObject()
  add(query_617227, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_617227, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_617227, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_617227, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_617227, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_617227, "DBPortNumber", newJInt(DBPortNumber))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_617227.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_617227.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  if ProcessorFeatures != nil:
    query_617227.add "ProcessorFeatures", ProcessorFeatures
  add(query_617227, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_617227, "EngineVersion", newJString(EngineVersion))
  add(query_617227, "Action", newJString(Action))
  add(query_617227, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_617227.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_617227, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_617227, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_617227, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_617227, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_617227, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_617227, "DeletionProtection", newJBool(DeletionProtection))
  add(query_617227, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_617227, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_617227, "CertificateRotationRestart",
      newJBool(CertificateRotationRestart))
  add(query_617227, "LicenseModel", newJString(LicenseModel))
  add(query_617227, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_617227, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_617227, "PromotionTier", newJInt(PromotionTier))
  add(query_617227, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_617227, "StorageType", newJString(StorageType))
  add(query_617227, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_617227, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_617227.add "DBSecurityGroups", DBSecurityGroups
  add(query_617227, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_617227, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_617227, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_617227, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_617227, "OptionGroupName", newJString(OptionGroupName))
  add(query_617227, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_617227, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_617227, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_617227, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_617227, "Version", newJString(Version))
  add(query_617227, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_617227, "Iops", newJInt(Iops))
  add(query_617227, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_617226.call(nil, query_617227, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_617170(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_617171, base: "/",
    url: url_GetModifyDBInstance_617172, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_617304 = ref object of OpenApiRestCall_612658
proc url_PostModifyDBParameterGroup_617306(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBParameterGroup_617305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617307 = query.getOrDefault("Action")
  valid_617307 = validateParameter(valid_617307, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_617307 != nil:
    section.add "Action", valid_617307
  var valid_617308 = query.getOrDefault("Version")
  valid_617308 = validateParameter(valid_617308, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617308 != nil:
    section.add "Version", valid_617308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617309 = header.getOrDefault("X-Amz-Signature")
  valid_617309 = validateParameter(valid_617309, JString, required = false,
                                 default = nil)
  if valid_617309 != nil:
    section.add "X-Amz-Signature", valid_617309
  var valid_617310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617310 = validateParameter(valid_617310, JString, required = false,
                                 default = nil)
  if valid_617310 != nil:
    section.add "X-Amz-Content-Sha256", valid_617310
  var valid_617311 = header.getOrDefault("X-Amz-Date")
  valid_617311 = validateParameter(valid_617311, JString, required = false,
                                 default = nil)
  if valid_617311 != nil:
    section.add "X-Amz-Date", valid_617311
  var valid_617312 = header.getOrDefault("X-Amz-Credential")
  valid_617312 = validateParameter(valid_617312, JString, required = false,
                                 default = nil)
  if valid_617312 != nil:
    section.add "X-Amz-Credential", valid_617312
  var valid_617313 = header.getOrDefault("X-Amz-Security-Token")
  valid_617313 = validateParameter(valid_617313, JString, required = false,
                                 default = nil)
  if valid_617313 != nil:
    section.add "X-Amz-Security-Token", valid_617313
  var valid_617314 = header.getOrDefault("X-Amz-Algorithm")
  valid_617314 = validateParameter(valid_617314, JString, required = false,
                                 default = nil)
  if valid_617314 != nil:
    section.add "X-Amz-Algorithm", valid_617314
  var valid_617315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617315 = validateParameter(valid_617315, JString, required = false,
                                 default = nil)
  if valid_617315 != nil:
    section.add "X-Amz-SignedHeaders", valid_617315
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_617316 = formData.getOrDefault("DBParameterGroupName")
  valid_617316 = validateParameter(valid_617316, JString, required = true,
                                 default = nil)
  if valid_617316 != nil:
    section.add "DBParameterGroupName", valid_617316
  var valid_617317 = formData.getOrDefault("Parameters")
  valid_617317 = validateParameter(valid_617317, JArray, required = true, default = nil)
  if valid_617317 != nil:
    section.add "Parameters", valid_617317
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617318: Call_PostModifyDBParameterGroup_617304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_617318.validator(path, query, header, formData, body)
  let scheme = call_617318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617318.url(scheme.get, call_617318.host, call_617318.base,
                         call_617318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617318, url, valid)

proc call*(call_617319: Call_PostModifyDBParameterGroup_617304;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Version: string (required)
  var query_617320 = newJObject()
  var formData_617321 = newJObject()
  add(formData_617321, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_617320, "Action", newJString(Action))
  if Parameters != nil:
    formData_617321.add "Parameters", Parameters
  add(query_617320, "Version", newJString(Version))
  result = call_617319.call(nil, query_617320, nil, formData_617321, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_617304(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_617305, base: "/",
    url: url_PostModifyDBParameterGroup_617306,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_617287 = ref object of OpenApiRestCall_612658
proc url_GetModifyDBParameterGroup_617289(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBParameterGroup_617288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_617290 = query.getOrDefault("DBParameterGroupName")
  valid_617290 = validateParameter(valid_617290, JString, required = true,
                                 default = nil)
  if valid_617290 != nil:
    section.add "DBParameterGroupName", valid_617290
  var valid_617291 = query.getOrDefault("Parameters")
  valid_617291 = validateParameter(valid_617291, JArray, required = true, default = nil)
  if valid_617291 != nil:
    section.add "Parameters", valid_617291
  var valid_617292 = query.getOrDefault("Action")
  valid_617292 = validateParameter(valid_617292, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_617292 != nil:
    section.add "Action", valid_617292
  var valid_617293 = query.getOrDefault("Version")
  valid_617293 = validateParameter(valid_617293, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617293 != nil:
    section.add "Version", valid_617293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617294 = header.getOrDefault("X-Amz-Signature")
  valid_617294 = validateParameter(valid_617294, JString, required = false,
                                 default = nil)
  if valid_617294 != nil:
    section.add "X-Amz-Signature", valid_617294
  var valid_617295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617295 = validateParameter(valid_617295, JString, required = false,
                                 default = nil)
  if valid_617295 != nil:
    section.add "X-Amz-Content-Sha256", valid_617295
  var valid_617296 = header.getOrDefault("X-Amz-Date")
  valid_617296 = validateParameter(valid_617296, JString, required = false,
                                 default = nil)
  if valid_617296 != nil:
    section.add "X-Amz-Date", valid_617296
  var valid_617297 = header.getOrDefault("X-Amz-Credential")
  valid_617297 = validateParameter(valid_617297, JString, required = false,
                                 default = nil)
  if valid_617297 != nil:
    section.add "X-Amz-Credential", valid_617297
  var valid_617298 = header.getOrDefault("X-Amz-Security-Token")
  valid_617298 = validateParameter(valid_617298, JString, required = false,
                                 default = nil)
  if valid_617298 != nil:
    section.add "X-Amz-Security-Token", valid_617298
  var valid_617299 = header.getOrDefault("X-Amz-Algorithm")
  valid_617299 = validateParameter(valid_617299, JString, required = false,
                                 default = nil)
  if valid_617299 != nil:
    section.add "X-Amz-Algorithm", valid_617299
  var valid_617300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617300 = validateParameter(valid_617300, JString, required = false,
                                 default = nil)
  if valid_617300 != nil:
    section.add "X-Amz-SignedHeaders", valid_617300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617301: Call_GetModifyDBParameterGroup_617287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_617301.validator(path, query, header, formData, body)
  let scheme = call_617301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617301.url(scheme.get, call_617301.host, call_617301.base,
                         call_617301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617301, url, valid)

proc call*(call_617302: Call_GetModifyDBParameterGroup_617287;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617303 = newJObject()
  add(query_617303, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_617303.add "Parameters", Parameters
  add(query_617303, "Action", newJString(Action))
  add(query_617303, "Version", newJString(Version))
  result = call_617302.call(nil, query_617303, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_617287(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_617288, base: "/",
    url: url_GetModifyDBParameterGroup_617289,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBProxy_617345 = ref object of OpenApiRestCall_612658
proc url_PostModifyDBProxy_617347(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBProxy_617346(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617348 = query.getOrDefault("Action")
  valid_617348 = validateParameter(valid_617348, JString, required = true,
                                 default = newJString("ModifyDBProxy"))
  if valid_617348 != nil:
    section.add "Action", valid_617348
  var valid_617349 = query.getOrDefault("Version")
  valid_617349 = validateParameter(valid_617349, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617349 != nil:
    section.add "Version", valid_617349
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617350 = header.getOrDefault("X-Amz-Signature")
  valid_617350 = validateParameter(valid_617350, JString, required = false,
                                 default = nil)
  if valid_617350 != nil:
    section.add "X-Amz-Signature", valid_617350
  var valid_617351 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617351 = validateParameter(valid_617351, JString, required = false,
                                 default = nil)
  if valid_617351 != nil:
    section.add "X-Amz-Content-Sha256", valid_617351
  var valid_617352 = header.getOrDefault("X-Amz-Date")
  valid_617352 = validateParameter(valid_617352, JString, required = false,
                                 default = nil)
  if valid_617352 != nil:
    section.add "X-Amz-Date", valid_617352
  var valid_617353 = header.getOrDefault("X-Amz-Credential")
  valid_617353 = validateParameter(valid_617353, JString, required = false,
                                 default = nil)
  if valid_617353 != nil:
    section.add "X-Amz-Credential", valid_617353
  var valid_617354 = header.getOrDefault("X-Amz-Security-Token")
  valid_617354 = validateParameter(valid_617354, JString, required = false,
                                 default = nil)
  if valid_617354 != nil:
    section.add "X-Amz-Security-Token", valid_617354
  var valid_617355 = header.getOrDefault("X-Amz-Algorithm")
  valid_617355 = validateParameter(valid_617355, JString, required = false,
                                 default = nil)
  if valid_617355 != nil:
    section.add "X-Amz-Algorithm", valid_617355
  var valid_617356 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617356 = validateParameter(valid_617356, JString, required = false,
                                 default = nil)
  if valid_617356 != nil:
    section.add "X-Amz-SignedHeaders", valid_617356
  result.add "header", section
  ## parameters in `formData` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RequireTLS: JBool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: JString
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   NewDBProxyName: JString
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  section = newJObject()
  var valid_617357 = formData.getOrDefault("IdleClientTimeout")
  valid_617357 = validateParameter(valid_617357, JInt, required = false, default = nil)
  if valid_617357 != nil:
    section.add "IdleClientTimeout", valid_617357
  var valid_617358 = formData.getOrDefault("RequireTLS")
  valid_617358 = validateParameter(valid_617358, JBool, required = false, default = nil)
  if valid_617358 != nil:
    section.add "RequireTLS", valid_617358
  var valid_617359 = formData.getOrDefault("DebugLogging")
  valid_617359 = validateParameter(valid_617359, JBool, required = false, default = nil)
  if valid_617359 != nil:
    section.add "DebugLogging", valid_617359
  var valid_617360 = formData.getOrDefault("RoleArn")
  valid_617360 = validateParameter(valid_617360, JString, required = false,
                                 default = nil)
  if valid_617360 != nil:
    section.add "RoleArn", valid_617360
  var valid_617361 = formData.getOrDefault("SecurityGroups")
  valid_617361 = validateParameter(valid_617361, JArray, required = false,
                                 default = nil)
  if valid_617361 != nil:
    section.add "SecurityGroups", valid_617361
  var valid_617362 = formData.getOrDefault("Auth")
  valid_617362 = validateParameter(valid_617362, JArray, required = false,
                                 default = nil)
  if valid_617362 != nil:
    section.add "Auth", valid_617362
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_617363 = formData.getOrDefault("DBProxyName")
  valid_617363 = validateParameter(valid_617363, JString, required = true,
                                 default = nil)
  if valid_617363 != nil:
    section.add "DBProxyName", valid_617363
  var valid_617364 = formData.getOrDefault("NewDBProxyName")
  valid_617364 = validateParameter(valid_617364, JString, required = false,
                                 default = nil)
  if valid_617364 != nil:
    section.add "NewDBProxyName", valid_617364
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617365: Call_PostModifyDBProxy_617345; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  let valid = call_617365.validator(path, query, header, formData, body)
  let scheme = call_617365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617365.url(scheme.get, call_617365.host, call_617365.base,
                         call_617365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617365, url, valid)

proc call*(call_617366: Call_PostModifyDBProxy_617345; DBProxyName: string;
          IdleClientTimeout: int = 0; RequireTLS: bool = false;
          DebugLogging: bool = false; RoleArn: string = "";
          SecurityGroups: JsonNode = nil; Auth: JsonNode = nil;
          NewDBProxyName: string = ""; Action: string = "ModifyDBProxy";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RequireTLS: bool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: string
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   DBProxyName: string (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   NewDBProxyName: string
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617367 = newJObject()
  var formData_617368 = newJObject()
  add(formData_617368, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(formData_617368, "RequireTLS", newJBool(RequireTLS))
  add(formData_617368, "DebugLogging", newJBool(DebugLogging))
  add(formData_617368, "RoleArn", newJString(RoleArn))
  if SecurityGroups != nil:
    formData_617368.add "SecurityGroups", SecurityGroups
  if Auth != nil:
    formData_617368.add "Auth", Auth
  add(formData_617368, "DBProxyName", newJString(DBProxyName))
  add(formData_617368, "NewDBProxyName", newJString(NewDBProxyName))
  add(query_617367, "Action", newJString(Action))
  add(query_617367, "Version", newJString(Version))
  result = call_617366.call(nil, query_617367, nil, formData_617368, nil)

var postModifyDBProxy* = Call_PostModifyDBProxy_617345(name: "postModifyDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBProxy", validator: validate_PostModifyDBProxy_617346,
    base: "/", url: url_PostModifyDBProxy_617347,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBProxy_617322 = ref object of OpenApiRestCall_612658
proc url_GetModifyDBProxy_617324(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBProxy_617323(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: JString
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   RequireTLS: JBool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   NewDBProxyName: JString
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  section = newJObject()
  var valid_617325 = query.getOrDefault("IdleClientTimeout")
  valid_617325 = validateParameter(valid_617325, JInt, required = false, default = nil)
  if valid_617325 != nil:
    section.add "IdleClientTimeout", valid_617325
  var valid_617326 = query.getOrDefault("RoleArn")
  valid_617326 = validateParameter(valid_617326, JString, required = false,
                                 default = nil)
  if valid_617326 != nil:
    section.add "RoleArn", valid_617326
  var valid_617327 = query.getOrDefault("Auth")
  valid_617327 = validateParameter(valid_617327, JArray, required = false,
                                 default = nil)
  if valid_617327 != nil:
    section.add "Auth", valid_617327
  var valid_617328 = query.getOrDefault("RequireTLS")
  valid_617328 = validateParameter(valid_617328, JBool, required = false, default = nil)
  if valid_617328 != nil:
    section.add "RequireTLS", valid_617328
  var valid_617329 = query.getOrDefault("NewDBProxyName")
  valid_617329 = validateParameter(valid_617329, JString, required = false,
                                 default = nil)
  if valid_617329 != nil:
    section.add "NewDBProxyName", valid_617329
  var valid_617330 = query.getOrDefault("SecurityGroups")
  valid_617330 = validateParameter(valid_617330, JArray, required = false,
                                 default = nil)
  if valid_617330 != nil:
    section.add "SecurityGroups", valid_617330
  var valid_617331 = query.getOrDefault("Action")
  valid_617331 = validateParameter(valid_617331, JString, required = true,
                                 default = newJString("ModifyDBProxy"))
  if valid_617331 != nil:
    section.add "Action", valid_617331
  var valid_617332 = query.getOrDefault("Version")
  valid_617332 = validateParameter(valid_617332, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617332 != nil:
    section.add "Version", valid_617332
  var valid_617333 = query.getOrDefault("DebugLogging")
  valid_617333 = validateParameter(valid_617333, JBool, required = false, default = nil)
  if valid_617333 != nil:
    section.add "DebugLogging", valid_617333
  var valid_617334 = query.getOrDefault("DBProxyName")
  valid_617334 = validateParameter(valid_617334, JString, required = true,
                                 default = nil)
  if valid_617334 != nil:
    section.add "DBProxyName", valid_617334
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617335 = header.getOrDefault("X-Amz-Signature")
  valid_617335 = validateParameter(valid_617335, JString, required = false,
                                 default = nil)
  if valid_617335 != nil:
    section.add "X-Amz-Signature", valid_617335
  var valid_617336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617336 = validateParameter(valid_617336, JString, required = false,
                                 default = nil)
  if valid_617336 != nil:
    section.add "X-Amz-Content-Sha256", valid_617336
  var valid_617337 = header.getOrDefault("X-Amz-Date")
  valid_617337 = validateParameter(valid_617337, JString, required = false,
                                 default = nil)
  if valid_617337 != nil:
    section.add "X-Amz-Date", valid_617337
  var valid_617338 = header.getOrDefault("X-Amz-Credential")
  valid_617338 = validateParameter(valid_617338, JString, required = false,
                                 default = nil)
  if valid_617338 != nil:
    section.add "X-Amz-Credential", valid_617338
  var valid_617339 = header.getOrDefault("X-Amz-Security-Token")
  valid_617339 = validateParameter(valid_617339, JString, required = false,
                                 default = nil)
  if valid_617339 != nil:
    section.add "X-Amz-Security-Token", valid_617339
  var valid_617340 = header.getOrDefault("X-Amz-Algorithm")
  valid_617340 = validateParameter(valid_617340, JString, required = false,
                                 default = nil)
  if valid_617340 != nil:
    section.add "X-Amz-Algorithm", valid_617340
  var valid_617341 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617341 = validateParameter(valid_617341, JString, required = false,
                                 default = nil)
  if valid_617341 != nil:
    section.add "X-Amz-SignedHeaders", valid_617341
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617342: Call_GetModifyDBProxy_617322; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  let valid = call_617342.validator(path, query, header, formData, body)
  let scheme = call_617342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617342.url(scheme.get, call_617342.host, call_617342.base,
                         call_617342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617342, url, valid)

proc call*(call_617343: Call_GetModifyDBProxy_617322; DBProxyName: string;
          IdleClientTimeout: int = 0; RoleArn: string = ""; Auth: JsonNode = nil;
          RequireTLS: bool = false; NewDBProxyName: string = "";
          SecurityGroups: JsonNode = nil; Action: string = "ModifyDBProxy";
          Version: string = "2014-10-31"; DebugLogging: bool = false): Recallable =
  ## getModifyDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: string
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   RequireTLS: bool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   NewDBProxyName: string
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: string (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  var query_617344 = newJObject()
  add(query_617344, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(query_617344, "RoleArn", newJString(RoleArn))
  if Auth != nil:
    query_617344.add "Auth", Auth
  add(query_617344, "RequireTLS", newJBool(RequireTLS))
  add(query_617344, "NewDBProxyName", newJString(NewDBProxyName))
  if SecurityGroups != nil:
    query_617344.add "SecurityGroups", SecurityGroups
  add(query_617344, "Action", newJString(Action))
  add(query_617344, "Version", newJString(Version))
  add(query_617344, "DebugLogging", newJBool(DebugLogging))
  add(query_617344, "DBProxyName", newJString(DBProxyName))
  result = call_617343.call(nil, query_617344, nil, nil, nil)

var getModifyDBProxy* = Call_GetModifyDBProxy_617322(name: "getModifyDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBProxy", validator: validate_GetModifyDBProxy_617323,
    base: "/", url: url_GetModifyDBProxy_617324,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBProxyTargetGroup_617392 = ref object of OpenApiRestCall_612658
proc url_PostModifyDBProxyTargetGroup_617394(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBProxyTargetGroup_617393(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617395 = query.getOrDefault("Action")
  valid_617395 = validateParameter(valid_617395, JString, required = true, default = newJString(
      "ModifyDBProxyTargetGroup"))
  if valid_617395 != nil:
    section.add "Action", valid_617395
  var valid_617396 = query.getOrDefault("Version")
  valid_617396 = validateParameter(valid_617396, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617396 != nil:
    section.add "Version", valid_617396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617397 = header.getOrDefault("X-Amz-Signature")
  valid_617397 = validateParameter(valid_617397, JString, required = false,
                                 default = nil)
  if valid_617397 != nil:
    section.add "X-Amz-Signature", valid_617397
  var valid_617398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617398 = validateParameter(valid_617398, JString, required = false,
                                 default = nil)
  if valid_617398 != nil:
    section.add "X-Amz-Content-Sha256", valid_617398
  var valid_617399 = header.getOrDefault("X-Amz-Date")
  valid_617399 = validateParameter(valid_617399, JString, required = false,
                                 default = nil)
  if valid_617399 != nil:
    section.add "X-Amz-Date", valid_617399
  var valid_617400 = header.getOrDefault("X-Amz-Credential")
  valid_617400 = validateParameter(valid_617400, JString, required = false,
                                 default = nil)
  if valid_617400 != nil:
    section.add "X-Amz-Credential", valid_617400
  var valid_617401 = header.getOrDefault("X-Amz-Security-Token")
  valid_617401 = validateParameter(valid_617401, JString, required = false,
                                 default = nil)
  if valid_617401 != nil:
    section.add "X-Amz-Security-Token", valid_617401
  var valid_617402 = header.getOrDefault("X-Amz-Algorithm")
  valid_617402 = validateParameter(valid_617402, JString, required = false,
                                 default = nil)
  if valid_617402 != nil:
    section.add "X-Amz-Algorithm", valid_617402
  var valid_617403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617403 = validateParameter(valid_617403, JString, required = false,
                                 default = nil)
  if valid_617403 != nil:
    section.add "X-Amz-SignedHeaders", valid_617403
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConnectionPoolConfig.MaxConnectionsPercent: JString
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   TargetGroupName: JString (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   NewName: JString
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfig.MaxIdleConnectionsPercent: JString
  ##                                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfig.InitQuery: JString
  ##                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   DBProxyName: JString (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   ConnectionPoolConfig.ConnectionBorrowTimeout: JString
  ##                                               : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   ConnectionPoolConfig.SessionPinningFilters: JArray
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  section = newJObject()
  var valid_617404 = formData.getOrDefault("ConnectionPoolConfig.MaxConnectionsPercent")
  valid_617404 = validateParameter(valid_617404, JString, required = false,
                                 default = nil)
  if valid_617404 != nil:
    section.add "ConnectionPoolConfig.MaxConnectionsPercent", valid_617404
  assert formData != nil, "formData argument is necessary due to required `TargetGroupName` field"
  var valid_617405 = formData.getOrDefault("TargetGroupName")
  valid_617405 = validateParameter(valid_617405, JString, required = true,
                                 default = nil)
  if valid_617405 != nil:
    section.add "TargetGroupName", valid_617405
  var valid_617406 = formData.getOrDefault("NewName")
  valid_617406 = validateParameter(valid_617406, JString, required = false,
                                 default = nil)
  if valid_617406 != nil:
    section.add "NewName", valid_617406
  var valid_617407 = formData.getOrDefault("ConnectionPoolConfig.MaxIdleConnectionsPercent")
  valid_617407 = validateParameter(valid_617407, JString, required = false,
                                 default = nil)
  if valid_617407 != nil:
    section.add "ConnectionPoolConfig.MaxIdleConnectionsPercent", valid_617407
  var valid_617408 = formData.getOrDefault("ConnectionPoolConfig.InitQuery")
  valid_617408 = validateParameter(valid_617408, JString, required = false,
                                 default = nil)
  if valid_617408 != nil:
    section.add "ConnectionPoolConfig.InitQuery", valid_617408
  var valid_617409 = formData.getOrDefault("DBProxyName")
  valid_617409 = validateParameter(valid_617409, JString, required = true,
                                 default = nil)
  if valid_617409 != nil:
    section.add "DBProxyName", valid_617409
  var valid_617410 = formData.getOrDefault("ConnectionPoolConfig.ConnectionBorrowTimeout")
  valid_617410 = validateParameter(valid_617410, JString, required = false,
                                 default = nil)
  if valid_617410 != nil:
    section.add "ConnectionPoolConfig.ConnectionBorrowTimeout", valid_617410
  var valid_617411 = formData.getOrDefault("ConnectionPoolConfig.SessionPinningFilters")
  valid_617411 = validateParameter(valid_617411, JArray, required = false,
                                 default = nil)
  if valid_617411 != nil:
    section.add "ConnectionPoolConfig.SessionPinningFilters", valid_617411
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617412: Call_PostModifyDBProxyTargetGroup_617392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_617412.validator(path, query, header, formData, body)
  let scheme = call_617412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617412.url(scheme.get, call_617412.host, call_617412.base,
                         call_617412.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617412, url, valid)

proc call*(call_617413: Call_PostModifyDBProxyTargetGroup_617392;
          TargetGroupName: string; DBProxyName: string;
          ConnectionPoolConfigMaxConnectionsPercent: string = "";
          NewName: string = "";
          ConnectionPoolConfigMaxIdleConnectionsPercent: string = "";
          ConnectionPoolConfigInitQuery: string = "";
          Action: string = "ModifyDBProxyTargetGroup";
          ConnectionPoolConfigConnectionBorrowTimeout: string = "";
          Version: string = "2014-10-31";
          ConnectionPoolConfigSessionPinningFilters: JsonNode = nil): Recallable =
  ## postModifyDBProxyTargetGroup
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ##   ConnectionPoolConfigMaxConnectionsPercent: string
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   TargetGroupName: string (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   NewName: string
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfigMaxIdleConnectionsPercent: string
  ##                                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfigInitQuery: string
  ##                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   DBProxyName: string (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   Action: string (required)
  ##   ConnectionPoolConfigConnectionBorrowTimeout: string
  ##                                              : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: string (required)
  ##   ConnectionPoolConfigSessionPinningFilters: JArray
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  var query_617414 = newJObject()
  var formData_617415 = newJObject()
  add(formData_617415, "ConnectionPoolConfig.MaxConnectionsPercent",
      newJString(ConnectionPoolConfigMaxConnectionsPercent))
  add(formData_617415, "TargetGroupName", newJString(TargetGroupName))
  add(formData_617415, "NewName", newJString(NewName))
  add(formData_617415, "ConnectionPoolConfig.MaxIdleConnectionsPercent",
      newJString(ConnectionPoolConfigMaxIdleConnectionsPercent))
  add(formData_617415, "ConnectionPoolConfig.InitQuery",
      newJString(ConnectionPoolConfigInitQuery))
  add(formData_617415, "DBProxyName", newJString(DBProxyName))
  add(query_617414, "Action", newJString(Action))
  add(formData_617415, "ConnectionPoolConfig.ConnectionBorrowTimeout",
      newJString(ConnectionPoolConfigConnectionBorrowTimeout))
  add(query_617414, "Version", newJString(Version))
  if ConnectionPoolConfigSessionPinningFilters != nil:
    formData_617415.add "ConnectionPoolConfig.SessionPinningFilters",
                       ConnectionPoolConfigSessionPinningFilters
  result = call_617413.call(nil, query_617414, nil, formData_617415, nil)

var postModifyDBProxyTargetGroup* = Call_PostModifyDBProxyTargetGroup_617392(
    name: "postModifyDBProxyTargetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBProxyTargetGroup",
    validator: validate_PostModifyDBProxyTargetGroup_617393, base: "/",
    url: url_PostModifyDBProxyTargetGroup_617394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBProxyTargetGroup_617369 = ref object of OpenApiRestCall_612658
proc url_GetModifyDBProxyTargetGroup_617371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBProxyTargetGroup_617370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConnectionPoolConfig.SessionPinningFilters: JArray
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   NewName: JString
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfig.MaxIdleConnectionsPercent: JString
  ##                                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfig.InitQuery: JString
  ##                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   TargetGroupName: JString (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   Action: JString (required)
  ##   ConnectionPoolConfig.MaxConnectionsPercent: JString
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   ConnectionPoolConfig.ConnectionBorrowTimeout: JString
  ##                                               : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The name of the new proxy to which to assign the target group.
  section = newJObject()
  var valid_617372 = query.getOrDefault("ConnectionPoolConfig.SessionPinningFilters")
  valid_617372 = validateParameter(valid_617372, JArray, required = false,
                                 default = nil)
  if valid_617372 != nil:
    section.add "ConnectionPoolConfig.SessionPinningFilters", valid_617372
  var valid_617373 = query.getOrDefault("NewName")
  valid_617373 = validateParameter(valid_617373, JString, required = false,
                                 default = nil)
  if valid_617373 != nil:
    section.add "NewName", valid_617373
  var valid_617374 = query.getOrDefault("ConnectionPoolConfig.MaxIdleConnectionsPercent")
  valid_617374 = validateParameter(valid_617374, JString, required = false,
                                 default = nil)
  if valid_617374 != nil:
    section.add "ConnectionPoolConfig.MaxIdleConnectionsPercent", valid_617374
  var valid_617375 = query.getOrDefault("ConnectionPoolConfig.InitQuery")
  valid_617375 = validateParameter(valid_617375, JString, required = false,
                                 default = nil)
  if valid_617375 != nil:
    section.add "ConnectionPoolConfig.InitQuery", valid_617375
  assert query != nil,
        "query argument is necessary due to required `TargetGroupName` field"
  var valid_617376 = query.getOrDefault("TargetGroupName")
  valid_617376 = validateParameter(valid_617376, JString, required = true,
                                 default = nil)
  if valid_617376 != nil:
    section.add "TargetGroupName", valid_617376
  var valid_617377 = query.getOrDefault("Action")
  valid_617377 = validateParameter(valid_617377, JString, required = true, default = newJString(
      "ModifyDBProxyTargetGroup"))
  if valid_617377 != nil:
    section.add "Action", valid_617377
  var valid_617378 = query.getOrDefault("ConnectionPoolConfig.MaxConnectionsPercent")
  valid_617378 = validateParameter(valid_617378, JString, required = false,
                                 default = nil)
  if valid_617378 != nil:
    section.add "ConnectionPoolConfig.MaxConnectionsPercent", valid_617378
  var valid_617379 = query.getOrDefault("ConnectionPoolConfig.ConnectionBorrowTimeout")
  valid_617379 = validateParameter(valid_617379, JString, required = false,
                                 default = nil)
  if valid_617379 != nil:
    section.add "ConnectionPoolConfig.ConnectionBorrowTimeout", valid_617379
  var valid_617380 = query.getOrDefault("Version")
  valid_617380 = validateParameter(valid_617380, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617380 != nil:
    section.add "Version", valid_617380
  var valid_617381 = query.getOrDefault("DBProxyName")
  valid_617381 = validateParameter(valid_617381, JString, required = true,
                                 default = nil)
  if valid_617381 != nil:
    section.add "DBProxyName", valid_617381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617382 = header.getOrDefault("X-Amz-Signature")
  valid_617382 = validateParameter(valid_617382, JString, required = false,
                                 default = nil)
  if valid_617382 != nil:
    section.add "X-Amz-Signature", valid_617382
  var valid_617383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617383 = validateParameter(valid_617383, JString, required = false,
                                 default = nil)
  if valid_617383 != nil:
    section.add "X-Amz-Content-Sha256", valid_617383
  var valid_617384 = header.getOrDefault("X-Amz-Date")
  valid_617384 = validateParameter(valid_617384, JString, required = false,
                                 default = nil)
  if valid_617384 != nil:
    section.add "X-Amz-Date", valid_617384
  var valid_617385 = header.getOrDefault("X-Amz-Credential")
  valid_617385 = validateParameter(valid_617385, JString, required = false,
                                 default = nil)
  if valid_617385 != nil:
    section.add "X-Amz-Credential", valid_617385
  var valid_617386 = header.getOrDefault("X-Amz-Security-Token")
  valid_617386 = validateParameter(valid_617386, JString, required = false,
                                 default = nil)
  if valid_617386 != nil:
    section.add "X-Amz-Security-Token", valid_617386
  var valid_617387 = header.getOrDefault("X-Amz-Algorithm")
  valid_617387 = validateParameter(valid_617387, JString, required = false,
                                 default = nil)
  if valid_617387 != nil:
    section.add "X-Amz-Algorithm", valid_617387
  var valid_617388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617388 = validateParameter(valid_617388, JString, required = false,
                                 default = nil)
  if valid_617388 != nil:
    section.add "X-Amz-SignedHeaders", valid_617388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617389: Call_GetModifyDBProxyTargetGroup_617369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_617389.validator(path, query, header, formData, body)
  let scheme = call_617389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617389.url(scheme.get, call_617389.host, call_617389.base,
                         call_617389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617389, url, valid)

proc call*(call_617390: Call_GetModifyDBProxyTargetGroup_617369;
          TargetGroupName: string; DBProxyName: string;
          ConnectionPoolConfigSessionPinningFilters: JsonNode = nil;
          NewName: string = "";
          ConnectionPoolConfigMaxIdleConnectionsPercent: string = "";
          ConnectionPoolConfigInitQuery: string = "";
          Action: string = "ModifyDBProxyTargetGroup";
          ConnectionPoolConfigMaxConnectionsPercent: string = "";
          ConnectionPoolConfigConnectionBorrowTimeout: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBProxyTargetGroup
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ##   ConnectionPoolConfigSessionPinningFilters: JArray
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   NewName: string
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfigMaxIdleConnectionsPercent: string
  ##                                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfigInitQuery: string
  ##                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   TargetGroupName: string (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   Action: string (required)
  ##   ConnectionPoolConfigMaxConnectionsPercent: string
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   ConnectionPoolConfigConnectionBorrowTimeout: string
  ##                                              : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the new proxy to which to assign the target group.
  var query_617391 = newJObject()
  if ConnectionPoolConfigSessionPinningFilters != nil:
    query_617391.add "ConnectionPoolConfig.SessionPinningFilters",
                    ConnectionPoolConfigSessionPinningFilters
  add(query_617391, "NewName", newJString(NewName))
  add(query_617391, "ConnectionPoolConfig.MaxIdleConnectionsPercent",
      newJString(ConnectionPoolConfigMaxIdleConnectionsPercent))
  add(query_617391, "ConnectionPoolConfig.InitQuery",
      newJString(ConnectionPoolConfigInitQuery))
  add(query_617391, "TargetGroupName", newJString(TargetGroupName))
  add(query_617391, "Action", newJString(Action))
  add(query_617391, "ConnectionPoolConfig.MaxConnectionsPercent",
      newJString(ConnectionPoolConfigMaxConnectionsPercent))
  add(query_617391, "ConnectionPoolConfig.ConnectionBorrowTimeout",
      newJString(ConnectionPoolConfigConnectionBorrowTimeout))
  add(query_617391, "Version", newJString(Version))
  add(query_617391, "DBProxyName", newJString(DBProxyName))
  result = call_617390.call(nil, query_617391, nil, nil, nil)

var getModifyDBProxyTargetGroup* = Call_GetModifyDBProxyTargetGroup_617369(
    name: "getModifyDBProxyTargetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBProxyTargetGroup",
    validator: validate_GetModifyDBProxyTargetGroup_617370, base: "/",
    url: url_GetModifyDBProxyTargetGroup_617371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshot_617434 = ref object of OpenApiRestCall_612658
proc url_PostModifyDBSnapshot_617436(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSnapshot_617435(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617437 = query.getOrDefault("Action")
  valid_617437 = validateParameter(valid_617437, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_617437 != nil:
    section.add "Action", valid_617437
  var valid_617438 = query.getOrDefault("Version")
  valid_617438 = validateParameter(valid_617438, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617438 != nil:
    section.add "Version", valid_617438
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617439 = header.getOrDefault("X-Amz-Signature")
  valid_617439 = validateParameter(valid_617439, JString, required = false,
                                 default = nil)
  if valid_617439 != nil:
    section.add "X-Amz-Signature", valid_617439
  var valid_617440 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617440 = validateParameter(valid_617440, JString, required = false,
                                 default = nil)
  if valid_617440 != nil:
    section.add "X-Amz-Content-Sha256", valid_617440
  var valid_617441 = header.getOrDefault("X-Amz-Date")
  valid_617441 = validateParameter(valid_617441, JString, required = false,
                                 default = nil)
  if valid_617441 != nil:
    section.add "X-Amz-Date", valid_617441
  var valid_617442 = header.getOrDefault("X-Amz-Credential")
  valid_617442 = validateParameter(valid_617442, JString, required = false,
                                 default = nil)
  if valid_617442 != nil:
    section.add "X-Amz-Credential", valid_617442
  var valid_617443 = header.getOrDefault("X-Amz-Security-Token")
  valid_617443 = validateParameter(valid_617443, JString, required = false,
                                 default = nil)
  if valid_617443 != nil:
    section.add "X-Amz-Security-Token", valid_617443
  var valid_617444 = header.getOrDefault("X-Amz-Algorithm")
  valid_617444 = validateParameter(valid_617444, JString, required = false,
                                 default = nil)
  if valid_617444 != nil:
    section.add "X-Amz-Algorithm", valid_617444
  var valid_617445 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617445 = validateParameter(valid_617445, JString, required = false,
                                 default = nil)
  if valid_617445 != nil:
    section.add "X-Amz-SignedHeaders", valid_617445
  result.add "header", section
  ## parameters in `formData` object:
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_617446 = formData.getOrDefault("EngineVersion")
  valid_617446 = validateParameter(valid_617446, JString, required = false,
                                 default = nil)
  if valid_617446 != nil:
    section.add "EngineVersion", valid_617446
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_617447 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_617447 = validateParameter(valid_617447, JString, required = true,
                                 default = nil)
  if valid_617447 != nil:
    section.add "DBSnapshotIdentifier", valid_617447
  var valid_617448 = formData.getOrDefault("OptionGroupName")
  valid_617448 = validateParameter(valid_617448, JString, required = false,
                                 default = nil)
  if valid_617448 != nil:
    section.add "OptionGroupName", valid_617448
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617449: Call_PostModifyDBSnapshot_617434; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  let valid = call_617449.validator(path, query, header, formData, body)
  let scheme = call_617449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617449.url(scheme.get, call_617449.host, call_617449.base,
                         call_617449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617449, url, valid)

proc call*(call_617450: Call_PostModifyDBSnapshot_617434;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_617451 = newJObject()
  var formData_617452 = newJObject()
  add(formData_617452, "EngineVersion", newJString(EngineVersion))
  add(formData_617452, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_617451, "Action", newJString(Action))
  add(formData_617452, "OptionGroupName", newJString(OptionGroupName))
  add(query_617451, "Version", newJString(Version))
  result = call_617450.call(nil, query_617451, nil, formData_617452, nil)

var postModifyDBSnapshot* = Call_PostModifyDBSnapshot_617434(
    name: "postModifyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_PostModifyDBSnapshot_617435, base: "/",
    url: url_PostModifyDBSnapshot_617436, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshot_617416 = ref object of OpenApiRestCall_612658
proc url_GetModifyDBSnapshot_617418(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSnapshot_617417(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_617419 = query.getOrDefault("DBSnapshotIdentifier")
  valid_617419 = validateParameter(valid_617419, JString, required = true,
                                 default = nil)
  if valid_617419 != nil:
    section.add "DBSnapshotIdentifier", valid_617419
  var valid_617420 = query.getOrDefault("EngineVersion")
  valid_617420 = validateParameter(valid_617420, JString, required = false,
                                 default = nil)
  if valid_617420 != nil:
    section.add "EngineVersion", valid_617420
  var valid_617421 = query.getOrDefault("Action")
  valid_617421 = validateParameter(valid_617421, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_617421 != nil:
    section.add "Action", valid_617421
  var valid_617422 = query.getOrDefault("OptionGroupName")
  valid_617422 = validateParameter(valid_617422, JString, required = false,
                                 default = nil)
  if valid_617422 != nil:
    section.add "OptionGroupName", valid_617422
  var valid_617423 = query.getOrDefault("Version")
  valid_617423 = validateParameter(valid_617423, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617423 != nil:
    section.add "Version", valid_617423
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617424 = header.getOrDefault("X-Amz-Signature")
  valid_617424 = validateParameter(valid_617424, JString, required = false,
                                 default = nil)
  if valid_617424 != nil:
    section.add "X-Amz-Signature", valid_617424
  var valid_617425 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617425 = validateParameter(valid_617425, JString, required = false,
                                 default = nil)
  if valid_617425 != nil:
    section.add "X-Amz-Content-Sha256", valid_617425
  var valid_617426 = header.getOrDefault("X-Amz-Date")
  valid_617426 = validateParameter(valid_617426, JString, required = false,
                                 default = nil)
  if valid_617426 != nil:
    section.add "X-Amz-Date", valid_617426
  var valid_617427 = header.getOrDefault("X-Amz-Credential")
  valid_617427 = validateParameter(valid_617427, JString, required = false,
                                 default = nil)
  if valid_617427 != nil:
    section.add "X-Amz-Credential", valid_617427
  var valid_617428 = header.getOrDefault("X-Amz-Security-Token")
  valid_617428 = validateParameter(valid_617428, JString, required = false,
                                 default = nil)
  if valid_617428 != nil:
    section.add "X-Amz-Security-Token", valid_617428
  var valid_617429 = header.getOrDefault("X-Amz-Algorithm")
  valid_617429 = validateParameter(valid_617429, JString, required = false,
                                 default = nil)
  if valid_617429 != nil:
    section.add "X-Amz-Algorithm", valid_617429
  var valid_617430 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617430 = validateParameter(valid_617430, JString, required = false,
                                 default = nil)
  if valid_617430 != nil:
    section.add "X-Amz-SignedHeaders", valid_617430
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617431: Call_GetModifyDBSnapshot_617416; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  let valid = call_617431.validator(path, query, header, formData, body)
  let scheme = call_617431.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617431.url(scheme.get, call_617431.host, call_617431.base,
                         call_617431.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617431, url, valid)

proc call*(call_617432: Call_GetModifyDBSnapshot_617416;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_617433 = newJObject()
  add(query_617433, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_617433, "EngineVersion", newJString(EngineVersion))
  add(query_617433, "Action", newJString(Action))
  add(query_617433, "OptionGroupName", newJString(OptionGroupName))
  add(query_617433, "Version", newJString(Version))
  result = call_617432.call(nil, query_617433, nil, nil, nil)

var getModifyDBSnapshot* = Call_GetModifyDBSnapshot_617416(
    name: "getModifyDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_GetModifyDBSnapshot_617417, base: "/",
    url: url_GetModifyDBSnapshot_617418, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshotAttribute_617472 = ref object of OpenApiRestCall_612658
proc url_PostModifyDBSnapshotAttribute_617474(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSnapshotAttribute_617473(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617475 = query.getOrDefault("Action")
  valid_617475 = validateParameter(valid_617475, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_617475 != nil:
    section.add "Action", valid_617475
  var valid_617476 = query.getOrDefault("Version")
  valid_617476 = validateParameter(valid_617476, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617476 != nil:
    section.add "Version", valid_617476
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617477 = header.getOrDefault("X-Amz-Signature")
  valid_617477 = validateParameter(valid_617477, JString, required = false,
                                 default = nil)
  if valid_617477 != nil:
    section.add "X-Amz-Signature", valid_617477
  var valid_617478 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617478 = validateParameter(valid_617478, JString, required = false,
                                 default = nil)
  if valid_617478 != nil:
    section.add "X-Amz-Content-Sha256", valid_617478
  var valid_617479 = header.getOrDefault("X-Amz-Date")
  valid_617479 = validateParameter(valid_617479, JString, required = false,
                                 default = nil)
  if valid_617479 != nil:
    section.add "X-Amz-Date", valid_617479
  var valid_617480 = header.getOrDefault("X-Amz-Credential")
  valid_617480 = validateParameter(valid_617480, JString, required = false,
                                 default = nil)
  if valid_617480 != nil:
    section.add "X-Amz-Credential", valid_617480
  var valid_617481 = header.getOrDefault("X-Amz-Security-Token")
  valid_617481 = validateParameter(valid_617481, JString, required = false,
                                 default = nil)
  if valid_617481 != nil:
    section.add "X-Amz-Security-Token", valid_617481
  var valid_617482 = header.getOrDefault("X-Amz-Algorithm")
  valid_617482 = validateParameter(valid_617482, JString, required = false,
                                 default = nil)
  if valid_617482 != nil:
    section.add "X-Amz-Algorithm", valid_617482
  var valid_617483 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617483 = validateParameter(valid_617483, JString, required = false,
                                 default = nil)
  if valid_617483 != nil:
    section.add "X-Amz-SignedHeaders", valid_617483
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_617484 = formData.getOrDefault("AttributeName")
  valid_617484 = validateParameter(valid_617484, JString, required = true,
                                 default = nil)
  if valid_617484 != nil:
    section.add "AttributeName", valid_617484
  var valid_617485 = formData.getOrDefault("ValuesToAdd")
  valid_617485 = validateParameter(valid_617485, JArray, required = false,
                                 default = nil)
  if valid_617485 != nil:
    section.add "ValuesToAdd", valid_617485
  var valid_617486 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_617486 = validateParameter(valid_617486, JString, required = true,
                                 default = nil)
  if valid_617486 != nil:
    section.add "DBSnapshotIdentifier", valid_617486
  var valid_617487 = formData.getOrDefault("ValuesToRemove")
  valid_617487 = validateParameter(valid_617487, JArray, required = false,
                                 default = nil)
  if valid_617487 != nil:
    section.add "ValuesToRemove", valid_617487
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617488: Call_PostModifyDBSnapshotAttribute_617472; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_617488.validator(path, query, header, formData, body)
  let scheme = call_617488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617488.url(scheme.get, call_617488.host, call_617488.base,
                         call_617488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617488, url, valid)

proc call*(call_617489: Call_PostModifyDBSnapshotAttribute_617472;
          AttributeName: string; DBSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil; Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: string (required)
  var query_617490 = newJObject()
  var formData_617491 = newJObject()
  add(formData_617491, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_617491.add "ValuesToAdd", ValuesToAdd
  add(formData_617491, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_617490, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_617491.add "ValuesToRemove", ValuesToRemove
  add(query_617490, "Version", newJString(Version))
  result = call_617489.call(nil, query_617490, nil, formData_617491, nil)

var postModifyDBSnapshotAttribute* = Call_PostModifyDBSnapshotAttribute_617472(
    name: "postModifyDBSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_PostModifyDBSnapshotAttribute_617473, base: "/",
    url: url_PostModifyDBSnapshotAttribute_617474,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshotAttribute_617453 = ref object of OpenApiRestCall_612658
proc url_GetModifyDBSnapshotAttribute_617455(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSnapshotAttribute_617454(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_617456 = query.getOrDefault("ValuesToRemove")
  valid_617456 = validateParameter(valid_617456, JArray, required = false,
                                 default = nil)
  if valid_617456 != nil:
    section.add "ValuesToRemove", valid_617456
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_617457 = query.getOrDefault("DBSnapshotIdentifier")
  valid_617457 = validateParameter(valid_617457, JString, required = true,
                                 default = nil)
  if valid_617457 != nil:
    section.add "DBSnapshotIdentifier", valid_617457
  var valid_617458 = query.getOrDefault("Action")
  valid_617458 = validateParameter(valid_617458, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_617458 != nil:
    section.add "Action", valid_617458
  var valid_617459 = query.getOrDefault("AttributeName")
  valid_617459 = validateParameter(valid_617459, JString, required = true,
                                 default = nil)
  if valid_617459 != nil:
    section.add "AttributeName", valid_617459
  var valid_617460 = query.getOrDefault("ValuesToAdd")
  valid_617460 = validateParameter(valid_617460, JArray, required = false,
                                 default = nil)
  if valid_617460 != nil:
    section.add "ValuesToAdd", valid_617460
  var valid_617461 = query.getOrDefault("Version")
  valid_617461 = validateParameter(valid_617461, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617461 != nil:
    section.add "Version", valid_617461
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617462 = header.getOrDefault("X-Amz-Signature")
  valid_617462 = validateParameter(valid_617462, JString, required = false,
                                 default = nil)
  if valid_617462 != nil:
    section.add "X-Amz-Signature", valid_617462
  var valid_617463 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617463 = validateParameter(valid_617463, JString, required = false,
                                 default = nil)
  if valid_617463 != nil:
    section.add "X-Amz-Content-Sha256", valid_617463
  var valid_617464 = header.getOrDefault("X-Amz-Date")
  valid_617464 = validateParameter(valid_617464, JString, required = false,
                                 default = nil)
  if valid_617464 != nil:
    section.add "X-Amz-Date", valid_617464
  var valid_617465 = header.getOrDefault("X-Amz-Credential")
  valid_617465 = validateParameter(valid_617465, JString, required = false,
                                 default = nil)
  if valid_617465 != nil:
    section.add "X-Amz-Credential", valid_617465
  var valid_617466 = header.getOrDefault("X-Amz-Security-Token")
  valid_617466 = validateParameter(valid_617466, JString, required = false,
                                 default = nil)
  if valid_617466 != nil:
    section.add "X-Amz-Security-Token", valid_617466
  var valid_617467 = header.getOrDefault("X-Amz-Algorithm")
  valid_617467 = validateParameter(valid_617467, JString, required = false,
                                 default = nil)
  if valid_617467 != nil:
    section.add "X-Amz-Algorithm", valid_617467
  var valid_617468 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617468 = validateParameter(valid_617468, JString, required = false,
                                 default = nil)
  if valid_617468 != nil:
    section.add "X-Amz-SignedHeaders", valid_617468
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617469: Call_GetModifyDBSnapshotAttribute_617453; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_617469.validator(path, query, header, formData, body)
  let scheme = call_617469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617469.url(scheme.get, call_617469.host, call_617469.base,
                         call_617469.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617469, url, valid)

proc call*(call_617470: Call_GetModifyDBSnapshotAttribute_617453;
          DBSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBSnapshotAttribute"; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_617471 = newJObject()
  if ValuesToRemove != nil:
    query_617471.add "ValuesToRemove", ValuesToRemove
  add(query_617471, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_617471, "Action", newJString(Action))
  add(query_617471, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_617471.add "ValuesToAdd", ValuesToAdd
  add(query_617471, "Version", newJString(Version))
  result = call_617470.call(nil, query_617471, nil, nil, nil)

var getModifyDBSnapshotAttribute* = Call_GetModifyDBSnapshotAttribute_617453(
    name: "getModifyDBSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_GetModifyDBSnapshotAttribute_617454, base: "/",
    url: url_GetModifyDBSnapshotAttribute_617455,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_617510 = ref object of OpenApiRestCall_612658
proc url_PostModifyDBSubnetGroup_617512(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSubnetGroup_617511(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617513 = query.getOrDefault("Action")
  valid_617513 = validateParameter(valid_617513, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_617513 != nil:
    section.add "Action", valid_617513
  var valid_617514 = query.getOrDefault("Version")
  valid_617514 = validateParameter(valid_617514, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617514 != nil:
    section.add "Version", valid_617514
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617515 = header.getOrDefault("X-Amz-Signature")
  valid_617515 = validateParameter(valid_617515, JString, required = false,
                                 default = nil)
  if valid_617515 != nil:
    section.add "X-Amz-Signature", valid_617515
  var valid_617516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617516 = validateParameter(valid_617516, JString, required = false,
                                 default = nil)
  if valid_617516 != nil:
    section.add "X-Amz-Content-Sha256", valid_617516
  var valid_617517 = header.getOrDefault("X-Amz-Date")
  valid_617517 = validateParameter(valid_617517, JString, required = false,
                                 default = nil)
  if valid_617517 != nil:
    section.add "X-Amz-Date", valid_617517
  var valid_617518 = header.getOrDefault("X-Amz-Credential")
  valid_617518 = validateParameter(valid_617518, JString, required = false,
                                 default = nil)
  if valid_617518 != nil:
    section.add "X-Amz-Credential", valid_617518
  var valid_617519 = header.getOrDefault("X-Amz-Security-Token")
  valid_617519 = validateParameter(valid_617519, JString, required = false,
                                 default = nil)
  if valid_617519 != nil:
    section.add "X-Amz-Security-Token", valid_617519
  var valid_617520 = header.getOrDefault("X-Amz-Algorithm")
  valid_617520 = validateParameter(valid_617520, JString, required = false,
                                 default = nil)
  if valid_617520 != nil:
    section.add "X-Amz-Algorithm", valid_617520
  var valid_617521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617521 = validateParameter(valid_617521, JString, required = false,
                                 default = nil)
  if valid_617521 != nil:
    section.add "X-Amz-SignedHeaders", valid_617521
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  section = newJObject()
  var valid_617522 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_617522 = validateParameter(valid_617522, JString, required = false,
                                 default = nil)
  if valid_617522 != nil:
    section.add "DBSubnetGroupDescription", valid_617522
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_617523 = formData.getOrDefault("DBSubnetGroupName")
  valid_617523 = validateParameter(valid_617523, JString, required = true,
                                 default = nil)
  if valid_617523 != nil:
    section.add "DBSubnetGroupName", valid_617523
  var valid_617524 = formData.getOrDefault("SubnetIds")
  valid_617524 = validateParameter(valid_617524, JArray, required = true, default = nil)
  if valid_617524 != nil:
    section.add "SubnetIds", valid_617524
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617525: Call_PostModifyDBSubnetGroup_617510; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_617525.validator(path, query, header, formData, body)
  let scheme = call_617525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617525.url(scheme.get, call_617525.host, call_617525.base,
                         call_617525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617525, url, valid)

proc call*(call_617526: Call_PostModifyDBSubnetGroup_617510;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string = "";
          Action: string = "ModifyDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  var query_617527 = newJObject()
  var formData_617528 = newJObject()
  add(formData_617528, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_617527, "Action", newJString(Action))
  add(formData_617528, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_617527, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_617528.add "SubnetIds", SubnetIds
  result = call_617526.call(nil, query_617527, nil, formData_617528, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_617510(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_617511, base: "/",
    url: url_PostModifyDBSubnetGroup_617512, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_617492 = ref object of OpenApiRestCall_612658
proc url_GetModifyDBSubnetGroup_617494(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSubnetGroup_617493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_617495 = query.getOrDefault("SubnetIds")
  valid_617495 = validateParameter(valid_617495, JArray, required = true, default = nil)
  if valid_617495 != nil:
    section.add "SubnetIds", valid_617495
  var valid_617496 = query.getOrDefault("Action")
  valid_617496 = validateParameter(valid_617496, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_617496 != nil:
    section.add "Action", valid_617496
  var valid_617497 = query.getOrDefault("DBSubnetGroupDescription")
  valid_617497 = validateParameter(valid_617497, JString, required = false,
                                 default = nil)
  if valid_617497 != nil:
    section.add "DBSubnetGroupDescription", valid_617497
  var valid_617498 = query.getOrDefault("DBSubnetGroupName")
  valid_617498 = validateParameter(valid_617498, JString, required = true,
                                 default = nil)
  if valid_617498 != nil:
    section.add "DBSubnetGroupName", valid_617498
  var valid_617499 = query.getOrDefault("Version")
  valid_617499 = validateParameter(valid_617499, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617499 != nil:
    section.add "Version", valid_617499
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617500 = header.getOrDefault("X-Amz-Signature")
  valid_617500 = validateParameter(valid_617500, JString, required = false,
                                 default = nil)
  if valid_617500 != nil:
    section.add "X-Amz-Signature", valid_617500
  var valid_617501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617501 = validateParameter(valid_617501, JString, required = false,
                                 default = nil)
  if valid_617501 != nil:
    section.add "X-Amz-Content-Sha256", valid_617501
  var valid_617502 = header.getOrDefault("X-Amz-Date")
  valid_617502 = validateParameter(valid_617502, JString, required = false,
                                 default = nil)
  if valid_617502 != nil:
    section.add "X-Amz-Date", valid_617502
  var valid_617503 = header.getOrDefault("X-Amz-Credential")
  valid_617503 = validateParameter(valid_617503, JString, required = false,
                                 default = nil)
  if valid_617503 != nil:
    section.add "X-Amz-Credential", valid_617503
  var valid_617504 = header.getOrDefault("X-Amz-Security-Token")
  valid_617504 = validateParameter(valid_617504, JString, required = false,
                                 default = nil)
  if valid_617504 != nil:
    section.add "X-Amz-Security-Token", valid_617504
  var valid_617505 = header.getOrDefault("X-Amz-Algorithm")
  valid_617505 = validateParameter(valid_617505, JString, required = false,
                                 default = nil)
  if valid_617505 != nil:
    section.add "X-Amz-Algorithm", valid_617505
  var valid_617506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617506 = validateParameter(valid_617506, JString, required = false,
                                 default = nil)
  if valid_617506 != nil:
    section.add "X-Amz-SignedHeaders", valid_617506
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617507: Call_GetModifyDBSubnetGroup_617492; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_617507.validator(path, query, header, formData, body)
  let scheme = call_617507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617507.url(scheme.get, call_617507.host, call_617507.base,
                         call_617507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617507, url, valid)

proc call*(call_617508: Call_GetModifyDBSubnetGroup_617492; SubnetIds: JsonNode;
          DBSubnetGroupName: string; Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_617509 = newJObject()
  if SubnetIds != nil:
    query_617509.add "SubnetIds", SubnetIds
  add(query_617509, "Action", newJString(Action))
  add(query_617509, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_617509, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_617509, "Version", newJString(Version))
  result = call_617508.call(nil, query_617509, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_617492(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_617493, base: "/",
    url: url_GetModifyDBSubnetGroup_617494, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_617549 = ref object of OpenApiRestCall_612658
proc url_PostModifyEventSubscription_617551(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyEventSubscription_617550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617552 = query.getOrDefault("Action")
  valid_617552 = validateParameter(valid_617552, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_617552 != nil:
    section.add "Action", valid_617552
  var valid_617553 = query.getOrDefault("Version")
  valid_617553 = validateParameter(valid_617553, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617553 != nil:
    section.add "Version", valid_617553
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617554 = header.getOrDefault("X-Amz-Signature")
  valid_617554 = validateParameter(valid_617554, JString, required = false,
                                 default = nil)
  if valid_617554 != nil:
    section.add "X-Amz-Signature", valid_617554
  var valid_617555 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617555 = validateParameter(valid_617555, JString, required = false,
                                 default = nil)
  if valid_617555 != nil:
    section.add "X-Amz-Content-Sha256", valid_617555
  var valid_617556 = header.getOrDefault("X-Amz-Date")
  valid_617556 = validateParameter(valid_617556, JString, required = false,
                                 default = nil)
  if valid_617556 != nil:
    section.add "X-Amz-Date", valid_617556
  var valid_617557 = header.getOrDefault("X-Amz-Credential")
  valid_617557 = validateParameter(valid_617557, JString, required = false,
                                 default = nil)
  if valid_617557 != nil:
    section.add "X-Amz-Credential", valid_617557
  var valid_617558 = header.getOrDefault("X-Amz-Security-Token")
  valid_617558 = validateParameter(valid_617558, JString, required = false,
                                 default = nil)
  if valid_617558 != nil:
    section.add "X-Amz-Security-Token", valid_617558
  var valid_617559 = header.getOrDefault("X-Amz-Algorithm")
  valid_617559 = validateParameter(valid_617559, JString, required = false,
                                 default = nil)
  if valid_617559 != nil:
    section.add "X-Amz-Algorithm", valid_617559
  var valid_617560 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617560 = validateParameter(valid_617560, JString, required = false,
                                 default = nil)
  if valid_617560 != nil:
    section.add "X-Amz-SignedHeaders", valid_617560
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  section = newJObject()
  var valid_617561 = formData.getOrDefault("SnsTopicArn")
  valid_617561 = validateParameter(valid_617561, JString, required = false,
                                 default = nil)
  if valid_617561 != nil:
    section.add "SnsTopicArn", valid_617561
  var valid_617562 = formData.getOrDefault("Enabled")
  valid_617562 = validateParameter(valid_617562, JBool, required = false, default = nil)
  if valid_617562 != nil:
    section.add "Enabled", valid_617562
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_617563 = formData.getOrDefault("SubscriptionName")
  valid_617563 = validateParameter(valid_617563, JString, required = true,
                                 default = nil)
  if valid_617563 != nil:
    section.add "SubscriptionName", valid_617563
  var valid_617564 = formData.getOrDefault("SourceType")
  valid_617564 = validateParameter(valid_617564, JString, required = false,
                                 default = nil)
  if valid_617564 != nil:
    section.add "SourceType", valid_617564
  var valid_617565 = formData.getOrDefault("EventCategories")
  valid_617565 = validateParameter(valid_617565, JArray, required = false,
                                 default = nil)
  if valid_617565 != nil:
    section.add "EventCategories", valid_617565
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617566: Call_PostModifyEventSubscription_617549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_617566.validator(path, query, header, formData, body)
  let scheme = call_617566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617566.url(scheme.get, call_617566.host, call_617566.base,
                         call_617566.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617566, url, valid)

proc call*(call_617567: Call_PostModifyEventSubscription_617549;
          SubscriptionName: string; SnsTopicArn: string = ""; Enabled: bool = false;
          SourceType: string = ""; EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617568 = newJObject()
  var formData_617569 = newJObject()
  add(formData_617569, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_617569, "Enabled", newJBool(Enabled))
  add(formData_617569, "SubscriptionName", newJString(SubscriptionName))
  add(formData_617569, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_617569.add "EventCategories", EventCategories
  add(query_617568, "Action", newJString(Action))
  add(query_617568, "Version", newJString(Version))
  result = call_617567.call(nil, query_617568, nil, formData_617569, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_617549(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_617550, base: "/",
    url: url_PostModifyEventSubscription_617551,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_617529 = ref object of OpenApiRestCall_612658
proc url_GetModifyEventSubscription_617531(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyEventSubscription_617530(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_617532 = query.getOrDefault("SourceType")
  valid_617532 = validateParameter(valid_617532, JString, required = false,
                                 default = nil)
  if valid_617532 != nil:
    section.add "SourceType", valid_617532
  var valid_617533 = query.getOrDefault("Enabled")
  valid_617533 = validateParameter(valid_617533, JBool, required = false, default = nil)
  if valid_617533 != nil:
    section.add "Enabled", valid_617533
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_617534 = query.getOrDefault("SubscriptionName")
  valid_617534 = validateParameter(valid_617534, JString, required = true,
                                 default = nil)
  if valid_617534 != nil:
    section.add "SubscriptionName", valid_617534
  var valid_617535 = query.getOrDefault("EventCategories")
  valid_617535 = validateParameter(valid_617535, JArray, required = false,
                                 default = nil)
  if valid_617535 != nil:
    section.add "EventCategories", valid_617535
  var valid_617536 = query.getOrDefault("Action")
  valid_617536 = validateParameter(valid_617536, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_617536 != nil:
    section.add "Action", valid_617536
  var valid_617537 = query.getOrDefault("SnsTopicArn")
  valid_617537 = validateParameter(valid_617537, JString, required = false,
                                 default = nil)
  if valid_617537 != nil:
    section.add "SnsTopicArn", valid_617537
  var valid_617538 = query.getOrDefault("Version")
  valid_617538 = validateParameter(valid_617538, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617538 != nil:
    section.add "Version", valid_617538
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617539 = header.getOrDefault("X-Amz-Signature")
  valid_617539 = validateParameter(valid_617539, JString, required = false,
                                 default = nil)
  if valid_617539 != nil:
    section.add "X-Amz-Signature", valid_617539
  var valid_617540 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617540 = validateParameter(valid_617540, JString, required = false,
                                 default = nil)
  if valid_617540 != nil:
    section.add "X-Amz-Content-Sha256", valid_617540
  var valid_617541 = header.getOrDefault("X-Amz-Date")
  valid_617541 = validateParameter(valid_617541, JString, required = false,
                                 default = nil)
  if valid_617541 != nil:
    section.add "X-Amz-Date", valid_617541
  var valid_617542 = header.getOrDefault("X-Amz-Credential")
  valid_617542 = validateParameter(valid_617542, JString, required = false,
                                 default = nil)
  if valid_617542 != nil:
    section.add "X-Amz-Credential", valid_617542
  var valid_617543 = header.getOrDefault("X-Amz-Security-Token")
  valid_617543 = validateParameter(valid_617543, JString, required = false,
                                 default = nil)
  if valid_617543 != nil:
    section.add "X-Amz-Security-Token", valid_617543
  var valid_617544 = header.getOrDefault("X-Amz-Algorithm")
  valid_617544 = validateParameter(valid_617544, JString, required = false,
                                 default = nil)
  if valid_617544 != nil:
    section.add "X-Amz-Algorithm", valid_617544
  var valid_617545 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617545 = validateParameter(valid_617545, JString, required = false,
                                 default = nil)
  if valid_617545 != nil:
    section.add "X-Amz-SignedHeaders", valid_617545
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617546: Call_GetModifyEventSubscription_617529; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_617546.validator(path, query, header, formData, body)
  let scheme = call_617546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617546.url(scheme.get, call_617546.host, call_617546.base,
                         call_617546.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617546, url, valid)

proc call*(call_617547: Call_GetModifyEventSubscription_617529;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_617548 = newJObject()
  add(query_617548, "SourceType", newJString(SourceType))
  add(query_617548, "Enabled", newJBool(Enabled))
  add(query_617548, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_617548.add "EventCategories", EventCategories
  add(query_617548, "Action", newJString(Action))
  add(query_617548, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_617548, "Version", newJString(Version))
  result = call_617547.call(nil, query_617548, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_617529(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_617530, base: "/",
    url: url_GetModifyEventSubscription_617531,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyGlobalCluster_617588 = ref object of OpenApiRestCall_612658
proc url_PostModifyGlobalCluster_617590(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyGlobalCluster_617589(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617591 = query.getOrDefault("Action")
  valid_617591 = validateParameter(valid_617591, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_617591 != nil:
    section.add "Action", valid_617591
  var valid_617592 = query.getOrDefault("Version")
  valid_617592 = validateParameter(valid_617592, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617592 != nil:
    section.add "Version", valid_617592
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617593 = header.getOrDefault("X-Amz-Signature")
  valid_617593 = validateParameter(valid_617593, JString, required = false,
                                 default = nil)
  if valid_617593 != nil:
    section.add "X-Amz-Signature", valid_617593
  var valid_617594 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617594 = validateParameter(valid_617594, JString, required = false,
                                 default = nil)
  if valid_617594 != nil:
    section.add "X-Amz-Content-Sha256", valid_617594
  var valid_617595 = header.getOrDefault("X-Amz-Date")
  valid_617595 = validateParameter(valid_617595, JString, required = false,
                                 default = nil)
  if valid_617595 != nil:
    section.add "X-Amz-Date", valid_617595
  var valid_617596 = header.getOrDefault("X-Amz-Credential")
  valid_617596 = validateParameter(valid_617596, JString, required = false,
                                 default = nil)
  if valid_617596 != nil:
    section.add "X-Amz-Credential", valid_617596
  var valid_617597 = header.getOrDefault("X-Amz-Security-Token")
  valid_617597 = validateParameter(valid_617597, JString, required = false,
                                 default = nil)
  if valid_617597 != nil:
    section.add "X-Amz-Security-Token", valid_617597
  var valid_617598 = header.getOrDefault("X-Amz-Algorithm")
  valid_617598 = validateParameter(valid_617598, JString, required = false,
                                 default = nil)
  if valid_617598 != nil:
    section.add "X-Amz-Algorithm", valid_617598
  var valid_617599 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617599 = validateParameter(valid_617599, JString, required = false,
                                 default = nil)
  if valid_617599 != nil:
    section.add "X-Amz-SignedHeaders", valid_617599
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_617600 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_617600 = validateParameter(valid_617600, JString, required = false,
                                 default = nil)
  if valid_617600 != nil:
    section.add "GlobalClusterIdentifier", valid_617600
  var valid_617601 = formData.getOrDefault("DeletionProtection")
  valid_617601 = validateParameter(valid_617601, JBool, required = false, default = nil)
  if valid_617601 != nil:
    section.add "DeletionProtection", valid_617601
  var valid_617602 = formData.getOrDefault("NewGlobalClusterIdentifier")
  valid_617602 = validateParameter(valid_617602, JString, required = false,
                                 default = nil)
  if valid_617602 != nil:
    section.add "NewGlobalClusterIdentifier", valid_617602
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617603: Call_PostModifyGlobalCluster_617588; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617603.validator(path, query, header, formData, body)
  let scheme = call_617603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617603.url(scheme.get, call_617603.host, call_617603.base,
                         call_617603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617603, url, valid)

proc call*(call_617604: Call_PostModifyGlobalCluster_617588;
          GlobalClusterIdentifier: string = "";
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31";
          DeletionProtection: bool = false; NewGlobalClusterIdentifier: string = ""): Recallable =
  ## postModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  var query_617605 = newJObject()
  var formData_617606 = newJObject()
  add(formData_617606, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_617605, "Action", newJString(Action))
  add(query_617605, "Version", newJString(Version))
  add(formData_617606, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_617606, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  result = call_617604.call(nil, query_617605, nil, formData_617606, nil)

var postModifyGlobalCluster* = Call_PostModifyGlobalCluster_617588(
    name: "postModifyGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_PostModifyGlobalCluster_617589, base: "/",
    url: url_PostModifyGlobalCluster_617590, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyGlobalCluster_617570 = ref object of OpenApiRestCall_612658
proc url_GetModifyGlobalCluster_617572(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyGlobalCluster_617571(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617573 = query.getOrDefault("NewGlobalClusterIdentifier")
  valid_617573 = validateParameter(valid_617573, JString, required = false,
                                 default = nil)
  if valid_617573 != nil:
    section.add "NewGlobalClusterIdentifier", valid_617573
  var valid_617574 = query.getOrDefault("GlobalClusterIdentifier")
  valid_617574 = validateParameter(valid_617574, JString, required = false,
                                 default = nil)
  if valid_617574 != nil:
    section.add "GlobalClusterIdentifier", valid_617574
  var valid_617575 = query.getOrDefault("DeletionProtection")
  valid_617575 = validateParameter(valid_617575, JBool, required = false, default = nil)
  if valid_617575 != nil:
    section.add "DeletionProtection", valid_617575
  var valid_617576 = query.getOrDefault("Action")
  valid_617576 = validateParameter(valid_617576, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_617576 != nil:
    section.add "Action", valid_617576
  var valid_617577 = query.getOrDefault("Version")
  valid_617577 = validateParameter(valid_617577, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617577 != nil:
    section.add "Version", valid_617577
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617578 = header.getOrDefault("X-Amz-Signature")
  valid_617578 = validateParameter(valid_617578, JString, required = false,
                                 default = nil)
  if valid_617578 != nil:
    section.add "X-Amz-Signature", valid_617578
  var valid_617579 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617579 = validateParameter(valid_617579, JString, required = false,
                                 default = nil)
  if valid_617579 != nil:
    section.add "X-Amz-Content-Sha256", valid_617579
  var valid_617580 = header.getOrDefault("X-Amz-Date")
  valid_617580 = validateParameter(valid_617580, JString, required = false,
                                 default = nil)
  if valid_617580 != nil:
    section.add "X-Amz-Date", valid_617580
  var valid_617581 = header.getOrDefault("X-Amz-Credential")
  valid_617581 = validateParameter(valid_617581, JString, required = false,
                                 default = nil)
  if valid_617581 != nil:
    section.add "X-Amz-Credential", valid_617581
  var valid_617582 = header.getOrDefault("X-Amz-Security-Token")
  valid_617582 = validateParameter(valid_617582, JString, required = false,
                                 default = nil)
  if valid_617582 != nil:
    section.add "X-Amz-Security-Token", valid_617582
  var valid_617583 = header.getOrDefault("X-Amz-Algorithm")
  valid_617583 = validateParameter(valid_617583, JString, required = false,
                                 default = nil)
  if valid_617583 != nil:
    section.add "X-Amz-Algorithm", valid_617583
  var valid_617584 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617584 = validateParameter(valid_617584, JString, required = false,
                                 default = nil)
  if valid_617584 != nil:
    section.add "X-Amz-SignedHeaders", valid_617584
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617585: Call_GetModifyGlobalCluster_617570; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617585.validator(path, query, header, formData, body)
  let scheme = call_617585.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617585.url(scheme.get, call_617585.host, call_617585.base,
                         call_617585.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617585, url, valid)

proc call*(call_617586: Call_GetModifyGlobalCluster_617570;
          NewGlobalClusterIdentifier: string = "";
          GlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617587 = newJObject()
  add(query_617587, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_617587, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_617587, "DeletionProtection", newJBool(DeletionProtection))
  add(query_617587, "Action", newJString(Action))
  add(query_617587, "Version", newJString(Version))
  result = call_617586.call(nil, query_617587, nil, nil, nil)

var getModifyGlobalCluster* = Call_GetModifyGlobalCluster_617570(
    name: "getModifyGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_GetModifyGlobalCluster_617571, base: "/",
    url: url_GetModifyGlobalCluster_617572, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyOptionGroup_617626 = ref object of OpenApiRestCall_612658
proc url_PostModifyOptionGroup_617628(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyOptionGroup_617627(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617629 = query.getOrDefault("Action")
  valid_617629 = validateParameter(valid_617629, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_617629 != nil:
    section.add "Action", valid_617629
  var valid_617630 = query.getOrDefault("Version")
  valid_617630 = validateParameter(valid_617630, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617630 != nil:
    section.add "Version", valid_617630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617631 = header.getOrDefault("X-Amz-Signature")
  valid_617631 = validateParameter(valid_617631, JString, required = false,
                                 default = nil)
  if valid_617631 != nil:
    section.add "X-Amz-Signature", valid_617631
  var valid_617632 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617632 = validateParameter(valid_617632, JString, required = false,
                                 default = nil)
  if valid_617632 != nil:
    section.add "X-Amz-Content-Sha256", valid_617632
  var valid_617633 = header.getOrDefault("X-Amz-Date")
  valid_617633 = validateParameter(valid_617633, JString, required = false,
                                 default = nil)
  if valid_617633 != nil:
    section.add "X-Amz-Date", valid_617633
  var valid_617634 = header.getOrDefault("X-Amz-Credential")
  valid_617634 = validateParameter(valid_617634, JString, required = false,
                                 default = nil)
  if valid_617634 != nil:
    section.add "X-Amz-Credential", valid_617634
  var valid_617635 = header.getOrDefault("X-Amz-Security-Token")
  valid_617635 = validateParameter(valid_617635, JString, required = false,
                                 default = nil)
  if valid_617635 != nil:
    section.add "X-Amz-Security-Token", valid_617635
  var valid_617636 = header.getOrDefault("X-Amz-Algorithm")
  valid_617636 = validateParameter(valid_617636, JString, required = false,
                                 default = nil)
  if valid_617636 != nil:
    section.add "X-Amz-Algorithm", valid_617636
  var valid_617637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617637 = validateParameter(valid_617637, JString, required = false,
                                 default = nil)
  if valid_617637 != nil:
    section.add "X-Amz-SignedHeaders", valid_617637
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  section = newJObject()
  var valid_617638 = formData.getOrDefault("OptionsToRemove")
  valid_617638 = validateParameter(valid_617638, JArray, required = false,
                                 default = nil)
  if valid_617638 != nil:
    section.add "OptionsToRemove", valid_617638
  var valid_617639 = formData.getOrDefault("ApplyImmediately")
  valid_617639 = validateParameter(valid_617639, JBool, required = false, default = nil)
  if valid_617639 != nil:
    section.add "ApplyImmediately", valid_617639
  var valid_617640 = formData.getOrDefault("OptionsToInclude")
  valid_617640 = validateParameter(valid_617640, JArray, required = false,
                                 default = nil)
  if valid_617640 != nil:
    section.add "OptionsToInclude", valid_617640
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_617641 = formData.getOrDefault("OptionGroupName")
  valid_617641 = validateParameter(valid_617641, JString, required = true,
                                 default = nil)
  if valid_617641 != nil:
    section.add "OptionGroupName", valid_617641
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617642: Call_PostModifyOptionGroup_617626; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_617642.validator(path, query, header, formData, body)
  let scheme = call_617642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617642.url(scheme.get, call_617642.host, call_617642.base,
                         call_617642.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617642, url, valid)

proc call*(call_617643: Call_PostModifyOptionGroup_617626; OptionGroupName: string;
          OptionsToRemove: JsonNode = nil; ApplyImmediately: bool = false;
          OptionsToInclude: JsonNode = nil; Action: string = "ModifyOptionGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_617644 = newJObject()
  var formData_617645 = newJObject()
  if OptionsToRemove != nil:
    formData_617645.add "OptionsToRemove", OptionsToRemove
  add(formData_617645, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToInclude != nil:
    formData_617645.add "OptionsToInclude", OptionsToInclude
  add(query_617644, "Action", newJString(Action))
  add(formData_617645, "OptionGroupName", newJString(OptionGroupName))
  add(query_617644, "Version", newJString(Version))
  result = call_617643.call(nil, query_617644, nil, formData_617645, nil)

var postModifyOptionGroup* = Call_PostModifyOptionGroup_617626(
    name: "postModifyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_PostModifyOptionGroup_617627, base: "/",
    url: url_PostModifyOptionGroup_617628, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyOptionGroup_617607 = ref object of OpenApiRestCall_612658
proc url_GetModifyOptionGroup_617609(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyOptionGroup_617608(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_617610 = query.getOrDefault("Action")
  valid_617610 = validateParameter(valid_617610, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_617610 != nil:
    section.add "Action", valid_617610
  var valid_617611 = query.getOrDefault("ApplyImmediately")
  valid_617611 = validateParameter(valid_617611, JBool, required = false, default = nil)
  if valid_617611 != nil:
    section.add "ApplyImmediately", valid_617611
  var valid_617612 = query.getOrDefault("OptionsToRemove")
  valid_617612 = validateParameter(valid_617612, JArray, required = false,
                                 default = nil)
  if valid_617612 != nil:
    section.add "OptionsToRemove", valid_617612
  var valid_617613 = query.getOrDefault("OptionsToInclude")
  valid_617613 = validateParameter(valid_617613, JArray, required = false,
                                 default = nil)
  if valid_617613 != nil:
    section.add "OptionsToInclude", valid_617613
  var valid_617614 = query.getOrDefault("OptionGroupName")
  valid_617614 = validateParameter(valid_617614, JString, required = true,
                                 default = nil)
  if valid_617614 != nil:
    section.add "OptionGroupName", valid_617614
  var valid_617615 = query.getOrDefault("Version")
  valid_617615 = validateParameter(valid_617615, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617615 != nil:
    section.add "Version", valid_617615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617616 = header.getOrDefault("X-Amz-Signature")
  valid_617616 = validateParameter(valid_617616, JString, required = false,
                                 default = nil)
  if valid_617616 != nil:
    section.add "X-Amz-Signature", valid_617616
  var valid_617617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617617 = validateParameter(valid_617617, JString, required = false,
                                 default = nil)
  if valid_617617 != nil:
    section.add "X-Amz-Content-Sha256", valid_617617
  var valid_617618 = header.getOrDefault("X-Amz-Date")
  valid_617618 = validateParameter(valid_617618, JString, required = false,
                                 default = nil)
  if valid_617618 != nil:
    section.add "X-Amz-Date", valid_617618
  var valid_617619 = header.getOrDefault("X-Amz-Credential")
  valid_617619 = validateParameter(valid_617619, JString, required = false,
                                 default = nil)
  if valid_617619 != nil:
    section.add "X-Amz-Credential", valid_617619
  var valid_617620 = header.getOrDefault("X-Amz-Security-Token")
  valid_617620 = validateParameter(valid_617620, JString, required = false,
                                 default = nil)
  if valid_617620 != nil:
    section.add "X-Amz-Security-Token", valid_617620
  var valid_617621 = header.getOrDefault("X-Amz-Algorithm")
  valid_617621 = validateParameter(valid_617621, JString, required = false,
                                 default = nil)
  if valid_617621 != nil:
    section.add "X-Amz-Algorithm", valid_617621
  var valid_617622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617622 = validateParameter(valid_617622, JString, required = false,
                                 default = nil)
  if valid_617622 != nil:
    section.add "X-Amz-SignedHeaders", valid_617622
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617623: Call_GetModifyOptionGroup_617607; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_617623.validator(path, query, header, formData, body)
  let scheme = call_617623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617623.url(scheme.get, call_617623.host, call_617623.base,
                         call_617623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617623, url, valid)

proc call*(call_617624: Call_GetModifyOptionGroup_617607; OptionGroupName: string;
          Action: string = "ModifyOptionGroup"; ApplyImmediately: bool = false;
          OptionsToRemove: JsonNode = nil; OptionsToInclude: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyOptionGroup
  ## Modifies an existing option group.
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_617625 = newJObject()
  add(query_617625, "Action", newJString(Action))
  add(query_617625, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToRemove != nil:
    query_617625.add "OptionsToRemove", OptionsToRemove
  if OptionsToInclude != nil:
    query_617625.add "OptionsToInclude", OptionsToInclude
  add(query_617625, "OptionGroupName", newJString(OptionGroupName))
  add(query_617625, "Version", newJString(Version))
  result = call_617624.call(nil, query_617625, nil, nil, nil)

var getModifyOptionGroup* = Call_GetModifyOptionGroup_617607(
    name: "getModifyOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_GetModifyOptionGroup_617608, base: "/",
    url: url_GetModifyOptionGroup_617609, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplica_617664 = ref object of OpenApiRestCall_612658
proc url_PostPromoteReadReplica_617666(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplica_617665(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617667 = query.getOrDefault("Action")
  valid_617667 = validateParameter(valid_617667, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_617667 != nil:
    section.add "Action", valid_617667
  var valid_617668 = query.getOrDefault("Version")
  valid_617668 = validateParameter(valid_617668, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617668 != nil:
    section.add "Version", valid_617668
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617669 = header.getOrDefault("X-Amz-Signature")
  valid_617669 = validateParameter(valid_617669, JString, required = false,
                                 default = nil)
  if valid_617669 != nil:
    section.add "X-Amz-Signature", valid_617669
  var valid_617670 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617670 = validateParameter(valid_617670, JString, required = false,
                                 default = nil)
  if valid_617670 != nil:
    section.add "X-Amz-Content-Sha256", valid_617670
  var valid_617671 = header.getOrDefault("X-Amz-Date")
  valid_617671 = validateParameter(valid_617671, JString, required = false,
                                 default = nil)
  if valid_617671 != nil:
    section.add "X-Amz-Date", valid_617671
  var valid_617672 = header.getOrDefault("X-Amz-Credential")
  valid_617672 = validateParameter(valid_617672, JString, required = false,
                                 default = nil)
  if valid_617672 != nil:
    section.add "X-Amz-Credential", valid_617672
  var valid_617673 = header.getOrDefault("X-Amz-Security-Token")
  valid_617673 = validateParameter(valid_617673, JString, required = false,
                                 default = nil)
  if valid_617673 != nil:
    section.add "X-Amz-Security-Token", valid_617673
  var valid_617674 = header.getOrDefault("X-Amz-Algorithm")
  valid_617674 = validateParameter(valid_617674, JString, required = false,
                                 default = nil)
  if valid_617674 != nil:
    section.add "X-Amz-Algorithm", valid_617674
  var valid_617675 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617675 = validateParameter(valid_617675, JString, required = false,
                                 default = nil)
  if valid_617675 != nil:
    section.add "X-Amz-SignedHeaders", valid_617675
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  section = newJObject()
  var valid_617676 = formData.getOrDefault("PreferredBackupWindow")
  valid_617676 = validateParameter(valid_617676, JString, required = false,
                                 default = nil)
  if valid_617676 != nil:
    section.add "PreferredBackupWindow", valid_617676
  var valid_617677 = formData.getOrDefault("BackupRetentionPeriod")
  valid_617677 = validateParameter(valid_617677, JInt, required = false, default = nil)
  if valid_617677 != nil:
    section.add "BackupRetentionPeriod", valid_617677
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_617678 = formData.getOrDefault("DBInstanceIdentifier")
  valid_617678 = validateParameter(valid_617678, JString, required = true,
                                 default = nil)
  if valid_617678 != nil:
    section.add "DBInstanceIdentifier", valid_617678
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617679: Call_PostPromoteReadReplica_617664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_617679.validator(path, query, header, formData, body)
  let scheme = call_617679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617679.url(scheme.get, call_617679.host, call_617679.base,
                         call_617679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617679, url, valid)

proc call*(call_617680: Call_PostPromoteReadReplica_617664;
          DBInstanceIdentifier: string; PreferredBackupWindow: string = "";
          BackupRetentionPeriod: int = 0; Action: string = "PromoteReadReplica";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617681 = newJObject()
  var formData_617682 = newJObject()
  add(formData_617682, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_617682, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_617682, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_617681, "Action", newJString(Action))
  add(query_617681, "Version", newJString(Version))
  result = call_617680.call(nil, query_617681, nil, formData_617682, nil)

var postPromoteReadReplica* = Call_PostPromoteReadReplica_617664(
    name: "postPromoteReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_PostPromoteReadReplica_617665, base: "/",
    url: url_PostPromoteReadReplica_617666, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplica_617646 = ref object of OpenApiRestCall_612658
proc url_GetPromoteReadReplica_617648(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplica_617647(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_617649 = query.getOrDefault("DBInstanceIdentifier")
  valid_617649 = validateParameter(valid_617649, JString, required = true,
                                 default = nil)
  if valid_617649 != nil:
    section.add "DBInstanceIdentifier", valid_617649
  var valid_617650 = query.getOrDefault("BackupRetentionPeriod")
  valid_617650 = validateParameter(valid_617650, JInt, required = false, default = nil)
  if valid_617650 != nil:
    section.add "BackupRetentionPeriod", valid_617650
  var valid_617651 = query.getOrDefault("Action")
  valid_617651 = validateParameter(valid_617651, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_617651 != nil:
    section.add "Action", valid_617651
  var valid_617652 = query.getOrDefault("Version")
  valid_617652 = validateParameter(valid_617652, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617652 != nil:
    section.add "Version", valid_617652
  var valid_617653 = query.getOrDefault("PreferredBackupWindow")
  valid_617653 = validateParameter(valid_617653, JString, required = false,
                                 default = nil)
  if valid_617653 != nil:
    section.add "PreferredBackupWindow", valid_617653
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617654 = header.getOrDefault("X-Amz-Signature")
  valid_617654 = validateParameter(valid_617654, JString, required = false,
                                 default = nil)
  if valid_617654 != nil:
    section.add "X-Amz-Signature", valid_617654
  var valid_617655 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617655 = validateParameter(valid_617655, JString, required = false,
                                 default = nil)
  if valid_617655 != nil:
    section.add "X-Amz-Content-Sha256", valid_617655
  var valid_617656 = header.getOrDefault("X-Amz-Date")
  valid_617656 = validateParameter(valid_617656, JString, required = false,
                                 default = nil)
  if valid_617656 != nil:
    section.add "X-Amz-Date", valid_617656
  var valid_617657 = header.getOrDefault("X-Amz-Credential")
  valid_617657 = validateParameter(valid_617657, JString, required = false,
                                 default = nil)
  if valid_617657 != nil:
    section.add "X-Amz-Credential", valid_617657
  var valid_617658 = header.getOrDefault("X-Amz-Security-Token")
  valid_617658 = validateParameter(valid_617658, JString, required = false,
                                 default = nil)
  if valid_617658 != nil:
    section.add "X-Amz-Security-Token", valid_617658
  var valid_617659 = header.getOrDefault("X-Amz-Algorithm")
  valid_617659 = validateParameter(valid_617659, JString, required = false,
                                 default = nil)
  if valid_617659 != nil:
    section.add "X-Amz-Algorithm", valid_617659
  var valid_617660 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617660 = validateParameter(valid_617660, JString, required = false,
                                 default = nil)
  if valid_617660 != nil:
    section.add "X-Amz-SignedHeaders", valid_617660
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617661: Call_GetPromoteReadReplica_617646; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_617661.validator(path, query, header, formData, body)
  let scheme = call_617661.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617661.url(scheme.get, call_617661.host, call_617661.base,
                         call_617661.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617661, url, valid)

proc call*(call_617662: Call_GetPromoteReadReplica_617646;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; Version: string = "2014-10-31";
          PreferredBackupWindow: string = ""): Recallable =
  ## getPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  var query_617663 = newJObject()
  add(query_617663, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_617663, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_617663, "Action", newJString(Action))
  add(query_617663, "Version", newJString(Version))
  add(query_617663, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  result = call_617662.call(nil, query_617663, nil, nil, nil)

var getPromoteReadReplica* = Call_GetPromoteReadReplica_617646(
    name: "getPromoteReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_GetPromoteReadReplica_617647, base: "/",
    url: url_GetPromoteReadReplica_617648, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_617699 = ref object of OpenApiRestCall_612658
proc url_PostPromoteReadReplicaDBCluster_617701(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_617700(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617702 = query.getOrDefault("Action")
  valid_617702 = validateParameter(valid_617702, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_617702 != nil:
    section.add "Action", valid_617702
  var valid_617703 = query.getOrDefault("Version")
  valid_617703 = validateParameter(valid_617703, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617703 != nil:
    section.add "Version", valid_617703
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617704 = header.getOrDefault("X-Amz-Signature")
  valid_617704 = validateParameter(valid_617704, JString, required = false,
                                 default = nil)
  if valid_617704 != nil:
    section.add "X-Amz-Signature", valid_617704
  var valid_617705 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617705 = validateParameter(valid_617705, JString, required = false,
                                 default = nil)
  if valid_617705 != nil:
    section.add "X-Amz-Content-Sha256", valid_617705
  var valid_617706 = header.getOrDefault("X-Amz-Date")
  valid_617706 = validateParameter(valid_617706, JString, required = false,
                                 default = nil)
  if valid_617706 != nil:
    section.add "X-Amz-Date", valid_617706
  var valid_617707 = header.getOrDefault("X-Amz-Credential")
  valid_617707 = validateParameter(valid_617707, JString, required = false,
                                 default = nil)
  if valid_617707 != nil:
    section.add "X-Amz-Credential", valid_617707
  var valid_617708 = header.getOrDefault("X-Amz-Security-Token")
  valid_617708 = validateParameter(valid_617708, JString, required = false,
                                 default = nil)
  if valid_617708 != nil:
    section.add "X-Amz-Security-Token", valid_617708
  var valid_617709 = header.getOrDefault("X-Amz-Algorithm")
  valid_617709 = validateParameter(valid_617709, JString, required = false,
                                 default = nil)
  if valid_617709 != nil:
    section.add "X-Amz-Algorithm", valid_617709
  var valid_617710 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617710 = validateParameter(valid_617710, JString, required = false,
                                 default = nil)
  if valid_617710 != nil:
    section.add "X-Amz-SignedHeaders", valid_617710
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_617711 = formData.getOrDefault("DBClusterIdentifier")
  valid_617711 = validateParameter(valid_617711, JString, required = true,
                                 default = nil)
  if valid_617711 != nil:
    section.add "DBClusterIdentifier", valid_617711
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617712: Call_PostPromoteReadReplicaDBCluster_617699;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617712.validator(path, query, header, formData, body)
  let scheme = call_617712.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617712.url(scheme.get, call_617712.host, call_617712.base,
                         call_617712.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617712, url, valid)

proc call*(call_617713: Call_PostPromoteReadReplicaDBCluster_617699;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  var query_617714 = newJObject()
  var formData_617715 = newJObject()
  add(query_617714, "Action", newJString(Action))
  add(query_617714, "Version", newJString(Version))
  add(formData_617715, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_617713.call(nil, query_617714, nil, formData_617715, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_617699(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_617700, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_617701,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_617683 = ref object of OpenApiRestCall_612658
proc url_GetPromoteReadReplicaDBCluster_617685(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_617684(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_617686 = query.getOrDefault("DBClusterIdentifier")
  valid_617686 = validateParameter(valid_617686, JString, required = true,
                                 default = nil)
  if valid_617686 != nil:
    section.add "DBClusterIdentifier", valid_617686
  var valid_617687 = query.getOrDefault("Action")
  valid_617687 = validateParameter(valid_617687, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_617687 != nil:
    section.add "Action", valid_617687
  var valid_617688 = query.getOrDefault("Version")
  valid_617688 = validateParameter(valid_617688, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617688 != nil:
    section.add "Version", valid_617688
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617689 = header.getOrDefault("X-Amz-Signature")
  valid_617689 = validateParameter(valid_617689, JString, required = false,
                                 default = nil)
  if valid_617689 != nil:
    section.add "X-Amz-Signature", valid_617689
  var valid_617690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617690 = validateParameter(valid_617690, JString, required = false,
                                 default = nil)
  if valid_617690 != nil:
    section.add "X-Amz-Content-Sha256", valid_617690
  var valid_617691 = header.getOrDefault("X-Amz-Date")
  valid_617691 = validateParameter(valid_617691, JString, required = false,
                                 default = nil)
  if valid_617691 != nil:
    section.add "X-Amz-Date", valid_617691
  var valid_617692 = header.getOrDefault("X-Amz-Credential")
  valid_617692 = validateParameter(valid_617692, JString, required = false,
                                 default = nil)
  if valid_617692 != nil:
    section.add "X-Amz-Credential", valid_617692
  var valid_617693 = header.getOrDefault("X-Amz-Security-Token")
  valid_617693 = validateParameter(valid_617693, JString, required = false,
                                 default = nil)
  if valid_617693 != nil:
    section.add "X-Amz-Security-Token", valid_617693
  var valid_617694 = header.getOrDefault("X-Amz-Algorithm")
  valid_617694 = validateParameter(valid_617694, JString, required = false,
                                 default = nil)
  if valid_617694 != nil:
    section.add "X-Amz-Algorithm", valid_617694
  var valid_617695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617695 = validateParameter(valid_617695, JString, required = false,
                                 default = nil)
  if valid_617695 != nil:
    section.add "X-Amz-SignedHeaders", valid_617695
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617696: Call_GetPromoteReadReplicaDBCluster_617683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617696.validator(path, query, header, formData, body)
  let scheme = call_617696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617696.url(scheme.get, call_617696.host, call_617696.base,
                         call_617696.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617696, url, valid)

proc call*(call_617697: Call_GetPromoteReadReplicaDBCluster_617683;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617698 = newJObject()
  add(query_617698, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_617698, "Action", newJString(Action))
  add(query_617698, "Version", newJString(Version))
  result = call_617697.call(nil, query_617698, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_617683(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_617684, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_617685,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedDBInstancesOffering_617735 = ref object of OpenApiRestCall_612658
proc url_PostPurchaseReservedDBInstancesOffering_617737(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPurchaseReservedDBInstancesOffering_617736(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617738 = query.getOrDefault("Action")
  valid_617738 = validateParameter(valid_617738, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_617738 != nil:
    section.add "Action", valid_617738
  var valid_617739 = query.getOrDefault("Version")
  valid_617739 = validateParameter(valid_617739, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617739 != nil:
    section.add "Version", valid_617739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617740 = header.getOrDefault("X-Amz-Signature")
  valid_617740 = validateParameter(valid_617740, JString, required = false,
                                 default = nil)
  if valid_617740 != nil:
    section.add "X-Amz-Signature", valid_617740
  var valid_617741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617741 = validateParameter(valid_617741, JString, required = false,
                                 default = nil)
  if valid_617741 != nil:
    section.add "X-Amz-Content-Sha256", valid_617741
  var valid_617742 = header.getOrDefault("X-Amz-Date")
  valid_617742 = validateParameter(valid_617742, JString, required = false,
                                 default = nil)
  if valid_617742 != nil:
    section.add "X-Amz-Date", valid_617742
  var valid_617743 = header.getOrDefault("X-Amz-Credential")
  valid_617743 = validateParameter(valid_617743, JString, required = false,
                                 default = nil)
  if valid_617743 != nil:
    section.add "X-Amz-Credential", valid_617743
  var valid_617744 = header.getOrDefault("X-Amz-Security-Token")
  valid_617744 = validateParameter(valid_617744, JString, required = false,
                                 default = nil)
  if valid_617744 != nil:
    section.add "X-Amz-Security-Token", valid_617744
  var valid_617745 = header.getOrDefault("X-Amz-Algorithm")
  valid_617745 = validateParameter(valid_617745, JString, required = false,
                                 default = nil)
  if valid_617745 != nil:
    section.add "X-Amz-Algorithm", valid_617745
  var valid_617746 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617746 = validateParameter(valid_617746, JString, required = false,
                                 default = nil)
  if valid_617746 != nil:
    section.add "X-Amz-SignedHeaders", valid_617746
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  section = newJObject()
  var valid_617747 = formData.getOrDefault("ReservedDBInstanceId")
  valid_617747 = validateParameter(valid_617747, JString, required = false,
                                 default = nil)
  if valid_617747 != nil:
    section.add "ReservedDBInstanceId", valid_617747
  var valid_617748 = formData.getOrDefault("Tags")
  valid_617748 = validateParameter(valid_617748, JArray, required = false,
                                 default = nil)
  if valid_617748 != nil:
    section.add "Tags", valid_617748
  assert formData != nil, "formData argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_617749 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_617749 = validateParameter(valid_617749, JString, required = true,
                                 default = nil)
  if valid_617749 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_617749
  var valid_617750 = formData.getOrDefault("DBInstanceCount")
  valid_617750 = validateParameter(valid_617750, JInt, required = false, default = nil)
  if valid_617750 != nil:
    section.add "DBInstanceCount", valid_617750
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617751: Call_PostPurchaseReservedDBInstancesOffering_617735;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_617751.validator(path, query, header, formData, body)
  let scheme = call_617751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617751.url(scheme.get, call_617751.host, call_617751.base,
                         call_617751.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617751, url, valid)

proc call*(call_617752: Call_PostPurchaseReservedDBInstancesOffering_617735;
          ReservedDBInstancesOfferingId: string;
          ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Tags: JsonNode = nil; Version: string = "2014-10-31"; DBInstanceCount: int = 0): Recallable =
  ## postPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  var query_617753 = newJObject()
  var formData_617754 = newJObject()
  add(formData_617754, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_617753, "Action", newJString(Action))
  if Tags != nil:
    formData_617754.add "Tags", Tags
  add(formData_617754, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_617753, "Version", newJString(Version))
  add(formData_617754, "DBInstanceCount", newJInt(DBInstanceCount))
  result = call_617752.call(nil, query_617753, nil, formData_617754, nil)

var postPurchaseReservedDBInstancesOffering* = Call_PostPurchaseReservedDBInstancesOffering_617735(
    name: "postPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_PostPurchaseReservedDBInstancesOffering_617736, base: "/",
    url: url_PostPurchaseReservedDBInstancesOffering_617737,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedDBInstancesOffering_617716 = ref object of OpenApiRestCall_612658
proc url_GetPurchaseReservedDBInstancesOffering_617718(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPurchaseReservedDBInstancesOffering_617717(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: JString (required)
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_617719 = query.getOrDefault("Tags")
  valid_617719 = validateParameter(valid_617719, JArray, required = false,
                                 default = nil)
  if valid_617719 != nil:
    section.add "Tags", valid_617719
  var valid_617720 = query.getOrDefault("DBInstanceCount")
  valid_617720 = validateParameter(valid_617720, JInt, required = false, default = nil)
  if valid_617720 != nil:
    section.add "DBInstanceCount", valid_617720
  var valid_617721 = query.getOrDefault("ReservedDBInstanceId")
  valid_617721 = validateParameter(valid_617721, JString, required = false,
                                 default = nil)
  if valid_617721 != nil:
    section.add "ReservedDBInstanceId", valid_617721
  var valid_617722 = query.getOrDefault("Action")
  valid_617722 = validateParameter(valid_617722, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_617722 != nil:
    section.add "Action", valid_617722
  var valid_617723 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_617723 = validateParameter(valid_617723, JString, required = true,
                                 default = nil)
  if valid_617723 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_617723
  var valid_617724 = query.getOrDefault("Version")
  valid_617724 = validateParameter(valid_617724, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617724 != nil:
    section.add "Version", valid_617724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617725 = header.getOrDefault("X-Amz-Signature")
  valid_617725 = validateParameter(valid_617725, JString, required = false,
                                 default = nil)
  if valid_617725 != nil:
    section.add "X-Amz-Signature", valid_617725
  var valid_617726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617726 = validateParameter(valid_617726, JString, required = false,
                                 default = nil)
  if valid_617726 != nil:
    section.add "X-Amz-Content-Sha256", valid_617726
  var valid_617727 = header.getOrDefault("X-Amz-Date")
  valid_617727 = validateParameter(valid_617727, JString, required = false,
                                 default = nil)
  if valid_617727 != nil:
    section.add "X-Amz-Date", valid_617727
  var valid_617728 = header.getOrDefault("X-Amz-Credential")
  valid_617728 = validateParameter(valid_617728, JString, required = false,
                                 default = nil)
  if valid_617728 != nil:
    section.add "X-Amz-Credential", valid_617728
  var valid_617729 = header.getOrDefault("X-Amz-Security-Token")
  valid_617729 = validateParameter(valid_617729, JString, required = false,
                                 default = nil)
  if valid_617729 != nil:
    section.add "X-Amz-Security-Token", valid_617729
  var valid_617730 = header.getOrDefault("X-Amz-Algorithm")
  valid_617730 = validateParameter(valid_617730, JString, required = false,
                                 default = nil)
  if valid_617730 != nil:
    section.add "X-Amz-Algorithm", valid_617730
  var valid_617731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617731 = validateParameter(valid_617731, JString, required = false,
                                 default = nil)
  if valid_617731 != nil:
    section.add "X-Amz-SignedHeaders", valid_617731
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617732: Call_GetPurchaseReservedDBInstancesOffering_617716;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_617732.validator(path, query, header, formData, body)
  let scheme = call_617732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617732.url(scheme.get, call_617732.host, call_617732.base,
                         call_617732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617732, url, valid)

proc call*(call_617733: Call_GetPurchaseReservedDBInstancesOffering_617716;
          ReservedDBInstancesOfferingId: string; Tags: JsonNode = nil;
          DBInstanceCount: int = 0; ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## getPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  var query_617734 = newJObject()
  if Tags != nil:
    query_617734.add "Tags", Tags
  add(query_617734, "DBInstanceCount", newJInt(DBInstanceCount))
  add(query_617734, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_617734, "Action", newJString(Action))
  add(query_617734, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_617734, "Version", newJString(Version))
  result = call_617733.call(nil, query_617734, nil, nil, nil)

var getPurchaseReservedDBInstancesOffering* = Call_GetPurchaseReservedDBInstancesOffering_617716(
    name: "getPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_GetPurchaseReservedDBInstancesOffering_617717, base: "/",
    url: url_GetPurchaseReservedDBInstancesOffering_617718,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_617772 = ref object of OpenApiRestCall_612658
proc url_PostRebootDBInstance_617774(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootDBInstance_617773(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617775 = query.getOrDefault("Action")
  valid_617775 = validateParameter(valid_617775, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_617775 != nil:
    section.add "Action", valid_617775
  var valid_617776 = query.getOrDefault("Version")
  valid_617776 = validateParameter(valid_617776, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617776 != nil:
    section.add "Version", valid_617776
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617777 = header.getOrDefault("X-Amz-Signature")
  valid_617777 = validateParameter(valid_617777, JString, required = false,
                                 default = nil)
  if valid_617777 != nil:
    section.add "X-Amz-Signature", valid_617777
  var valid_617778 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617778 = validateParameter(valid_617778, JString, required = false,
                                 default = nil)
  if valid_617778 != nil:
    section.add "X-Amz-Content-Sha256", valid_617778
  var valid_617779 = header.getOrDefault("X-Amz-Date")
  valid_617779 = validateParameter(valid_617779, JString, required = false,
                                 default = nil)
  if valid_617779 != nil:
    section.add "X-Amz-Date", valid_617779
  var valid_617780 = header.getOrDefault("X-Amz-Credential")
  valid_617780 = validateParameter(valid_617780, JString, required = false,
                                 default = nil)
  if valid_617780 != nil:
    section.add "X-Amz-Credential", valid_617780
  var valid_617781 = header.getOrDefault("X-Amz-Security-Token")
  valid_617781 = validateParameter(valid_617781, JString, required = false,
                                 default = nil)
  if valid_617781 != nil:
    section.add "X-Amz-Security-Token", valid_617781
  var valid_617782 = header.getOrDefault("X-Amz-Algorithm")
  valid_617782 = validateParameter(valid_617782, JString, required = false,
                                 default = nil)
  if valid_617782 != nil:
    section.add "X-Amz-Algorithm", valid_617782
  var valid_617783 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617783 = validateParameter(valid_617783, JString, required = false,
                                 default = nil)
  if valid_617783 != nil:
    section.add "X-Amz-SignedHeaders", valid_617783
  result.add "header", section
  ## parameters in `formData` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_617784 = formData.getOrDefault("ForceFailover")
  valid_617784 = validateParameter(valid_617784, JBool, required = false, default = nil)
  if valid_617784 != nil:
    section.add "ForceFailover", valid_617784
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_617785 = formData.getOrDefault("DBInstanceIdentifier")
  valid_617785 = validateParameter(valid_617785, JString, required = true,
                                 default = nil)
  if valid_617785 != nil:
    section.add "DBInstanceIdentifier", valid_617785
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617786: Call_PostRebootDBInstance_617772; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_617786.validator(path, query, header, formData, body)
  let scheme = call_617786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617786.url(scheme.get, call_617786.host, call_617786.base,
                         call_617786.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617786, url, valid)

proc call*(call_617787: Call_PostRebootDBInstance_617772;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617788 = newJObject()
  var formData_617789 = newJObject()
  add(formData_617789, "ForceFailover", newJBool(ForceFailover))
  add(formData_617789, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_617788, "Action", newJString(Action))
  add(query_617788, "Version", newJString(Version))
  result = call_617787.call(nil, query_617788, nil, formData_617789, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_617772(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_617773, base: "/",
    url: url_PostRebootDBInstance_617774, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_617755 = ref object of OpenApiRestCall_612658
proc url_GetRebootDBInstance_617757(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootDBInstance_617756(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617758 = query.getOrDefault("ForceFailover")
  valid_617758 = validateParameter(valid_617758, JBool, required = false, default = nil)
  if valid_617758 != nil:
    section.add "ForceFailover", valid_617758
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_617759 = query.getOrDefault("DBInstanceIdentifier")
  valid_617759 = validateParameter(valid_617759, JString, required = true,
                                 default = nil)
  if valid_617759 != nil:
    section.add "DBInstanceIdentifier", valid_617759
  var valid_617760 = query.getOrDefault("Action")
  valid_617760 = validateParameter(valid_617760, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_617760 != nil:
    section.add "Action", valid_617760
  var valid_617761 = query.getOrDefault("Version")
  valid_617761 = validateParameter(valid_617761, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617761 != nil:
    section.add "Version", valid_617761
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617762 = header.getOrDefault("X-Amz-Signature")
  valid_617762 = validateParameter(valid_617762, JString, required = false,
                                 default = nil)
  if valid_617762 != nil:
    section.add "X-Amz-Signature", valid_617762
  var valid_617763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617763 = validateParameter(valid_617763, JString, required = false,
                                 default = nil)
  if valid_617763 != nil:
    section.add "X-Amz-Content-Sha256", valid_617763
  var valid_617764 = header.getOrDefault("X-Amz-Date")
  valid_617764 = validateParameter(valid_617764, JString, required = false,
                                 default = nil)
  if valid_617764 != nil:
    section.add "X-Amz-Date", valid_617764
  var valid_617765 = header.getOrDefault("X-Amz-Credential")
  valid_617765 = validateParameter(valid_617765, JString, required = false,
                                 default = nil)
  if valid_617765 != nil:
    section.add "X-Amz-Credential", valid_617765
  var valid_617766 = header.getOrDefault("X-Amz-Security-Token")
  valid_617766 = validateParameter(valid_617766, JString, required = false,
                                 default = nil)
  if valid_617766 != nil:
    section.add "X-Amz-Security-Token", valid_617766
  var valid_617767 = header.getOrDefault("X-Amz-Algorithm")
  valid_617767 = validateParameter(valid_617767, JString, required = false,
                                 default = nil)
  if valid_617767 != nil:
    section.add "X-Amz-Algorithm", valid_617767
  var valid_617768 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617768 = validateParameter(valid_617768, JString, required = false,
                                 default = nil)
  if valid_617768 != nil:
    section.add "X-Amz-SignedHeaders", valid_617768
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617769: Call_GetRebootDBInstance_617755; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_617769.validator(path, query, header, formData, body)
  let scheme = call_617769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617769.url(scheme.get, call_617769.host, call_617769.base,
                         call_617769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617769, url, valid)

proc call*(call_617770: Call_GetRebootDBInstance_617755;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617771 = newJObject()
  add(query_617771, "ForceFailover", newJBool(ForceFailover))
  add(query_617771, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_617771, "Action", newJString(Action))
  add(query_617771, "Version", newJString(Version))
  result = call_617770.call(nil, query_617771, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_617755(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_617756, base: "/",
    url: url_GetRebootDBInstance_617757, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRegisterDBProxyTargets_617809 = ref object of OpenApiRestCall_612658
proc url_PostRegisterDBProxyTargets_617811(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRegisterDBProxyTargets_617810(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617812 = query.getOrDefault("Action")
  valid_617812 = validateParameter(valid_617812, JString, required = true,
                                 default = newJString("RegisterDBProxyTargets"))
  if valid_617812 != nil:
    section.add "Action", valid_617812
  var valid_617813 = query.getOrDefault("Version")
  valid_617813 = validateParameter(valid_617813, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617813 != nil:
    section.add "Version", valid_617813
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617814 = header.getOrDefault("X-Amz-Signature")
  valid_617814 = validateParameter(valid_617814, JString, required = false,
                                 default = nil)
  if valid_617814 != nil:
    section.add "X-Amz-Signature", valid_617814
  var valid_617815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617815 = validateParameter(valid_617815, JString, required = false,
                                 default = nil)
  if valid_617815 != nil:
    section.add "X-Amz-Content-Sha256", valid_617815
  var valid_617816 = header.getOrDefault("X-Amz-Date")
  valid_617816 = validateParameter(valid_617816, JString, required = false,
                                 default = nil)
  if valid_617816 != nil:
    section.add "X-Amz-Date", valid_617816
  var valid_617817 = header.getOrDefault("X-Amz-Credential")
  valid_617817 = validateParameter(valid_617817, JString, required = false,
                                 default = nil)
  if valid_617817 != nil:
    section.add "X-Amz-Credential", valid_617817
  var valid_617818 = header.getOrDefault("X-Amz-Security-Token")
  valid_617818 = validateParameter(valid_617818, JString, required = false,
                                 default = nil)
  if valid_617818 != nil:
    section.add "X-Amz-Security-Token", valid_617818
  var valid_617819 = header.getOrDefault("X-Amz-Algorithm")
  valid_617819 = validateParameter(valid_617819, JString, required = false,
                                 default = nil)
  if valid_617819 != nil:
    section.add "X-Amz-Algorithm", valid_617819
  var valid_617820 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617820 = validateParameter(valid_617820, JString, required = false,
                                 default = nil)
  if valid_617820 != nil:
    section.add "X-Amz-SignedHeaders", valid_617820
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_617821 = formData.getOrDefault("TargetGroupName")
  valid_617821 = validateParameter(valid_617821, JString, required = false,
                                 default = nil)
  if valid_617821 != nil:
    section.add "TargetGroupName", valid_617821
  var valid_617822 = formData.getOrDefault("DBInstanceIdentifiers")
  valid_617822 = validateParameter(valid_617822, JArray, required = false,
                                 default = nil)
  if valid_617822 != nil:
    section.add "DBInstanceIdentifiers", valid_617822
  var valid_617823 = formData.getOrDefault("DBClusterIdentifiers")
  valid_617823 = validateParameter(valid_617823, JArray, required = false,
                                 default = nil)
  if valid_617823 != nil:
    section.add "DBClusterIdentifiers", valid_617823
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_617824 = formData.getOrDefault("DBProxyName")
  valid_617824 = validateParameter(valid_617824, JString, required = true,
                                 default = nil)
  if valid_617824 != nil:
    section.add "DBProxyName", valid_617824
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617825: Call_PostRegisterDBProxyTargets_617809; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_617825.validator(path, query, header, formData, body)
  let scheme = call_617825.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617825.url(scheme.get, call_617825.host, call_617825.base,
                         call_617825.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617825, url, valid)

proc call*(call_617826: Call_PostRegisterDBProxyTargets_617809;
          DBProxyName: string; TargetGroupName: string = "";
          DBInstanceIdentifiers: JsonNode = nil;
          DBClusterIdentifiers: JsonNode = nil;
          Action: string = "RegisterDBProxyTargets"; Version: string = "2014-10-31"): Recallable =
  ## postRegisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617827 = newJObject()
  var formData_617828 = newJObject()
  add(formData_617828, "TargetGroupName", newJString(TargetGroupName))
  if DBInstanceIdentifiers != nil:
    formData_617828.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  if DBClusterIdentifiers != nil:
    formData_617828.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(formData_617828, "DBProxyName", newJString(DBProxyName))
  add(query_617827, "Action", newJString(Action))
  add(query_617827, "Version", newJString(Version))
  result = call_617826.call(nil, query_617827, nil, formData_617828, nil)

var postRegisterDBProxyTargets* = Call_PostRegisterDBProxyTargets_617809(
    name: "postRegisterDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RegisterDBProxyTargets",
    validator: validate_PostRegisterDBProxyTargets_617810, base: "/",
    url: url_PostRegisterDBProxyTargets_617811,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRegisterDBProxyTargets_617790 = ref object of OpenApiRestCall_612658
proc url_GetRegisterDBProxyTargets_617792(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRegisterDBProxyTargets_617791(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_617793 = query.getOrDefault("DBClusterIdentifiers")
  valid_617793 = validateParameter(valid_617793, JArray, required = false,
                                 default = nil)
  if valid_617793 != nil:
    section.add "DBClusterIdentifiers", valid_617793
  var valid_617794 = query.getOrDefault("DBInstanceIdentifiers")
  valid_617794 = validateParameter(valid_617794, JArray, required = false,
                                 default = nil)
  if valid_617794 != nil:
    section.add "DBInstanceIdentifiers", valid_617794
  var valid_617795 = query.getOrDefault("TargetGroupName")
  valid_617795 = validateParameter(valid_617795, JString, required = false,
                                 default = nil)
  if valid_617795 != nil:
    section.add "TargetGroupName", valid_617795
  var valid_617796 = query.getOrDefault("Action")
  valid_617796 = validateParameter(valid_617796, JString, required = true,
                                 default = newJString("RegisterDBProxyTargets"))
  if valid_617796 != nil:
    section.add "Action", valid_617796
  var valid_617797 = query.getOrDefault("Version")
  valid_617797 = validateParameter(valid_617797, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617797 != nil:
    section.add "Version", valid_617797
  var valid_617798 = query.getOrDefault("DBProxyName")
  valid_617798 = validateParameter(valid_617798, JString, required = true,
                                 default = nil)
  if valid_617798 != nil:
    section.add "DBProxyName", valid_617798
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617799 = header.getOrDefault("X-Amz-Signature")
  valid_617799 = validateParameter(valid_617799, JString, required = false,
                                 default = nil)
  if valid_617799 != nil:
    section.add "X-Amz-Signature", valid_617799
  var valid_617800 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617800 = validateParameter(valid_617800, JString, required = false,
                                 default = nil)
  if valid_617800 != nil:
    section.add "X-Amz-Content-Sha256", valid_617800
  var valid_617801 = header.getOrDefault("X-Amz-Date")
  valid_617801 = validateParameter(valid_617801, JString, required = false,
                                 default = nil)
  if valid_617801 != nil:
    section.add "X-Amz-Date", valid_617801
  var valid_617802 = header.getOrDefault("X-Amz-Credential")
  valid_617802 = validateParameter(valid_617802, JString, required = false,
                                 default = nil)
  if valid_617802 != nil:
    section.add "X-Amz-Credential", valid_617802
  var valid_617803 = header.getOrDefault("X-Amz-Security-Token")
  valid_617803 = validateParameter(valid_617803, JString, required = false,
                                 default = nil)
  if valid_617803 != nil:
    section.add "X-Amz-Security-Token", valid_617803
  var valid_617804 = header.getOrDefault("X-Amz-Algorithm")
  valid_617804 = validateParameter(valid_617804, JString, required = false,
                                 default = nil)
  if valid_617804 != nil:
    section.add "X-Amz-Algorithm", valid_617804
  var valid_617805 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617805 = validateParameter(valid_617805, JString, required = false,
                                 default = nil)
  if valid_617805 != nil:
    section.add "X-Amz-SignedHeaders", valid_617805
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617806: Call_GetRegisterDBProxyTargets_617790; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_617806.validator(path, query, header, formData, body)
  let scheme = call_617806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617806.url(scheme.get, call_617806.host, call_617806.base,
                         call_617806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617806, url, valid)

proc call*(call_617807: Call_GetRegisterDBProxyTargets_617790; DBProxyName: string;
          DBClusterIdentifiers: JsonNode = nil;
          DBInstanceIdentifiers: JsonNode = nil; TargetGroupName: string = "";
          Action: string = "RegisterDBProxyTargets"; Version: string = "2014-10-31"): Recallable =
  ## getRegisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  var query_617808 = newJObject()
  if DBClusterIdentifiers != nil:
    query_617808.add "DBClusterIdentifiers", DBClusterIdentifiers
  if DBInstanceIdentifiers != nil:
    query_617808.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  add(query_617808, "TargetGroupName", newJString(TargetGroupName))
  add(query_617808, "Action", newJString(Action))
  add(query_617808, "Version", newJString(Version))
  add(query_617808, "DBProxyName", newJString(DBProxyName))
  result = call_617807.call(nil, query_617808, nil, nil, nil)

var getRegisterDBProxyTargets* = Call_GetRegisterDBProxyTargets_617790(
    name: "getRegisterDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RegisterDBProxyTargets",
    validator: validate_GetRegisterDBProxyTargets_617791, base: "/",
    url: url_GetRegisterDBProxyTargets_617792,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveFromGlobalCluster_617846 = ref object of OpenApiRestCall_612658
proc url_PostRemoveFromGlobalCluster_617848(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveFromGlobalCluster_617847(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617849 = query.getOrDefault("Action")
  valid_617849 = validateParameter(valid_617849, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_617849 != nil:
    section.add "Action", valid_617849
  var valid_617850 = query.getOrDefault("Version")
  valid_617850 = validateParameter(valid_617850, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617850 != nil:
    section.add "Version", valid_617850
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617851 = header.getOrDefault("X-Amz-Signature")
  valid_617851 = validateParameter(valid_617851, JString, required = false,
                                 default = nil)
  if valid_617851 != nil:
    section.add "X-Amz-Signature", valid_617851
  var valid_617852 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617852 = validateParameter(valid_617852, JString, required = false,
                                 default = nil)
  if valid_617852 != nil:
    section.add "X-Amz-Content-Sha256", valid_617852
  var valid_617853 = header.getOrDefault("X-Amz-Date")
  valid_617853 = validateParameter(valid_617853, JString, required = false,
                                 default = nil)
  if valid_617853 != nil:
    section.add "X-Amz-Date", valid_617853
  var valid_617854 = header.getOrDefault("X-Amz-Credential")
  valid_617854 = validateParameter(valid_617854, JString, required = false,
                                 default = nil)
  if valid_617854 != nil:
    section.add "X-Amz-Credential", valid_617854
  var valid_617855 = header.getOrDefault("X-Amz-Security-Token")
  valid_617855 = validateParameter(valid_617855, JString, required = false,
                                 default = nil)
  if valid_617855 != nil:
    section.add "X-Amz-Security-Token", valid_617855
  var valid_617856 = header.getOrDefault("X-Amz-Algorithm")
  valid_617856 = validateParameter(valid_617856, JString, required = false,
                                 default = nil)
  if valid_617856 != nil:
    section.add "X-Amz-Algorithm", valid_617856
  var valid_617857 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617857 = validateParameter(valid_617857, JString, required = false,
                                 default = nil)
  if valid_617857 != nil:
    section.add "X-Amz-SignedHeaders", valid_617857
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  section = newJObject()
  var valid_617858 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_617858 = validateParameter(valid_617858, JString, required = false,
                                 default = nil)
  if valid_617858 != nil:
    section.add "GlobalClusterIdentifier", valid_617858
  var valid_617859 = formData.getOrDefault("DbClusterIdentifier")
  valid_617859 = validateParameter(valid_617859, JString, required = false,
                                 default = nil)
  if valid_617859 != nil:
    section.add "DbClusterIdentifier", valid_617859
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617860: Call_PostRemoveFromGlobalCluster_617846; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617860.validator(path, query, header, formData, body)
  let scheme = call_617860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617860.url(scheme.get, call_617860.host, call_617860.base,
                         call_617860.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617860, url, valid)

proc call*(call_617861: Call_PostRemoveFromGlobalCluster_617846;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617862 = newJObject()
  var formData_617863 = newJObject()
  add(formData_617863, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_617863, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_617862, "Action", newJString(Action))
  add(query_617862, "Version", newJString(Version))
  result = call_617861.call(nil, query_617862, nil, formData_617863, nil)

var postRemoveFromGlobalCluster* = Call_PostRemoveFromGlobalCluster_617846(
    name: "postRemoveFromGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_PostRemoveFromGlobalCluster_617847, base: "/",
    url: url_PostRemoveFromGlobalCluster_617848,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveFromGlobalCluster_617829 = ref object of OpenApiRestCall_612658
proc url_GetRemoveFromGlobalCluster_617831(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveFromGlobalCluster_617830(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617832 = query.getOrDefault("GlobalClusterIdentifier")
  valid_617832 = validateParameter(valid_617832, JString, required = false,
                                 default = nil)
  if valid_617832 != nil:
    section.add "GlobalClusterIdentifier", valid_617832
  var valid_617833 = query.getOrDefault("DbClusterIdentifier")
  valid_617833 = validateParameter(valid_617833, JString, required = false,
                                 default = nil)
  if valid_617833 != nil:
    section.add "DbClusterIdentifier", valid_617833
  var valid_617834 = query.getOrDefault("Action")
  valid_617834 = validateParameter(valid_617834, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_617834 != nil:
    section.add "Action", valid_617834
  var valid_617835 = query.getOrDefault("Version")
  valid_617835 = validateParameter(valid_617835, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617835 != nil:
    section.add "Version", valid_617835
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617836 = header.getOrDefault("X-Amz-Signature")
  valid_617836 = validateParameter(valid_617836, JString, required = false,
                                 default = nil)
  if valid_617836 != nil:
    section.add "X-Amz-Signature", valid_617836
  var valid_617837 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617837 = validateParameter(valid_617837, JString, required = false,
                                 default = nil)
  if valid_617837 != nil:
    section.add "X-Amz-Content-Sha256", valid_617837
  var valid_617838 = header.getOrDefault("X-Amz-Date")
  valid_617838 = validateParameter(valid_617838, JString, required = false,
                                 default = nil)
  if valid_617838 != nil:
    section.add "X-Amz-Date", valid_617838
  var valid_617839 = header.getOrDefault("X-Amz-Credential")
  valid_617839 = validateParameter(valid_617839, JString, required = false,
                                 default = nil)
  if valid_617839 != nil:
    section.add "X-Amz-Credential", valid_617839
  var valid_617840 = header.getOrDefault("X-Amz-Security-Token")
  valid_617840 = validateParameter(valid_617840, JString, required = false,
                                 default = nil)
  if valid_617840 != nil:
    section.add "X-Amz-Security-Token", valid_617840
  var valid_617841 = header.getOrDefault("X-Amz-Algorithm")
  valid_617841 = validateParameter(valid_617841, JString, required = false,
                                 default = nil)
  if valid_617841 != nil:
    section.add "X-Amz-Algorithm", valid_617841
  var valid_617842 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617842 = validateParameter(valid_617842, JString, required = false,
                                 default = nil)
  if valid_617842 != nil:
    section.add "X-Amz-SignedHeaders", valid_617842
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617843: Call_GetRemoveFromGlobalCluster_617829; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617843.validator(path, query, header, formData, body)
  let scheme = call_617843.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617843.url(scheme.get, call_617843.host, call_617843.base,
                         call_617843.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617843, url, valid)

proc call*(call_617844: Call_GetRemoveFromGlobalCluster_617829;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617845 = newJObject()
  add(query_617845, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_617845, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_617845, "Action", newJString(Action))
  add(query_617845, "Version", newJString(Version))
  result = call_617844.call(nil, query_617845, nil, nil, nil)

var getRemoveFromGlobalCluster* = Call_GetRemoveFromGlobalCluster_617829(
    name: "getRemoveFromGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_GetRemoveFromGlobalCluster_617830, base: "/",
    url: url_GetRemoveFromGlobalCluster_617831,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_617882 = ref object of OpenApiRestCall_612658
proc url_PostRemoveRoleFromDBCluster_617884(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_617883(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617885 = query.getOrDefault("Action")
  valid_617885 = validateParameter(valid_617885, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_617885 != nil:
    section.add "Action", valid_617885
  var valid_617886 = query.getOrDefault("Version")
  valid_617886 = validateParameter(valid_617886, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617886 != nil:
    section.add "Version", valid_617886
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617887 = header.getOrDefault("X-Amz-Signature")
  valid_617887 = validateParameter(valid_617887, JString, required = false,
                                 default = nil)
  if valid_617887 != nil:
    section.add "X-Amz-Signature", valid_617887
  var valid_617888 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617888 = validateParameter(valid_617888, JString, required = false,
                                 default = nil)
  if valid_617888 != nil:
    section.add "X-Amz-Content-Sha256", valid_617888
  var valid_617889 = header.getOrDefault("X-Amz-Date")
  valid_617889 = validateParameter(valid_617889, JString, required = false,
                                 default = nil)
  if valid_617889 != nil:
    section.add "X-Amz-Date", valid_617889
  var valid_617890 = header.getOrDefault("X-Amz-Credential")
  valid_617890 = validateParameter(valid_617890, JString, required = false,
                                 default = nil)
  if valid_617890 != nil:
    section.add "X-Amz-Credential", valid_617890
  var valid_617891 = header.getOrDefault("X-Amz-Security-Token")
  valid_617891 = validateParameter(valid_617891, JString, required = false,
                                 default = nil)
  if valid_617891 != nil:
    section.add "X-Amz-Security-Token", valid_617891
  var valid_617892 = header.getOrDefault("X-Amz-Algorithm")
  valid_617892 = validateParameter(valid_617892, JString, required = false,
                                 default = nil)
  if valid_617892 != nil:
    section.add "X-Amz-Algorithm", valid_617892
  var valid_617893 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617893 = validateParameter(valid_617893, JString, required = false,
                                 default = nil)
  if valid_617893 != nil:
    section.add "X-Amz-SignedHeaders", valid_617893
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  var valid_617894 = formData.getOrDefault("FeatureName")
  valid_617894 = validateParameter(valid_617894, JString, required = false,
                                 default = nil)
  if valid_617894 != nil:
    section.add "FeatureName", valid_617894
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_617895 = formData.getOrDefault("RoleArn")
  valid_617895 = validateParameter(valid_617895, JString, required = true,
                                 default = nil)
  if valid_617895 != nil:
    section.add "RoleArn", valid_617895
  var valid_617896 = formData.getOrDefault("DBClusterIdentifier")
  valid_617896 = validateParameter(valid_617896, JString, required = true,
                                 default = nil)
  if valid_617896 != nil:
    section.add "DBClusterIdentifier", valid_617896
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617897: Call_PostRemoveRoleFromDBCluster_617882; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617897.validator(path, query, header, formData, body)
  let scheme = call_617897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617897.url(scheme.get, call_617897.host, call_617897.base,
                         call_617897.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617897, url, valid)

proc call*(call_617898: Call_PostRemoveRoleFromDBCluster_617882; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  var query_617899 = newJObject()
  var formData_617900 = newJObject()
  add(formData_617900, "FeatureName", newJString(FeatureName))
  add(formData_617900, "RoleArn", newJString(RoleArn))
  add(query_617899, "Action", newJString(Action))
  add(query_617899, "Version", newJString(Version))
  add(formData_617900, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_617898.call(nil, query_617899, nil, formData_617900, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_617882(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_617883, base: "/",
    url: url_PostRemoveRoleFromDBCluster_617884,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_617864 = ref object of OpenApiRestCall_612658
proc url_GetRemoveRoleFromDBCluster_617866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_617865(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_617867 = query.getOrDefault("RoleArn")
  valid_617867 = validateParameter(valid_617867, JString, required = true,
                                 default = nil)
  if valid_617867 != nil:
    section.add "RoleArn", valid_617867
  var valid_617868 = query.getOrDefault("DBClusterIdentifier")
  valid_617868 = validateParameter(valid_617868, JString, required = true,
                                 default = nil)
  if valid_617868 != nil:
    section.add "DBClusterIdentifier", valid_617868
  var valid_617869 = query.getOrDefault("FeatureName")
  valid_617869 = validateParameter(valid_617869, JString, required = false,
                                 default = nil)
  if valid_617869 != nil:
    section.add "FeatureName", valid_617869
  var valid_617870 = query.getOrDefault("Action")
  valid_617870 = validateParameter(valid_617870, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_617870 != nil:
    section.add "Action", valid_617870
  var valid_617871 = query.getOrDefault("Version")
  valid_617871 = validateParameter(valid_617871, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617871 != nil:
    section.add "Version", valid_617871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617872 = header.getOrDefault("X-Amz-Signature")
  valid_617872 = validateParameter(valid_617872, JString, required = false,
                                 default = nil)
  if valid_617872 != nil:
    section.add "X-Amz-Signature", valid_617872
  var valid_617873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617873 = validateParameter(valid_617873, JString, required = false,
                                 default = nil)
  if valid_617873 != nil:
    section.add "X-Amz-Content-Sha256", valid_617873
  var valid_617874 = header.getOrDefault("X-Amz-Date")
  valid_617874 = validateParameter(valid_617874, JString, required = false,
                                 default = nil)
  if valid_617874 != nil:
    section.add "X-Amz-Date", valid_617874
  var valid_617875 = header.getOrDefault("X-Amz-Credential")
  valid_617875 = validateParameter(valid_617875, JString, required = false,
                                 default = nil)
  if valid_617875 != nil:
    section.add "X-Amz-Credential", valid_617875
  var valid_617876 = header.getOrDefault("X-Amz-Security-Token")
  valid_617876 = validateParameter(valid_617876, JString, required = false,
                                 default = nil)
  if valid_617876 != nil:
    section.add "X-Amz-Security-Token", valid_617876
  var valid_617877 = header.getOrDefault("X-Amz-Algorithm")
  valid_617877 = validateParameter(valid_617877, JString, required = false,
                                 default = nil)
  if valid_617877 != nil:
    section.add "X-Amz-Algorithm", valid_617877
  var valid_617878 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617878 = validateParameter(valid_617878, JString, required = false,
                                 default = nil)
  if valid_617878 != nil:
    section.add "X-Amz-SignedHeaders", valid_617878
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617879: Call_GetRemoveRoleFromDBCluster_617864; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_617879.validator(path, query, header, formData, body)
  let scheme = call_617879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617879.url(scheme.get, call_617879.host, call_617879.base,
                         call_617879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617879, url, valid)

proc call*(call_617880: Call_GetRemoveRoleFromDBCluster_617864; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617881 = newJObject()
  add(query_617881, "RoleArn", newJString(RoleArn))
  add(query_617881, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_617881, "FeatureName", newJString(FeatureName))
  add(query_617881, "Action", newJString(Action))
  add(query_617881, "Version", newJString(Version))
  result = call_617880.call(nil, query_617881, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_617864(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_617865, base: "/",
    url: url_GetRemoveRoleFromDBCluster_617866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBInstance_617919 = ref object of OpenApiRestCall_612658
proc url_PostRemoveRoleFromDBInstance_617921(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBInstance_617920(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617922 = query.getOrDefault("Action")
  valid_617922 = validateParameter(valid_617922, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_617922 != nil:
    section.add "Action", valid_617922
  var valid_617923 = query.getOrDefault("Version")
  valid_617923 = validateParameter(valid_617923, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617923 != nil:
    section.add "Version", valid_617923
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617924 = header.getOrDefault("X-Amz-Signature")
  valid_617924 = validateParameter(valid_617924, JString, required = false,
                                 default = nil)
  if valid_617924 != nil:
    section.add "X-Amz-Signature", valid_617924
  var valid_617925 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617925 = validateParameter(valid_617925, JString, required = false,
                                 default = nil)
  if valid_617925 != nil:
    section.add "X-Amz-Content-Sha256", valid_617925
  var valid_617926 = header.getOrDefault("X-Amz-Date")
  valid_617926 = validateParameter(valid_617926, JString, required = false,
                                 default = nil)
  if valid_617926 != nil:
    section.add "X-Amz-Date", valid_617926
  var valid_617927 = header.getOrDefault("X-Amz-Credential")
  valid_617927 = validateParameter(valid_617927, JString, required = false,
                                 default = nil)
  if valid_617927 != nil:
    section.add "X-Amz-Credential", valid_617927
  var valid_617928 = header.getOrDefault("X-Amz-Security-Token")
  valid_617928 = validateParameter(valid_617928, JString, required = false,
                                 default = nil)
  if valid_617928 != nil:
    section.add "X-Amz-Security-Token", valid_617928
  var valid_617929 = header.getOrDefault("X-Amz-Algorithm")
  valid_617929 = validateParameter(valid_617929, JString, required = false,
                                 default = nil)
  if valid_617929 != nil:
    section.add "X-Amz-Algorithm", valid_617929
  var valid_617930 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617930 = validateParameter(valid_617930, JString, required = false,
                                 default = nil)
  if valid_617930 != nil:
    section.add "X-Amz-SignedHeaders", valid_617930
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_617931 = formData.getOrDefault("FeatureName")
  valid_617931 = validateParameter(valid_617931, JString, required = true,
                                 default = nil)
  if valid_617931 != nil:
    section.add "FeatureName", valid_617931
  var valid_617932 = formData.getOrDefault("RoleArn")
  valid_617932 = validateParameter(valid_617932, JString, required = true,
                                 default = nil)
  if valid_617932 != nil:
    section.add "RoleArn", valid_617932
  var valid_617933 = formData.getOrDefault("DBInstanceIdentifier")
  valid_617933 = validateParameter(valid_617933, JString, required = true,
                                 default = nil)
  if valid_617933 != nil:
    section.add "DBInstanceIdentifier", valid_617933
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617934: Call_PostRemoveRoleFromDBInstance_617919; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_617934.validator(path, query, header, formData, body)
  let scheme = call_617934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617934.url(scheme.get, call_617934.host, call_617934.base,
                         call_617934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617934, url, valid)

proc call*(call_617935: Call_PostRemoveRoleFromDBInstance_617919;
          FeatureName: string; RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617936 = newJObject()
  var formData_617937 = newJObject()
  add(formData_617937, "FeatureName", newJString(FeatureName))
  add(formData_617937, "RoleArn", newJString(RoleArn))
  add(formData_617937, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_617936, "Action", newJString(Action))
  add(query_617936, "Version", newJString(Version))
  result = call_617935.call(nil, query_617936, nil, formData_617937, nil)

var postRemoveRoleFromDBInstance* = Call_PostRemoveRoleFromDBInstance_617919(
    name: "postRemoveRoleFromDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_PostRemoveRoleFromDBInstance_617920, base: "/",
    url: url_PostRemoveRoleFromDBInstance_617921,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBInstance_617901 = ref object of OpenApiRestCall_612658
proc url_GetRemoveRoleFromDBInstance_617903(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBInstance_617902(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_617904 = query.getOrDefault("RoleArn")
  valid_617904 = validateParameter(valid_617904, JString, required = true,
                                 default = nil)
  if valid_617904 != nil:
    section.add "RoleArn", valid_617904
  var valid_617905 = query.getOrDefault("FeatureName")
  valid_617905 = validateParameter(valid_617905, JString, required = true,
                                 default = nil)
  if valid_617905 != nil:
    section.add "FeatureName", valid_617905
  var valid_617906 = query.getOrDefault("DBInstanceIdentifier")
  valid_617906 = validateParameter(valid_617906, JString, required = true,
                                 default = nil)
  if valid_617906 != nil:
    section.add "DBInstanceIdentifier", valid_617906
  var valid_617907 = query.getOrDefault("Action")
  valid_617907 = validateParameter(valid_617907, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_617907 != nil:
    section.add "Action", valid_617907
  var valid_617908 = query.getOrDefault("Version")
  valid_617908 = validateParameter(valid_617908, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617908 != nil:
    section.add "Version", valid_617908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617909 = header.getOrDefault("X-Amz-Signature")
  valid_617909 = validateParameter(valid_617909, JString, required = false,
                                 default = nil)
  if valid_617909 != nil:
    section.add "X-Amz-Signature", valid_617909
  var valid_617910 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617910 = validateParameter(valid_617910, JString, required = false,
                                 default = nil)
  if valid_617910 != nil:
    section.add "X-Amz-Content-Sha256", valid_617910
  var valid_617911 = header.getOrDefault("X-Amz-Date")
  valid_617911 = validateParameter(valid_617911, JString, required = false,
                                 default = nil)
  if valid_617911 != nil:
    section.add "X-Amz-Date", valid_617911
  var valid_617912 = header.getOrDefault("X-Amz-Credential")
  valid_617912 = validateParameter(valid_617912, JString, required = false,
                                 default = nil)
  if valid_617912 != nil:
    section.add "X-Amz-Credential", valid_617912
  var valid_617913 = header.getOrDefault("X-Amz-Security-Token")
  valid_617913 = validateParameter(valid_617913, JString, required = false,
                                 default = nil)
  if valid_617913 != nil:
    section.add "X-Amz-Security-Token", valid_617913
  var valid_617914 = header.getOrDefault("X-Amz-Algorithm")
  valid_617914 = validateParameter(valid_617914, JString, required = false,
                                 default = nil)
  if valid_617914 != nil:
    section.add "X-Amz-Algorithm", valid_617914
  var valid_617915 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617915 = validateParameter(valid_617915, JString, required = false,
                                 default = nil)
  if valid_617915 != nil:
    section.add "X-Amz-SignedHeaders", valid_617915
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617916: Call_GetRemoveRoleFromDBInstance_617901; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_617916.validator(path, query, header, formData, body)
  let scheme = call_617916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617916.url(scheme.get, call_617916.host, call_617916.base,
                         call_617916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617916, url, valid)

proc call*(call_617917: Call_GetRemoveRoleFromDBInstance_617901; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617918 = newJObject()
  add(query_617918, "RoleArn", newJString(RoleArn))
  add(query_617918, "FeatureName", newJString(FeatureName))
  add(query_617918, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_617918, "Action", newJString(Action))
  add(query_617918, "Version", newJString(Version))
  result = call_617917.call(nil, query_617918, nil, nil, nil)

var getRemoveRoleFromDBInstance* = Call_GetRemoveRoleFromDBInstance_617901(
    name: "getRemoveRoleFromDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_GetRemoveRoleFromDBInstance_617902, base: "/",
    url: url_GetRemoveRoleFromDBInstance_617903,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_617955 = ref object of OpenApiRestCall_612658
proc url_PostRemoveSourceIdentifierFromSubscription_617957(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_617956(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617958 = query.getOrDefault("Action")
  valid_617958 = validateParameter(valid_617958, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_617958 != nil:
    section.add "Action", valid_617958
  var valid_617959 = query.getOrDefault("Version")
  valid_617959 = validateParameter(valid_617959, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617959 != nil:
    section.add "Version", valid_617959
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617960 = header.getOrDefault("X-Amz-Signature")
  valid_617960 = validateParameter(valid_617960, JString, required = false,
                                 default = nil)
  if valid_617960 != nil:
    section.add "X-Amz-Signature", valid_617960
  var valid_617961 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617961 = validateParameter(valid_617961, JString, required = false,
                                 default = nil)
  if valid_617961 != nil:
    section.add "X-Amz-Content-Sha256", valid_617961
  var valid_617962 = header.getOrDefault("X-Amz-Date")
  valid_617962 = validateParameter(valid_617962, JString, required = false,
                                 default = nil)
  if valid_617962 != nil:
    section.add "X-Amz-Date", valid_617962
  var valid_617963 = header.getOrDefault("X-Amz-Credential")
  valid_617963 = validateParameter(valid_617963, JString, required = false,
                                 default = nil)
  if valid_617963 != nil:
    section.add "X-Amz-Credential", valid_617963
  var valid_617964 = header.getOrDefault("X-Amz-Security-Token")
  valid_617964 = validateParameter(valid_617964, JString, required = false,
                                 default = nil)
  if valid_617964 != nil:
    section.add "X-Amz-Security-Token", valid_617964
  var valid_617965 = header.getOrDefault("X-Amz-Algorithm")
  valid_617965 = validateParameter(valid_617965, JString, required = false,
                                 default = nil)
  if valid_617965 != nil:
    section.add "X-Amz-Algorithm", valid_617965
  var valid_617966 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617966 = validateParameter(valid_617966, JString, required = false,
                                 default = nil)
  if valid_617966 != nil:
    section.add "X-Amz-SignedHeaders", valid_617966
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_617967 = formData.getOrDefault("SubscriptionName")
  valid_617967 = validateParameter(valid_617967, JString, required = true,
                                 default = nil)
  if valid_617967 != nil:
    section.add "SubscriptionName", valid_617967
  var valid_617968 = formData.getOrDefault("SourceIdentifier")
  valid_617968 = validateParameter(valid_617968, JString, required = true,
                                 default = nil)
  if valid_617968 != nil:
    section.add "SourceIdentifier", valid_617968
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617969: Call_PostRemoveSourceIdentifierFromSubscription_617955;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_617969.validator(path, query, header, formData, body)
  let scheme = call_617969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617969.url(scheme.get, call_617969.host, call_617969.base,
                         call_617969.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617969, url, valid)

proc call*(call_617970: Call_PostRemoveSourceIdentifierFromSubscription_617955;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617971 = newJObject()
  var formData_617972 = newJObject()
  add(formData_617972, "SubscriptionName", newJString(SubscriptionName))
  add(formData_617972, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_617971, "Action", newJString(Action))
  add(query_617971, "Version", newJString(Version))
  result = call_617970.call(nil, query_617971, nil, formData_617972, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_617955(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_617956,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_617957,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_617938 = ref object of OpenApiRestCall_612658
proc url_GetRemoveSourceIdentifierFromSubscription_617940(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_617939(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_617941 = query.getOrDefault("SourceIdentifier")
  valid_617941 = validateParameter(valid_617941, JString, required = true,
                                 default = nil)
  if valid_617941 != nil:
    section.add "SourceIdentifier", valid_617941
  var valid_617942 = query.getOrDefault("SubscriptionName")
  valid_617942 = validateParameter(valid_617942, JString, required = true,
                                 default = nil)
  if valid_617942 != nil:
    section.add "SubscriptionName", valid_617942
  var valid_617943 = query.getOrDefault("Action")
  valid_617943 = validateParameter(valid_617943, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_617943 != nil:
    section.add "Action", valid_617943
  var valid_617944 = query.getOrDefault("Version")
  valid_617944 = validateParameter(valid_617944, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617944 != nil:
    section.add "Version", valid_617944
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617945 = header.getOrDefault("X-Amz-Signature")
  valid_617945 = validateParameter(valid_617945, JString, required = false,
                                 default = nil)
  if valid_617945 != nil:
    section.add "X-Amz-Signature", valid_617945
  var valid_617946 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617946 = validateParameter(valid_617946, JString, required = false,
                                 default = nil)
  if valid_617946 != nil:
    section.add "X-Amz-Content-Sha256", valid_617946
  var valid_617947 = header.getOrDefault("X-Amz-Date")
  valid_617947 = validateParameter(valid_617947, JString, required = false,
                                 default = nil)
  if valid_617947 != nil:
    section.add "X-Amz-Date", valid_617947
  var valid_617948 = header.getOrDefault("X-Amz-Credential")
  valid_617948 = validateParameter(valid_617948, JString, required = false,
                                 default = nil)
  if valid_617948 != nil:
    section.add "X-Amz-Credential", valid_617948
  var valid_617949 = header.getOrDefault("X-Amz-Security-Token")
  valid_617949 = validateParameter(valid_617949, JString, required = false,
                                 default = nil)
  if valid_617949 != nil:
    section.add "X-Amz-Security-Token", valid_617949
  var valid_617950 = header.getOrDefault("X-Amz-Algorithm")
  valid_617950 = validateParameter(valid_617950, JString, required = false,
                                 default = nil)
  if valid_617950 != nil:
    section.add "X-Amz-Algorithm", valid_617950
  var valid_617951 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617951 = validateParameter(valid_617951, JString, required = false,
                                 default = nil)
  if valid_617951 != nil:
    section.add "X-Amz-SignedHeaders", valid_617951
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617952: Call_GetRemoveSourceIdentifierFromSubscription_617938;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_617952.validator(path, query, header, formData, body)
  let scheme = call_617952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617952.url(scheme.get, call_617952.host, call_617952.base,
                         call_617952.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617952, url, valid)

proc call*(call_617953: Call_GetRemoveSourceIdentifierFromSubscription_617938;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617954 = newJObject()
  add(query_617954, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_617954, "SubscriptionName", newJString(SubscriptionName))
  add(query_617954, "Action", newJString(Action))
  add(query_617954, "Version", newJString(Version))
  result = call_617953.call(nil, query_617954, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_617938(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_617939,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_617940,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_617990 = ref object of OpenApiRestCall_612658
proc url_PostRemoveTagsFromResource_617992(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_617991(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617993 = query.getOrDefault("Action")
  valid_617993 = validateParameter(valid_617993, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_617993 != nil:
    section.add "Action", valid_617993
  var valid_617994 = query.getOrDefault("Version")
  valid_617994 = validateParameter(valid_617994, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617994 != nil:
    section.add "Version", valid_617994
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617995 = header.getOrDefault("X-Amz-Signature")
  valid_617995 = validateParameter(valid_617995, JString, required = false,
                                 default = nil)
  if valid_617995 != nil:
    section.add "X-Amz-Signature", valid_617995
  var valid_617996 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617996 = validateParameter(valid_617996, JString, required = false,
                                 default = nil)
  if valid_617996 != nil:
    section.add "X-Amz-Content-Sha256", valid_617996
  var valid_617997 = header.getOrDefault("X-Amz-Date")
  valid_617997 = validateParameter(valid_617997, JString, required = false,
                                 default = nil)
  if valid_617997 != nil:
    section.add "X-Amz-Date", valid_617997
  var valid_617998 = header.getOrDefault("X-Amz-Credential")
  valid_617998 = validateParameter(valid_617998, JString, required = false,
                                 default = nil)
  if valid_617998 != nil:
    section.add "X-Amz-Credential", valid_617998
  var valid_617999 = header.getOrDefault("X-Amz-Security-Token")
  valid_617999 = validateParameter(valid_617999, JString, required = false,
                                 default = nil)
  if valid_617999 != nil:
    section.add "X-Amz-Security-Token", valid_617999
  var valid_618000 = header.getOrDefault("X-Amz-Algorithm")
  valid_618000 = validateParameter(valid_618000, JString, required = false,
                                 default = nil)
  if valid_618000 != nil:
    section.add "X-Amz-Algorithm", valid_618000
  var valid_618001 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618001 = validateParameter(valid_618001, JString, required = false,
                                 default = nil)
  if valid_618001 != nil:
    section.add "X-Amz-SignedHeaders", valid_618001
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_618002 = formData.getOrDefault("TagKeys")
  valid_618002 = validateParameter(valid_618002, JArray, required = true, default = nil)
  if valid_618002 != nil:
    section.add "TagKeys", valid_618002
  var valid_618003 = formData.getOrDefault("ResourceName")
  valid_618003 = validateParameter(valid_618003, JString, required = true,
                                 default = nil)
  if valid_618003 != nil:
    section.add "ResourceName", valid_618003
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618004: Call_PostRemoveTagsFromResource_617990; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_618004.validator(path, query, header, formData, body)
  let scheme = call_618004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618004.url(scheme.get, call_618004.host, call_618004.base,
                         call_618004.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618004, url, valid)

proc call*(call_618005: Call_PostRemoveTagsFromResource_617990; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  var query_618006 = newJObject()
  var formData_618007 = newJObject()
  if TagKeys != nil:
    formData_618007.add "TagKeys", TagKeys
  add(query_618006, "Action", newJString(Action))
  add(query_618006, "Version", newJString(Version))
  add(formData_618007, "ResourceName", newJString(ResourceName))
  result = call_618005.call(nil, query_618006, nil, formData_618007, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_617990(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_617991, base: "/",
    url: url_PostRemoveTagsFromResource_617992,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_617973 = ref object of OpenApiRestCall_612658
proc url_GetRemoveTagsFromResource_617975(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_617974(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_617976 = query.getOrDefault("ResourceName")
  valid_617976 = validateParameter(valid_617976, JString, required = true,
                                 default = nil)
  if valid_617976 != nil:
    section.add "ResourceName", valid_617976
  var valid_617977 = query.getOrDefault("TagKeys")
  valid_617977 = validateParameter(valid_617977, JArray, required = true, default = nil)
  if valid_617977 != nil:
    section.add "TagKeys", valid_617977
  var valid_617978 = query.getOrDefault("Action")
  valid_617978 = validateParameter(valid_617978, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_617978 != nil:
    section.add "Action", valid_617978
  var valid_617979 = query.getOrDefault("Version")
  valid_617979 = validateParameter(valid_617979, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_617979 != nil:
    section.add "Version", valid_617979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617980 = header.getOrDefault("X-Amz-Signature")
  valid_617980 = validateParameter(valid_617980, JString, required = false,
                                 default = nil)
  if valid_617980 != nil:
    section.add "X-Amz-Signature", valid_617980
  var valid_617981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617981 = validateParameter(valid_617981, JString, required = false,
                                 default = nil)
  if valid_617981 != nil:
    section.add "X-Amz-Content-Sha256", valid_617981
  var valid_617982 = header.getOrDefault("X-Amz-Date")
  valid_617982 = validateParameter(valid_617982, JString, required = false,
                                 default = nil)
  if valid_617982 != nil:
    section.add "X-Amz-Date", valid_617982
  var valid_617983 = header.getOrDefault("X-Amz-Credential")
  valid_617983 = validateParameter(valid_617983, JString, required = false,
                                 default = nil)
  if valid_617983 != nil:
    section.add "X-Amz-Credential", valid_617983
  var valid_617984 = header.getOrDefault("X-Amz-Security-Token")
  valid_617984 = validateParameter(valid_617984, JString, required = false,
                                 default = nil)
  if valid_617984 != nil:
    section.add "X-Amz-Security-Token", valid_617984
  var valid_617985 = header.getOrDefault("X-Amz-Algorithm")
  valid_617985 = validateParameter(valid_617985, JString, required = false,
                                 default = nil)
  if valid_617985 != nil:
    section.add "X-Amz-Algorithm", valid_617985
  var valid_617986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617986 = validateParameter(valid_617986, JString, required = false,
                                 default = nil)
  if valid_617986 != nil:
    section.add "X-Amz-SignedHeaders", valid_617986
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617987: Call_GetRemoveTagsFromResource_617973; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_617987.validator(path, query, header, formData, body)
  let scheme = call_617987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617987.url(scheme.get, call_617987.host, call_617987.base,
                         call_617987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617987, url, valid)

proc call*(call_617988: Call_GetRemoveTagsFromResource_617973;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617989 = newJObject()
  add(query_617989, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_617989.add "TagKeys", TagKeys
  add(query_617989, "Action", newJString(Action))
  add(query_617989, "Version", newJString(Version))
  result = call_617988.call(nil, query_617989, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_617973(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_617974, base: "/",
    url: url_GetRemoveTagsFromResource_617975,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_618026 = ref object of OpenApiRestCall_612658
proc url_PostResetDBClusterParameterGroup_618028(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBClusterParameterGroup_618027(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618029 = query.getOrDefault("Action")
  valid_618029 = validateParameter(valid_618029, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_618029 != nil:
    section.add "Action", valid_618029
  var valid_618030 = query.getOrDefault("Version")
  valid_618030 = validateParameter(valid_618030, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618030 != nil:
    section.add "Version", valid_618030
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618031 = header.getOrDefault("X-Amz-Signature")
  valid_618031 = validateParameter(valid_618031, JString, required = false,
                                 default = nil)
  if valid_618031 != nil:
    section.add "X-Amz-Signature", valid_618031
  var valid_618032 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618032 = validateParameter(valid_618032, JString, required = false,
                                 default = nil)
  if valid_618032 != nil:
    section.add "X-Amz-Content-Sha256", valid_618032
  var valid_618033 = header.getOrDefault("X-Amz-Date")
  valid_618033 = validateParameter(valid_618033, JString, required = false,
                                 default = nil)
  if valid_618033 != nil:
    section.add "X-Amz-Date", valid_618033
  var valid_618034 = header.getOrDefault("X-Amz-Credential")
  valid_618034 = validateParameter(valid_618034, JString, required = false,
                                 default = nil)
  if valid_618034 != nil:
    section.add "X-Amz-Credential", valid_618034
  var valid_618035 = header.getOrDefault("X-Amz-Security-Token")
  valid_618035 = validateParameter(valid_618035, JString, required = false,
                                 default = nil)
  if valid_618035 != nil:
    section.add "X-Amz-Security-Token", valid_618035
  var valid_618036 = header.getOrDefault("X-Amz-Algorithm")
  valid_618036 = validateParameter(valid_618036, JString, required = false,
                                 default = nil)
  if valid_618036 != nil:
    section.add "X-Amz-Algorithm", valid_618036
  var valid_618037 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618037 = validateParameter(valid_618037, JString, required = false,
                                 default = nil)
  if valid_618037 != nil:
    section.add "X-Amz-SignedHeaders", valid_618037
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  section = newJObject()
  var valid_618038 = formData.getOrDefault("ResetAllParameters")
  valid_618038 = validateParameter(valid_618038, JBool, required = false, default = nil)
  if valid_618038 != nil:
    section.add "ResetAllParameters", valid_618038
  var valid_618039 = formData.getOrDefault("Parameters")
  valid_618039 = validateParameter(valid_618039, JArray, required = false,
                                 default = nil)
  if valid_618039 != nil:
    section.add "Parameters", valid_618039
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_618040 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_618040 = validateParameter(valid_618040, JString, required = true,
                                 default = nil)
  if valid_618040 != nil:
    section.add "DBClusterParameterGroupName", valid_618040
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618041: Call_PostResetDBClusterParameterGroup_618026;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_618041.validator(path, query, header, formData, body)
  let scheme = call_618041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618041.url(scheme.get, call_618041.host, call_618041.base,
                         call_618041.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618041, url, valid)

proc call*(call_618042: Call_PostResetDBClusterParameterGroup_618026;
          DBClusterParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Parameters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Version: string (required)
  var query_618043 = newJObject()
  var formData_618044 = newJObject()
  add(formData_618044, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_618043, "Action", newJString(Action))
  if Parameters != nil:
    formData_618044.add "Parameters", Parameters
  add(formData_618044, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_618043, "Version", newJString(Version))
  result = call_618042.call(nil, query_618043, nil, formData_618044, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_618026(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_618027, base: "/",
    url: url_PostResetDBClusterParameterGroup_618028,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_618008 = ref object of OpenApiRestCall_612658
proc url_GetResetDBClusterParameterGroup_618010(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBClusterParameterGroup_618009(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618011 = query.getOrDefault("Parameters")
  valid_618011 = validateParameter(valid_618011, JArray, required = false,
                                 default = nil)
  if valid_618011 != nil:
    section.add "Parameters", valid_618011
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_618012 = query.getOrDefault("DBClusterParameterGroupName")
  valid_618012 = validateParameter(valid_618012, JString, required = true,
                                 default = nil)
  if valid_618012 != nil:
    section.add "DBClusterParameterGroupName", valid_618012
  var valid_618013 = query.getOrDefault("ResetAllParameters")
  valid_618013 = validateParameter(valid_618013, JBool, required = false, default = nil)
  if valid_618013 != nil:
    section.add "ResetAllParameters", valid_618013
  var valid_618014 = query.getOrDefault("Action")
  valid_618014 = validateParameter(valid_618014, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_618014 != nil:
    section.add "Action", valid_618014
  var valid_618015 = query.getOrDefault("Version")
  valid_618015 = validateParameter(valid_618015, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618015 != nil:
    section.add "Version", valid_618015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618016 = header.getOrDefault("X-Amz-Signature")
  valid_618016 = validateParameter(valid_618016, JString, required = false,
                                 default = nil)
  if valid_618016 != nil:
    section.add "X-Amz-Signature", valid_618016
  var valid_618017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618017 = validateParameter(valid_618017, JString, required = false,
                                 default = nil)
  if valid_618017 != nil:
    section.add "X-Amz-Content-Sha256", valid_618017
  var valid_618018 = header.getOrDefault("X-Amz-Date")
  valid_618018 = validateParameter(valid_618018, JString, required = false,
                                 default = nil)
  if valid_618018 != nil:
    section.add "X-Amz-Date", valid_618018
  var valid_618019 = header.getOrDefault("X-Amz-Credential")
  valid_618019 = validateParameter(valid_618019, JString, required = false,
                                 default = nil)
  if valid_618019 != nil:
    section.add "X-Amz-Credential", valid_618019
  var valid_618020 = header.getOrDefault("X-Amz-Security-Token")
  valid_618020 = validateParameter(valid_618020, JString, required = false,
                                 default = nil)
  if valid_618020 != nil:
    section.add "X-Amz-Security-Token", valid_618020
  var valid_618021 = header.getOrDefault("X-Amz-Algorithm")
  valid_618021 = validateParameter(valid_618021, JString, required = false,
                                 default = nil)
  if valid_618021 != nil:
    section.add "X-Amz-Algorithm", valid_618021
  var valid_618022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618022 = validateParameter(valid_618022, JString, required = false,
                                 default = nil)
  if valid_618022 != nil:
    section.add "X-Amz-SignedHeaders", valid_618022
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618023: Call_GetResetDBClusterParameterGroup_618008;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_618023.validator(path, query, header, formData, body)
  let scheme = call_618023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618023.url(scheme.get, call_618023.host, call_618023.base,
                         call_618023.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618023, url, valid)

proc call*(call_618024: Call_GetResetDBClusterParameterGroup_618008;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618025 = newJObject()
  if Parameters != nil:
    query_618025.add "Parameters", Parameters
  add(query_618025, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_618025, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_618025, "Action", newJString(Action))
  add(query_618025, "Version", newJString(Version))
  result = call_618024.call(nil, query_618025, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_618008(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_618009, base: "/",
    url: url_GetResetDBClusterParameterGroup_618010,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_618063 = ref object of OpenApiRestCall_612658
proc url_PostResetDBParameterGroup_618065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBParameterGroup_618064(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618066 = query.getOrDefault("Action")
  valid_618066 = validateParameter(valid_618066, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_618066 != nil:
    section.add "Action", valid_618066
  var valid_618067 = query.getOrDefault("Version")
  valid_618067 = validateParameter(valid_618067, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618067 != nil:
    section.add "Version", valid_618067
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618068 = header.getOrDefault("X-Amz-Signature")
  valid_618068 = validateParameter(valid_618068, JString, required = false,
                                 default = nil)
  if valid_618068 != nil:
    section.add "X-Amz-Signature", valid_618068
  var valid_618069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618069 = validateParameter(valid_618069, JString, required = false,
                                 default = nil)
  if valid_618069 != nil:
    section.add "X-Amz-Content-Sha256", valid_618069
  var valid_618070 = header.getOrDefault("X-Amz-Date")
  valid_618070 = validateParameter(valid_618070, JString, required = false,
                                 default = nil)
  if valid_618070 != nil:
    section.add "X-Amz-Date", valid_618070
  var valid_618071 = header.getOrDefault("X-Amz-Credential")
  valid_618071 = validateParameter(valid_618071, JString, required = false,
                                 default = nil)
  if valid_618071 != nil:
    section.add "X-Amz-Credential", valid_618071
  var valid_618072 = header.getOrDefault("X-Amz-Security-Token")
  valid_618072 = validateParameter(valid_618072, JString, required = false,
                                 default = nil)
  if valid_618072 != nil:
    section.add "X-Amz-Security-Token", valid_618072
  var valid_618073 = header.getOrDefault("X-Amz-Algorithm")
  valid_618073 = validateParameter(valid_618073, JString, required = false,
                                 default = nil)
  if valid_618073 != nil:
    section.add "X-Amz-Algorithm", valid_618073
  var valid_618074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618074 = validateParameter(valid_618074, JString, required = false,
                                 default = nil)
  if valid_618074 != nil:
    section.add "X-Amz-SignedHeaders", valid_618074
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  section = newJObject()
  var valid_618075 = formData.getOrDefault("ResetAllParameters")
  valid_618075 = validateParameter(valid_618075, JBool, required = false, default = nil)
  if valid_618075 != nil:
    section.add "ResetAllParameters", valid_618075
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_618076 = formData.getOrDefault("DBParameterGroupName")
  valid_618076 = validateParameter(valid_618076, JString, required = true,
                                 default = nil)
  if valid_618076 != nil:
    section.add "DBParameterGroupName", valid_618076
  var valid_618077 = formData.getOrDefault("Parameters")
  valid_618077 = validateParameter(valid_618077, JArray, required = false,
                                 default = nil)
  if valid_618077 != nil:
    section.add "Parameters", valid_618077
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618078: Call_PostResetDBParameterGroup_618063; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_618078.validator(path, query, header, formData, body)
  let scheme = call_618078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618078.url(scheme.get, call_618078.host, call_618078.base,
                         call_618078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618078, url, valid)

proc call*(call_618079: Call_PostResetDBParameterGroup_618063;
          DBParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Parameters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Version: string (required)
  var query_618080 = newJObject()
  var formData_618081 = newJObject()
  add(formData_618081, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_618081, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_618080, "Action", newJString(Action))
  if Parameters != nil:
    formData_618081.add "Parameters", Parameters
  add(query_618080, "Version", newJString(Version))
  result = call_618079.call(nil, query_618080, nil, formData_618081, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_618063(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_618064, base: "/",
    url: url_PostResetDBParameterGroup_618065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_618045 = ref object of OpenApiRestCall_612658
proc url_GetResetDBParameterGroup_618047(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBParameterGroup_618046(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_618048 = query.getOrDefault("DBParameterGroupName")
  valid_618048 = validateParameter(valid_618048, JString, required = true,
                                 default = nil)
  if valid_618048 != nil:
    section.add "DBParameterGroupName", valid_618048
  var valid_618049 = query.getOrDefault("Parameters")
  valid_618049 = validateParameter(valid_618049, JArray, required = false,
                                 default = nil)
  if valid_618049 != nil:
    section.add "Parameters", valid_618049
  var valid_618050 = query.getOrDefault("ResetAllParameters")
  valid_618050 = validateParameter(valid_618050, JBool, required = false, default = nil)
  if valid_618050 != nil:
    section.add "ResetAllParameters", valid_618050
  var valid_618051 = query.getOrDefault("Action")
  valid_618051 = validateParameter(valid_618051, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_618051 != nil:
    section.add "Action", valid_618051
  var valid_618052 = query.getOrDefault("Version")
  valid_618052 = validateParameter(valid_618052, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618052 != nil:
    section.add "Version", valid_618052
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618053 = header.getOrDefault("X-Amz-Signature")
  valid_618053 = validateParameter(valid_618053, JString, required = false,
                                 default = nil)
  if valid_618053 != nil:
    section.add "X-Amz-Signature", valid_618053
  var valid_618054 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618054 = validateParameter(valid_618054, JString, required = false,
                                 default = nil)
  if valid_618054 != nil:
    section.add "X-Amz-Content-Sha256", valid_618054
  var valid_618055 = header.getOrDefault("X-Amz-Date")
  valid_618055 = validateParameter(valid_618055, JString, required = false,
                                 default = nil)
  if valid_618055 != nil:
    section.add "X-Amz-Date", valid_618055
  var valid_618056 = header.getOrDefault("X-Amz-Credential")
  valid_618056 = validateParameter(valid_618056, JString, required = false,
                                 default = nil)
  if valid_618056 != nil:
    section.add "X-Amz-Credential", valid_618056
  var valid_618057 = header.getOrDefault("X-Amz-Security-Token")
  valid_618057 = validateParameter(valid_618057, JString, required = false,
                                 default = nil)
  if valid_618057 != nil:
    section.add "X-Amz-Security-Token", valid_618057
  var valid_618058 = header.getOrDefault("X-Amz-Algorithm")
  valid_618058 = validateParameter(valid_618058, JString, required = false,
                                 default = nil)
  if valid_618058 != nil:
    section.add "X-Amz-Algorithm", valid_618058
  var valid_618059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618059 = validateParameter(valid_618059, JString, required = false,
                                 default = nil)
  if valid_618059 != nil:
    section.add "X-Amz-SignedHeaders", valid_618059
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618060: Call_GetResetDBParameterGroup_618045; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_618060.validator(path, query, header, formData, body)
  let scheme = call_618060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618060.url(scheme.get, call_618060.host, call_618060.base,
                         call_618060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618060, url, valid)

proc call*(call_618061: Call_GetResetDBParameterGroup_618045;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618062 = newJObject()
  add(query_618062, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_618062.add "Parameters", Parameters
  add(query_618062, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_618062, "Action", newJString(Action))
  add(query_618062, "Version", newJString(Version))
  result = call_618061.call(nil, query_618062, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_618045(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_618046, base: "/",
    url: url_GetResetDBParameterGroup_618047, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromS3_618126 = ref object of OpenApiRestCall_612658
proc url_PostRestoreDBClusterFromS3_618128(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromS3_618127(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618129 = query.getOrDefault("Action")
  valid_618129 = validateParameter(valid_618129, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_618129 != nil:
    section.add "Action", valid_618129
  var valid_618130 = query.getOrDefault("Version")
  valid_618130 = validateParameter(valid_618130, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618130 != nil:
    section.add "Version", valid_618130
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618131 = header.getOrDefault("X-Amz-Signature")
  valid_618131 = validateParameter(valid_618131, JString, required = false,
                                 default = nil)
  if valid_618131 != nil:
    section.add "X-Amz-Signature", valid_618131
  var valid_618132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618132 = validateParameter(valid_618132, JString, required = false,
                                 default = nil)
  if valid_618132 != nil:
    section.add "X-Amz-Content-Sha256", valid_618132
  var valid_618133 = header.getOrDefault("X-Amz-Date")
  valid_618133 = validateParameter(valid_618133, JString, required = false,
                                 default = nil)
  if valid_618133 != nil:
    section.add "X-Amz-Date", valid_618133
  var valid_618134 = header.getOrDefault("X-Amz-Credential")
  valid_618134 = validateParameter(valid_618134, JString, required = false,
                                 default = nil)
  if valid_618134 != nil:
    section.add "X-Amz-Credential", valid_618134
  var valid_618135 = header.getOrDefault("X-Amz-Security-Token")
  valid_618135 = validateParameter(valid_618135, JString, required = false,
                                 default = nil)
  if valid_618135 != nil:
    section.add "X-Amz-Security-Token", valid_618135
  var valid_618136 = header.getOrDefault("X-Amz-Algorithm")
  valid_618136 = validateParameter(valid_618136, JString, required = false,
                                 default = nil)
  if valid_618136 != nil:
    section.add "X-Amz-Algorithm", valid_618136
  var valid_618137 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618137 = validateParameter(valid_618137, JString, required = false,
                                 default = nil)
  if valid_618137 != nil:
    section.add "X-Amz-SignedHeaders", valid_618137
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_618138 = formData.getOrDefault("S3Prefix")
  valid_618138 = validateParameter(valid_618138, JString, required = false,
                                 default = nil)
  if valid_618138 != nil:
    section.add "S3Prefix", valid_618138
  var valid_618139 = formData.getOrDefault("Port")
  valid_618139 = validateParameter(valid_618139, JInt, required = false, default = nil)
  if valid_618139 != nil:
    section.add "Port", valid_618139
  var valid_618140 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_618140 = validateParameter(valid_618140, JString, required = false,
                                 default = nil)
  if valid_618140 != nil:
    section.add "PreferredMaintenanceWindow", valid_618140
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_618141 = formData.getOrDefault("S3IngestionRoleArn")
  valid_618141 = validateParameter(valid_618141, JString, required = true,
                                 default = nil)
  if valid_618141 != nil:
    section.add "S3IngestionRoleArn", valid_618141
  var valid_618142 = formData.getOrDefault("PreferredBackupWindow")
  valid_618142 = validateParameter(valid_618142, JString, required = false,
                                 default = nil)
  if valid_618142 != nil:
    section.add "PreferredBackupWindow", valid_618142
  var valid_618143 = formData.getOrDefault("MasterUserPassword")
  valid_618143 = validateParameter(valid_618143, JString, required = true,
                                 default = nil)
  if valid_618143 != nil:
    section.add "MasterUserPassword", valid_618143
  var valid_618144 = formData.getOrDefault("MasterUsername")
  valid_618144 = validateParameter(valid_618144, JString, required = true,
                                 default = nil)
  if valid_618144 != nil:
    section.add "MasterUsername", valid_618144
  var valid_618145 = formData.getOrDefault("SourceEngine")
  valid_618145 = validateParameter(valid_618145, JString, required = true,
                                 default = nil)
  if valid_618145 != nil:
    section.add "SourceEngine", valid_618145
  var valid_618146 = formData.getOrDefault("EngineVersion")
  valid_618146 = validateParameter(valid_618146, JString, required = false,
                                 default = nil)
  if valid_618146 != nil:
    section.add "EngineVersion", valid_618146
  var valid_618147 = formData.getOrDefault("BacktrackWindow")
  valid_618147 = validateParameter(valid_618147, JInt, required = false, default = nil)
  if valid_618147 != nil:
    section.add "BacktrackWindow", valid_618147
  var valid_618148 = formData.getOrDefault("DatabaseName")
  valid_618148 = validateParameter(valid_618148, JString, required = false,
                                 default = nil)
  if valid_618148 != nil:
    section.add "DatabaseName", valid_618148
  var valid_618149 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_618149 = validateParameter(valid_618149, JArray, required = false,
                                 default = nil)
  if valid_618149 != nil:
    section.add "VpcSecurityGroupIds", valid_618149
  var valid_618150 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_618150 = validateParameter(valid_618150, JBool, required = false, default = nil)
  if valid_618150 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_618150
  var valid_618151 = formData.getOrDefault("AvailabilityZones")
  valid_618151 = validateParameter(valid_618151, JArray, required = false,
                                 default = nil)
  if valid_618151 != nil:
    section.add "AvailabilityZones", valid_618151
  var valid_618152 = formData.getOrDefault("BackupRetentionPeriod")
  valid_618152 = validateParameter(valid_618152, JInt, required = false, default = nil)
  if valid_618152 != nil:
    section.add "BackupRetentionPeriod", valid_618152
  var valid_618153 = formData.getOrDefault("Engine")
  valid_618153 = validateParameter(valid_618153, JString, required = true,
                                 default = nil)
  if valid_618153 != nil:
    section.add "Engine", valid_618153
  var valid_618154 = formData.getOrDefault("KmsKeyId")
  valid_618154 = validateParameter(valid_618154, JString, required = false,
                                 default = nil)
  if valid_618154 != nil:
    section.add "KmsKeyId", valid_618154
  var valid_618155 = formData.getOrDefault("S3BucketName")
  valid_618155 = validateParameter(valid_618155, JString, required = true,
                                 default = nil)
  if valid_618155 != nil:
    section.add "S3BucketName", valid_618155
  var valid_618156 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_618156 = validateParameter(valid_618156, JArray, required = false,
                                 default = nil)
  if valid_618156 != nil:
    section.add "EnableCloudwatchLogsExports", valid_618156
  var valid_618157 = formData.getOrDefault("SourceEngineVersion")
  valid_618157 = validateParameter(valid_618157, JString, required = true,
                                 default = nil)
  if valid_618157 != nil:
    section.add "SourceEngineVersion", valid_618157
  var valid_618158 = formData.getOrDefault("Tags")
  valid_618158 = validateParameter(valid_618158, JArray, required = false,
                                 default = nil)
  if valid_618158 != nil:
    section.add "Tags", valid_618158
  var valid_618159 = formData.getOrDefault("DBSubnetGroupName")
  valid_618159 = validateParameter(valid_618159, JString, required = false,
                                 default = nil)
  if valid_618159 != nil:
    section.add "DBSubnetGroupName", valid_618159
  var valid_618160 = formData.getOrDefault("OptionGroupName")
  valid_618160 = validateParameter(valid_618160, JString, required = false,
                                 default = nil)
  if valid_618160 != nil:
    section.add "OptionGroupName", valid_618160
  var valid_618161 = formData.getOrDefault("CharacterSetName")
  valid_618161 = validateParameter(valid_618161, JString, required = false,
                                 default = nil)
  if valid_618161 != nil:
    section.add "CharacterSetName", valid_618161
  var valid_618162 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_618162 = validateParameter(valid_618162, JString, required = false,
                                 default = nil)
  if valid_618162 != nil:
    section.add "DBClusterParameterGroupName", valid_618162
  var valid_618163 = formData.getOrDefault("StorageEncrypted")
  valid_618163 = validateParameter(valid_618163, JBool, required = false, default = nil)
  if valid_618163 != nil:
    section.add "StorageEncrypted", valid_618163
  var valid_618164 = formData.getOrDefault("DBClusterIdentifier")
  valid_618164 = validateParameter(valid_618164, JString, required = true,
                                 default = nil)
  if valid_618164 != nil:
    section.add "DBClusterIdentifier", valid_618164
  var valid_618165 = formData.getOrDefault("DeletionProtection")
  valid_618165 = validateParameter(valid_618165, JBool, required = false, default = nil)
  if valid_618165 != nil:
    section.add "DeletionProtection", valid_618165
  var valid_618166 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_618166 = validateParameter(valid_618166, JBool, required = false, default = nil)
  if valid_618166 != nil:
    section.add "CopyTagsToSnapshot", valid_618166
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618167: Call_PostRestoreDBClusterFromS3_618126; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_618167.validator(path, query, header, formData, body)
  let scheme = call_618167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618167.url(scheme.get, call_618167.host, call_618167.base,
                         call_618167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618167, url, valid)

proc call*(call_618168: Call_PostRestoreDBClusterFromS3_618126;
          S3IngestionRoleArn: string; MasterUserPassword: string;
          MasterUsername: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string;
          DBClusterIdentifier: string; S3Prefix: string = ""; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          BacktrackWindow: int = 0; DatabaseName: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          KmsKeyId: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterFromS3"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_618169 = newJObject()
  var formData_618170 = newJObject()
  add(formData_618170, "S3Prefix", newJString(S3Prefix))
  add(formData_618170, "Port", newJInt(Port))
  add(formData_618170, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_618170, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_618170, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_618170, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_618170, "MasterUsername", newJString(MasterUsername))
  add(formData_618170, "SourceEngine", newJString(SourceEngine))
  add(formData_618170, "EngineVersion", newJString(EngineVersion))
  add(formData_618170, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_618170, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_618170.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_618170, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_618170.add "AvailabilityZones", AvailabilityZones
  add(formData_618170, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_618170, "Engine", newJString(Engine))
  add(formData_618170, "KmsKeyId", newJString(KmsKeyId))
  add(formData_618170, "S3BucketName", newJString(S3BucketName))
  if EnableCloudwatchLogsExports != nil:
    formData_618170.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_618170, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_618169, "Action", newJString(Action))
  if Tags != nil:
    formData_618170.add "Tags", Tags
  add(formData_618170, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_618170, "OptionGroupName", newJString(OptionGroupName))
  add(formData_618170, "CharacterSetName", newJString(CharacterSetName))
  add(formData_618170, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_618169, "Version", newJString(Version))
  add(formData_618170, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_618170, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_618170, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_618170, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_618168.call(nil, query_618169, nil, formData_618170, nil)

var postRestoreDBClusterFromS3* = Call_PostRestoreDBClusterFromS3_618126(
    name: "postRestoreDBClusterFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_PostRestoreDBClusterFromS3_618127, base: "/",
    url: url_PostRestoreDBClusterFromS3_618128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromS3_618082 = ref object of OpenApiRestCall_612658
proc url_GetRestoreDBClusterFromS3_618084(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromS3_618083(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: JString (required)
  section = newJObject()
  var valid_618085 = query.getOrDefault("DatabaseName")
  valid_618085 = validateParameter(valid_618085, JString, required = false,
                                 default = nil)
  if valid_618085 != nil:
    section.add "DatabaseName", valid_618085
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_618086 = query.getOrDefault("SourceEngineVersion")
  valid_618086 = validateParameter(valid_618086, JString, required = true,
                                 default = nil)
  if valid_618086 != nil:
    section.add "SourceEngineVersion", valid_618086
  var valid_618087 = query.getOrDefault("StorageEncrypted")
  valid_618087 = validateParameter(valid_618087, JBool, required = false, default = nil)
  if valid_618087 != nil:
    section.add "StorageEncrypted", valid_618087
  var valid_618088 = query.getOrDefault("Engine")
  valid_618088 = validateParameter(valid_618088, JString, required = true,
                                 default = nil)
  if valid_618088 != nil:
    section.add "Engine", valid_618088
  var valid_618089 = query.getOrDefault("SourceEngine")
  valid_618089 = validateParameter(valid_618089, JString, required = true,
                                 default = nil)
  if valid_618089 != nil:
    section.add "SourceEngine", valid_618089
  var valid_618090 = query.getOrDefault("DeletionProtection")
  valid_618090 = validateParameter(valid_618090, JBool, required = false, default = nil)
  if valid_618090 != nil:
    section.add "DeletionProtection", valid_618090
  var valid_618091 = query.getOrDefault("CharacterSetName")
  valid_618091 = validateParameter(valid_618091, JString, required = false,
                                 default = nil)
  if valid_618091 != nil:
    section.add "CharacterSetName", valid_618091
  var valid_618092 = query.getOrDefault("S3Prefix")
  valid_618092 = validateParameter(valid_618092, JString, required = false,
                                 default = nil)
  if valid_618092 != nil:
    section.add "S3Prefix", valid_618092
  var valid_618093 = query.getOrDefault("CopyTagsToSnapshot")
  valid_618093 = validateParameter(valid_618093, JBool, required = false, default = nil)
  if valid_618093 != nil:
    section.add "CopyTagsToSnapshot", valid_618093
  var valid_618094 = query.getOrDefault("Tags")
  valid_618094 = validateParameter(valid_618094, JArray, required = false,
                                 default = nil)
  if valid_618094 != nil:
    section.add "Tags", valid_618094
  var valid_618095 = query.getOrDefault("KmsKeyId")
  valid_618095 = validateParameter(valid_618095, JString, required = false,
                                 default = nil)
  if valid_618095 != nil:
    section.add "KmsKeyId", valid_618095
  var valid_618096 = query.getOrDefault("DBClusterIdentifier")
  valid_618096 = validateParameter(valid_618096, JString, required = true,
                                 default = nil)
  if valid_618096 != nil:
    section.add "DBClusterIdentifier", valid_618096
  var valid_618097 = query.getOrDefault("BacktrackWindow")
  valid_618097 = validateParameter(valid_618097, JInt, required = false, default = nil)
  if valid_618097 != nil:
    section.add "BacktrackWindow", valid_618097
  var valid_618098 = query.getOrDefault("DBClusterParameterGroupName")
  valid_618098 = validateParameter(valid_618098, JString, required = false,
                                 default = nil)
  if valid_618098 != nil:
    section.add "DBClusterParameterGroupName", valid_618098
  var valid_618099 = query.getOrDefault("S3BucketName")
  valid_618099 = validateParameter(valid_618099, JString, required = true,
                                 default = nil)
  if valid_618099 != nil:
    section.add "S3BucketName", valid_618099
  var valid_618100 = query.getOrDefault("AvailabilityZones")
  valid_618100 = validateParameter(valid_618100, JArray, required = false,
                                 default = nil)
  if valid_618100 != nil:
    section.add "AvailabilityZones", valid_618100
  var valid_618101 = query.getOrDefault("MasterUsername")
  valid_618101 = validateParameter(valid_618101, JString, required = true,
                                 default = nil)
  if valid_618101 != nil:
    section.add "MasterUsername", valid_618101
  var valid_618102 = query.getOrDefault("BackupRetentionPeriod")
  valid_618102 = validateParameter(valid_618102, JInt, required = false, default = nil)
  if valid_618102 != nil:
    section.add "BackupRetentionPeriod", valid_618102
  var valid_618103 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_618103 = validateParameter(valid_618103, JBool, required = false, default = nil)
  if valid_618103 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_618103
  var valid_618104 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_618104 = validateParameter(valid_618104, JArray, required = false,
                                 default = nil)
  if valid_618104 != nil:
    section.add "EnableCloudwatchLogsExports", valid_618104
  var valid_618105 = query.getOrDefault("EngineVersion")
  valid_618105 = validateParameter(valid_618105, JString, required = false,
                                 default = nil)
  if valid_618105 != nil:
    section.add "EngineVersion", valid_618105
  var valid_618106 = query.getOrDefault("Action")
  valid_618106 = validateParameter(valid_618106, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_618106 != nil:
    section.add "Action", valid_618106
  var valid_618107 = query.getOrDefault("Port")
  valid_618107 = validateParameter(valid_618107, JInt, required = false, default = nil)
  if valid_618107 != nil:
    section.add "Port", valid_618107
  var valid_618108 = query.getOrDefault("VpcSecurityGroupIds")
  valid_618108 = validateParameter(valid_618108, JArray, required = false,
                                 default = nil)
  if valid_618108 != nil:
    section.add "VpcSecurityGroupIds", valid_618108
  var valid_618109 = query.getOrDefault("MasterUserPassword")
  valid_618109 = validateParameter(valid_618109, JString, required = true,
                                 default = nil)
  if valid_618109 != nil:
    section.add "MasterUserPassword", valid_618109
  var valid_618110 = query.getOrDefault("OptionGroupName")
  valid_618110 = validateParameter(valid_618110, JString, required = false,
                                 default = nil)
  if valid_618110 != nil:
    section.add "OptionGroupName", valid_618110
  var valid_618111 = query.getOrDefault("DBSubnetGroupName")
  valid_618111 = validateParameter(valid_618111, JString, required = false,
                                 default = nil)
  if valid_618111 != nil:
    section.add "DBSubnetGroupName", valid_618111
  var valid_618112 = query.getOrDefault("PreferredBackupWindow")
  valid_618112 = validateParameter(valid_618112, JString, required = false,
                                 default = nil)
  if valid_618112 != nil:
    section.add "PreferredBackupWindow", valid_618112
  var valid_618113 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_618113 = validateParameter(valid_618113, JString, required = false,
                                 default = nil)
  if valid_618113 != nil:
    section.add "PreferredMaintenanceWindow", valid_618113
  var valid_618114 = query.getOrDefault("S3IngestionRoleArn")
  valid_618114 = validateParameter(valid_618114, JString, required = true,
                                 default = nil)
  if valid_618114 != nil:
    section.add "S3IngestionRoleArn", valid_618114
  var valid_618115 = query.getOrDefault("Version")
  valid_618115 = validateParameter(valid_618115, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618115 != nil:
    section.add "Version", valid_618115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618116 = header.getOrDefault("X-Amz-Signature")
  valid_618116 = validateParameter(valid_618116, JString, required = false,
                                 default = nil)
  if valid_618116 != nil:
    section.add "X-Amz-Signature", valid_618116
  var valid_618117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618117 = validateParameter(valid_618117, JString, required = false,
                                 default = nil)
  if valid_618117 != nil:
    section.add "X-Amz-Content-Sha256", valid_618117
  var valid_618118 = header.getOrDefault("X-Amz-Date")
  valid_618118 = validateParameter(valid_618118, JString, required = false,
                                 default = nil)
  if valid_618118 != nil:
    section.add "X-Amz-Date", valid_618118
  var valid_618119 = header.getOrDefault("X-Amz-Credential")
  valid_618119 = validateParameter(valid_618119, JString, required = false,
                                 default = nil)
  if valid_618119 != nil:
    section.add "X-Amz-Credential", valid_618119
  var valid_618120 = header.getOrDefault("X-Amz-Security-Token")
  valid_618120 = validateParameter(valid_618120, JString, required = false,
                                 default = nil)
  if valid_618120 != nil:
    section.add "X-Amz-Security-Token", valid_618120
  var valid_618121 = header.getOrDefault("X-Amz-Algorithm")
  valid_618121 = validateParameter(valid_618121, JString, required = false,
                                 default = nil)
  if valid_618121 != nil:
    section.add "X-Amz-Algorithm", valid_618121
  var valid_618122 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618122 = validateParameter(valid_618122, JString, required = false,
                                 default = nil)
  if valid_618122 != nil:
    section.add "X-Amz-SignedHeaders", valid_618122
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618123: Call_GetRestoreDBClusterFromS3_618082; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_618123.validator(path, query, header, formData, body)
  let scheme = call_618123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618123.url(scheme.get, call_618123.host, call_618123.base,
                         call_618123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618123, url, valid)

proc call*(call_618124: Call_GetRestoreDBClusterFromS3_618082;
          SourceEngineVersion: string; Engine: string; SourceEngine: string;
          DBClusterIdentifier: string; S3BucketName: string; MasterUsername: string;
          MasterUserPassword: string; S3IngestionRoleArn: string;
          DatabaseName: string = ""; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CharacterSetName: string = "";
          S3Prefix: string = ""; CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil;
          KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromS3"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: string (required)
  var query_618125 = newJObject()
  add(query_618125, "DatabaseName", newJString(DatabaseName))
  add(query_618125, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_618125, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_618125, "Engine", newJString(Engine))
  add(query_618125, "SourceEngine", newJString(SourceEngine))
  add(query_618125, "DeletionProtection", newJBool(DeletionProtection))
  add(query_618125, "CharacterSetName", newJString(CharacterSetName))
  add(query_618125, "S3Prefix", newJString(S3Prefix))
  add(query_618125, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_618125.add "Tags", Tags
  add(query_618125, "KmsKeyId", newJString(KmsKeyId))
  add(query_618125, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_618125, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_618125, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_618125, "S3BucketName", newJString(S3BucketName))
  if AvailabilityZones != nil:
    query_618125.add "AvailabilityZones", AvailabilityZones
  add(query_618125, "MasterUsername", newJString(MasterUsername))
  add(query_618125, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_618125, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_618125.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_618125, "EngineVersion", newJString(EngineVersion))
  add(query_618125, "Action", newJString(Action))
  add(query_618125, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_618125.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_618125, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_618125, "OptionGroupName", newJString(OptionGroupName))
  add(query_618125, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_618125, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_618125, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_618125, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_618125, "Version", newJString(Version))
  result = call_618124.call(nil, query_618125, nil, nil, nil)

var getRestoreDBClusterFromS3* = Call_GetRestoreDBClusterFromS3_618082(
    name: "getRestoreDBClusterFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_GetRestoreDBClusterFromS3_618083, base: "/",
    url: url_GetRestoreDBClusterFromS3_618084,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_618210 = ref object of OpenApiRestCall_612658
proc url_PostRestoreDBClusterFromSnapshot_618212(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_618211(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618213 = query.getOrDefault("Action")
  valid_618213 = validateParameter(valid_618213, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_618213 != nil:
    section.add "Action", valid_618213
  var valid_618214 = query.getOrDefault("Version")
  valid_618214 = validateParameter(valid_618214, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618214 != nil:
    section.add "Version", valid_618214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618215 = header.getOrDefault("X-Amz-Signature")
  valid_618215 = validateParameter(valid_618215, JString, required = false,
                                 default = nil)
  if valid_618215 != nil:
    section.add "X-Amz-Signature", valid_618215
  var valid_618216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618216 = validateParameter(valid_618216, JString, required = false,
                                 default = nil)
  if valid_618216 != nil:
    section.add "X-Amz-Content-Sha256", valid_618216
  var valid_618217 = header.getOrDefault("X-Amz-Date")
  valid_618217 = validateParameter(valid_618217, JString, required = false,
                                 default = nil)
  if valid_618217 != nil:
    section.add "X-Amz-Date", valid_618217
  var valid_618218 = header.getOrDefault("X-Amz-Credential")
  valid_618218 = validateParameter(valid_618218, JString, required = false,
                                 default = nil)
  if valid_618218 != nil:
    section.add "X-Amz-Credential", valid_618218
  var valid_618219 = header.getOrDefault("X-Amz-Security-Token")
  valid_618219 = validateParameter(valid_618219, JString, required = false,
                                 default = nil)
  if valid_618219 != nil:
    section.add "X-Amz-Security-Token", valid_618219
  var valid_618220 = header.getOrDefault("X-Amz-Algorithm")
  valid_618220 = validateParameter(valid_618220, JString, required = false,
                                 default = nil)
  if valid_618220 != nil:
    section.add "X-Amz-Algorithm", valid_618220
  var valid_618221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618221 = validateParameter(valid_618221, JString, required = false,
                                 default = nil)
  if valid_618221 != nil:
    section.add "X-Amz-SignedHeaders", valid_618221
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_618222 = formData.getOrDefault("Port")
  valid_618222 = validateParameter(valid_618222, JInt, required = false, default = nil)
  if valid_618222 != nil:
    section.add "Port", valid_618222
  var valid_618223 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_618223 = validateParameter(valid_618223, JString, required = false,
                                 default = nil)
  if valid_618223 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_618223
  var valid_618224 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_618224 = validateParameter(valid_618224, JString, required = false,
                                 default = nil)
  if valid_618224 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_618224
  var valid_618225 = formData.getOrDefault("EngineVersion")
  valid_618225 = validateParameter(valid_618225, JString, required = false,
                                 default = nil)
  if valid_618225 != nil:
    section.add "EngineVersion", valid_618225
  var valid_618226 = formData.getOrDefault("BacktrackWindow")
  valid_618226 = validateParameter(valid_618226, JInt, required = false, default = nil)
  if valid_618226 != nil:
    section.add "BacktrackWindow", valid_618226
  var valid_618227 = formData.getOrDefault("DatabaseName")
  valid_618227 = validateParameter(valid_618227, JString, required = false,
                                 default = nil)
  if valid_618227 != nil:
    section.add "DatabaseName", valid_618227
  var valid_618228 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_618228 = validateParameter(valid_618228, JArray, required = false,
                                 default = nil)
  if valid_618228 != nil:
    section.add "VpcSecurityGroupIds", valid_618228
  var valid_618229 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_618229 = validateParameter(valid_618229, JBool, required = false, default = nil)
  if valid_618229 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_618229
  var valid_618230 = formData.getOrDefault("AvailabilityZones")
  valid_618230 = validateParameter(valid_618230, JArray, required = false,
                                 default = nil)
  if valid_618230 != nil:
    section.add "AvailabilityZones", valid_618230
  var valid_618231 = formData.getOrDefault("KmsKeyId")
  valid_618231 = validateParameter(valid_618231, JString, required = false,
                                 default = nil)
  if valid_618231 != nil:
    section.add "KmsKeyId", valid_618231
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_618232 = formData.getOrDefault("Engine")
  valid_618232 = validateParameter(valid_618232, JString, required = true,
                                 default = nil)
  if valid_618232 != nil:
    section.add "Engine", valid_618232
  var valid_618233 = formData.getOrDefault("EngineMode")
  valid_618233 = validateParameter(valid_618233, JString, required = false,
                                 default = nil)
  if valid_618233 != nil:
    section.add "EngineMode", valid_618233
  var valid_618234 = formData.getOrDefault("SnapshotIdentifier")
  valid_618234 = validateParameter(valid_618234, JString, required = true,
                                 default = nil)
  if valid_618234 != nil:
    section.add "SnapshotIdentifier", valid_618234
  var valid_618235 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_618235 = validateParameter(valid_618235, JArray, required = false,
                                 default = nil)
  if valid_618235 != nil:
    section.add "EnableCloudwatchLogsExports", valid_618235
  var valid_618236 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_618236 = validateParameter(valid_618236, JString, required = false,
                                 default = nil)
  if valid_618236 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_618236
  var valid_618237 = formData.getOrDefault("Tags")
  valid_618237 = validateParameter(valid_618237, JArray, required = false,
                                 default = nil)
  if valid_618237 != nil:
    section.add "Tags", valid_618237
  var valid_618238 = formData.getOrDefault("DBSubnetGroupName")
  valid_618238 = validateParameter(valid_618238, JString, required = false,
                                 default = nil)
  if valid_618238 != nil:
    section.add "DBSubnetGroupName", valid_618238
  var valid_618239 = formData.getOrDefault("OptionGroupName")
  valid_618239 = validateParameter(valid_618239, JString, required = false,
                                 default = nil)
  if valid_618239 != nil:
    section.add "OptionGroupName", valid_618239
  var valid_618240 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_618240 = validateParameter(valid_618240, JString, required = false,
                                 default = nil)
  if valid_618240 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_618240
  var valid_618241 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_618241 = validateParameter(valid_618241, JString, required = false,
                                 default = nil)
  if valid_618241 != nil:
    section.add "DBClusterParameterGroupName", valid_618241
  var valid_618242 = formData.getOrDefault("DBClusterIdentifier")
  valid_618242 = validateParameter(valid_618242, JString, required = true,
                                 default = nil)
  if valid_618242 != nil:
    section.add "DBClusterIdentifier", valid_618242
  var valid_618243 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_618243 = validateParameter(valid_618243, JString, required = false,
                                 default = nil)
  if valid_618243 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_618243
  var valid_618244 = formData.getOrDefault("DeletionProtection")
  valid_618244 = validateParameter(valid_618244, JBool, required = false, default = nil)
  if valid_618244 != nil:
    section.add "DeletionProtection", valid_618244
  var valid_618245 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_618245 = validateParameter(valid_618245, JBool, required = false, default = nil)
  if valid_618245 != nil:
    section.add "CopyTagsToSnapshot", valid_618245
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618246: Call_PostRestoreDBClusterFromSnapshot_618210;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_618246.validator(path, query, header, formData, body)
  let scheme = call_618246.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618246.url(scheme.get, call_618246.host, call_618246.base,
                         call_618246.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618246, url, valid)

proc call*(call_618247: Call_PostRestoreDBClusterFromSnapshot_618210;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; KmsKeyId: string = "";
          EngineMode: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_618248 = newJObject()
  var formData_618249 = newJObject()
  add(formData_618249, "Port", newJInt(Port))
  add(formData_618249, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_618249, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_618249, "EngineVersion", newJString(EngineVersion))
  add(formData_618249, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_618249, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_618249.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_618249, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_618249.add "AvailabilityZones", AvailabilityZones
  add(formData_618249, "KmsKeyId", newJString(KmsKeyId))
  add(formData_618249, "Engine", newJString(Engine))
  add(formData_618249, "EngineMode", newJString(EngineMode))
  add(formData_618249, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_618249.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_618249, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_618248, "Action", newJString(Action))
  if Tags != nil:
    formData_618249.add "Tags", Tags
  add(formData_618249, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_618249, "OptionGroupName", newJString(OptionGroupName))
  add(formData_618249, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_618249, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_618248, "Version", newJString(Version))
  add(formData_618249, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_618249, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_618249, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_618249, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_618247.call(nil, query_618248, nil, formData_618249, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_618210(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_618211, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_618212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_618171 = ref object of OpenApiRestCall_612658
proc url_GetRestoreDBClusterFromSnapshot_618173(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_618172(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_618174 = query.getOrDefault("DatabaseName")
  valid_618174 = validateParameter(valid_618174, JString, required = false,
                                 default = nil)
  if valid_618174 != nil:
    section.add "DatabaseName", valid_618174
  var valid_618175 = query.getOrDefault("DeletionProtection")
  valid_618175 = validateParameter(valid_618175, JBool, required = false, default = nil)
  if valid_618175 != nil:
    section.add "DeletionProtection", valid_618175
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_618176 = query.getOrDefault("Engine")
  valid_618176 = validateParameter(valid_618176, JString, required = true,
                                 default = nil)
  if valid_618176 != nil:
    section.add "Engine", valid_618176
  var valid_618177 = query.getOrDefault("CopyTagsToSnapshot")
  valid_618177 = validateParameter(valid_618177, JBool, required = false, default = nil)
  if valid_618177 != nil:
    section.add "CopyTagsToSnapshot", valid_618177
  var valid_618178 = query.getOrDefault("SnapshotIdentifier")
  valid_618178 = validateParameter(valid_618178, JString, required = true,
                                 default = nil)
  if valid_618178 != nil:
    section.add "SnapshotIdentifier", valid_618178
  var valid_618179 = query.getOrDefault("Tags")
  valid_618179 = validateParameter(valid_618179, JArray, required = false,
                                 default = nil)
  if valid_618179 != nil:
    section.add "Tags", valid_618179
  var valid_618180 = query.getOrDefault("KmsKeyId")
  valid_618180 = validateParameter(valid_618180, JString, required = false,
                                 default = nil)
  if valid_618180 != nil:
    section.add "KmsKeyId", valid_618180
  var valid_618181 = query.getOrDefault("DBClusterIdentifier")
  valid_618181 = validateParameter(valid_618181, JString, required = true,
                                 default = nil)
  if valid_618181 != nil:
    section.add "DBClusterIdentifier", valid_618181
  var valid_618182 = query.getOrDefault("BacktrackWindow")
  valid_618182 = validateParameter(valid_618182, JInt, required = false, default = nil)
  if valid_618182 != nil:
    section.add "BacktrackWindow", valid_618182
  var valid_618183 = query.getOrDefault("EngineMode")
  valid_618183 = validateParameter(valid_618183, JString, required = false,
                                 default = nil)
  if valid_618183 != nil:
    section.add "EngineMode", valid_618183
  var valid_618184 = query.getOrDefault("DBClusterParameterGroupName")
  valid_618184 = validateParameter(valid_618184, JString, required = false,
                                 default = nil)
  if valid_618184 != nil:
    section.add "DBClusterParameterGroupName", valid_618184
  var valid_618185 = query.getOrDefault("AvailabilityZones")
  valid_618185 = validateParameter(valid_618185, JArray, required = false,
                                 default = nil)
  if valid_618185 != nil:
    section.add "AvailabilityZones", valid_618185
  var valid_618186 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_618186 = validateParameter(valid_618186, JString, required = false,
                                 default = nil)
  if valid_618186 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_618186
  var valid_618187 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_618187 = validateParameter(valid_618187, JString, required = false,
                                 default = nil)
  if valid_618187 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_618187
  var valid_618188 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_618188 = validateParameter(valid_618188, JString, required = false,
                                 default = nil)
  if valid_618188 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_618188
  var valid_618189 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_618189 = validateParameter(valid_618189, JBool, required = false, default = nil)
  if valid_618189 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_618189
  var valid_618190 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_618190 = validateParameter(valid_618190, JString, required = false,
                                 default = nil)
  if valid_618190 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_618190
  var valid_618191 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_618191 = validateParameter(valid_618191, JArray, required = false,
                                 default = nil)
  if valid_618191 != nil:
    section.add "EnableCloudwatchLogsExports", valid_618191
  var valid_618192 = query.getOrDefault("EngineVersion")
  valid_618192 = validateParameter(valid_618192, JString, required = false,
                                 default = nil)
  if valid_618192 != nil:
    section.add "EngineVersion", valid_618192
  var valid_618193 = query.getOrDefault("Action")
  valid_618193 = validateParameter(valid_618193, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_618193 != nil:
    section.add "Action", valid_618193
  var valid_618194 = query.getOrDefault("Port")
  valid_618194 = validateParameter(valid_618194, JInt, required = false, default = nil)
  if valid_618194 != nil:
    section.add "Port", valid_618194
  var valid_618195 = query.getOrDefault("VpcSecurityGroupIds")
  valid_618195 = validateParameter(valid_618195, JArray, required = false,
                                 default = nil)
  if valid_618195 != nil:
    section.add "VpcSecurityGroupIds", valid_618195
  var valid_618196 = query.getOrDefault("OptionGroupName")
  valid_618196 = validateParameter(valid_618196, JString, required = false,
                                 default = nil)
  if valid_618196 != nil:
    section.add "OptionGroupName", valid_618196
  var valid_618197 = query.getOrDefault("DBSubnetGroupName")
  valid_618197 = validateParameter(valid_618197, JString, required = false,
                                 default = nil)
  if valid_618197 != nil:
    section.add "DBSubnetGroupName", valid_618197
  var valid_618198 = query.getOrDefault("Version")
  valid_618198 = validateParameter(valid_618198, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618198 != nil:
    section.add "Version", valid_618198
  var valid_618199 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_618199 = validateParameter(valid_618199, JString, required = false,
                                 default = nil)
  if valid_618199 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_618199
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618200 = header.getOrDefault("X-Amz-Signature")
  valid_618200 = validateParameter(valid_618200, JString, required = false,
                                 default = nil)
  if valid_618200 != nil:
    section.add "X-Amz-Signature", valid_618200
  var valid_618201 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618201 = validateParameter(valid_618201, JString, required = false,
                                 default = nil)
  if valid_618201 != nil:
    section.add "X-Amz-Content-Sha256", valid_618201
  var valid_618202 = header.getOrDefault("X-Amz-Date")
  valid_618202 = validateParameter(valid_618202, JString, required = false,
                                 default = nil)
  if valid_618202 != nil:
    section.add "X-Amz-Date", valid_618202
  var valid_618203 = header.getOrDefault("X-Amz-Credential")
  valid_618203 = validateParameter(valid_618203, JString, required = false,
                                 default = nil)
  if valid_618203 != nil:
    section.add "X-Amz-Credential", valid_618203
  var valid_618204 = header.getOrDefault("X-Amz-Security-Token")
  valid_618204 = validateParameter(valid_618204, JString, required = false,
                                 default = nil)
  if valid_618204 != nil:
    section.add "X-Amz-Security-Token", valid_618204
  var valid_618205 = header.getOrDefault("X-Amz-Algorithm")
  valid_618205 = validateParameter(valid_618205, JString, required = false,
                                 default = nil)
  if valid_618205 != nil:
    section.add "X-Amz-Algorithm", valid_618205
  var valid_618206 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618206 = validateParameter(valid_618206, JString, required = false,
                                 default = nil)
  if valid_618206 != nil:
    section.add "X-Amz-SignedHeaders", valid_618206
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618207: Call_GetRestoreDBClusterFromSnapshot_618171;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_618207.validator(path, query, header, formData, body)
  let scheme = call_618207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618207.url(scheme.get, call_618207.host, call_618207.base,
                         call_618207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618207, url, valid)

proc call*(call_618208: Call_GetRestoreDBClusterFromSnapshot_618171;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          DatabaseName: string = ""; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil; KmsKeyId: string = "";
          BacktrackWindow: int = 0; EngineMode: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_618209 = newJObject()
  add(query_618209, "DatabaseName", newJString(DatabaseName))
  add(query_618209, "DeletionProtection", newJBool(DeletionProtection))
  add(query_618209, "Engine", newJString(Engine))
  add(query_618209, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_618209, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if Tags != nil:
    query_618209.add "Tags", Tags
  add(query_618209, "KmsKeyId", newJString(KmsKeyId))
  add(query_618209, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_618209, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_618209, "EngineMode", newJString(EngineMode))
  add(query_618209, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_618209.add "AvailabilityZones", AvailabilityZones
  add(query_618209, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_618209, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_618209, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_618209, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_618209, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if EnableCloudwatchLogsExports != nil:
    query_618209.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_618209, "EngineVersion", newJString(EngineVersion))
  add(query_618209, "Action", newJString(Action))
  add(query_618209, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_618209.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_618209, "OptionGroupName", newJString(OptionGroupName))
  add(query_618209, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_618209, "Version", newJString(Version))
  add(query_618209, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_618208.call(nil, query_618209, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_618171(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_618172, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_618173,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_618282 = ref object of OpenApiRestCall_612658
proc url_PostRestoreDBClusterToPointInTime_618284(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_618283(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618285 = query.getOrDefault("Action")
  valid_618285 = validateParameter(valid_618285, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_618285 != nil:
    section.add "Action", valid_618285
  var valid_618286 = query.getOrDefault("Version")
  valid_618286 = validateParameter(valid_618286, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618286 != nil:
    section.add "Version", valid_618286
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618287 = header.getOrDefault("X-Amz-Signature")
  valid_618287 = validateParameter(valid_618287, JString, required = false,
                                 default = nil)
  if valid_618287 != nil:
    section.add "X-Amz-Signature", valid_618287
  var valid_618288 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618288 = validateParameter(valid_618288, JString, required = false,
                                 default = nil)
  if valid_618288 != nil:
    section.add "X-Amz-Content-Sha256", valid_618288
  var valid_618289 = header.getOrDefault("X-Amz-Date")
  valid_618289 = validateParameter(valid_618289, JString, required = false,
                                 default = nil)
  if valid_618289 != nil:
    section.add "X-Amz-Date", valid_618289
  var valid_618290 = header.getOrDefault("X-Amz-Credential")
  valid_618290 = validateParameter(valid_618290, JString, required = false,
                                 default = nil)
  if valid_618290 != nil:
    section.add "X-Amz-Credential", valid_618290
  var valid_618291 = header.getOrDefault("X-Amz-Security-Token")
  valid_618291 = validateParameter(valid_618291, JString, required = false,
                                 default = nil)
  if valid_618291 != nil:
    section.add "X-Amz-Security-Token", valid_618291
  var valid_618292 = header.getOrDefault("X-Amz-Algorithm")
  valid_618292 = validateParameter(valid_618292, JString, required = false,
                                 default = nil)
  if valid_618292 != nil:
    section.add "X-Amz-Algorithm", valid_618292
  var valid_618293 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618293 = validateParameter(valid_618293, JString, required = false,
                                 default = nil)
  if valid_618293 != nil:
    section.add "X-Amz-SignedHeaders", valid_618293
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_618294 = formData.getOrDefault("Port")
  valid_618294 = validateParameter(valid_618294, JInt, required = false, default = nil)
  if valid_618294 != nil:
    section.add "Port", valid_618294
  var valid_618295 = formData.getOrDefault("BacktrackWindow")
  valid_618295 = validateParameter(valid_618295, JInt, required = false, default = nil)
  if valid_618295 != nil:
    section.add "BacktrackWindow", valid_618295
  var valid_618296 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_618296 = validateParameter(valid_618296, JArray, required = false,
                                 default = nil)
  if valid_618296 != nil:
    section.add "VpcSecurityGroupIds", valid_618296
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_618297 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_618297 = validateParameter(valid_618297, JString, required = true,
                                 default = nil)
  if valid_618297 != nil:
    section.add "SourceDBClusterIdentifier", valid_618297
  var valid_618298 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_618298 = validateParameter(valid_618298, JBool, required = false, default = nil)
  if valid_618298 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_618298
  var valid_618299 = formData.getOrDefault("KmsKeyId")
  valid_618299 = validateParameter(valid_618299, JString, required = false,
                                 default = nil)
  if valid_618299 != nil:
    section.add "KmsKeyId", valid_618299
  var valid_618300 = formData.getOrDefault("RestoreType")
  valid_618300 = validateParameter(valid_618300, JString, required = false,
                                 default = nil)
  if valid_618300 != nil:
    section.add "RestoreType", valid_618300
  var valid_618301 = formData.getOrDefault("UseLatestRestorableTime")
  valid_618301 = validateParameter(valid_618301, JBool, required = false, default = nil)
  if valid_618301 != nil:
    section.add "UseLatestRestorableTime", valid_618301
  var valid_618302 = formData.getOrDefault("RestoreToTime")
  valid_618302 = validateParameter(valid_618302, JString, required = false,
                                 default = nil)
  if valid_618302 != nil:
    section.add "RestoreToTime", valid_618302
  var valid_618303 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_618303 = validateParameter(valid_618303, JArray, required = false,
                                 default = nil)
  if valid_618303 != nil:
    section.add "EnableCloudwatchLogsExports", valid_618303
  var valid_618304 = formData.getOrDefault("Tags")
  valid_618304 = validateParameter(valid_618304, JArray, required = false,
                                 default = nil)
  if valid_618304 != nil:
    section.add "Tags", valid_618304
  var valid_618305 = formData.getOrDefault("DBSubnetGroupName")
  valid_618305 = validateParameter(valid_618305, JString, required = false,
                                 default = nil)
  if valid_618305 != nil:
    section.add "DBSubnetGroupName", valid_618305
  var valid_618306 = formData.getOrDefault("OptionGroupName")
  valid_618306 = validateParameter(valid_618306, JString, required = false,
                                 default = nil)
  if valid_618306 != nil:
    section.add "OptionGroupName", valid_618306
  var valid_618307 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_618307 = validateParameter(valid_618307, JString, required = false,
                                 default = nil)
  if valid_618307 != nil:
    section.add "DBClusterParameterGroupName", valid_618307
  var valid_618308 = formData.getOrDefault("DBClusterIdentifier")
  valid_618308 = validateParameter(valid_618308, JString, required = true,
                                 default = nil)
  if valid_618308 != nil:
    section.add "DBClusterIdentifier", valid_618308
  var valid_618309 = formData.getOrDefault("DeletionProtection")
  valid_618309 = validateParameter(valid_618309, JBool, required = false, default = nil)
  if valid_618309 != nil:
    section.add "DeletionProtection", valid_618309
  var valid_618310 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_618310 = validateParameter(valid_618310, JBool, required = false, default = nil)
  if valid_618310 != nil:
    section.add "CopyTagsToSnapshot", valid_618310
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618311: Call_PostRestoreDBClusterToPointInTime_618282;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_618311.validator(path, query, header, formData, body)
  let scheme = call_618311.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618311.url(scheme.get, call_618311.host, call_618311.base,
                         call_618311.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618311, url, valid)

proc call*(call_618312: Call_PostRestoreDBClusterToPointInTime_618282;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; BacktrackWindow: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; UseLatestRestorableTime: bool = false;
          RestoreToTime: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_618313 = newJObject()
  var formData_618314 = newJObject()
  add(formData_618314, "Port", newJInt(Port))
  add(formData_618314, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_618314.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_618314, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_618314, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_618314, "KmsKeyId", newJString(KmsKeyId))
  add(formData_618314, "RestoreType", newJString(RestoreType))
  add(formData_618314, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_618314, "RestoreToTime", newJString(RestoreToTime))
  if EnableCloudwatchLogsExports != nil:
    formData_618314.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_618313, "Action", newJString(Action))
  if Tags != nil:
    formData_618314.add "Tags", Tags
  add(formData_618314, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_618314, "OptionGroupName", newJString(OptionGroupName))
  add(formData_618314, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_618313, "Version", newJString(Version))
  add(formData_618314, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_618314, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_618314, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_618312.call(nil, query_618313, nil, formData_618314, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_618282(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_618283, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_618284,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_618250 = ref object of OpenApiRestCall_612658
proc url_GetRestoreDBClusterToPointInTime_618252(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_618251(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_618253 = query.getOrDefault("DeletionProtection")
  valid_618253 = validateParameter(valid_618253, JBool, required = false, default = nil)
  if valid_618253 != nil:
    section.add "DeletionProtection", valid_618253
  var valid_618254 = query.getOrDefault("RestoreType")
  valid_618254 = validateParameter(valid_618254, JString, required = false,
                                 default = nil)
  if valid_618254 != nil:
    section.add "RestoreType", valid_618254
  var valid_618255 = query.getOrDefault("UseLatestRestorableTime")
  valid_618255 = validateParameter(valid_618255, JBool, required = false, default = nil)
  if valid_618255 != nil:
    section.add "UseLatestRestorableTime", valid_618255
  var valid_618256 = query.getOrDefault("CopyTagsToSnapshot")
  valid_618256 = validateParameter(valid_618256, JBool, required = false, default = nil)
  if valid_618256 != nil:
    section.add "CopyTagsToSnapshot", valid_618256
  var valid_618257 = query.getOrDefault("Tags")
  valid_618257 = validateParameter(valid_618257, JArray, required = false,
                                 default = nil)
  if valid_618257 != nil:
    section.add "Tags", valid_618257
  var valid_618258 = query.getOrDefault("KmsKeyId")
  valid_618258 = validateParameter(valid_618258, JString, required = false,
                                 default = nil)
  if valid_618258 != nil:
    section.add "KmsKeyId", valid_618258
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_618259 = query.getOrDefault("DBClusterIdentifier")
  valid_618259 = validateParameter(valid_618259, JString, required = true,
                                 default = nil)
  if valid_618259 != nil:
    section.add "DBClusterIdentifier", valid_618259
  var valid_618260 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_618260 = validateParameter(valid_618260, JString, required = true,
                                 default = nil)
  if valid_618260 != nil:
    section.add "SourceDBClusterIdentifier", valid_618260
  var valid_618261 = query.getOrDefault("BacktrackWindow")
  valid_618261 = validateParameter(valid_618261, JInt, required = false, default = nil)
  if valid_618261 != nil:
    section.add "BacktrackWindow", valid_618261
  var valid_618262 = query.getOrDefault("DBClusterParameterGroupName")
  valid_618262 = validateParameter(valid_618262, JString, required = false,
                                 default = nil)
  if valid_618262 != nil:
    section.add "DBClusterParameterGroupName", valid_618262
  var valid_618263 = query.getOrDefault("RestoreToTime")
  valid_618263 = validateParameter(valid_618263, JString, required = false,
                                 default = nil)
  if valid_618263 != nil:
    section.add "RestoreToTime", valid_618263
  var valid_618264 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_618264 = validateParameter(valid_618264, JBool, required = false, default = nil)
  if valid_618264 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_618264
  var valid_618265 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_618265 = validateParameter(valid_618265, JArray, required = false,
                                 default = nil)
  if valid_618265 != nil:
    section.add "EnableCloudwatchLogsExports", valid_618265
  var valid_618266 = query.getOrDefault("Action")
  valid_618266 = validateParameter(valid_618266, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_618266 != nil:
    section.add "Action", valid_618266
  var valid_618267 = query.getOrDefault("Port")
  valid_618267 = validateParameter(valid_618267, JInt, required = false, default = nil)
  if valid_618267 != nil:
    section.add "Port", valid_618267
  var valid_618268 = query.getOrDefault("VpcSecurityGroupIds")
  valid_618268 = validateParameter(valid_618268, JArray, required = false,
                                 default = nil)
  if valid_618268 != nil:
    section.add "VpcSecurityGroupIds", valid_618268
  var valid_618269 = query.getOrDefault("OptionGroupName")
  valid_618269 = validateParameter(valid_618269, JString, required = false,
                                 default = nil)
  if valid_618269 != nil:
    section.add "OptionGroupName", valid_618269
  var valid_618270 = query.getOrDefault("DBSubnetGroupName")
  valid_618270 = validateParameter(valid_618270, JString, required = false,
                                 default = nil)
  if valid_618270 != nil:
    section.add "DBSubnetGroupName", valid_618270
  var valid_618271 = query.getOrDefault("Version")
  valid_618271 = validateParameter(valid_618271, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618271 != nil:
    section.add "Version", valid_618271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618272 = header.getOrDefault("X-Amz-Signature")
  valid_618272 = validateParameter(valid_618272, JString, required = false,
                                 default = nil)
  if valid_618272 != nil:
    section.add "X-Amz-Signature", valid_618272
  var valid_618273 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618273 = validateParameter(valid_618273, JString, required = false,
                                 default = nil)
  if valid_618273 != nil:
    section.add "X-Amz-Content-Sha256", valid_618273
  var valid_618274 = header.getOrDefault("X-Amz-Date")
  valid_618274 = validateParameter(valid_618274, JString, required = false,
                                 default = nil)
  if valid_618274 != nil:
    section.add "X-Amz-Date", valid_618274
  var valid_618275 = header.getOrDefault("X-Amz-Credential")
  valid_618275 = validateParameter(valid_618275, JString, required = false,
                                 default = nil)
  if valid_618275 != nil:
    section.add "X-Amz-Credential", valid_618275
  var valid_618276 = header.getOrDefault("X-Amz-Security-Token")
  valid_618276 = validateParameter(valid_618276, JString, required = false,
                                 default = nil)
  if valid_618276 != nil:
    section.add "X-Amz-Security-Token", valid_618276
  var valid_618277 = header.getOrDefault("X-Amz-Algorithm")
  valid_618277 = validateParameter(valid_618277, JString, required = false,
                                 default = nil)
  if valid_618277 != nil:
    section.add "X-Amz-Algorithm", valid_618277
  var valid_618278 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618278 = validateParameter(valid_618278, JString, required = false,
                                 default = nil)
  if valid_618278 != nil:
    section.add "X-Amz-SignedHeaders", valid_618278
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618279: Call_GetRestoreDBClusterToPointInTime_618250;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_618279.validator(path, query, header, formData, body)
  let scheme = call_618279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618279.url(scheme.get, call_618279.host, call_618279.base,
                         call_618279.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618279, url, valid)

proc call*(call_618280: Call_GetRestoreDBClusterToPointInTime_618250;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          DeletionProtection: bool = false; RestoreType: string = "";
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Tags: JsonNode = nil; KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = ""; RestoreToTime: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_618281 = newJObject()
  add(query_618281, "DeletionProtection", newJBool(DeletionProtection))
  add(query_618281, "RestoreType", newJString(RestoreType))
  add(query_618281, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_618281, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_618281.add "Tags", Tags
  add(query_618281, "KmsKeyId", newJString(KmsKeyId))
  add(query_618281, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_618281, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_618281, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_618281, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_618281, "RestoreToTime", newJString(RestoreToTime))
  add(query_618281, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_618281.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_618281, "Action", newJString(Action))
  add(query_618281, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_618281.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_618281, "OptionGroupName", newJString(OptionGroupName))
  add(query_618281, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_618281, "Version", newJString(Version))
  result = call_618280.call(nil, query_618281, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_618250(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_618251, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_618252,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromDBSnapshot_618358 = ref object of OpenApiRestCall_612658
proc url_PostRestoreDBInstanceFromDBSnapshot_618360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceFromDBSnapshot_618359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618361 = query.getOrDefault("Action")
  valid_618361 = validateParameter(valid_618361, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_618361 != nil:
    section.add "Action", valid_618361
  var valid_618362 = query.getOrDefault("Version")
  valid_618362 = validateParameter(valid_618362, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618362 != nil:
    section.add "Version", valid_618362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618363 = header.getOrDefault("X-Amz-Signature")
  valid_618363 = validateParameter(valid_618363, JString, required = false,
                                 default = nil)
  if valid_618363 != nil:
    section.add "X-Amz-Signature", valid_618363
  var valid_618364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618364 = validateParameter(valid_618364, JString, required = false,
                                 default = nil)
  if valid_618364 != nil:
    section.add "X-Amz-Content-Sha256", valid_618364
  var valid_618365 = header.getOrDefault("X-Amz-Date")
  valid_618365 = validateParameter(valid_618365, JString, required = false,
                                 default = nil)
  if valid_618365 != nil:
    section.add "X-Amz-Date", valid_618365
  var valid_618366 = header.getOrDefault("X-Amz-Credential")
  valid_618366 = validateParameter(valid_618366, JString, required = false,
                                 default = nil)
  if valid_618366 != nil:
    section.add "X-Amz-Credential", valid_618366
  var valid_618367 = header.getOrDefault("X-Amz-Security-Token")
  valid_618367 = validateParameter(valid_618367, JString, required = false,
                                 default = nil)
  if valid_618367 != nil:
    section.add "X-Amz-Security-Token", valid_618367
  var valid_618368 = header.getOrDefault("X-Amz-Algorithm")
  valid_618368 = validateParameter(valid_618368, JString, required = false,
                                 default = nil)
  if valid_618368 != nil:
    section.add "X-Amz-Algorithm", valid_618368
  var valid_618369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618369 = validateParameter(valid_618369, JString, required = false,
                                 default = nil)
  if valid_618369 != nil:
    section.add "X-Amz-SignedHeaders", valid_618369
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_618370 = formData.getOrDefault("Port")
  valid_618370 = validateParameter(valid_618370, JInt, required = false, default = nil)
  if valid_618370 != nil:
    section.add "Port", valid_618370
  var valid_618371 = formData.getOrDefault("DBInstanceClass")
  valid_618371 = validateParameter(valid_618371, JString, required = false,
                                 default = nil)
  if valid_618371 != nil:
    section.add "DBInstanceClass", valid_618371
  var valid_618372 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_618372 = validateParameter(valid_618372, JBool, required = false, default = nil)
  if valid_618372 != nil:
    section.add "UseDefaultProcessorFeatures", valid_618372
  var valid_618373 = formData.getOrDefault("MultiAZ")
  valid_618373 = validateParameter(valid_618373, JBool, required = false, default = nil)
  if valid_618373 != nil:
    section.add "MultiAZ", valid_618373
  var valid_618374 = formData.getOrDefault("Domain")
  valid_618374 = validateParameter(valid_618374, JString, required = false,
                                 default = nil)
  if valid_618374 != nil:
    section.add "Domain", valid_618374
  var valid_618375 = formData.getOrDefault("DBParameterGroupName")
  valid_618375 = validateParameter(valid_618375, JString, required = false,
                                 default = nil)
  if valid_618375 != nil:
    section.add "DBParameterGroupName", valid_618375
  var valid_618376 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_618376 = validateParameter(valid_618376, JArray, required = false,
                                 default = nil)
  if valid_618376 != nil:
    section.add "VpcSecurityGroupIds", valid_618376
  var valid_618377 = formData.getOrDefault("AvailabilityZone")
  valid_618377 = validateParameter(valid_618377, JString, required = false,
                                 default = nil)
  if valid_618377 != nil:
    section.add "AvailabilityZone", valid_618377
  var valid_618378 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_618378 = validateParameter(valid_618378, JBool, required = false, default = nil)
  if valid_618378 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_618378
  var valid_618379 = formData.getOrDefault("Engine")
  valid_618379 = validateParameter(valid_618379, JString, required = false,
                                 default = nil)
  if valid_618379 != nil:
    section.add "Engine", valid_618379
  var valid_618380 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_618380 = validateParameter(valid_618380, JBool, required = false, default = nil)
  if valid_618380 != nil:
    section.add "AutoMinorVersionUpgrade", valid_618380
  var valid_618381 = formData.getOrDefault("TdeCredentialPassword")
  valid_618381 = validateParameter(valid_618381, JString, required = false,
                                 default = nil)
  if valid_618381 != nil:
    section.add "TdeCredentialPassword", valid_618381
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_618382 = formData.getOrDefault("DBInstanceIdentifier")
  valid_618382 = validateParameter(valid_618382, JString, required = true,
                                 default = nil)
  if valid_618382 != nil:
    section.add "DBInstanceIdentifier", valid_618382
  var valid_618383 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_618383 = validateParameter(valid_618383, JString, required = true,
                                 default = nil)
  if valid_618383 != nil:
    section.add "DBSnapshotIdentifier", valid_618383
  var valid_618384 = formData.getOrDefault("DBName")
  valid_618384 = validateParameter(valid_618384, JString, required = false,
                                 default = nil)
  if valid_618384 != nil:
    section.add "DBName", valid_618384
  var valid_618385 = formData.getOrDefault("Iops")
  valid_618385 = validateParameter(valid_618385, JInt, required = false, default = nil)
  if valid_618385 != nil:
    section.add "Iops", valid_618385
  var valid_618386 = formData.getOrDefault("TdeCredentialArn")
  valid_618386 = validateParameter(valid_618386, JString, required = false,
                                 default = nil)
  if valid_618386 != nil:
    section.add "TdeCredentialArn", valid_618386
  var valid_618387 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_618387 = validateParameter(valid_618387, JArray, required = false,
                                 default = nil)
  if valid_618387 != nil:
    section.add "EnableCloudwatchLogsExports", valid_618387
  var valid_618388 = formData.getOrDefault("PubliclyAccessible")
  valid_618388 = validateParameter(valid_618388, JBool, required = false, default = nil)
  if valid_618388 != nil:
    section.add "PubliclyAccessible", valid_618388
  var valid_618389 = formData.getOrDefault("LicenseModel")
  valid_618389 = validateParameter(valid_618389, JString, required = false,
                                 default = nil)
  if valid_618389 != nil:
    section.add "LicenseModel", valid_618389
  var valid_618390 = formData.getOrDefault("Tags")
  valid_618390 = validateParameter(valid_618390, JArray, required = false,
                                 default = nil)
  if valid_618390 != nil:
    section.add "Tags", valid_618390
  var valid_618391 = formData.getOrDefault("DBSubnetGroupName")
  valid_618391 = validateParameter(valid_618391, JString, required = false,
                                 default = nil)
  if valid_618391 != nil:
    section.add "DBSubnetGroupName", valid_618391
  var valid_618392 = formData.getOrDefault("DomainIAMRoleName")
  valid_618392 = validateParameter(valid_618392, JString, required = false,
                                 default = nil)
  if valid_618392 != nil:
    section.add "DomainIAMRoleName", valid_618392
  var valid_618393 = formData.getOrDefault("OptionGroupName")
  valid_618393 = validateParameter(valid_618393, JString, required = false,
                                 default = nil)
  if valid_618393 != nil:
    section.add "OptionGroupName", valid_618393
  var valid_618394 = formData.getOrDefault("StorageType")
  valid_618394 = validateParameter(valid_618394, JString, required = false,
                                 default = nil)
  if valid_618394 != nil:
    section.add "StorageType", valid_618394
  var valid_618395 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_618395 = validateParameter(valid_618395, JBool, required = false, default = nil)
  if valid_618395 != nil:
    section.add "CopyTagsToSnapshot", valid_618395
  var valid_618396 = formData.getOrDefault("DeletionProtection")
  valid_618396 = validateParameter(valid_618396, JBool, required = false, default = nil)
  if valid_618396 != nil:
    section.add "DeletionProtection", valid_618396
  var valid_618397 = formData.getOrDefault("ProcessorFeatures")
  valid_618397 = validateParameter(valid_618397, JArray, required = false,
                                 default = nil)
  if valid_618397 != nil:
    section.add "ProcessorFeatures", valid_618397
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618398: Call_PostRestoreDBInstanceFromDBSnapshot_618358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_618398.validator(path, query, header, formData, body)
  let scheme = call_618398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618398.url(scheme.get, call_618398.host, call_618398.base,
                         call_618398.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618398, url, valid)

proc call*(call_618399: Call_PostRestoreDBInstanceFromDBSnapshot_618358;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = ""; DBParameterGroupName: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_618400 = newJObject()
  var formData_618401 = newJObject()
  add(formData_618401, "Port", newJInt(Port))
  add(formData_618401, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_618401, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_618401, "MultiAZ", newJBool(MultiAZ))
  add(formData_618401, "Domain", newJString(Domain))
  add(formData_618401, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_618401.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_618401, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_618401, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_618401, "Engine", newJString(Engine))
  add(formData_618401, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_618401, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_618401, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_618401, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(formData_618401, "DBName", newJString(DBName))
  add(formData_618401, "Iops", newJInt(Iops))
  add(formData_618401, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_618401.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_618401, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_618400, "Action", newJString(Action))
  add(formData_618401, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_618401.add "Tags", Tags
  add(formData_618401, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_618401, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_618401, "OptionGroupName", newJString(OptionGroupName))
  add(query_618400, "Version", newJString(Version))
  add(formData_618401, "StorageType", newJString(StorageType))
  add(formData_618401, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_618401, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_618401.add "ProcessorFeatures", ProcessorFeatures
  result = call_618399.call(nil, query_618400, nil, formData_618401, nil)

var postRestoreDBInstanceFromDBSnapshot* = Call_PostRestoreDBInstanceFromDBSnapshot_618358(
    name: "postRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_PostRestoreDBInstanceFromDBSnapshot_618359, base: "/",
    url: url_PostRestoreDBInstanceFromDBSnapshot_618360,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromDBSnapshot_618315 = ref object of OpenApiRestCall_612658
proc url_GetRestoreDBInstanceFromDBSnapshot_618317(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceFromDBSnapshot_618316(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_618318 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_618318 = validateParameter(valid_618318, JBool, required = false, default = nil)
  if valid_618318 != nil:
    section.add "UseDefaultProcessorFeatures", valid_618318
  var valid_618319 = query.getOrDefault("DBName")
  valid_618319 = validateParameter(valid_618319, JString, required = false,
                                 default = nil)
  if valid_618319 != nil:
    section.add "DBName", valid_618319
  var valid_618320 = query.getOrDefault("TdeCredentialPassword")
  valid_618320 = validateParameter(valid_618320, JString, required = false,
                                 default = nil)
  if valid_618320 != nil:
    section.add "TdeCredentialPassword", valid_618320
  var valid_618321 = query.getOrDefault("DeletionProtection")
  valid_618321 = validateParameter(valid_618321, JBool, required = false, default = nil)
  if valid_618321 != nil:
    section.add "DeletionProtection", valid_618321
  var valid_618322 = query.getOrDefault("Engine")
  valid_618322 = validateParameter(valid_618322, JString, required = false,
                                 default = nil)
  if valid_618322 != nil:
    section.add "Engine", valid_618322
  var valid_618323 = query.getOrDefault("CopyTagsToSnapshot")
  valid_618323 = validateParameter(valid_618323, JBool, required = false, default = nil)
  if valid_618323 != nil:
    section.add "CopyTagsToSnapshot", valid_618323
  var valid_618324 = query.getOrDefault("DBParameterGroupName")
  valid_618324 = validateParameter(valid_618324, JString, required = false,
                                 default = nil)
  if valid_618324 != nil:
    section.add "DBParameterGroupName", valid_618324
  var valid_618325 = query.getOrDefault("Tags")
  valid_618325 = validateParameter(valid_618325, JArray, required = false,
                                 default = nil)
  if valid_618325 != nil:
    section.add "Tags", valid_618325
  var valid_618326 = query.getOrDefault("LicenseModel")
  valid_618326 = validateParameter(valid_618326, JString, required = false,
                                 default = nil)
  if valid_618326 != nil:
    section.add "LicenseModel", valid_618326
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_618327 = query.getOrDefault("DBInstanceIdentifier")
  valid_618327 = validateParameter(valid_618327, JString, required = true,
                                 default = nil)
  if valid_618327 != nil:
    section.add "DBInstanceIdentifier", valid_618327
  var valid_618328 = query.getOrDefault("DBSnapshotIdentifier")
  valid_618328 = validateParameter(valid_618328, JString, required = true,
                                 default = nil)
  if valid_618328 != nil:
    section.add "DBSnapshotIdentifier", valid_618328
  var valid_618329 = query.getOrDefault("TdeCredentialArn")
  valid_618329 = validateParameter(valid_618329, JString, required = false,
                                 default = nil)
  if valid_618329 != nil:
    section.add "TdeCredentialArn", valid_618329
  var valid_618330 = query.getOrDefault("ProcessorFeatures")
  valid_618330 = validateParameter(valid_618330, JArray, required = false,
                                 default = nil)
  if valid_618330 != nil:
    section.add "ProcessorFeatures", valid_618330
  var valid_618331 = query.getOrDefault("StorageType")
  valid_618331 = validateParameter(valid_618331, JString, required = false,
                                 default = nil)
  if valid_618331 != nil:
    section.add "StorageType", valid_618331
  var valid_618332 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_618332 = validateParameter(valid_618332, JBool, required = false, default = nil)
  if valid_618332 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_618332
  var valid_618333 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_618333 = validateParameter(valid_618333, JArray, required = false,
                                 default = nil)
  if valid_618333 != nil:
    section.add "EnableCloudwatchLogsExports", valid_618333
  var valid_618334 = query.getOrDefault("Action")
  valid_618334 = validateParameter(valid_618334, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_618334 != nil:
    section.add "Action", valid_618334
  var valid_618335 = query.getOrDefault("MultiAZ")
  valid_618335 = validateParameter(valid_618335, JBool, required = false, default = nil)
  if valid_618335 != nil:
    section.add "MultiAZ", valid_618335
  var valid_618336 = query.getOrDefault("Port")
  valid_618336 = validateParameter(valid_618336, JInt, required = false, default = nil)
  if valid_618336 != nil:
    section.add "Port", valid_618336
  var valid_618337 = query.getOrDefault("Domain")
  valid_618337 = validateParameter(valid_618337, JString, required = false,
                                 default = nil)
  if valid_618337 != nil:
    section.add "Domain", valid_618337
  var valid_618338 = query.getOrDefault("VpcSecurityGroupIds")
  valid_618338 = validateParameter(valid_618338, JArray, required = false,
                                 default = nil)
  if valid_618338 != nil:
    section.add "VpcSecurityGroupIds", valid_618338
  var valid_618339 = query.getOrDefault("AvailabilityZone")
  valid_618339 = validateParameter(valid_618339, JString, required = false,
                                 default = nil)
  if valid_618339 != nil:
    section.add "AvailabilityZone", valid_618339
  var valid_618340 = query.getOrDefault("OptionGroupName")
  valid_618340 = validateParameter(valid_618340, JString, required = false,
                                 default = nil)
  if valid_618340 != nil:
    section.add "OptionGroupName", valid_618340
  var valid_618341 = query.getOrDefault("DBSubnetGroupName")
  valid_618341 = validateParameter(valid_618341, JString, required = false,
                                 default = nil)
  if valid_618341 != nil:
    section.add "DBSubnetGroupName", valid_618341
  var valid_618342 = query.getOrDefault("Version")
  valid_618342 = validateParameter(valid_618342, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618342 != nil:
    section.add "Version", valid_618342
  var valid_618343 = query.getOrDefault("DBInstanceClass")
  valid_618343 = validateParameter(valid_618343, JString, required = false,
                                 default = nil)
  if valid_618343 != nil:
    section.add "DBInstanceClass", valid_618343
  var valid_618344 = query.getOrDefault("PubliclyAccessible")
  valid_618344 = validateParameter(valid_618344, JBool, required = false, default = nil)
  if valid_618344 != nil:
    section.add "PubliclyAccessible", valid_618344
  var valid_618345 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_618345 = validateParameter(valid_618345, JBool, required = false, default = nil)
  if valid_618345 != nil:
    section.add "AutoMinorVersionUpgrade", valid_618345
  var valid_618346 = query.getOrDefault("Iops")
  valid_618346 = validateParameter(valid_618346, JInt, required = false, default = nil)
  if valid_618346 != nil:
    section.add "Iops", valid_618346
  var valid_618347 = query.getOrDefault("DomainIAMRoleName")
  valid_618347 = validateParameter(valid_618347, JString, required = false,
                                 default = nil)
  if valid_618347 != nil:
    section.add "DomainIAMRoleName", valid_618347
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618348 = header.getOrDefault("X-Amz-Signature")
  valid_618348 = validateParameter(valid_618348, JString, required = false,
                                 default = nil)
  if valid_618348 != nil:
    section.add "X-Amz-Signature", valid_618348
  var valid_618349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618349 = validateParameter(valid_618349, JString, required = false,
                                 default = nil)
  if valid_618349 != nil:
    section.add "X-Amz-Content-Sha256", valid_618349
  var valid_618350 = header.getOrDefault("X-Amz-Date")
  valid_618350 = validateParameter(valid_618350, JString, required = false,
                                 default = nil)
  if valid_618350 != nil:
    section.add "X-Amz-Date", valid_618350
  var valid_618351 = header.getOrDefault("X-Amz-Credential")
  valid_618351 = validateParameter(valid_618351, JString, required = false,
                                 default = nil)
  if valid_618351 != nil:
    section.add "X-Amz-Credential", valid_618351
  var valid_618352 = header.getOrDefault("X-Amz-Security-Token")
  valid_618352 = validateParameter(valid_618352, JString, required = false,
                                 default = nil)
  if valid_618352 != nil:
    section.add "X-Amz-Security-Token", valid_618352
  var valid_618353 = header.getOrDefault("X-Amz-Algorithm")
  valid_618353 = validateParameter(valid_618353, JString, required = false,
                                 default = nil)
  if valid_618353 != nil:
    section.add "X-Amz-Algorithm", valid_618353
  var valid_618354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618354 = validateParameter(valid_618354, JString, required = false,
                                 default = nil)
  if valid_618354 != nil:
    section.add "X-Amz-SignedHeaders", valid_618354
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618355: Call_GetRestoreDBInstanceFromDBSnapshot_618315;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_618355.validator(path, query, header, formData, body)
  let scheme = call_618355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618355.url(scheme.get, call_618355.host, call_618355.base,
                         call_618355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618355, url, valid)

proc call*(call_618356: Call_GetRestoreDBInstanceFromDBSnapshot_618315;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; CopyTagsToSnapshot: bool = false;
          DBParameterGroupName: string = ""; Tags: JsonNode = nil;
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromDBSnapshot"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          DBInstanceClass: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_618357 = newJObject()
  add(query_618357, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_618357, "DBName", newJString(DBName))
  add(query_618357, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_618357, "DeletionProtection", newJBool(DeletionProtection))
  add(query_618357, "Engine", newJString(Engine))
  add(query_618357, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_618357, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_618357.add "Tags", Tags
  add(query_618357, "LicenseModel", newJString(LicenseModel))
  add(query_618357, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_618357, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_618357, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_618357.add "ProcessorFeatures", ProcessorFeatures
  add(query_618357, "StorageType", newJString(StorageType))
  add(query_618357, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_618357.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_618357, "Action", newJString(Action))
  add(query_618357, "MultiAZ", newJBool(MultiAZ))
  add(query_618357, "Port", newJInt(Port))
  add(query_618357, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_618357.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_618357, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_618357, "OptionGroupName", newJString(OptionGroupName))
  add(query_618357, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_618357, "Version", newJString(Version))
  add(query_618357, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_618357, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_618357, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_618357, "Iops", newJInt(Iops))
  add(query_618357, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_618356.call(nil, query_618357, nil, nil, nil)

var getRestoreDBInstanceFromDBSnapshot* = Call_GetRestoreDBInstanceFromDBSnapshot_618315(
    name: "getRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_GetRestoreDBInstanceFromDBSnapshot_618316, base: "/",
    url: url_GetRestoreDBInstanceFromDBSnapshot_618317,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromS3_618460 = ref object of OpenApiRestCall_612658
proc url_PostRestoreDBInstanceFromS3_618462(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceFromS3_618461(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618463 = query.getOrDefault("Action")
  valid_618463 = validateParameter(valid_618463, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_618463 != nil:
    section.add "Action", valid_618463
  var valid_618464 = query.getOrDefault("Version")
  valid_618464 = validateParameter(valid_618464, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618464 != nil:
    section.add "Version", valid_618464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_618465 = header.getOrDefault("X-Amz-Security-Token")
  valid_618465 = validateParameter(valid_618465, JString, required = false,
                                 default = nil)
  if valid_618465 != nil:
    section.add "X-Amz-Security-Token", valid_618465
  var valid_618466 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618466 = validateParameter(valid_618466, JString, required = false,
                                 default = nil)
  if valid_618466 != nil:
    section.add "X-Amz-SignedHeaders", valid_618466
  var valid_618467 = header.getOrDefault("X-Amz-Signature")
  valid_618467 = validateParameter(valid_618467, JString, required = false,
                                 default = nil)
  if valid_618467 != nil:
    section.add "X-Amz-Signature", valid_618467
  var valid_618468 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618468 = validateParameter(valid_618468, JString, required = false,
                                 default = nil)
  if valid_618468 != nil:
    section.add "X-Amz-Content-Sha256", valid_618468
  var valid_618469 = header.getOrDefault("X-Amz-Date")
  valid_618469 = validateParameter(valid_618469, JString, required = false,
                                 default = nil)
  if valid_618469 != nil:
    section.add "X-Amz-Date", valid_618469
  var valid_618470 = header.getOrDefault("X-Amz-Credential")
  valid_618470 = validateParameter(valid_618470, JString, required = false,
                                 default = nil)
  if valid_618470 != nil:
    section.add "X-Amz-Credential", valid_618470
  var valid_618471 = header.getOrDefault("X-Amz-Algorithm")
  valid_618471 = validateParameter(valid_618471, JString, required = false,
                                 default = nil)
  if valid_618471 != nil:
    section.add "X-Amz-Algorithm", valid_618471
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_618472 = formData.getOrDefault("S3IngestionRoleArn")
  valid_618472 = validateParameter(valid_618472, JString, required = true,
                                 default = nil)
  if valid_618472 != nil:
    section.add "S3IngestionRoleArn", valid_618472
  var valid_618473 = formData.getOrDefault("Port")
  valid_618473 = validateParameter(valid_618473, JInt, required = false, default = nil)
  if valid_618473 != nil:
    section.add "Port", valid_618473
  var valid_618474 = formData.getOrDefault("MultiAZ")
  valid_618474 = validateParameter(valid_618474, JBool, required = false, default = nil)
  if valid_618474 != nil:
    section.add "MultiAZ", valid_618474
  var valid_618475 = formData.getOrDefault("MasterUsername")
  valid_618475 = validateParameter(valid_618475, JString, required = false,
                                 default = nil)
  if valid_618475 != nil:
    section.add "MasterUsername", valid_618475
  var valid_618476 = formData.getOrDefault("MonitoringRoleArn")
  valid_618476 = validateParameter(valid_618476, JString, required = false,
                                 default = nil)
  if valid_618476 != nil:
    section.add "MonitoringRoleArn", valid_618476
  var valid_618477 = formData.getOrDefault("MonitoringInterval")
  valid_618477 = validateParameter(valid_618477, JInt, required = false, default = nil)
  if valid_618477 != nil:
    section.add "MonitoringInterval", valid_618477
  var valid_618478 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_618478 = validateParameter(valid_618478, JArray, required = false,
                                 default = nil)
  if valid_618478 != nil:
    section.add "VpcSecurityGroupIds", valid_618478
  var valid_618479 = formData.getOrDefault("AvailabilityZone")
  valid_618479 = validateParameter(valid_618479, JString, required = false,
                                 default = nil)
  if valid_618479 != nil:
    section.add "AvailabilityZone", valid_618479
  var valid_618480 = formData.getOrDefault("EnablePerformanceInsights")
  valid_618480 = validateParameter(valid_618480, JBool, required = false, default = nil)
  if valid_618480 != nil:
    section.add "EnablePerformanceInsights", valid_618480
  var valid_618481 = formData.getOrDefault("DBInstanceIdentifier")
  valid_618481 = validateParameter(valid_618481, JString, required = true,
                                 default = nil)
  if valid_618481 != nil:
    section.add "DBInstanceIdentifier", valid_618481
  var valid_618482 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_618482 = validateParameter(valid_618482, JArray, required = false,
                                 default = nil)
  if valid_618482 != nil:
    section.add "EnableCloudwatchLogsExports", valid_618482
  var valid_618483 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_618483 = validateParameter(valid_618483, JInt, required = false, default = nil)
  if valid_618483 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_618483
  var valid_618484 = formData.getOrDefault("DBSubnetGroupName")
  valid_618484 = validateParameter(valid_618484, JString, required = false,
                                 default = nil)
  if valid_618484 != nil:
    section.add "DBSubnetGroupName", valid_618484
  var valid_618485 = formData.getOrDefault("StorageType")
  valid_618485 = validateParameter(valid_618485, JString, required = false,
                                 default = nil)
  if valid_618485 != nil:
    section.add "StorageType", valid_618485
  var valid_618486 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_618486 = validateParameter(valid_618486, JBool, required = false, default = nil)
  if valid_618486 != nil:
    section.add "CopyTagsToSnapshot", valid_618486
  var valid_618487 = formData.getOrDefault("DeletionProtection")
  valid_618487 = validateParameter(valid_618487, JBool, required = false, default = nil)
  if valid_618487 != nil:
    section.add "DeletionProtection", valid_618487
  var valid_618488 = formData.getOrDefault("ProcessorFeatures")
  valid_618488 = validateParameter(valid_618488, JArray, required = false,
                                 default = nil)
  if valid_618488 != nil:
    section.add "ProcessorFeatures", valid_618488
  var valid_618489 = formData.getOrDefault("AllocatedStorage")
  valid_618489 = validateParameter(valid_618489, JInt, required = false, default = nil)
  if valid_618489 != nil:
    section.add "AllocatedStorage", valid_618489
  var valid_618490 = formData.getOrDefault("S3Prefix")
  valid_618490 = validateParameter(valid_618490, JString, required = false,
                                 default = nil)
  if valid_618490 != nil:
    section.add "S3Prefix", valid_618490
  var valid_618491 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_618491 = validateParameter(valid_618491, JString, required = false,
                                 default = nil)
  if valid_618491 != nil:
    section.add "PreferredMaintenanceWindow", valid_618491
  var valid_618492 = formData.getOrDefault("DBInstanceClass")
  valid_618492 = validateParameter(valid_618492, JString, required = true,
                                 default = nil)
  if valid_618492 != nil:
    section.add "DBInstanceClass", valid_618492
  var valid_618493 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_618493 = validateParameter(valid_618493, JBool, required = false, default = nil)
  if valid_618493 != nil:
    section.add "UseDefaultProcessorFeatures", valid_618493
  var valid_618494 = formData.getOrDefault("PreferredBackupWindow")
  valid_618494 = validateParameter(valid_618494, JString, required = false,
                                 default = nil)
  if valid_618494 != nil:
    section.add "PreferredBackupWindow", valid_618494
  var valid_618495 = formData.getOrDefault("MasterUserPassword")
  valid_618495 = validateParameter(valid_618495, JString, required = false,
                                 default = nil)
  if valid_618495 != nil:
    section.add "MasterUserPassword", valid_618495
  var valid_618496 = formData.getOrDefault("SourceEngine")
  valid_618496 = validateParameter(valid_618496, JString, required = true,
                                 default = nil)
  if valid_618496 != nil:
    section.add "SourceEngine", valid_618496
  var valid_618497 = formData.getOrDefault("DBParameterGroupName")
  valid_618497 = validateParameter(valid_618497, JString, required = false,
                                 default = nil)
  if valid_618497 != nil:
    section.add "DBParameterGroupName", valid_618497
  var valid_618498 = formData.getOrDefault("EngineVersion")
  valid_618498 = validateParameter(valid_618498, JString, required = false,
                                 default = nil)
  if valid_618498 != nil:
    section.add "EngineVersion", valid_618498
  var valid_618499 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_618499 = validateParameter(valid_618499, JBool, required = false, default = nil)
  if valid_618499 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_618499
  var valid_618500 = formData.getOrDefault("BackupRetentionPeriod")
  valid_618500 = validateParameter(valid_618500, JInt, required = false, default = nil)
  if valid_618500 != nil:
    section.add "BackupRetentionPeriod", valid_618500
  var valid_618501 = formData.getOrDefault("KmsKeyId")
  valid_618501 = validateParameter(valid_618501, JString, required = false,
                                 default = nil)
  if valid_618501 != nil:
    section.add "KmsKeyId", valid_618501
  var valid_618502 = formData.getOrDefault("Engine")
  valid_618502 = validateParameter(valid_618502, JString, required = true,
                                 default = nil)
  if valid_618502 != nil:
    section.add "Engine", valid_618502
  var valid_618503 = formData.getOrDefault("S3BucketName")
  valid_618503 = validateParameter(valid_618503, JString, required = true,
                                 default = nil)
  if valid_618503 != nil:
    section.add "S3BucketName", valid_618503
  var valid_618504 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_618504 = validateParameter(valid_618504, JBool, required = false, default = nil)
  if valid_618504 != nil:
    section.add "AutoMinorVersionUpgrade", valid_618504
  var valid_618505 = formData.getOrDefault("DBName")
  valid_618505 = validateParameter(valid_618505, JString, required = false,
                                 default = nil)
  if valid_618505 != nil:
    section.add "DBName", valid_618505
  var valid_618506 = formData.getOrDefault("Iops")
  valid_618506 = validateParameter(valid_618506, JInt, required = false, default = nil)
  if valid_618506 != nil:
    section.add "Iops", valid_618506
  var valid_618507 = formData.getOrDefault("PubliclyAccessible")
  valid_618507 = validateParameter(valid_618507, JBool, required = false, default = nil)
  if valid_618507 != nil:
    section.add "PubliclyAccessible", valid_618507
  var valid_618508 = formData.getOrDefault("SourceEngineVersion")
  valid_618508 = validateParameter(valid_618508, JString, required = true,
                                 default = nil)
  if valid_618508 != nil:
    section.add "SourceEngineVersion", valid_618508
  var valid_618509 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_618509 = validateParameter(valid_618509, JString, required = false,
                                 default = nil)
  if valid_618509 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_618509
  var valid_618510 = formData.getOrDefault("LicenseModel")
  valid_618510 = validateParameter(valid_618510, JString, required = false,
                                 default = nil)
  if valid_618510 != nil:
    section.add "LicenseModel", valid_618510
  var valid_618511 = formData.getOrDefault("Tags")
  valid_618511 = validateParameter(valid_618511, JArray, required = false,
                                 default = nil)
  if valid_618511 != nil:
    section.add "Tags", valid_618511
  var valid_618512 = formData.getOrDefault("OptionGroupName")
  valid_618512 = validateParameter(valid_618512, JString, required = false,
                                 default = nil)
  if valid_618512 != nil:
    section.add "OptionGroupName", valid_618512
  var valid_618513 = formData.getOrDefault("DBSecurityGroups")
  valid_618513 = validateParameter(valid_618513, JArray, required = false,
                                 default = nil)
  if valid_618513 != nil:
    section.add "DBSecurityGroups", valid_618513
  var valid_618514 = formData.getOrDefault("StorageEncrypted")
  valid_618514 = validateParameter(valid_618514, JBool, required = false, default = nil)
  if valid_618514 != nil:
    section.add "StorageEncrypted", valid_618514
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618515: Call_PostRestoreDBInstanceFromS3_618460; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_618515.validator(path, query, header, formData, body)
  let scheme = call_618515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618515.url(scheme.get, call_618515.host, call_618515.base,
                         call_618515.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618515, url, valid)

proc call*(call_618516: Call_PostRestoreDBInstanceFromS3_618460;
          S3IngestionRoleArn: string; DBInstanceIdentifier: string;
          DBInstanceClass: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string; Port: int = 0;
          MultiAZ: bool = false; MasterUsername: string = "";
          MonitoringRoleArn: string = ""; MonitoringInterval: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnablePerformanceInsights: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromS3";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          S3Prefix: string = ""; PreferredMaintenanceWindow: string = "";
          UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; DBName: string = ""; Iops: int = 0;
          PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"; DBSecurityGroups: JsonNode = nil;
          StorageEncrypted: bool = false): Recallable =
  ## postRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  var query_618517 = newJObject()
  var formData_618518 = newJObject()
  add(formData_618518, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_618518, "Port", newJInt(Port))
  add(formData_618518, "MultiAZ", newJBool(MultiAZ))
  add(formData_618518, "MasterUsername", newJString(MasterUsername))
  add(formData_618518, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_618518, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_618518.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_618518, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_618518, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_618518, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_618518.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_618517, "Action", newJString(Action))
  add(formData_618518, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_618518, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_618518, "StorageType", newJString(StorageType))
  add(formData_618518, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_618518, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_618518.add "ProcessorFeatures", ProcessorFeatures
  add(formData_618518, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_618518, "S3Prefix", newJString(S3Prefix))
  add(formData_618518, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_618518, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_618518, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_618518, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_618518, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_618518, "SourceEngine", newJString(SourceEngine))
  add(formData_618518, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_618518, "EngineVersion", newJString(EngineVersion))
  add(formData_618518, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_618518, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_618518, "KmsKeyId", newJString(KmsKeyId))
  add(formData_618518, "Engine", newJString(Engine))
  add(formData_618518, "S3BucketName", newJString(S3BucketName))
  add(formData_618518, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_618518, "DBName", newJString(DBName))
  add(formData_618518, "Iops", newJInt(Iops))
  add(formData_618518, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_618518, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_618518, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_618518, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_618518.add "Tags", Tags
  add(formData_618518, "OptionGroupName", newJString(OptionGroupName))
  add(query_618517, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_618518.add "DBSecurityGroups", DBSecurityGroups
  add(formData_618518, "StorageEncrypted", newJBool(StorageEncrypted))
  result = call_618516.call(nil, query_618517, nil, formData_618518, nil)

var postRestoreDBInstanceFromS3* = Call_PostRestoreDBInstanceFromS3_618460(
    name: "postRestoreDBInstanceFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_PostRestoreDBInstanceFromS3_618461, base: "/",
    url: url_PostRestoreDBInstanceFromS3_618462,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromS3_618402 = ref object of OpenApiRestCall_612658
proc url_GetRestoreDBInstanceFromS3_618404(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceFromS3_618403(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_618405 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_618405 = validateParameter(valid_618405, JBool, required = false, default = nil)
  if valid_618405 != nil:
    section.add "UseDefaultProcessorFeatures", valid_618405
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_618406 = query.getOrDefault("SourceEngineVersion")
  valid_618406 = validateParameter(valid_618406, JString, required = true,
                                 default = nil)
  if valid_618406 != nil:
    section.add "SourceEngineVersion", valid_618406
  var valid_618407 = query.getOrDefault("SourceEngine")
  valid_618407 = validateParameter(valid_618407, JString, required = true,
                                 default = nil)
  if valid_618407 != nil:
    section.add "SourceEngine", valid_618407
  var valid_618408 = query.getOrDefault("Engine")
  valid_618408 = validateParameter(valid_618408, JString, required = true,
                                 default = nil)
  if valid_618408 != nil:
    section.add "Engine", valid_618408
  var valid_618409 = query.getOrDefault("CopyTagsToSnapshot")
  valid_618409 = validateParameter(valid_618409, JBool, required = false, default = nil)
  if valid_618409 != nil:
    section.add "CopyTagsToSnapshot", valid_618409
  var valid_618410 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_618410 = validateParameter(valid_618410, JInt, required = false, default = nil)
  if valid_618410 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_618410
  var valid_618411 = query.getOrDefault("MonitoringInterval")
  valid_618411 = validateParameter(valid_618411, JInt, required = false, default = nil)
  if valid_618411 != nil:
    section.add "MonitoringInterval", valid_618411
  var valid_618412 = query.getOrDefault("KmsKeyId")
  valid_618412 = validateParameter(valid_618412, JString, required = false,
                                 default = nil)
  if valid_618412 != nil:
    section.add "KmsKeyId", valid_618412
  var valid_618413 = query.getOrDefault("MonitoringRoleArn")
  valid_618413 = validateParameter(valid_618413, JString, required = false,
                                 default = nil)
  if valid_618413 != nil:
    section.add "MonitoringRoleArn", valid_618413
  var valid_618414 = query.getOrDefault("S3BucketName")
  valid_618414 = validateParameter(valid_618414, JString, required = true,
                                 default = nil)
  if valid_618414 != nil:
    section.add "S3BucketName", valid_618414
  var valid_618415 = query.getOrDefault("ProcessorFeatures")
  valid_618415 = validateParameter(valid_618415, JArray, required = false,
                                 default = nil)
  if valid_618415 != nil:
    section.add "ProcessorFeatures", valid_618415
  var valid_618416 = query.getOrDefault("MasterUsername")
  valid_618416 = validateParameter(valid_618416, JString, required = false,
                                 default = nil)
  if valid_618416 != nil:
    section.add "MasterUsername", valid_618416
  var valid_618417 = query.getOrDefault("BackupRetentionPeriod")
  valid_618417 = validateParameter(valid_618417, JInt, required = false, default = nil)
  if valid_618417 != nil:
    section.add "BackupRetentionPeriod", valid_618417
  var valid_618418 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_618418 = validateParameter(valid_618418, JArray, required = false,
                                 default = nil)
  if valid_618418 != nil:
    section.add "EnableCloudwatchLogsExports", valid_618418
  var valid_618419 = query.getOrDefault("EngineVersion")
  valid_618419 = validateParameter(valid_618419, JString, required = false,
                                 default = nil)
  if valid_618419 != nil:
    section.add "EngineVersion", valid_618419
  var valid_618420 = query.getOrDefault("Action")
  valid_618420 = validateParameter(valid_618420, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_618420 != nil:
    section.add "Action", valid_618420
  var valid_618421 = query.getOrDefault("VpcSecurityGroupIds")
  valid_618421 = validateParameter(valid_618421, JArray, required = false,
                                 default = nil)
  if valid_618421 != nil:
    section.add "VpcSecurityGroupIds", valid_618421
  var valid_618422 = query.getOrDefault("AllocatedStorage")
  valid_618422 = validateParameter(valid_618422, JInt, required = false, default = nil)
  if valid_618422 != nil:
    section.add "AllocatedStorage", valid_618422
  var valid_618423 = query.getOrDefault("EnablePerformanceInsights")
  valid_618423 = validateParameter(valid_618423, JBool, required = false, default = nil)
  if valid_618423 != nil:
    section.add "EnablePerformanceInsights", valid_618423
  var valid_618424 = query.getOrDefault("PubliclyAccessible")
  valid_618424 = validateParameter(valid_618424, JBool, required = false, default = nil)
  if valid_618424 != nil:
    section.add "PubliclyAccessible", valid_618424
  var valid_618425 = query.getOrDefault("S3IngestionRoleArn")
  valid_618425 = validateParameter(valid_618425, JString, required = true,
                                 default = nil)
  if valid_618425 != nil:
    section.add "S3IngestionRoleArn", valid_618425
  var valid_618426 = query.getOrDefault("DBName")
  valid_618426 = validateParameter(valid_618426, JString, required = false,
                                 default = nil)
  if valid_618426 != nil:
    section.add "DBName", valid_618426
  var valid_618427 = query.getOrDefault("StorageEncrypted")
  valid_618427 = validateParameter(valid_618427, JBool, required = false, default = nil)
  if valid_618427 != nil:
    section.add "StorageEncrypted", valid_618427
  var valid_618428 = query.getOrDefault("DBParameterGroupName")
  valid_618428 = validateParameter(valid_618428, JString, required = false,
                                 default = nil)
  if valid_618428 != nil:
    section.add "DBParameterGroupName", valid_618428
  var valid_618429 = query.getOrDefault("DeletionProtection")
  valid_618429 = validateParameter(valid_618429, JBool, required = false, default = nil)
  if valid_618429 != nil:
    section.add "DeletionProtection", valid_618429
  var valid_618430 = query.getOrDefault("S3Prefix")
  valid_618430 = validateParameter(valid_618430, JString, required = false,
                                 default = nil)
  if valid_618430 != nil:
    section.add "S3Prefix", valid_618430
  var valid_618431 = query.getOrDefault("Tags")
  valid_618431 = validateParameter(valid_618431, JArray, required = false,
                                 default = nil)
  if valid_618431 != nil:
    section.add "Tags", valid_618431
  var valid_618432 = query.getOrDefault("LicenseModel")
  valid_618432 = validateParameter(valid_618432, JString, required = false,
                                 default = nil)
  if valid_618432 != nil:
    section.add "LicenseModel", valid_618432
  var valid_618433 = query.getOrDefault("DBInstanceIdentifier")
  valid_618433 = validateParameter(valid_618433, JString, required = true,
                                 default = nil)
  if valid_618433 != nil:
    section.add "DBInstanceIdentifier", valid_618433
  var valid_618434 = query.getOrDefault("StorageType")
  valid_618434 = validateParameter(valid_618434, JString, required = false,
                                 default = nil)
  if valid_618434 != nil:
    section.add "StorageType", valid_618434
  var valid_618435 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_618435 = validateParameter(valid_618435, JBool, required = false, default = nil)
  if valid_618435 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_618435
  var valid_618436 = query.getOrDefault("MultiAZ")
  valid_618436 = validateParameter(valid_618436, JBool, required = false, default = nil)
  if valid_618436 != nil:
    section.add "MultiAZ", valid_618436
  var valid_618437 = query.getOrDefault("DBSecurityGroups")
  valid_618437 = validateParameter(valid_618437, JArray, required = false,
                                 default = nil)
  if valid_618437 != nil:
    section.add "DBSecurityGroups", valid_618437
  var valid_618438 = query.getOrDefault("Port")
  valid_618438 = validateParameter(valid_618438, JInt, required = false, default = nil)
  if valid_618438 != nil:
    section.add "Port", valid_618438
  var valid_618439 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_618439 = validateParameter(valid_618439, JString, required = false,
                                 default = nil)
  if valid_618439 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_618439
  var valid_618440 = query.getOrDefault("MasterUserPassword")
  valid_618440 = validateParameter(valid_618440, JString, required = false,
                                 default = nil)
  if valid_618440 != nil:
    section.add "MasterUserPassword", valid_618440
  var valid_618441 = query.getOrDefault("AvailabilityZone")
  valid_618441 = validateParameter(valid_618441, JString, required = false,
                                 default = nil)
  if valid_618441 != nil:
    section.add "AvailabilityZone", valid_618441
  var valid_618442 = query.getOrDefault("OptionGroupName")
  valid_618442 = validateParameter(valid_618442, JString, required = false,
                                 default = nil)
  if valid_618442 != nil:
    section.add "OptionGroupName", valid_618442
  var valid_618443 = query.getOrDefault("DBSubnetGroupName")
  valid_618443 = validateParameter(valid_618443, JString, required = false,
                                 default = nil)
  if valid_618443 != nil:
    section.add "DBSubnetGroupName", valid_618443
  var valid_618444 = query.getOrDefault("PreferredBackupWindow")
  valid_618444 = validateParameter(valid_618444, JString, required = false,
                                 default = nil)
  if valid_618444 != nil:
    section.add "PreferredBackupWindow", valid_618444
  var valid_618445 = query.getOrDefault("DBInstanceClass")
  valid_618445 = validateParameter(valid_618445, JString, required = true,
                                 default = nil)
  if valid_618445 != nil:
    section.add "DBInstanceClass", valid_618445
  var valid_618446 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_618446 = validateParameter(valid_618446, JString, required = false,
                                 default = nil)
  if valid_618446 != nil:
    section.add "PreferredMaintenanceWindow", valid_618446
  var valid_618447 = query.getOrDefault("Version")
  valid_618447 = validateParameter(valid_618447, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618447 != nil:
    section.add "Version", valid_618447
  var valid_618448 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_618448 = validateParameter(valid_618448, JBool, required = false, default = nil)
  if valid_618448 != nil:
    section.add "AutoMinorVersionUpgrade", valid_618448
  var valid_618449 = query.getOrDefault("Iops")
  valid_618449 = validateParameter(valid_618449, JInt, required = false, default = nil)
  if valid_618449 != nil:
    section.add "Iops", valid_618449
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_618450 = header.getOrDefault("X-Amz-Security-Token")
  valid_618450 = validateParameter(valid_618450, JString, required = false,
                                 default = nil)
  if valid_618450 != nil:
    section.add "X-Amz-Security-Token", valid_618450
  var valid_618451 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618451 = validateParameter(valid_618451, JString, required = false,
                                 default = nil)
  if valid_618451 != nil:
    section.add "X-Amz-SignedHeaders", valid_618451
  var valid_618452 = header.getOrDefault("X-Amz-Signature")
  valid_618452 = validateParameter(valid_618452, JString, required = false,
                                 default = nil)
  if valid_618452 != nil:
    section.add "X-Amz-Signature", valid_618452
  var valid_618453 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618453 = validateParameter(valid_618453, JString, required = false,
                                 default = nil)
  if valid_618453 != nil:
    section.add "X-Amz-Content-Sha256", valid_618453
  var valid_618454 = header.getOrDefault("X-Amz-Date")
  valid_618454 = validateParameter(valid_618454, JString, required = false,
                                 default = nil)
  if valid_618454 != nil:
    section.add "X-Amz-Date", valid_618454
  var valid_618455 = header.getOrDefault("X-Amz-Credential")
  valid_618455 = validateParameter(valid_618455, JString, required = false,
                                 default = nil)
  if valid_618455 != nil:
    section.add "X-Amz-Credential", valid_618455
  var valid_618456 = header.getOrDefault("X-Amz-Algorithm")
  valid_618456 = validateParameter(valid_618456, JString, required = false,
                                 default = nil)
  if valid_618456 != nil:
    section.add "X-Amz-Algorithm", valid_618456
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618457: Call_GetRestoreDBInstanceFromS3_618402; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_618457.validator(path, query, header, formData, body)
  let scheme = call_618457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618457.url(scheme.get, call_618457.host, call_618457.base,
                         call_618457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618457, url, valid)

proc call*(call_618458: Call_GetRestoreDBInstanceFromS3_618402;
          SourceEngineVersion: string; SourceEngine: string; Engine: string;
          S3BucketName: string; S3IngestionRoleArn: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          UseDefaultProcessorFeatures: bool = false;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBInstanceFromS3";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; StorageEncrypted: bool = false;
          DBParameterGroupName: string = ""; DeletionProtection: bool = false;
          S3Prefix: string = ""; Tags: JsonNode = nil; LicenseModel: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0): Recallable =
  ## getRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  var query_618459 = newJObject()
  add(query_618459, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_618459, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_618459, "SourceEngine", newJString(SourceEngine))
  add(query_618459, "Engine", newJString(Engine))
  add(query_618459, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_618459, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_618459, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_618459, "KmsKeyId", newJString(KmsKeyId))
  add(query_618459, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_618459, "S3BucketName", newJString(S3BucketName))
  if ProcessorFeatures != nil:
    query_618459.add "ProcessorFeatures", ProcessorFeatures
  add(query_618459, "MasterUsername", newJString(MasterUsername))
  add(query_618459, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_618459.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_618459, "EngineVersion", newJString(EngineVersion))
  add(query_618459, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_618459.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_618459, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_618459, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_618459, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_618459, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_618459, "DBName", newJString(DBName))
  add(query_618459, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_618459, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_618459, "DeletionProtection", newJBool(DeletionProtection))
  add(query_618459, "S3Prefix", newJString(S3Prefix))
  if Tags != nil:
    query_618459.add "Tags", Tags
  add(query_618459, "LicenseModel", newJString(LicenseModel))
  add(query_618459, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_618459, "StorageType", newJString(StorageType))
  add(query_618459, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_618459, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_618459.add "DBSecurityGroups", DBSecurityGroups
  add(query_618459, "Port", newJInt(Port))
  add(query_618459, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_618459, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_618459, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_618459, "OptionGroupName", newJString(OptionGroupName))
  add(query_618459, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_618459, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_618459, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_618459, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_618459, "Version", newJString(Version))
  add(query_618459, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_618459, "Iops", newJInt(Iops))
  result = call_618458.call(nil, query_618459, nil, nil, nil)

var getRestoreDBInstanceFromS3* = Call_GetRestoreDBInstanceFromS3_618402(
    name: "getRestoreDBInstanceFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_GetRestoreDBInstanceFromS3_618403, base: "/",
    url: url_GetRestoreDBInstanceFromS3_618404,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceToPointInTime_618565 = ref object of OpenApiRestCall_612658
proc url_PostRestoreDBInstanceToPointInTime_618567(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceToPointInTime_618566(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618568 = query.getOrDefault("Action")
  valid_618568 = validateParameter(valid_618568, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_618568 != nil:
    section.add "Action", valid_618568
  var valid_618569 = query.getOrDefault("Version")
  valid_618569 = validateParameter(valid_618569, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618569 != nil:
    section.add "Version", valid_618569
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618570 = header.getOrDefault("X-Amz-Signature")
  valid_618570 = validateParameter(valid_618570, JString, required = false,
                                 default = nil)
  if valid_618570 != nil:
    section.add "X-Amz-Signature", valid_618570
  var valid_618571 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618571 = validateParameter(valid_618571, JString, required = false,
                                 default = nil)
  if valid_618571 != nil:
    section.add "X-Amz-Content-Sha256", valid_618571
  var valid_618572 = header.getOrDefault("X-Amz-Date")
  valid_618572 = validateParameter(valid_618572, JString, required = false,
                                 default = nil)
  if valid_618572 != nil:
    section.add "X-Amz-Date", valid_618572
  var valid_618573 = header.getOrDefault("X-Amz-Credential")
  valid_618573 = validateParameter(valid_618573, JString, required = false,
                                 default = nil)
  if valid_618573 != nil:
    section.add "X-Amz-Credential", valid_618573
  var valid_618574 = header.getOrDefault("X-Amz-Security-Token")
  valid_618574 = validateParameter(valid_618574, JString, required = false,
                                 default = nil)
  if valid_618574 != nil:
    section.add "X-Amz-Security-Token", valid_618574
  var valid_618575 = header.getOrDefault("X-Amz-Algorithm")
  valid_618575 = validateParameter(valid_618575, JString, required = false,
                                 default = nil)
  if valid_618575 != nil:
    section.add "X-Amz-Algorithm", valid_618575
  var valid_618576 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618576 = validateParameter(valid_618576, JString, required = false,
                                 default = nil)
  if valid_618576 != nil:
    section.add "X-Amz-SignedHeaders", valid_618576
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_618577 = formData.getOrDefault("Port")
  valid_618577 = validateParameter(valid_618577, JInt, required = false, default = nil)
  if valid_618577 != nil:
    section.add "Port", valid_618577
  var valid_618578 = formData.getOrDefault("DBInstanceClass")
  valid_618578 = validateParameter(valid_618578, JString, required = false,
                                 default = nil)
  if valid_618578 != nil:
    section.add "DBInstanceClass", valid_618578
  var valid_618579 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_618579 = validateParameter(valid_618579, JBool, required = false, default = nil)
  if valid_618579 != nil:
    section.add "UseDefaultProcessorFeatures", valid_618579
  var valid_618580 = formData.getOrDefault("MultiAZ")
  valid_618580 = validateParameter(valid_618580, JBool, required = false, default = nil)
  if valid_618580 != nil:
    section.add "MultiAZ", valid_618580
  var valid_618581 = formData.getOrDefault("Domain")
  valid_618581 = validateParameter(valid_618581, JString, required = false,
                                 default = nil)
  if valid_618581 != nil:
    section.add "Domain", valid_618581
  var valid_618582 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_618582 = validateParameter(valid_618582, JString, required = false,
                                 default = nil)
  if valid_618582 != nil:
    section.add "SourceDBInstanceIdentifier", valid_618582
  var valid_618583 = formData.getOrDefault("DBParameterGroupName")
  valid_618583 = validateParameter(valid_618583, JString, required = false,
                                 default = nil)
  if valid_618583 != nil:
    section.add "DBParameterGroupName", valid_618583
  var valid_618584 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_618584 = validateParameter(valid_618584, JArray, required = false,
                                 default = nil)
  if valid_618584 != nil:
    section.add "VpcSecurityGroupIds", valid_618584
  var valid_618585 = formData.getOrDefault("AvailabilityZone")
  valid_618585 = validateParameter(valid_618585, JString, required = false,
                                 default = nil)
  if valid_618585 != nil:
    section.add "AvailabilityZone", valid_618585
  var valid_618586 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_618586 = validateParameter(valid_618586, JBool, required = false, default = nil)
  if valid_618586 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_618586
  var valid_618587 = formData.getOrDefault("Engine")
  valid_618587 = validateParameter(valid_618587, JString, required = false,
                                 default = nil)
  if valid_618587 != nil:
    section.add "Engine", valid_618587
  var valid_618588 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_618588 = validateParameter(valid_618588, JBool, required = false, default = nil)
  if valid_618588 != nil:
    section.add "AutoMinorVersionUpgrade", valid_618588
  var valid_618589 = formData.getOrDefault("TdeCredentialPassword")
  valid_618589 = validateParameter(valid_618589, JString, required = false,
                                 default = nil)
  if valid_618589 != nil:
    section.add "TdeCredentialPassword", valid_618589
  var valid_618590 = formData.getOrDefault("UseLatestRestorableTime")
  valid_618590 = validateParameter(valid_618590, JBool, required = false, default = nil)
  if valid_618590 != nil:
    section.add "UseLatestRestorableTime", valid_618590
  var valid_618591 = formData.getOrDefault("DBName")
  valid_618591 = validateParameter(valid_618591, JString, required = false,
                                 default = nil)
  if valid_618591 != nil:
    section.add "DBName", valid_618591
  var valid_618592 = formData.getOrDefault("Iops")
  valid_618592 = validateParameter(valid_618592, JInt, required = false, default = nil)
  if valid_618592 != nil:
    section.add "Iops", valid_618592
  var valid_618593 = formData.getOrDefault("TdeCredentialArn")
  valid_618593 = validateParameter(valid_618593, JString, required = false,
                                 default = nil)
  if valid_618593 != nil:
    section.add "TdeCredentialArn", valid_618593
  var valid_618594 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_618594 = validateParameter(valid_618594, JArray, required = false,
                                 default = nil)
  if valid_618594 != nil:
    section.add "EnableCloudwatchLogsExports", valid_618594
  var valid_618595 = formData.getOrDefault("PubliclyAccessible")
  valid_618595 = validateParameter(valid_618595, JBool, required = false, default = nil)
  if valid_618595 != nil:
    section.add "PubliclyAccessible", valid_618595
  var valid_618596 = formData.getOrDefault("LicenseModel")
  valid_618596 = validateParameter(valid_618596, JString, required = false,
                                 default = nil)
  if valid_618596 != nil:
    section.add "LicenseModel", valid_618596
  var valid_618597 = formData.getOrDefault("Tags")
  valid_618597 = validateParameter(valid_618597, JArray, required = false,
                                 default = nil)
  if valid_618597 != nil:
    section.add "Tags", valid_618597
  var valid_618598 = formData.getOrDefault("DBSubnetGroupName")
  valid_618598 = validateParameter(valid_618598, JString, required = false,
                                 default = nil)
  if valid_618598 != nil:
    section.add "DBSubnetGroupName", valid_618598
  var valid_618599 = formData.getOrDefault("DomainIAMRoleName")
  valid_618599 = validateParameter(valid_618599, JString, required = false,
                                 default = nil)
  if valid_618599 != nil:
    section.add "DomainIAMRoleName", valid_618599
  var valid_618600 = formData.getOrDefault("OptionGroupName")
  valid_618600 = validateParameter(valid_618600, JString, required = false,
                                 default = nil)
  if valid_618600 != nil:
    section.add "OptionGroupName", valid_618600
  var valid_618601 = formData.getOrDefault("RestoreTime")
  valid_618601 = validateParameter(valid_618601, JString, required = false,
                                 default = nil)
  if valid_618601 != nil:
    section.add "RestoreTime", valid_618601
  assert formData != nil, "formData argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_618602 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_618602 = validateParameter(valid_618602, JString, required = true,
                                 default = nil)
  if valid_618602 != nil:
    section.add "TargetDBInstanceIdentifier", valid_618602
  var valid_618603 = formData.getOrDefault("StorageType")
  valid_618603 = validateParameter(valid_618603, JString, required = false,
                                 default = nil)
  if valid_618603 != nil:
    section.add "StorageType", valid_618603
  var valid_618604 = formData.getOrDefault("SourceDbiResourceId")
  valid_618604 = validateParameter(valid_618604, JString, required = false,
                                 default = nil)
  if valid_618604 != nil:
    section.add "SourceDbiResourceId", valid_618604
  var valid_618605 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_618605 = validateParameter(valid_618605, JBool, required = false, default = nil)
  if valid_618605 != nil:
    section.add "CopyTagsToSnapshot", valid_618605
  var valid_618606 = formData.getOrDefault("DeletionProtection")
  valid_618606 = validateParameter(valid_618606, JBool, required = false, default = nil)
  if valid_618606 != nil:
    section.add "DeletionProtection", valid_618606
  var valid_618607 = formData.getOrDefault("ProcessorFeatures")
  valid_618607 = validateParameter(valid_618607, JArray, required = false,
                                 default = nil)
  if valid_618607 != nil:
    section.add "ProcessorFeatures", valid_618607
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618608: Call_PostRestoreDBInstanceToPointInTime_618565;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_618608.validator(path, query, header, formData, body)
  let scheme = call_618608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618608.url(scheme.get, call_618608.host, call_618608.base,
                         call_618608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618608, url, valid)

proc call*(call_618609: Call_PostRestoreDBInstanceToPointInTime_618565;
          TargetDBInstanceIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = "";
          SourceDBInstanceIdentifier: string = "";
          DBParameterGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          UseLatestRestorableTime: bool = false; DBName: string = ""; Iops: int = 0;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceToPointInTime";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; RestoreTime: string = "";
          Version: string = "2014-10-31"; StorageType: string = "";
          SourceDbiResourceId: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_618610 = newJObject()
  var formData_618611 = newJObject()
  add(formData_618611, "Port", newJInt(Port))
  add(formData_618611, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_618611, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_618611, "MultiAZ", newJBool(MultiAZ))
  add(formData_618611, "Domain", newJString(Domain))
  add(formData_618611, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_618611, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_618611.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_618611, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_618611, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_618611, "Engine", newJString(Engine))
  add(formData_618611, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_618611, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_618611, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_618611, "DBName", newJString(DBName))
  add(formData_618611, "Iops", newJInt(Iops))
  add(formData_618611, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_618611.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_618611, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_618610, "Action", newJString(Action))
  add(formData_618611, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_618611.add "Tags", Tags
  add(formData_618611, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_618611, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_618611, "OptionGroupName", newJString(OptionGroupName))
  add(formData_618611, "RestoreTime", newJString(RestoreTime))
  add(formData_618611, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_618610, "Version", newJString(Version))
  add(formData_618611, "StorageType", newJString(StorageType))
  add(formData_618611, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(formData_618611, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_618611, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_618611.add "ProcessorFeatures", ProcessorFeatures
  result = call_618609.call(nil, query_618610, nil, formData_618611, nil)

var postRestoreDBInstanceToPointInTime* = Call_PostRestoreDBInstanceToPointInTime_618565(
    name: "postRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_PostRestoreDBInstanceToPointInTime_618566, base: "/",
    url: url_PostRestoreDBInstanceToPointInTime_618567,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceToPointInTime_618519 = ref object of OpenApiRestCall_612658
proc url_GetRestoreDBInstanceToPointInTime_618521(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceToPointInTime_618520(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_618522 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_618522 = validateParameter(valid_618522, JBool, required = false, default = nil)
  if valid_618522 != nil:
    section.add "UseDefaultProcessorFeatures", valid_618522
  var valid_618523 = query.getOrDefault("DBName")
  valid_618523 = validateParameter(valid_618523, JString, required = false,
                                 default = nil)
  if valid_618523 != nil:
    section.add "DBName", valid_618523
  var valid_618524 = query.getOrDefault("TdeCredentialPassword")
  valid_618524 = validateParameter(valid_618524, JString, required = false,
                                 default = nil)
  if valid_618524 != nil:
    section.add "TdeCredentialPassword", valid_618524
  var valid_618525 = query.getOrDefault("DeletionProtection")
  valid_618525 = validateParameter(valid_618525, JBool, required = false, default = nil)
  if valid_618525 != nil:
    section.add "DeletionProtection", valid_618525
  var valid_618526 = query.getOrDefault("Engine")
  valid_618526 = validateParameter(valid_618526, JString, required = false,
                                 default = nil)
  if valid_618526 != nil:
    section.add "Engine", valid_618526
  var valid_618527 = query.getOrDefault("UseLatestRestorableTime")
  valid_618527 = validateParameter(valid_618527, JBool, required = false, default = nil)
  if valid_618527 != nil:
    section.add "UseLatestRestorableTime", valid_618527
  var valid_618528 = query.getOrDefault("CopyTagsToSnapshot")
  valid_618528 = validateParameter(valid_618528, JBool, required = false, default = nil)
  if valid_618528 != nil:
    section.add "CopyTagsToSnapshot", valid_618528
  var valid_618529 = query.getOrDefault("DBParameterGroupName")
  valid_618529 = validateParameter(valid_618529, JString, required = false,
                                 default = nil)
  if valid_618529 != nil:
    section.add "DBParameterGroupName", valid_618529
  var valid_618530 = query.getOrDefault("Tags")
  valid_618530 = validateParameter(valid_618530, JArray, required = false,
                                 default = nil)
  if valid_618530 != nil:
    section.add "Tags", valid_618530
  var valid_618531 = query.getOrDefault("LicenseModel")
  valid_618531 = validateParameter(valid_618531, JString, required = false,
                                 default = nil)
  if valid_618531 != nil:
    section.add "LicenseModel", valid_618531
  var valid_618532 = query.getOrDefault("TdeCredentialArn")
  valid_618532 = validateParameter(valid_618532, JString, required = false,
                                 default = nil)
  if valid_618532 != nil:
    section.add "TdeCredentialArn", valid_618532
  var valid_618533 = query.getOrDefault("ProcessorFeatures")
  valid_618533 = validateParameter(valid_618533, JArray, required = false,
                                 default = nil)
  if valid_618533 != nil:
    section.add "ProcessorFeatures", valid_618533
  var valid_618534 = query.getOrDefault("StorageType")
  valid_618534 = validateParameter(valid_618534, JString, required = false,
                                 default = nil)
  if valid_618534 != nil:
    section.add "StorageType", valid_618534
  assert query != nil, "query argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_618535 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_618535 = validateParameter(valid_618535, JString, required = true,
                                 default = nil)
  if valid_618535 != nil:
    section.add "TargetDBInstanceIdentifier", valid_618535
  var valid_618536 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_618536 = validateParameter(valid_618536, JBool, required = false, default = nil)
  if valid_618536 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_618536
  var valid_618537 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_618537 = validateParameter(valid_618537, JArray, required = false,
                                 default = nil)
  if valid_618537 != nil:
    section.add "EnableCloudwatchLogsExports", valid_618537
  var valid_618538 = query.getOrDefault("Action")
  valid_618538 = validateParameter(valid_618538, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_618538 != nil:
    section.add "Action", valid_618538
  var valid_618539 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_618539 = validateParameter(valid_618539, JString, required = false,
                                 default = nil)
  if valid_618539 != nil:
    section.add "SourceDBInstanceIdentifier", valid_618539
  var valid_618540 = query.getOrDefault("MultiAZ")
  valid_618540 = validateParameter(valid_618540, JBool, required = false, default = nil)
  if valid_618540 != nil:
    section.add "MultiAZ", valid_618540
  var valid_618541 = query.getOrDefault("Port")
  valid_618541 = validateParameter(valid_618541, JInt, required = false, default = nil)
  if valid_618541 != nil:
    section.add "Port", valid_618541
  var valid_618542 = query.getOrDefault("Domain")
  valid_618542 = validateParameter(valid_618542, JString, required = false,
                                 default = nil)
  if valid_618542 != nil:
    section.add "Domain", valid_618542
  var valid_618543 = query.getOrDefault("VpcSecurityGroupIds")
  valid_618543 = validateParameter(valid_618543, JArray, required = false,
                                 default = nil)
  if valid_618543 != nil:
    section.add "VpcSecurityGroupIds", valid_618543
  var valid_618544 = query.getOrDefault("SourceDbiResourceId")
  valid_618544 = validateParameter(valid_618544, JString, required = false,
                                 default = nil)
  if valid_618544 != nil:
    section.add "SourceDbiResourceId", valid_618544
  var valid_618545 = query.getOrDefault("AvailabilityZone")
  valid_618545 = validateParameter(valid_618545, JString, required = false,
                                 default = nil)
  if valid_618545 != nil:
    section.add "AvailabilityZone", valid_618545
  var valid_618546 = query.getOrDefault("OptionGroupName")
  valid_618546 = validateParameter(valid_618546, JString, required = false,
                                 default = nil)
  if valid_618546 != nil:
    section.add "OptionGroupName", valid_618546
  var valid_618547 = query.getOrDefault("DBSubnetGroupName")
  valid_618547 = validateParameter(valid_618547, JString, required = false,
                                 default = nil)
  if valid_618547 != nil:
    section.add "DBSubnetGroupName", valid_618547
  var valid_618548 = query.getOrDefault("RestoreTime")
  valid_618548 = validateParameter(valid_618548, JString, required = false,
                                 default = nil)
  if valid_618548 != nil:
    section.add "RestoreTime", valid_618548
  var valid_618549 = query.getOrDefault("DBInstanceClass")
  valid_618549 = validateParameter(valid_618549, JString, required = false,
                                 default = nil)
  if valid_618549 != nil:
    section.add "DBInstanceClass", valid_618549
  var valid_618550 = query.getOrDefault("PubliclyAccessible")
  valid_618550 = validateParameter(valid_618550, JBool, required = false, default = nil)
  if valid_618550 != nil:
    section.add "PubliclyAccessible", valid_618550
  var valid_618551 = query.getOrDefault("Version")
  valid_618551 = validateParameter(valid_618551, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618551 != nil:
    section.add "Version", valid_618551
  var valid_618552 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_618552 = validateParameter(valid_618552, JBool, required = false, default = nil)
  if valid_618552 != nil:
    section.add "AutoMinorVersionUpgrade", valid_618552
  var valid_618553 = query.getOrDefault("Iops")
  valid_618553 = validateParameter(valid_618553, JInt, required = false, default = nil)
  if valid_618553 != nil:
    section.add "Iops", valid_618553
  var valid_618554 = query.getOrDefault("DomainIAMRoleName")
  valid_618554 = validateParameter(valid_618554, JString, required = false,
                                 default = nil)
  if valid_618554 != nil:
    section.add "DomainIAMRoleName", valid_618554
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618555 = header.getOrDefault("X-Amz-Signature")
  valid_618555 = validateParameter(valid_618555, JString, required = false,
                                 default = nil)
  if valid_618555 != nil:
    section.add "X-Amz-Signature", valid_618555
  var valid_618556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618556 = validateParameter(valid_618556, JString, required = false,
                                 default = nil)
  if valid_618556 != nil:
    section.add "X-Amz-Content-Sha256", valid_618556
  var valid_618557 = header.getOrDefault("X-Amz-Date")
  valid_618557 = validateParameter(valid_618557, JString, required = false,
                                 default = nil)
  if valid_618557 != nil:
    section.add "X-Amz-Date", valid_618557
  var valid_618558 = header.getOrDefault("X-Amz-Credential")
  valid_618558 = validateParameter(valid_618558, JString, required = false,
                                 default = nil)
  if valid_618558 != nil:
    section.add "X-Amz-Credential", valid_618558
  var valid_618559 = header.getOrDefault("X-Amz-Security-Token")
  valid_618559 = validateParameter(valid_618559, JString, required = false,
                                 default = nil)
  if valid_618559 != nil:
    section.add "X-Amz-Security-Token", valid_618559
  var valid_618560 = header.getOrDefault("X-Amz-Algorithm")
  valid_618560 = validateParameter(valid_618560, JString, required = false,
                                 default = nil)
  if valid_618560 != nil:
    section.add "X-Amz-Algorithm", valid_618560
  var valid_618561 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618561 = validateParameter(valid_618561, JString, required = false,
                                 default = nil)
  if valid_618561 != nil:
    section.add "X-Amz-SignedHeaders", valid_618561
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618562: Call_GetRestoreDBInstanceToPointInTime_618519;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_618562.validator(path, query, header, formData, body)
  let scheme = call_618562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618562.url(scheme.get, call_618562.host, call_618562.base,
                         call_618562.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618562, url, valid)

proc call*(call_618563: Call_GetRestoreDBInstanceToPointInTime_618519;
          TargetDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; UseLatestRestorableTime: bool = false;
          CopyTagsToSnapshot: bool = false; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; LicenseModel: string = "";
          TdeCredentialArn: string = ""; ProcessorFeatures: JsonNode = nil;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceToPointInTime";
          SourceDBInstanceIdentifier: string = ""; MultiAZ: bool = false; Port: int = 0;
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          SourceDbiResourceId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          RestoreTime: string = ""; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_618564 = newJObject()
  add(query_618564, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_618564, "DBName", newJString(DBName))
  add(query_618564, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_618564, "DeletionProtection", newJBool(DeletionProtection))
  add(query_618564, "Engine", newJString(Engine))
  add(query_618564, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_618564, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_618564, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_618564.add "Tags", Tags
  add(query_618564, "LicenseModel", newJString(LicenseModel))
  add(query_618564, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_618564.add "ProcessorFeatures", ProcessorFeatures
  add(query_618564, "StorageType", newJString(StorageType))
  add(query_618564, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_618564, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_618564.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_618564, "Action", newJString(Action))
  add(query_618564, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_618564, "MultiAZ", newJBool(MultiAZ))
  add(query_618564, "Port", newJInt(Port))
  add(query_618564, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_618564.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_618564, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(query_618564, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_618564, "OptionGroupName", newJString(OptionGroupName))
  add(query_618564, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_618564, "RestoreTime", newJString(RestoreTime))
  add(query_618564, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_618564, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_618564, "Version", newJString(Version))
  add(query_618564, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_618564, "Iops", newJInt(Iops))
  add(query_618564, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_618563.call(nil, query_618564, nil, nil, nil)

var getRestoreDBInstanceToPointInTime* = Call_GetRestoreDBInstanceToPointInTime_618519(
    name: "getRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_GetRestoreDBInstanceToPointInTime_618520, base: "/",
    url: url_GetRestoreDBInstanceToPointInTime_618521,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeDBSecurityGroupIngress_618632 = ref object of OpenApiRestCall_612658
proc url_PostRevokeDBSecurityGroupIngress_618634(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRevokeDBSecurityGroupIngress_618633(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618635 = query.getOrDefault("Action")
  valid_618635 = validateParameter(valid_618635, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_618635 != nil:
    section.add "Action", valid_618635
  var valid_618636 = query.getOrDefault("Version")
  valid_618636 = validateParameter(valid_618636, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618636 != nil:
    section.add "Version", valid_618636
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618637 = header.getOrDefault("X-Amz-Signature")
  valid_618637 = validateParameter(valid_618637, JString, required = false,
                                 default = nil)
  if valid_618637 != nil:
    section.add "X-Amz-Signature", valid_618637
  var valid_618638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618638 = validateParameter(valid_618638, JString, required = false,
                                 default = nil)
  if valid_618638 != nil:
    section.add "X-Amz-Content-Sha256", valid_618638
  var valid_618639 = header.getOrDefault("X-Amz-Date")
  valid_618639 = validateParameter(valid_618639, JString, required = false,
                                 default = nil)
  if valid_618639 != nil:
    section.add "X-Amz-Date", valid_618639
  var valid_618640 = header.getOrDefault("X-Amz-Credential")
  valid_618640 = validateParameter(valid_618640, JString, required = false,
                                 default = nil)
  if valid_618640 != nil:
    section.add "X-Amz-Credential", valid_618640
  var valid_618641 = header.getOrDefault("X-Amz-Security-Token")
  valid_618641 = validateParameter(valid_618641, JString, required = false,
                                 default = nil)
  if valid_618641 != nil:
    section.add "X-Amz-Security-Token", valid_618641
  var valid_618642 = header.getOrDefault("X-Amz-Algorithm")
  valid_618642 = validateParameter(valid_618642, JString, required = false,
                                 default = nil)
  if valid_618642 != nil:
    section.add "X-Amz-Algorithm", valid_618642
  var valid_618643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618643 = validateParameter(valid_618643, JString, required = false,
                                 default = nil)
  if valid_618643 != nil:
    section.add "X-Amz-SignedHeaders", valid_618643
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_618644 = formData.getOrDefault("DBSecurityGroupName")
  valid_618644 = validateParameter(valid_618644, JString, required = true,
                                 default = nil)
  if valid_618644 != nil:
    section.add "DBSecurityGroupName", valid_618644
  var valid_618645 = formData.getOrDefault("EC2SecurityGroupName")
  valid_618645 = validateParameter(valid_618645, JString, required = false,
                                 default = nil)
  if valid_618645 != nil:
    section.add "EC2SecurityGroupName", valid_618645
  var valid_618646 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_618646 = validateParameter(valid_618646, JString, required = false,
                                 default = nil)
  if valid_618646 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_618646
  var valid_618647 = formData.getOrDefault("EC2SecurityGroupId")
  valid_618647 = validateParameter(valid_618647, JString, required = false,
                                 default = nil)
  if valid_618647 != nil:
    section.add "EC2SecurityGroupId", valid_618647
  var valid_618648 = formData.getOrDefault("CIDRIP")
  valid_618648 = validateParameter(valid_618648, JString, required = false,
                                 default = nil)
  if valid_618648 != nil:
    section.add "CIDRIP", valid_618648
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618649: Call_PostRevokeDBSecurityGroupIngress_618632;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_618649.validator(path, query, header, formData, body)
  let scheme = call_618649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618649.url(scheme.get, call_618649.host, call_618649.base,
                         call_618649.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618649, url, valid)

proc call*(call_618650: Call_PostRevokeDBSecurityGroupIngress_618632;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618651 = newJObject()
  var formData_618652 = newJObject()
  add(formData_618652, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_618652, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_618652, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_618652, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_618652, "CIDRIP", newJString(CIDRIP))
  add(query_618651, "Action", newJString(Action))
  add(query_618651, "Version", newJString(Version))
  result = call_618650.call(nil, query_618651, nil, formData_618652, nil)

var postRevokeDBSecurityGroupIngress* = Call_PostRevokeDBSecurityGroupIngress_618632(
    name: "postRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_PostRevokeDBSecurityGroupIngress_618633, base: "/",
    url: url_PostRevokeDBSecurityGroupIngress_618634,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeDBSecurityGroupIngress_618612 = ref object of OpenApiRestCall_612658
proc url_GetRevokeDBSecurityGroupIngress_618614(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRevokeDBSecurityGroupIngress_618613(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  var valid_618615 = query.getOrDefault("EC2SecurityGroupName")
  valid_618615 = validateParameter(valid_618615, JString, required = false,
                                 default = nil)
  if valid_618615 != nil:
    section.add "EC2SecurityGroupName", valid_618615
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_618616 = query.getOrDefault("DBSecurityGroupName")
  valid_618616 = validateParameter(valid_618616, JString, required = true,
                                 default = nil)
  if valid_618616 != nil:
    section.add "DBSecurityGroupName", valid_618616
  var valid_618617 = query.getOrDefault("EC2SecurityGroupId")
  valid_618617 = validateParameter(valid_618617, JString, required = false,
                                 default = nil)
  if valid_618617 != nil:
    section.add "EC2SecurityGroupId", valid_618617
  var valid_618618 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_618618 = validateParameter(valid_618618, JString, required = false,
                                 default = nil)
  if valid_618618 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_618618
  var valid_618619 = query.getOrDefault("Action")
  valid_618619 = validateParameter(valid_618619, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_618619 != nil:
    section.add "Action", valid_618619
  var valid_618620 = query.getOrDefault("Version")
  valid_618620 = validateParameter(valid_618620, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618620 != nil:
    section.add "Version", valid_618620
  var valid_618621 = query.getOrDefault("CIDRIP")
  valid_618621 = validateParameter(valid_618621, JString, required = false,
                                 default = nil)
  if valid_618621 != nil:
    section.add "CIDRIP", valid_618621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618622 = header.getOrDefault("X-Amz-Signature")
  valid_618622 = validateParameter(valid_618622, JString, required = false,
                                 default = nil)
  if valid_618622 != nil:
    section.add "X-Amz-Signature", valid_618622
  var valid_618623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618623 = validateParameter(valid_618623, JString, required = false,
                                 default = nil)
  if valid_618623 != nil:
    section.add "X-Amz-Content-Sha256", valid_618623
  var valid_618624 = header.getOrDefault("X-Amz-Date")
  valid_618624 = validateParameter(valid_618624, JString, required = false,
                                 default = nil)
  if valid_618624 != nil:
    section.add "X-Amz-Date", valid_618624
  var valid_618625 = header.getOrDefault("X-Amz-Credential")
  valid_618625 = validateParameter(valid_618625, JString, required = false,
                                 default = nil)
  if valid_618625 != nil:
    section.add "X-Amz-Credential", valid_618625
  var valid_618626 = header.getOrDefault("X-Amz-Security-Token")
  valid_618626 = validateParameter(valid_618626, JString, required = false,
                                 default = nil)
  if valid_618626 != nil:
    section.add "X-Amz-Security-Token", valid_618626
  var valid_618627 = header.getOrDefault("X-Amz-Algorithm")
  valid_618627 = validateParameter(valid_618627, JString, required = false,
                                 default = nil)
  if valid_618627 != nil:
    section.add "X-Amz-Algorithm", valid_618627
  var valid_618628 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618628 = validateParameter(valid_618628, JString, required = false,
                                 default = nil)
  if valid_618628 != nil:
    section.add "X-Amz-SignedHeaders", valid_618628
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618629: Call_GetRevokeDBSecurityGroupIngress_618612;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_618629.validator(path, query, header, formData, body)
  let scheme = call_618629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618629.url(scheme.get, call_618629.host, call_618629.base,
                         call_618629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618629, url, valid)

proc call*(call_618630: Call_GetRevokeDBSecurityGroupIngress_618612;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  var query_618631 = newJObject()
  add(query_618631, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_618631, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_618631, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_618631, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_618631, "Action", newJString(Action))
  add(query_618631, "Version", newJString(Version))
  add(query_618631, "CIDRIP", newJString(CIDRIP))
  result = call_618630.call(nil, query_618631, nil, nil, nil)

var getRevokeDBSecurityGroupIngress* = Call_GetRevokeDBSecurityGroupIngress_618612(
    name: "getRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_GetRevokeDBSecurityGroupIngress_618613, base: "/",
    url: url_GetRevokeDBSecurityGroupIngress_618614,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartActivityStream_618672 = ref object of OpenApiRestCall_612658
proc url_PostStartActivityStream_618674(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartActivityStream_618673(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618675 = query.getOrDefault("Action")
  valid_618675 = validateParameter(valid_618675, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_618675 != nil:
    section.add "Action", valid_618675
  var valid_618676 = query.getOrDefault("Version")
  valid_618676 = validateParameter(valid_618676, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618676 != nil:
    section.add "Version", valid_618676
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618677 = header.getOrDefault("X-Amz-Signature")
  valid_618677 = validateParameter(valid_618677, JString, required = false,
                                 default = nil)
  if valid_618677 != nil:
    section.add "X-Amz-Signature", valid_618677
  var valid_618678 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618678 = validateParameter(valid_618678, JString, required = false,
                                 default = nil)
  if valid_618678 != nil:
    section.add "X-Amz-Content-Sha256", valid_618678
  var valid_618679 = header.getOrDefault("X-Amz-Date")
  valid_618679 = validateParameter(valid_618679, JString, required = false,
                                 default = nil)
  if valid_618679 != nil:
    section.add "X-Amz-Date", valid_618679
  var valid_618680 = header.getOrDefault("X-Amz-Credential")
  valid_618680 = validateParameter(valid_618680, JString, required = false,
                                 default = nil)
  if valid_618680 != nil:
    section.add "X-Amz-Credential", valid_618680
  var valid_618681 = header.getOrDefault("X-Amz-Security-Token")
  valid_618681 = validateParameter(valid_618681, JString, required = false,
                                 default = nil)
  if valid_618681 != nil:
    section.add "X-Amz-Security-Token", valid_618681
  var valid_618682 = header.getOrDefault("X-Amz-Algorithm")
  valid_618682 = validateParameter(valid_618682, JString, required = false,
                                 default = nil)
  if valid_618682 != nil:
    section.add "X-Amz-Algorithm", valid_618682
  var valid_618683 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618683 = validateParameter(valid_618683, JString, required = false,
                                 default = nil)
  if valid_618683 != nil:
    section.add "X-Amz-SignedHeaders", valid_618683
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_618684 = formData.getOrDefault("ResourceArn")
  valid_618684 = validateParameter(valid_618684, JString, required = true,
                                 default = nil)
  if valid_618684 != nil:
    section.add "ResourceArn", valid_618684
  var valid_618685 = formData.getOrDefault("Mode")
  valid_618685 = validateParameter(valid_618685, JString, required = true,
                                 default = newJString("sync"))
  if valid_618685 != nil:
    section.add "Mode", valid_618685
  var valid_618686 = formData.getOrDefault("KmsKeyId")
  valid_618686 = validateParameter(valid_618686, JString, required = true,
                                 default = nil)
  if valid_618686 != nil:
    section.add "KmsKeyId", valid_618686
  var valid_618687 = formData.getOrDefault("ApplyImmediately")
  valid_618687 = validateParameter(valid_618687, JBool, required = false, default = nil)
  if valid_618687 != nil:
    section.add "ApplyImmediately", valid_618687
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618688: Call_PostStartActivityStream_618672; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_618688.validator(path, query, header, formData, body)
  let scheme = call_618688.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618688.url(scheme.get, call_618688.host, call_618688.base,
                         call_618688.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618688, url, valid)

proc call*(call_618689: Call_PostStartActivityStream_618672; ResourceArn: string;
          KmsKeyId: string; Mode: string = "sync"; ApplyImmediately: bool = false;
          Action: string = "StartActivityStream"; Version: string = "2014-10-31"): Recallable =
  ## postStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618690 = newJObject()
  var formData_618691 = newJObject()
  add(formData_618691, "ResourceArn", newJString(ResourceArn))
  add(formData_618691, "Mode", newJString(Mode))
  add(formData_618691, "KmsKeyId", newJString(KmsKeyId))
  add(formData_618691, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_618690, "Action", newJString(Action))
  add(query_618690, "Version", newJString(Version))
  result = call_618689.call(nil, query_618690, nil, formData_618691, nil)

var postStartActivityStream* = Call_PostStartActivityStream_618672(
    name: "postStartActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_PostStartActivityStream_618673, base: "/",
    url: url_PostStartActivityStream_618674, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartActivityStream_618653 = ref object of OpenApiRestCall_612658
proc url_GetStartActivityStream_618655(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartActivityStream_618654(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `KmsKeyId` field"
  var valid_618656 = query.getOrDefault("KmsKeyId")
  valid_618656 = validateParameter(valid_618656, JString, required = true,
                                 default = nil)
  if valid_618656 != nil:
    section.add "KmsKeyId", valid_618656
  var valid_618657 = query.getOrDefault("ResourceArn")
  valid_618657 = validateParameter(valid_618657, JString, required = true,
                                 default = nil)
  if valid_618657 != nil:
    section.add "ResourceArn", valid_618657
  var valid_618658 = query.getOrDefault("Mode")
  valid_618658 = validateParameter(valid_618658, JString, required = true,
                                 default = newJString("sync"))
  if valid_618658 != nil:
    section.add "Mode", valid_618658
  var valid_618659 = query.getOrDefault("Action")
  valid_618659 = validateParameter(valid_618659, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_618659 != nil:
    section.add "Action", valid_618659
  var valid_618660 = query.getOrDefault("ApplyImmediately")
  valid_618660 = validateParameter(valid_618660, JBool, required = false, default = nil)
  if valid_618660 != nil:
    section.add "ApplyImmediately", valid_618660
  var valid_618661 = query.getOrDefault("Version")
  valid_618661 = validateParameter(valid_618661, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618661 != nil:
    section.add "Version", valid_618661
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618662 = header.getOrDefault("X-Amz-Signature")
  valid_618662 = validateParameter(valid_618662, JString, required = false,
                                 default = nil)
  if valid_618662 != nil:
    section.add "X-Amz-Signature", valid_618662
  var valid_618663 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618663 = validateParameter(valid_618663, JString, required = false,
                                 default = nil)
  if valid_618663 != nil:
    section.add "X-Amz-Content-Sha256", valid_618663
  var valid_618664 = header.getOrDefault("X-Amz-Date")
  valid_618664 = validateParameter(valid_618664, JString, required = false,
                                 default = nil)
  if valid_618664 != nil:
    section.add "X-Amz-Date", valid_618664
  var valid_618665 = header.getOrDefault("X-Amz-Credential")
  valid_618665 = validateParameter(valid_618665, JString, required = false,
                                 default = nil)
  if valid_618665 != nil:
    section.add "X-Amz-Credential", valid_618665
  var valid_618666 = header.getOrDefault("X-Amz-Security-Token")
  valid_618666 = validateParameter(valid_618666, JString, required = false,
                                 default = nil)
  if valid_618666 != nil:
    section.add "X-Amz-Security-Token", valid_618666
  var valid_618667 = header.getOrDefault("X-Amz-Algorithm")
  valid_618667 = validateParameter(valid_618667, JString, required = false,
                                 default = nil)
  if valid_618667 != nil:
    section.add "X-Amz-Algorithm", valid_618667
  var valid_618668 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618668 = validateParameter(valid_618668, JString, required = false,
                                 default = nil)
  if valid_618668 != nil:
    section.add "X-Amz-SignedHeaders", valid_618668
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618669: Call_GetStartActivityStream_618653; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_618669.validator(path, query, header, formData, body)
  let scheme = call_618669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618669.url(scheme.get, call_618669.host, call_618669.base,
                         call_618669.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618669, url, valid)

proc call*(call_618670: Call_GetStartActivityStream_618653; KmsKeyId: string;
          ResourceArn: string; Mode: string = "sync";
          Action: string = "StartActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_618671 = newJObject()
  add(query_618671, "KmsKeyId", newJString(KmsKeyId))
  add(query_618671, "ResourceArn", newJString(ResourceArn))
  add(query_618671, "Mode", newJString(Mode))
  add(query_618671, "Action", newJString(Action))
  add(query_618671, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_618671, "Version", newJString(Version))
  result = call_618670.call(nil, query_618671, nil, nil, nil)

var getStartActivityStream* = Call_GetStartActivityStream_618653(
    name: "getStartActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_GetStartActivityStream_618654, base: "/",
    url: url_GetStartActivityStream_618655, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBCluster_618708 = ref object of OpenApiRestCall_612658
proc url_PostStartDBCluster_618710(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBCluster_618709(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618711 = query.getOrDefault("Action")
  valid_618711 = validateParameter(valid_618711, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_618711 != nil:
    section.add "Action", valid_618711
  var valid_618712 = query.getOrDefault("Version")
  valid_618712 = validateParameter(valid_618712, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618712 != nil:
    section.add "Version", valid_618712
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618713 = header.getOrDefault("X-Amz-Signature")
  valid_618713 = validateParameter(valid_618713, JString, required = false,
                                 default = nil)
  if valid_618713 != nil:
    section.add "X-Amz-Signature", valid_618713
  var valid_618714 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618714 = validateParameter(valid_618714, JString, required = false,
                                 default = nil)
  if valid_618714 != nil:
    section.add "X-Amz-Content-Sha256", valid_618714
  var valid_618715 = header.getOrDefault("X-Amz-Date")
  valid_618715 = validateParameter(valid_618715, JString, required = false,
                                 default = nil)
  if valid_618715 != nil:
    section.add "X-Amz-Date", valid_618715
  var valid_618716 = header.getOrDefault("X-Amz-Credential")
  valid_618716 = validateParameter(valid_618716, JString, required = false,
                                 default = nil)
  if valid_618716 != nil:
    section.add "X-Amz-Credential", valid_618716
  var valid_618717 = header.getOrDefault("X-Amz-Security-Token")
  valid_618717 = validateParameter(valid_618717, JString, required = false,
                                 default = nil)
  if valid_618717 != nil:
    section.add "X-Amz-Security-Token", valid_618717
  var valid_618718 = header.getOrDefault("X-Amz-Algorithm")
  valid_618718 = validateParameter(valid_618718, JString, required = false,
                                 default = nil)
  if valid_618718 != nil:
    section.add "X-Amz-Algorithm", valid_618718
  var valid_618719 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618719 = validateParameter(valid_618719, JString, required = false,
                                 default = nil)
  if valid_618719 != nil:
    section.add "X-Amz-SignedHeaders", valid_618719
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_618720 = formData.getOrDefault("DBClusterIdentifier")
  valid_618720 = validateParameter(valid_618720, JString, required = true,
                                 default = nil)
  if valid_618720 != nil:
    section.add "DBClusterIdentifier", valid_618720
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618721: Call_PostStartDBCluster_618708; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_618721.validator(path, query, header, formData, body)
  let scheme = call_618721.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618721.url(scheme.get, call_618721.host, call_618721.base,
                         call_618721.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618721, url, valid)

proc call*(call_618722: Call_PostStartDBCluster_618708;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  var query_618723 = newJObject()
  var formData_618724 = newJObject()
  add(query_618723, "Action", newJString(Action))
  add(query_618723, "Version", newJString(Version))
  add(formData_618724, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_618722.call(nil, query_618723, nil, formData_618724, nil)

var postStartDBCluster* = Call_PostStartDBCluster_618708(
    name: "postStartDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBCluster",
    validator: validate_PostStartDBCluster_618709, base: "/",
    url: url_PostStartDBCluster_618710, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBCluster_618692 = ref object of OpenApiRestCall_612658
proc url_GetStartDBCluster_618694(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBCluster_618693(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_618695 = query.getOrDefault("DBClusterIdentifier")
  valid_618695 = validateParameter(valid_618695, JString, required = true,
                                 default = nil)
  if valid_618695 != nil:
    section.add "DBClusterIdentifier", valid_618695
  var valid_618696 = query.getOrDefault("Action")
  valid_618696 = validateParameter(valid_618696, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_618696 != nil:
    section.add "Action", valid_618696
  var valid_618697 = query.getOrDefault("Version")
  valid_618697 = validateParameter(valid_618697, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618697 != nil:
    section.add "Version", valid_618697
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618698 = header.getOrDefault("X-Amz-Signature")
  valid_618698 = validateParameter(valid_618698, JString, required = false,
                                 default = nil)
  if valid_618698 != nil:
    section.add "X-Amz-Signature", valid_618698
  var valid_618699 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618699 = validateParameter(valid_618699, JString, required = false,
                                 default = nil)
  if valid_618699 != nil:
    section.add "X-Amz-Content-Sha256", valid_618699
  var valid_618700 = header.getOrDefault("X-Amz-Date")
  valid_618700 = validateParameter(valid_618700, JString, required = false,
                                 default = nil)
  if valid_618700 != nil:
    section.add "X-Amz-Date", valid_618700
  var valid_618701 = header.getOrDefault("X-Amz-Credential")
  valid_618701 = validateParameter(valid_618701, JString, required = false,
                                 default = nil)
  if valid_618701 != nil:
    section.add "X-Amz-Credential", valid_618701
  var valid_618702 = header.getOrDefault("X-Amz-Security-Token")
  valid_618702 = validateParameter(valid_618702, JString, required = false,
                                 default = nil)
  if valid_618702 != nil:
    section.add "X-Amz-Security-Token", valid_618702
  var valid_618703 = header.getOrDefault("X-Amz-Algorithm")
  valid_618703 = validateParameter(valid_618703, JString, required = false,
                                 default = nil)
  if valid_618703 != nil:
    section.add "X-Amz-Algorithm", valid_618703
  var valid_618704 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618704 = validateParameter(valid_618704, JString, required = false,
                                 default = nil)
  if valid_618704 != nil:
    section.add "X-Amz-SignedHeaders", valid_618704
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618705: Call_GetStartDBCluster_618692; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_618705.validator(path, query, header, formData, body)
  let scheme = call_618705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618705.url(scheme.get, call_618705.host, call_618705.base,
                         call_618705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618705, url, valid)

proc call*(call_618706: Call_GetStartDBCluster_618692; DBClusterIdentifier: string;
          Action: string = "StartDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618707 = newJObject()
  add(query_618707, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_618707, "Action", newJString(Action))
  add(query_618707, "Version", newJString(Version))
  result = call_618706.call(nil, query_618707, nil, nil, nil)

var getStartDBCluster* = Call_GetStartDBCluster_618692(name: "getStartDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBCluster", validator: validate_GetStartDBCluster_618693,
    base: "/", url: url_GetStartDBCluster_618694,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBInstance_618741 = ref object of OpenApiRestCall_612658
proc url_PostStartDBInstance_618743(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBInstance_618742(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618744 = query.getOrDefault("Action")
  valid_618744 = validateParameter(valid_618744, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_618744 != nil:
    section.add "Action", valid_618744
  var valid_618745 = query.getOrDefault("Version")
  valid_618745 = validateParameter(valid_618745, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618745 != nil:
    section.add "Version", valid_618745
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618746 = header.getOrDefault("X-Amz-Signature")
  valid_618746 = validateParameter(valid_618746, JString, required = false,
                                 default = nil)
  if valid_618746 != nil:
    section.add "X-Amz-Signature", valid_618746
  var valid_618747 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618747 = validateParameter(valid_618747, JString, required = false,
                                 default = nil)
  if valid_618747 != nil:
    section.add "X-Amz-Content-Sha256", valid_618747
  var valid_618748 = header.getOrDefault("X-Amz-Date")
  valid_618748 = validateParameter(valid_618748, JString, required = false,
                                 default = nil)
  if valid_618748 != nil:
    section.add "X-Amz-Date", valid_618748
  var valid_618749 = header.getOrDefault("X-Amz-Credential")
  valid_618749 = validateParameter(valid_618749, JString, required = false,
                                 default = nil)
  if valid_618749 != nil:
    section.add "X-Amz-Credential", valid_618749
  var valid_618750 = header.getOrDefault("X-Amz-Security-Token")
  valid_618750 = validateParameter(valid_618750, JString, required = false,
                                 default = nil)
  if valid_618750 != nil:
    section.add "X-Amz-Security-Token", valid_618750
  var valid_618751 = header.getOrDefault("X-Amz-Algorithm")
  valid_618751 = validateParameter(valid_618751, JString, required = false,
                                 default = nil)
  if valid_618751 != nil:
    section.add "X-Amz-Algorithm", valid_618751
  var valid_618752 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618752 = validateParameter(valid_618752, JString, required = false,
                                 default = nil)
  if valid_618752 != nil:
    section.add "X-Amz-SignedHeaders", valid_618752
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_618753 = formData.getOrDefault("DBInstanceIdentifier")
  valid_618753 = validateParameter(valid_618753, JString, required = true,
                                 default = nil)
  if valid_618753 != nil:
    section.add "DBInstanceIdentifier", valid_618753
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618754: Call_PostStartDBInstance_618741; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_618754.validator(path, query, header, formData, body)
  let scheme = call_618754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618754.url(scheme.get, call_618754.host, call_618754.base,
                         call_618754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618754, url, valid)

proc call*(call_618755: Call_PostStartDBInstance_618741;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618756 = newJObject()
  var formData_618757 = newJObject()
  add(formData_618757, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_618756, "Action", newJString(Action))
  add(query_618756, "Version", newJString(Version))
  result = call_618755.call(nil, query_618756, nil, formData_618757, nil)

var postStartDBInstance* = Call_PostStartDBInstance_618741(
    name: "postStartDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBInstance",
    validator: validate_PostStartDBInstance_618742, base: "/",
    url: url_PostStartDBInstance_618743, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBInstance_618725 = ref object of OpenApiRestCall_612658
proc url_GetStartDBInstance_618727(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBInstance_618726(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_618728 = query.getOrDefault("DBInstanceIdentifier")
  valid_618728 = validateParameter(valid_618728, JString, required = true,
                                 default = nil)
  if valid_618728 != nil:
    section.add "DBInstanceIdentifier", valid_618728
  var valid_618729 = query.getOrDefault("Action")
  valid_618729 = validateParameter(valid_618729, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_618729 != nil:
    section.add "Action", valid_618729
  var valid_618730 = query.getOrDefault("Version")
  valid_618730 = validateParameter(valid_618730, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618730 != nil:
    section.add "Version", valid_618730
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618731 = header.getOrDefault("X-Amz-Signature")
  valid_618731 = validateParameter(valid_618731, JString, required = false,
                                 default = nil)
  if valid_618731 != nil:
    section.add "X-Amz-Signature", valid_618731
  var valid_618732 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618732 = validateParameter(valid_618732, JString, required = false,
                                 default = nil)
  if valid_618732 != nil:
    section.add "X-Amz-Content-Sha256", valid_618732
  var valid_618733 = header.getOrDefault("X-Amz-Date")
  valid_618733 = validateParameter(valid_618733, JString, required = false,
                                 default = nil)
  if valid_618733 != nil:
    section.add "X-Amz-Date", valid_618733
  var valid_618734 = header.getOrDefault("X-Amz-Credential")
  valid_618734 = validateParameter(valid_618734, JString, required = false,
                                 default = nil)
  if valid_618734 != nil:
    section.add "X-Amz-Credential", valid_618734
  var valid_618735 = header.getOrDefault("X-Amz-Security-Token")
  valid_618735 = validateParameter(valid_618735, JString, required = false,
                                 default = nil)
  if valid_618735 != nil:
    section.add "X-Amz-Security-Token", valid_618735
  var valid_618736 = header.getOrDefault("X-Amz-Algorithm")
  valid_618736 = validateParameter(valid_618736, JString, required = false,
                                 default = nil)
  if valid_618736 != nil:
    section.add "X-Amz-Algorithm", valid_618736
  var valid_618737 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618737 = validateParameter(valid_618737, JString, required = false,
                                 default = nil)
  if valid_618737 != nil:
    section.add "X-Amz-SignedHeaders", valid_618737
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618738: Call_GetStartDBInstance_618725; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_618738.validator(path, query, header, formData, body)
  let scheme = call_618738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618738.url(scheme.get, call_618738.host, call_618738.base,
                         call_618738.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618738, url, valid)

proc call*(call_618739: Call_GetStartDBInstance_618725;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618740 = newJObject()
  add(query_618740, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_618740, "Action", newJString(Action))
  add(query_618740, "Version", newJString(Version))
  result = call_618739.call(nil, query_618740, nil, nil, nil)

var getStartDBInstance* = Call_GetStartDBInstance_618725(
    name: "getStartDBInstance", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBInstance", validator: validate_GetStartDBInstance_618726,
    base: "/", url: url_GetStartDBInstance_618727,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartExportTask_618780 = ref object of OpenApiRestCall_612658
proc url_PostStartExportTask_618782(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartExportTask_618781(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618783 = query.getOrDefault("Action")
  valid_618783 = validateParameter(valid_618783, JString, required = true,
                                 default = newJString("StartExportTask"))
  if valid_618783 != nil:
    section.add "Action", valid_618783
  var valid_618784 = query.getOrDefault("Version")
  valid_618784 = validateParameter(valid_618784, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618784 != nil:
    section.add "Version", valid_618784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618785 = header.getOrDefault("X-Amz-Signature")
  valid_618785 = validateParameter(valid_618785, JString, required = false,
                                 default = nil)
  if valid_618785 != nil:
    section.add "X-Amz-Signature", valid_618785
  var valid_618786 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618786 = validateParameter(valid_618786, JString, required = false,
                                 default = nil)
  if valid_618786 != nil:
    section.add "X-Amz-Content-Sha256", valid_618786
  var valid_618787 = header.getOrDefault("X-Amz-Date")
  valid_618787 = validateParameter(valid_618787, JString, required = false,
                                 default = nil)
  if valid_618787 != nil:
    section.add "X-Amz-Date", valid_618787
  var valid_618788 = header.getOrDefault("X-Amz-Credential")
  valid_618788 = validateParameter(valid_618788, JString, required = false,
                                 default = nil)
  if valid_618788 != nil:
    section.add "X-Amz-Credential", valid_618788
  var valid_618789 = header.getOrDefault("X-Amz-Security-Token")
  valid_618789 = validateParameter(valid_618789, JString, required = false,
                                 default = nil)
  if valid_618789 != nil:
    section.add "X-Amz-Security-Token", valid_618789
  var valid_618790 = header.getOrDefault("X-Amz-Algorithm")
  valid_618790 = validateParameter(valid_618790, JString, required = false,
                                 default = nil)
  if valid_618790 != nil:
    section.add "X-Amz-Algorithm", valid_618790
  var valid_618791 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618791 = validateParameter(valid_618791, JString, required = false,
                                 default = nil)
  if valid_618791 != nil:
    section.add "X-Amz-SignedHeaders", valid_618791
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3Prefix: JString
  ##           : The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
  ##   ExportTaskIdentifier: JString (required)
  ##                       : A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. 
  ##   IamRoleArn: JString (required)
  ##             : The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. 
  ##   KmsKeyId: JString (required)
  ##           : The ID of the AWS KMS key to use to encrypt the snapshot exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key. 
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket to export the snapshot to.
  ##   ExportOnly: JArray
  ##             : <p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data of the snapshot.</p> </li> <li> <p> <code>database.table [table-name]</code> - Export a table of the snapshot.</p> </li> <li> <p> <code>database.schema [schema-name]</code> - Export a database schema of the snapshot. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> <li> <p> <code>database.schema.table [table-name]</code> - Export a table of the database schema. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> </ul>
  ##   SourceArn: JString (required)
  ##            : The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
  section = newJObject()
  var valid_618792 = formData.getOrDefault("S3Prefix")
  valid_618792 = validateParameter(valid_618792, JString, required = false,
                                 default = nil)
  if valid_618792 != nil:
    section.add "S3Prefix", valid_618792
  assert formData != nil, "formData argument is necessary due to required `ExportTaskIdentifier` field"
  var valid_618793 = formData.getOrDefault("ExportTaskIdentifier")
  valid_618793 = validateParameter(valid_618793, JString, required = true,
                                 default = nil)
  if valid_618793 != nil:
    section.add "ExportTaskIdentifier", valid_618793
  var valid_618794 = formData.getOrDefault("IamRoleArn")
  valid_618794 = validateParameter(valid_618794, JString, required = true,
                                 default = nil)
  if valid_618794 != nil:
    section.add "IamRoleArn", valid_618794
  var valid_618795 = formData.getOrDefault("KmsKeyId")
  valid_618795 = validateParameter(valid_618795, JString, required = true,
                                 default = nil)
  if valid_618795 != nil:
    section.add "KmsKeyId", valid_618795
  var valid_618796 = formData.getOrDefault("S3BucketName")
  valid_618796 = validateParameter(valid_618796, JString, required = true,
                                 default = nil)
  if valid_618796 != nil:
    section.add "S3BucketName", valid_618796
  var valid_618797 = formData.getOrDefault("ExportOnly")
  valid_618797 = validateParameter(valid_618797, JArray, required = false,
                                 default = nil)
  if valid_618797 != nil:
    section.add "ExportOnly", valid_618797
  var valid_618798 = formData.getOrDefault("SourceArn")
  valid_618798 = validateParameter(valid_618798, JString, required = true,
                                 default = nil)
  if valid_618798 != nil:
    section.add "SourceArn", valid_618798
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618799: Call_PostStartExportTask_618780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ## 
  let valid = call_618799.validator(path, query, header, formData, body)
  let scheme = call_618799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618799.url(scheme.get, call_618799.host, call_618799.base,
                         call_618799.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618799, url, valid)

proc call*(call_618800: Call_PostStartExportTask_618780;
          ExportTaskIdentifier: string; IamRoleArn: string; KmsKeyId: string;
          S3BucketName: string; SourceArn: string; S3Prefix: string = "";
          ExportOnly: JsonNode = nil; Action: string = "StartExportTask";
          Version: string = "2014-10-31"): Recallable =
  ## postStartExportTask
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ##   S3Prefix: string
  ##           : The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
  ##   ExportTaskIdentifier: string (required)
  ##                       : A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. 
  ##   IamRoleArn: string (required)
  ##             : The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. 
  ##   KmsKeyId: string (required)
  ##           : The ID of the AWS KMS key to use to encrypt the snapshot exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key. 
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket to export the snapshot to.
  ##   ExportOnly: JArray
  ##             : <p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data of the snapshot.</p> </li> <li> <p> <code>database.table [table-name]</code> - Export a table of the snapshot.</p> </li> <li> <p> <code>database.schema [schema-name]</code> - Export a database schema of the snapshot. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> <li> <p> <code>database.schema.table [table-name]</code> - Export a table of the database schema. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> </ul>
  ##   SourceArn: string (required)
  ##            : The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618801 = newJObject()
  var formData_618802 = newJObject()
  add(formData_618802, "S3Prefix", newJString(S3Prefix))
  add(formData_618802, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(formData_618802, "IamRoleArn", newJString(IamRoleArn))
  add(formData_618802, "KmsKeyId", newJString(KmsKeyId))
  add(formData_618802, "S3BucketName", newJString(S3BucketName))
  if ExportOnly != nil:
    formData_618802.add "ExportOnly", ExportOnly
  add(formData_618802, "SourceArn", newJString(SourceArn))
  add(query_618801, "Action", newJString(Action))
  add(query_618801, "Version", newJString(Version))
  result = call_618800.call(nil, query_618801, nil, formData_618802, nil)

var postStartExportTask* = Call_PostStartExportTask_618780(
    name: "postStartExportTask", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartExportTask",
    validator: validate_PostStartExportTask_618781, base: "/",
    url: url_PostStartExportTask_618782, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartExportTask_618758 = ref object of OpenApiRestCall_612658
proc url_GetStartExportTask_618760(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartExportTask_618759(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceArn: JString (required)
  ##            : The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
  ##   ExportTaskIdentifier: JString (required)
  ##                       : A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. 
  ##   ExportOnly: JArray
  ##             : <p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data of the snapshot.</p> </li> <li> <p> <code>database.table [table-name]</code> - Export a table of the snapshot.</p> </li> <li> <p> <code>database.schema [schema-name]</code> - Export a database schema of the snapshot. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> <li> <p> <code>database.schema.table [table-name]</code> - Export a table of the database schema. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> </ul>
  ##   S3Prefix: JString
  ##           : The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
  ##   KmsKeyId: JString (required)
  ##           : The ID of the AWS KMS key to use to encrypt the snapshot exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key. 
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket to export the snapshot to.
  ##   IamRoleArn: JString (required)
  ##             : The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceArn` field"
  var valid_618761 = query.getOrDefault("SourceArn")
  valid_618761 = validateParameter(valid_618761, JString, required = true,
                                 default = nil)
  if valid_618761 != nil:
    section.add "SourceArn", valid_618761
  var valid_618762 = query.getOrDefault("ExportTaskIdentifier")
  valid_618762 = validateParameter(valid_618762, JString, required = true,
                                 default = nil)
  if valid_618762 != nil:
    section.add "ExportTaskIdentifier", valid_618762
  var valid_618763 = query.getOrDefault("ExportOnly")
  valid_618763 = validateParameter(valid_618763, JArray, required = false,
                                 default = nil)
  if valid_618763 != nil:
    section.add "ExportOnly", valid_618763
  var valid_618764 = query.getOrDefault("S3Prefix")
  valid_618764 = validateParameter(valid_618764, JString, required = false,
                                 default = nil)
  if valid_618764 != nil:
    section.add "S3Prefix", valid_618764
  var valid_618765 = query.getOrDefault("KmsKeyId")
  valid_618765 = validateParameter(valid_618765, JString, required = true,
                                 default = nil)
  if valid_618765 != nil:
    section.add "KmsKeyId", valid_618765
  var valid_618766 = query.getOrDefault("S3BucketName")
  valid_618766 = validateParameter(valid_618766, JString, required = true,
                                 default = nil)
  if valid_618766 != nil:
    section.add "S3BucketName", valid_618766
  var valid_618767 = query.getOrDefault("IamRoleArn")
  valid_618767 = validateParameter(valid_618767, JString, required = true,
                                 default = nil)
  if valid_618767 != nil:
    section.add "IamRoleArn", valid_618767
  var valid_618768 = query.getOrDefault("Action")
  valid_618768 = validateParameter(valid_618768, JString, required = true,
                                 default = newJString("StartExportTask"))
  if valid_618768 != nil:
    section.add "Action", valid_618768
  var valid_618769 = query.getOrDefault("Version")
  valid_618769 = validateParameter(valid_618769, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618769 != nil:
    section.add "Version", valid_618769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618770 = header.getOrDefault("X-Amz-Signature")
  valid_618770 = validateParameter(valid_618770, JString, required = false,
                                 default = nil)
  if valid_618770 != nil:
    section.add "X-Amz-Signature", valid_618770
  var valid_618771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618771 = validateParameter(valid_618771, JString, required = false,
                                 default = nil)
  if valid_618771 != nil:
    section.add "X-Amz-Content-Sha256", valid_618771
  var valid_618772 = header.getOrDefault("X-Amz-Date")
  valid_618772 = validateParameter(valid_618772, JString, required = false,
                                 default = nil)
  if valid_618772 != nil:
    section.add "X-Amz-Date", valid_618772
  var valid_618773 = header.getOrDefault("X-Amz-Credential")
  valid_618773 = validateParameter(valid_618773, JString, required = false,
                                 default = nil)
  if valid_618773 != nil:
    section.add "X-Amz-Credential", valid_618773
  var valid_618774 = header.getOrDefault("X-Amz-Security-Token")
  valid_618774 = validateParameter(valid_618774, JString, required = false,
                                 default = nil)
  if valid_618774 != nil:
    section.add "X-Amz-Security-Token", valid_618774
  var valid_618775 = header.getOrDefault("X-Amz-Algorithm")
  valid_618775 = validateParameter(valid_618775, JString, required = false,
                                 default = nil)
  if valid_618775 != nil:
    section.add "X-Amz-Algorithm", valid_618775
  var valid_618776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618776 = validateParameter(valid_618776, JString, required = false,
                                 default = nil)
  if valid_618776 != nil:
    section.add "X-Amz-SignedHeaders", valid_618776
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618777: Call_GetStartExportTask_618758; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ## 
  let valid = call_618777.validator(path, query, header, formData, body)
  let scheme = call_618777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618777.url(scheme.get, call_618777.host, call_618777.base,
                         call_618777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618777, url, valid)

proc call*(call_618778: Call_GetStartExportTask_618758; SourceArn: string;
          ExportTaskIdentifier: string; KmsKeyId: string; S3BucketName: string;
          IamRoleArn: string; ExportOnly: JsonNode = nil; S3Prefix: string = "";
          Action: string = "StartExportTask"; Version: string = "2014-10-31"): Recallable =
  ## getStartExportTask
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ##   SourceArn: string (required)
  ##            : The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
  ##   ExportTaskIdentifier: string (required)
  ##                       : A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. 
  ##   ExportOnly: JArray
  ##             : <p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data of the snapshot.</p> </li> <li> <p> <code>database.table [table-name]</code> - Export a table of the snapshot.</p> </li> <li> <p> <code>database.schema [schema-name]</code> - Export a database schema of the snapshot. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> <li> <p> <code>database.schema.table [table-name]</code> - Export a table of the database schema. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> </ul>
  ##   S3Prefix: string
  ##           : The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
  ##   KmsKeyId: string (required)
  ##           : The ID of the AWS KMS key to use to encrypt the snapshot exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key. 
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket to export the snapshot to.
  ##   IamRoleArn: string (required)
  ##             : The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618779 = newJObject()
  add(query_618779, "SourceArn", newJString(SourceArn))
  add(query_618779, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  if ExportOnly != nil:
    query_618779.add "ExportOnly", ExportOnly
  add(query_618779, "S3Prefix", newJString(S3Prefix))
  add(query_618779, "KmsKeyId", newJString(KmsKeyId))
  add(query_618779, "S3BucketName", newJString(S3BucketName))
  add(query_618779, "IamRoleArn", newJString(IamRoleArn))
  add(query_618779, "Action", newJString(Action))
  add(query_618779, "Version", newJString(Version))
  result = call_618778.call(nil, query_618779, nil, nil, nil)

var getStartExportTask* = Call_GetStartExportTask_618758(
    name: "getStartExportTask", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartExportTask", validator: validate_GetStartExportTask_618759,
    base: "/", url: url_GetStartExportTask_618760,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopActivityStream_618820 = ref object of OpenApiRestCall_612658
proc url_PostStopActivityStream_618822(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopActivityStream_618821(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618823 = query.getOrDefault("Action")
  valid_618823 = validateParameter(valid_618823, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_618823 != nil:
    section.add "Action", valid_618823
  var valid_618824 = query.getOrDefault("Version")
  valid_618824 = validateParameter(valid_618824, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618824 != nil:
    section.add "Version", valid_618824
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618825 = header.getOrDefault("X-Amz-Signature")
  valid_618825 = validateParameter(valid_618825, JString, required = false,
                                 default = nil)
  if valid_618825 != nil:
    section.add "X-Amz-Signature", valid_618825
  var valid_618826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618826 = validateParameter(valid_618826, JString, required = false,
                                 default = nil)
  if valid_618826 != nil:
    section.add "X-Amz-Content-Sha256", valid_618826
  var valid_618827 = header.getOrDefault("X-Amz-Date")
  valid_618827 = validateParameter(valid_618827, JString, required = false,
                                 default = nil)
  if valid_618827 != nil:
    section.add "X-Amz-Date", valid_618827
  var valid_618828 = header.getOrDefault("X-Amz-Credential")
  valid_618828 = validateParameter(valid_618828, JString, required = false,
                                 default = nil)
  if valid_618828 != nil:
    section.add "X-Amz-Credential", valid_618828
  var valid_618829 = header.getOrDefault("X-Amz-Security-Token")
  valid_618829 = validateParameter(valid_618829, JString, required = false,
                                 default = nil)
  if valid_618829 != nil:
    section.add "X-Amz-Security-Token", valid_618829
  var valid_618830 = header.getOrDefault("X-Amz-Algorithm")
  valid_618830 = validateParameter(valid_618830, JString, required = false,
                                 default = nil)
  if valid_618830 != nil:
    section.add "X-Amz-Algorithm", valid_618830
  var valid_618831 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618831 = validateParameter(valid_618831, JString, required = false,
                                 default = nil)
  if valid_618831 != nil:
    section.add "X-Amz-SignedHeaders", valid_618831
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_618832 = formData.getOrDefault("ResourceArn")
  valid_618832 = validateParameter(valid_618832, JString, required = true,
                                 default = nil)
  if valid_618832 != nil:
    section.add "ResourceArn", valid_618832
  var valid_618833 = formData.getOrDefault("ApplyImmediately")
  valid_618833 = validateParameter(valid_618833, JBool, required = false, default = nil)
  if valid_618833 != nil:
    section.add "ApplyImmediately", valid_618833
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618834: Call_PostStopActivityStream_618820; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_618834.validator(path, query, header, formData, body)
  let scheme = call_618834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618834.url(scheme.get, call_618834.host, call_618834.base,
                         call_618834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618834, url, valid)

proc call*(call_618835: Call_PostStopActivityStream_618820; ResourceArn: string;
          ApplyImmediately: bool = false; Action: string = "StopActivityStream";
          Version: string = "2014-10-31"): Recallable =
  ## postStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618836 = newJObject()
  var formData_618837 = newJObject()
  add(formData_618837, "ResourceArn", newJString(ResourceArn))
  add(formData_618837, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_618836, "Action", newJString(Action))
  add(query_618836, "Version", newJString(Version))
  result = call_618835.call(nil, query_618836, nil, formData_618837, nil)

var postStopActivityStream* = Call_PostStopActivityStream_618820(
    name: "postStopActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_PostStopActivityStream_618821, base: "/",
    url: url_PostStopActivityStream_618822, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopActivityStream_618803 = ref object of OpenApiRestCall_612658
proc url_GetStopActivityStream_618805(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopActivityStream_618804(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_618806 = query.getOrDefault("ResourceArn")
  valid_618806 = validateParameter(valid_618806, JString, required = true,
                                 default = nil)
  if valid_618806 != nil:
    section.add "ResourceArn", valid_618806
  var valid_618807 = query.getOrDefault("Action")
  valid_618807 = validateParameter(valid_618807, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_618807 != nil:
    section.add "Action", valid_618807
  var valid_618808 = query.getOrDefault("ApplyImmediately")
  valid_618808 = validateParameter(valid_618808, JBool, required = false, default = nil)
  if valid_618808 != nil:
    section.add "ApplyImmediately", valid_618808
  var valid_618809 = query.getOrDefault("Version")
  valid_618809 = validateParameter(valid_618809, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618809 != nil:
    section.add "Version", valid_618809
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618810 = header.getOrDefault("X-Amz-Signature")
  valid_618810 = validateParameter(valid_618810, JString, required = false,
                                 default = nil)
  if valid_618810 != nil:
    section.add "X-Amz-Signature", valid_618810
  var valid_618811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618811 = validateParameter(valid_618811, JString, required = false,
                                 default = nil)
  if valid_618811 != nil:
    section.add "X-Amz-Content-Sha256", valid_618811
  var valid_618812 = header.getOrDefault("X-Amz-Date")
  valid_618812 = validateParameter(valid_618812, JString, required = false,
                                 default = nil)
  if valid_618812 != nil:
    section.add "X-Amz-Date", valid_618812
  var valid_618813 = header.getOrDefault("X-Amz-Credential")
  valid_618813 = validateParameter(valid_618813, JString, required = false,
                                 default = nil)
  if valid_618813 != nil:
    section.add "X-Amz-Credential", valid_618813
  var valid_618814 = header.getOrDefault("X-Amz-Security-Token")
  valid_618814 = validateParameter(valid_618814, JString, required = false,
                                 default = nil)
  if valid_618814 != nil:
    section.add "X-Amz-Security-Token", valid_618814
  var valid_618815 = header.getOrDefault("X-Amz-Algorithm")
  valid_618815 = validateParameter(valid_618815, JString, required = false,
                                 default = nil)
  if valid_618815 != nil:
    section.add "X-Amz-Algorithm", valid_618815
  var valid_618816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618816 = validateParameter(valid_618816, JString, required = false,
                                 default = nil)
  if valid_618816 != nil:
    section.add "X-Amz-SignedHeaders", valid_618816
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618817: Call_GetStopActivityStream_618803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_618817.validator(path, query, header, formData, body)
  let scheme = call_618817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618817.url(scheme.get, call_618817.host, call_618817.base,
                         call_618817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618817, url, valid)

proc call*(call_618818: Call_GetStopActivityStream_618803; ResourceArn: string;
          Action: string = "StopActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_618819 = newJObject()
  add(query_618819, "ResourceArn", newJString(ResourceArn))
  add(query_618819, "Action", newJString(Action))
  add(query_618819, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_618819, "Version", newJString(Version))
  result = call_618818.call(nil, query_618819, nil, nil, nil)

var getStopActivityStream* = Call_GetStopActivityStream_618803(
    name: "getStopActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_GetStopActivityStream_618804, base: "/",
    url: url_GetStopActivityStream_618805, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBCluster_618854 = ref object of OpenApiRestCall_612658
proc url_PostStopDBCluster_618856(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBCluster_618855(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618857 = query.getOrDefault("Action")
  valid_618857 = validateParameter(valid_618857, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_618857 != nil:
    section.add "Action", valid_618857
  var valid_618858 = query.getOrDefault("Version")
  valid_618858 = validateParameter(valid_618858, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618858 != nil:
    section.add "Version", valid_618858
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618859 = header.getOrDefault("X-Amz-Signature")
  valid_618859 = validateParameter(valid_618859, JString, required = false,
                                 default = nil)
  if valid_618859 != nil:
    section.add "X-Amz-Signature", valid_618859
  var valid_618860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618860 = validateParameter(valid_618860, JString, required = false,
                                 default = nil)
  if valid_618860 != nil:
    section.add "X-Amz-Content-Sha256", valid_618860
  var valid_618861 = header.getOrDefault("X-Amz-Date")
  valid_618861 = validateParameter(valid_618861, JString, required = false,
                                 default = nil)
  if valid_618861 != nil:
    section.add "X-Amz-Date", valid_618861
  var valid_618862 = header.getOrDefault("X-Amz-Credential")
  valid_618862 = validateParameter(valid_618862, JString, required = false,
                                 default = nil)
  if valid_618862 != nil:
    section.add "X-Amz-Credential", valid_618862
  var valid_618863 = header.getOrDefault("X-Amz-Security-Token")
  valid_618863 = validateParameter(valid_618863, JString, required = false,
                                 default = nil)
  if valid_618863 != nil:
    section.add "X-Amz-Security-Token", valid_618863
  var valid_618864 = header.getOrDefault("X-Amz-Algorithm")
  valid_618864 = validateParameter(valid_618864, JString, required = false,
                                 default = nil)
  if valid_618864 != nil:
    section.add "X-Amz-Algorithm", valid_618864
  var valid_618865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618865 = validateParameter(valid_618865, JString, required = false,
                                 default = nil)
  if valid_618865 != nil:
    section.add "X-Amz-SignedHeaders", valid_618865
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_618866 = formData.getOrDefault("DBClusterIdentifier")
  valid_618866 = validateParameter(valid_618866, JString, required = true,
                                 default = nil)
  if valid_618866 != nil:
    section.add "DBClusterIdentifier", valid_618866
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618867: Call_PostStopDBCluster_618854; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_618867.validator(path, query, header, formData, body)
  let scheme = call_618867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618867.url(scheme.get, call_618867.host, call_618867.base,
                         call_618867.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618867, url, valid)

proc call*(call_618868: Call_PostStopDBCluster_618854; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  var query_618869 = newJObject()
  var formData_618870 = newJObject()
  add(query_618869, "Action", newJString(Action))
  add(query_618869, "Version", newJString(Version))
  add(formData_618870, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_618868.call(nil, query_618869, nil, formData_618870, nil)

var postStopDBCluster* = Call_PostStopDBCluster_618854(name: "postStopDBCluster",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_PostStopDBCluster_618855,
    base: "/", url: url_PostStopDBCluster_618856,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBCluster_618838 = ref object of OpenApiRestCall_612658
proc url_GetStopDBCluster_618840(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBCluster_618839(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_618841 = query.getOrDefault("DBClusterIdentifier")
  valid_618841 = validateParameter(valid_618841, JString, required = true,
                                 default = nil)
  if valid_618841 != nil:
    section.add "DBClusterIdentifier", valid_618841
  var valid_618842 = query.getOrDefault("Action")
  valid_618842 = validateParameter(valid_618842, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_618842 != nil:
    section.add "Action", valid_618842
  var valid_618843 = query.getOrDefault("Version")
  valid_618843 = validateParameter(valid_618843, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618843 != nil:
    section.add "Version", valid_618843
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618844 = header.getOrDefault("X-Amz-Signature")
  valid_618844 = validateParameter(valid_618844, JString, required = false,
                                 default = nil)
  if valid_618844 != nil:
    section.add "X-Amz-Signature", valid_618844
  var valid_618845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618845 = validateParameter(valid_618845, JString, required = false,
                                 default = nil)
  if valid_618845 != nil:
    section.add "X-Amz-Content-Sha256", valid_618845
  var valid_618846 = header.getOrDefault("X-Amz-Date")
  valid_618846 = validateParameter(valid_618846, JString, required = false,
                                 default = nil)
  if valid_618846 != nil:
    section.add "X-Amz-Date", valid_618846
  var valid_618847 = header.getOrDefault("X-Amz-Credential")
  valid_618847 = validateParameter(valid_618847, JString, required = false,
                                 default = nil)
  if valid_618847 != nil:
    section.add "X-Amz-Credential", valid_618847
  var valid_618848 = header.getOrDefault("X-Amz-Security-Token")
  valid_618848 = validateParameter(valid_618848, JString, required = false,
                                 default = nil)
  if valid_618848 != nil:
    section.add "X-Amz-Security-Token", valid_618848
  var valid_618849 = header.getOrDefault("X-Amz-Algorithm")
  valid_618849 = validateParameter(valid_618849, JString, required = false,
                                 default = nil)
  if valid_618849 != nil:
    section.add "X-Amz-Algorithm", valid_618849
  var valid_618850 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618850 = validateParameter(valid_618850, JString, required = false,
                                 default = nil)
  if valid_618850 != nil:
    section.add "X-Amz-SignedHeaders", valid_618850
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618851: Call_GetStopDBCluster_618838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_618851.validator(path, query, header, formData, body)
  let scheme = call_618851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618851.url(scheme.get, call_618851.host, call_618851.base,
                         call_618851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618851, url, valid)

proc call*(call_618852: Call_GetStopDBCluster_618838; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618853 = newJObject()
  add(query_618853, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_618853, "Action", newJString(Action))
  add(query_618853, "Version", newJString(Version))
  result = call_618852.call(nil, query_618853, nil, nil, nil)

var getStopDBCluster* = Call_GetStopDBCluster_618838(name: "getStopDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_GetStopDBCluster_618839,
    base: "/", url: url_GetStopDBCluster_618840,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBInstance_618888 = ref object of OpenApiRestCall_612658
proc url_PostStopDBInstance_618890(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBInstance_618889(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618891 = query.getOrDefault("Action")
  valid_618891 = validateParameter(valid_618891, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_618891 != nil:
    section.add "Action", valid_618891
  var valid_618892 = query.getOrDefault("Version")
  valid_618892 = validateParameter(valid_618892, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618892 != nil:
    section.add "Version", valid_618892
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618893 = header.getOrDefault("X-Amz-Signature")
  valid_618893 = validateParameter(valid_618893, JString, required = false,
                                 default = nil)
  if valid_618893 != nil:
    section.add "X-Amz-Signature", valid_618893
  var valid_618894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618894 = validateParameter(valid_618894, JString, required = false,
                                 default = nil)
  if valid_618894 != nil:
    section.add "X-Amz-Content-Sha256", valid_618894
  var valid_618895 = header.getOrDefault("X-Amz-Date")
  valid_618895 = validateParameter(valid_618895, JString, required = false,
                                 default = nil)
  if valid_618895 != nil:
    section.add "X-Amz-Date", valid_618895
  var valid_618896 = header.getOrDefault("X-Amz-Credential")
  valid_618896 = validateParameter(valid_618896, JString, required = false,
                                 default = nil)
  if valid_618896 != nil:
    section.add "X-Amz-Credential", valid_618896
  var valid_618897 = header.getOrDefault("X-Amz-Security-Token")
  valid_618897 = validateParameter(valid_618897, JString, required = false,
                                 default = nil)
  if valid_618897 != nil:
    section.add "X-Amz-Security-Token", valid_618897
  var valid_618898 = header.getOrDefault("X-Amz-Algorithm")
  valid_618898 = validateParameter(valid_618898, JString, required = false,
                                 default = nil)
  if valid_618898 != nil:
    section.add "X-Amz-Algorithm", valid_618898
  var valid_618899 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618899 = validateParameter(valid_618899, JString, required = false,
                                 default = nil)
  if valid_618899 != nil:
    section.add "X-Amz-SignedHeaders", valid_618899
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_618900 = formData.getOrDefault("DBInstanceIdentifier")
  valid_618900 = validateParameter(valid_618900, JString, required = true,
                                 default = nil)
  if valid_618900 != nil:
    section.add "DBInstanceIdentifier", valid_618900
  var valid_618901 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_618901 = validateParameter(valid_618901, JString, required = false,
                                 default = nil)
  if valid_618901 != nil:
    section.add "DBSnapshotIdentifier", valid_618901
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618902: Call_PostStopDBInstance_618888; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_618902.validator(path, query, header, formData, body)
  let scheme = call_618902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618902.url(scheme.get, call_618902.host, call_618902.base,
                         call_618902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618902, url, valid)

proc call*(call_618903: Call_PostStopDBInstance_618888;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618904 = newJObject()
  var formData_618905 = newJObject()
  add(formData_618905, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_618905, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_618904, "Action", newJString(Action))
  add(query_618904, "Version", newJString(Version))
  result = call_618903.call(nil, query_618904, nil, formData_618905, nil)

var postStopDBInstance* = Call_PostStopDBInstance_618888(
    name: "postStopDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopDBInstance",
    validator: validate_PostStopDBInstance_618889, base: "/",
    url: url_PostStopDBInstance_618890, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBInstance_618871 = ref object of OpenApiRestCall_612658
proc url_GetStopDBInstance_618873(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBInstance_618872(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_618874 = query.getOrDefault("DBInstanceIdentifier")
  valid_618874 = validateParameter(valid_618874, JString, required = true,
                                 default = nil)
  if valid_618874 != nil:
    section.add "DBInstanceIdentifier", valid_618874
  var valid_618875 = query.getOrDefault("DBSnapshotIdentifier")
  valid_618875 = validateParameter(valid_618875, JString, required = false,
                                 default = nil)
  if valid_618875 != nil:
    section.add "DBSnapshotIdentifier", valid_618875
  var valid_618876 = query.getOrDefault("Action")
  valid_618876 = validateParameter(valid_618876, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_618876 != nil:
    section.add "Action", valid_618876
  var valid_618877 = query.getOrDefault("Version")
  valid_618877 = validateParameter(valid_618877, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_618877 != nil:
    section.add "Version", valid_618877
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618878 = header.getOrDefault("X-Amz-Signature")
  valid_618878 = validateParameter(valid_618878, JString, required = false,
                                 default = nil)
  if valid_618878 != nil:
    section.add "X-Amz-Signature", valid_618878
  var valid_618879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618879 = validateParameter(valid_618879, JString, required = false,
                                 default = nil)
  if valid_618879 != nil:
    section.add "X-Amz-Content-Sha256", valid_618879
  var valid_618880 = header.getOrDefault("X-Amz-Date")
  valid_618880 = validateParameter(valid_618880, JString, required = false,
                                 default = nil)
  if valid_618880 != nil:
    section.add "X-Amz-Date", valid_618880
  var valid_618881 = header.getOrDefault("X-Amz-Credential")
  valid_618881 = validateParameter(valid_618881, JString, required = false,
                                 default = nil)
  if valid_618881 != nil:
    section.add "X-Amz-Credential", valid_618881
  var valid_618882 = header.getOrDefault("X-Amz-Security-Token")
  valid_618882 = validateParameter(valid_618882, JString, required = false,
                                 default = nil)
  if valid_618882 != nil:
    section.add "X-Amz-Security-Token", valid_618882
  var valid_618883 = header.getOrDefault("X-Amz-Algorithm")
  valid_618883 = validateParameter(valid_618883, JString, required = false,
                                 default = nil)
  if valid_618883 != nil:
    section.add "X-Amz-Algorithm", valid_618883
  var valid_618884 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618884 = validateParameter(valid_618884, JString, required = false,
                                 default = nil)
  if valid_618884 != nil:
    section.add "X-Amz-SignedHeaders", valid_618884
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618885: Call_GetStopDBInstance_618871; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_618885.validator(path, query, header, formData, body)
  let scheme = call_618885.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618885.url(scheme.get, call_618885.host, call_618885.base,
                         call_618885.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618885, url, valid)

proc call*(call_618886: Call_GetStopDBInstance_618871;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618887 = newJObject()
  add(query_618887, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_618887, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_618887, "Action", newJString(Action))
  add(query_618887, "Version", newJString(Version))
  result = call_618886.call(nil, query_618887, nil, nil, nil)

var getStopDBInstance* = Call_GetStopDBInstance_618871(name: "getStopDBInstance",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBInstance", validator: validate_GetStopDBInstance_618872,
    base: "/", url: url_GetStopDBInstance_618873,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  const
    XAmzSecurityToken = "X-Amz-Security-Token"
  if not headers.hasKey(XAmzSecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[XAmzSecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
