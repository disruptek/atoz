
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Relational Database Service
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Relational Database Service</fullname> <p> </p> <p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale a relational database in the cloud. It provides cost-efficient, resizeable capacity for an industry-standard relational database and manages common database administration tasks, freeing up developers to focus on what makes their applications and businesses unique.</p> <p>Amazon RDS gives you access to the capabilities of a MySQL, MariaDB, PostgreSQL, Microsoft SQL Server, Oracle, or Amazon Aurora database server. These capabilities mean that the code, applications, and tools you already use today with your existing databases work with Amazon RDS without modification. Amazon RDS automatically backs up your database and maintains the database software that powers your DB instance. Amazon RDS is flexible: you can scale your DB instance's compute resources and storage capacity to meet your application's demand. As with all Amazon Web Services, there are no up-front investments, and you pay only for the resources you use.</p> <p>This interface reference for Amazon RDS contains documentation for a programming or command line interface you can use to manage Amazon RDS. Note that Amazon RDS is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p> <p> <b>Amazon RDS API Reference</b> </p> <ul> <li> <p>For the alphabetical list of API actions, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html">API Actions</a>.</p> </li> <li> <p>For the alphabetical list of data types, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Types.html">Data Types</a>.</p> </li> <li> <p>For a list of common query parameters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonParameters.html">Common Parameters</a>.</p> </li> <li> <p>For descriptions of the error codes, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonErrors.html">Common Errors</a>.</p> </li> </ul> <p> <b>Amazon RDS User Guide</b> </p> <ul> <li> <p>For a summary of the Amazon RDS interfaces, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html#Welcome.Interfaces">Available RDS Interfaces</a>.</p> </li> <li> <p>For more information about how to use the Query API, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Using_the_Query_API.html">Using the Query API</a>.</p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_605589 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_605589](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_605589): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "rds"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_606200 = ref object of OpenApiRestCall_605589
proc url_PostAddRoleToDBCluster_606202(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBCluster_606201(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606203 = query.getOrDefault("Action")
  valid_606203 = validateParameter(valid_606203, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_606203 != nil:
    section.add "Action", valid_606203
  var valid_606204 = query.getOrDefault("Version")
  valid_606204 = validateParameter(valid_606204, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606204 != nil:
    section.add "Version", valid_606204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606205 = header.getOrDefault("X-Amz-Signature")
  valid_606205 = validateParameter(valid_606205, JString, required = false,
                                 default = nil)
  if valid_606205 != nil:
    section.add "X-Amz-Signature", valid_606205
  var valid_606206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606206 = validateParameter(valid_606206, JString, required = false,
                                 default = nil)
  if valid_606206 != nil:
    section.add "X-Amz-Content-Sha256", valid_606206
  var valid_606207 = header.getOrDefault("X-Amz-Date")
  valid_606207 = validateParameter(valid_606207, JString, required = false,
                                 default = nil)
  if valid_606207 != nil:
    section.add "X-Amz-Date", valid_606207
  var valid_606208 = header.getOrDefault("X-Amz-Credential")
  valid_606208 = validateParameter(valid_606208, JString, required = false,
                                 default = nil)
  if valid_606208 != nil:
    section.add "X-Amz-Credential", valid_606208
  var valid_606209 = header.getOrDefault("X-Amz-Security-Token")
  valid_606209 = validateParameter(valid_606209, JString, required = false,
                                 default = nil)
  if valid_606209 != nil:
    section.add "X-Amz-Security-Token", valid_606209
  var valid_606210 = header.getOrDefault("X-Amz-Algorithm")
  valid_606210 = validateParameter(valid_606210, JString, required = false,
                                 default = nil)
  if valid_606210 != nil:
    section.add "X-Amz-Algorithm", valid_606210
  var valid_606211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606211 = validateParameter(valid_606211, JString, required = false,
                                 default = nil)
  if valid_606211 != nil:
    section.add "X-Amz-SignedHeaders", valid_606211
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  var valid_606212 = formData.getOrDefault("FeatureName")
  valid_606212 = validateParameter(valid_606212, JString, required = false,
                                 default = nil)
  if valid_606212 != nil:
    section.add "FeatureName", valid_606212
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_606213 = formData.getOrDefault("RoleArn")
  valid_606213 = validateParameter(valid_606213, JString, required = true,
                                 default = nil)
  if valid_606213 != nil:
    section.add "RoleArn", valid_606213
  var valid_606214 = formData.getOrDefault("DBClusterIdentifier")
  valid_606214 = validateParameter(valid_606214, JString, required = true,
                                 default = nil)
  if valid_606214 != nil:
    section.add "DBClusterIdentifier", valid_606214
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606215: Call_PostAddRoleToDBCluster_606200; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606215.validator(path, query, header, formData, body)
  let scheme = call_606215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606215.url(scheme.get, call_606215.host, call_606215.base,
                         call_606215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606215, url, valid)

proc call*(call_606216: Call_PostAddRoleToDBCluster_606200; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  var query_606217 = newJObject()
  var formData_606218 = newJObject()
  add(formData_606218, "FeatureName", newJString(FeatureName))
  add(formData_606218, "RoleArn", newJString(RoleArn))
  add(query_606217, "Action", newJString(Action))
  add(query_606217, "Version", newJString(Version))
  add(formData_606218, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606216.call(nil, query_606217, nil, formData_606218, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_606200(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_606201, base: "/",
    url: url_PostAddRoleToDBCluster_606202, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_605927 = ref object of OpenApiRestCall_605589
proc url_GetAddRoleToDBCluster_605929(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBCluster_605928(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_606041 = query.getOrDefault("RoleArn")
  valid_606041 = validateParameter(valid_606041, JString, required = true,
                                 default = nil)
  if valid_606041 != nil:
    section.add "RoleArn", valid_606041
  var valid_606042 = query.getOrDefault("DBClusterIdentifier")
  valid_606042 = validateParameter(valid_606042, JString, required = true,
                                 default = nil)
  if valid_606042 != nil:
    section.add "DBClusterIdentifier", valid_606042
  var valid_606043 = query.getOrDefault("FeatureName")
  valid_606043 = validateParameter(valid_606043, JString, required = false,
                                 default = nil)
  if valid_606043 != nil:
    section.add "FeatureName", valid_606043
  var valid_606057 = query.getOrDefault("Action")
  valid_606057 = validateParameter(valid_606057, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_606057 != nil:
    section.add "Action", valid_606057
  var valid_606058 = query.getOrDefault("Version")
  valid_606058 = validateParameter(valid_606058, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606058 != nil:
    section.add "Version", valid_606058
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606059 = header.getOrDefault("X-Amz-Signature")
  valid_606059 = validateParameter(valid_606059, JString, required = false,
                                 default = nil)
  if valid_606059 != nil:
    section.add "X-Amz-Signature", valid_606059
  var valid_606060 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606060 = validateParameter(valid_606060, JString, required = false,
                                 default = nil)
  if valid_606060 != nil:
    section.add "X-Amz-Content-Sha256", valid_606060
  var valid_606061 = header.getOrDefault("X-Amz-Date")
  valid_606061 = validateParameter(valid_606061, JString, required = false,
                                 default = nil)
  if valid_606061 != nil:
    section.add "X-Amz-Date", valid_606061
  var valid_606062 = header.getOrDefault("X-Amz-Credential")
  valid_606062 = validateParameter(valid_606062, JString, required = false,
                                 default = nil)
  if valid_606062 != nil:
    section.add "X-Amz-Credential", valid_606062
  var valid_606063 = header.getOrDefault("X-Amz-Security-Token")
  valid_606063 = validateParameter(valid_606063, JString, required = false,
                                 default = nil)
  if valid_606063 != nil:
    section.add "X-Amz-Security-Token", valid_606063
  var valid_606064 = header.getOrDefault("X-Amz-Algorithm")
  valid_606064 = validateParameter(valid_606064, JString, required = false,
                                 default = nil)
  if valid_606064 != nil:
    section.add "X-Amz-Algorithm", valid_606064
  var valid_606065 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606065 = validateParameter(valid_606065, JString, required = false,
                                 default = nil)
  if valid_606065 != nil:
    section.add "X-Amz-SignedHeaders", valid_606065
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606088: Call_GetAddRoleToDBCluster_605927; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606088.validator(path, query, header, formData, body)
  let scheme = call_606088.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606088.url(scheme.get, call_606088.host, call_606088.base,
                         call_606088.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606088, url, valid)

proc call*(call_606159: Call_GetAddRoleToDBCluster_605927; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606160 = newJObject()
  add(query_606160, "RoleArn", newJString(RoleArn))
  add(query_606160, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606160, "FeatureName", newJString(FeatureName))
  add(query_606160, "Action", newJString(Action))
  add(query_606160, "Version", newJString(Version))
  result = call_606159.call(nil, query_606160, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_605927(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_605928, base: "/",
    url: url_GetAddRoleToDBCluster_605929, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToDBInstance_606237 = ref object of OpenApiRestCall_605589
proc url_PostAddRoleToDBInstance_606239(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBInstance_606238(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606240 = query.getOrDefault("Action")
  valid_606240 = validateParameter(valid_606240, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_606240 != nil:
    section.add "Action", valid_606240
  var valid_606241 = query.getOrDefault("Version")
  valid_606241 = validateParameter(valid_606241, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606241 != nil:
    section.add "Version", valid_606241
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606242 = header.getOrDefault("X-Amz-Signature")
  valid_606242 = validateParameter(valid_606242, JString, required = false,
                                 default = nil)
  if valid_606242 != nil:
    section.add "X-Amz-Signature", valid_606242
  var valid_606243 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606243 = validateParameter(valid_606243, JString, required = false,
                                 default = nil)
  if valid_606243 != nil:
    section.add "X-Amz-Content-Sha256", valid_606243
  var valid_606244 = header.getOrDefault("X-Amz-Date")
  valid_606244 = validateParameter(valid_606244, JString, required = false,
                                 default = nil)
  if valid_606244 != nil:
    section.add "X-Amz-Date", valid_606244
  var valid_606245 = header.getOrDefault("X-Amz-Credential")
  valid_606245 = validateParameter(valid_606245, JString, required = false,
                                 default = nil)
  if valid_606245 != nil:
    section.add "X-Amz-Credential", valid_606245
  var valid_606246 = header.getOrDefault("X-Amz-Security-Token")
  valid_606246 = validateParameter(valid_606246, JString, required = false,
                                 default = nil)
  if valid_606246 != nil:
    section.add "X-Amz-Security-Token", valid_606246
  var valid_606247 = header.getOrDefault("X-Amz-Algorithm")
  valid_606247 = validateParameter(valid_606247, JString, required = false,
                                 default = nil)
  if valid_606247 != nil:
    section.add "X-Amz-Algorithm", valid_606247
  var valid_606248 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606248 = validateParameter(valid_606248, JString, required = false,
                                 default = nil)
  if valid_606248 != nil:
    section.add "X-Amz-SignedHeaders", valid_606248
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_606249 = formData.getOrDefault("FeatureName")
  valid_606249 = validateParameter(valid_606249, JString, required = true,
                                 default = nil)
  if valid_606249 != nil:
    section.add "FeatureName", valid_606249
  var valid_606250 = formData.getOrDefault("RoleArn")
  valid_606250 = validateParameter(valid_606250, JString, required = true,
                                 default = nil)
  if valid_606250 != nil:
    section.add "RoleArn", valid_606250
  var valid_606251 = formData.getOrDefault("DBInstanceIdentifier")
  valid_606251 = validateParameter(valid_606251, JString, required = true,
                                 default = nil)
  if valid_606251 != nil:
    section.add "DBInstanceIdentifier", valid_606251
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606252: Call_PostAddRoleToDBInstance_606237; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_606252.validator(path, query, header, formData, body)
  let scheme = call_606252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606252.url(scheme.get, call_606252.host, call_606252.base,
                         call_606252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606252, url, valid)

proc call*(call_606253: Call_PostAddRoleToDBInstance_606237; FeatureName: string;
          RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606254 = newJObject()
  var formData_606255 = newJObject()
  add(formData_606255, "FeatureName", newJString(FeatureName))
  add(formData_606255, "RoleArn", newJString(RoleArn))
  add(formData_606255, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606254, "Action", newJString(Action))
  add(query_606254, "Version", newJString(Version))
  result = call_606253.call(nil, query_606254, nil, formData_606255, nil)

var postAddRoleToDBInstance* = Call_PostAddRoleToDBInstance_606237(
    name: "postAddRoleToDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_PostAddRoleToDBInstance_606238, base: "/",
    url: url_PostAddRoleToDBInstance_606239, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBInstance_606219 = ref object of OpenApiRestCall_605589
proc url_GetAddRoleToDBInstance_606221(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBInstance_606220(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_606222 = query.getOrDefault("RoleArn")
  valid_606222 = validateParameter(valid_606222, JString, required = true,
                                 default = nil)
  if valid_606222 != nil:
    section.add "RoleArn", valid_606222
  var valid_606223 = query.getOrDefault("FeatureName")
  valid_606223 = validateParameter(valid_606223, JString, required = true,
                                 default = nil)
  if valid_606223 != nil:
    section.add "FeatureName", valid_606223
  var valid_606224 = query.getOrDefault("DBInstanceIdentifier")
  valid_606224 = validateParameter(valid_606224, JString, required = true,
                                 default = nil)
  if valid_606224 != nil:
    section.add "DBInstanceIdentifier", valid_606224
  var valid_606225 = query.getOrDefault("Action")
  valid_606225 = validateParameter(valid_606225, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_606225 != nil:
    section.add "Action", valid_606225
  var valid_606226 = query.getOrDefault("Version")
  valid_606226 = validateParameter(valid_606226, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606226 != nil:
    section.add "Version", valid_606226
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606227 = header.getOrDefault("X-Amz-Signature")
  valid_606227 = validateParameter(valid_606227, JString, required = false,
                                 default = nil)
  if valid_606227 != nil:
    section.add "X-Amz-Signature", valid_606227
  var valid_606228 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606228 = validateParameter(valid_606228, JString, required = false,
                                 default = nil)
  if valid_606228 != nil:
    section.add "X-Amz-Content-Sha256", valid_606228
  var valid_606229 = header.getOrDefault("X-Amz-Date")
  valid_606229 = validateParameter(valid_606229, JString, required = false,
                                 default = nil)
  if valid_606229 != nil:
    section.add "X-Amz-Date", valid_606229
  var valid_606230 = header.getOrDefault("X-Amz-Credential")
  valid_606230 = validateParameter(valid_606230, JString, required = false,
                                 default = nil)
  if valid_606230 != nil:
    section.add "X-Amz-Credential", valid_606230
  var valid_606231 = header.getOrDefault("X-Amz-Security-Token")
  valid_606231 = validateParameter(valid_606231, JString, required = false,
                                 default = nil)
  if valid_606231 != nil:
    section.add "X-Amz-Security-Token", valid_606231
  var valid_606232 = header.getOrDefault("X-Amz-Algorithm")
  valid_606232 = validateParameter(valid_606232, JString, required = false,
                                 default = nil)
  if valid_606232 != nil:
    section.add "X-Amz-Algorithm", valid_606232
  var valid_606233 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606233 = validateParameter(valid_606233, JString, required = false,
                                 default = nil)
  if valid_606233 != nil:
    section.add "X-Amz-SignedHeaders", valid_606233
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606234: Call_GetAddRoleToDBInstance_606219; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_606234.validator(path, query, header, formData, body)
  let scheme = call_606234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606234.url(scheme.get, call_606234.host, call_606234.base,
                         call_606234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606234, url, valid)

proc call*(call_606235: Call_GetAddRoleToDBInstance_606219; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606236 = newJObject()
  add(query_606236, "RoleArn", newJString(RoleArn))
  add(query_606236, "FeatureName", newJString(FeatureName))
  add(query_606236, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606236, "Action", newJString(Action))
  add(query_606236, "Version", newJString(Version))
  result = call_606235.call(nil, query_606236, nil, nil, nil)

var getAddRoleToDBInstance* = Call_GetAddRoleToDBInstance_606219(
    name: "getAddRoleToDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_GetAddRoleToDBInstance_606220, base: "/",
    url: url_GetAddRoleToDBInstance_606221, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_606273 = ref object of OpenApiRestCall_605589
proc url_PostAddSourceIdentifierToSubscription_606275(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_606274(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606276 = query.getOrDefault("Action")
  valid_606276 = validateParameter(valid_606276, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_606276 != nil:
    section.add "Action", valid_606276
  var valid_606277 = query.getOrDefault("Version")
  valid_606277 = validateParameter(valid_606277, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606277 != nil:
    section.add "Version", valid_606277
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606278 = header.getOrDefault("X-Amz-Signature")
  valid_606278 = validateParameter(valid_606278, JString, required = false,
                                 default = nil)
  if valid_606278 != nil:
    section.add "X-Amz-Signature", valid_606278
  var valid_606279 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606279 = validateParameter(valid_606279, JString, required = false,
                                 default = nil)
  if valid_606279 != nil:
    section.add "X-Amz-Content-Sha256", valid_606279
  var valid_606280 = header.getOrDefault("X-Amz-Date")
  valid_606280 = validateParameter(valid_606280, JString, required = false,
                                 default = nil)
  if valid_606280 != nil:
    section.add "X-Amz-Date", valid_606280
  var valid_606281 = header.getOrDefault("X-Amz-Credential")
  valid_606281 = validateParameter(valid_606281, JString, required = false,
                                 default = nil)
  if valid_606281 != nil:
    section.add "X-Amz-Credential", valid_606281
  var valid_606282 = header.getOrDefault("X-Amz-Security-Token")
  valid_606282 = validateParameter(valid_606282, JString, required = false,
                                 default = nil)
  if valid_606282 != nil:
    section.add "X-Amz-Security-Token", valid_606282
  var valid_606283 = header.getOrDefault("X-Amz-Algorithm")
  valid_606283 = validateParameter(valid_606283, JString, required = false,
                                 default = nil)
  if valid_606283 != nil:
    section.add "X-Amz-Algorithm", valid_606283
  var valid_606284 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606284 = validateParameter(valid_606284, JString, required = false,
                                 default = nil)
  if valid_606284 != nil:
    section.add "X-Amz-SignedHeaders", valid_606284
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_606285 = formData.getOrDefault("SubscriptionName")
  valid_606285 = validateParameter(valid_606285, JString, required = true,
                                 default = nil)
  if valid_606285 != nil:
    section.add "SubscriptionName", valid_606285
  var valid_606286 = formData.getOrDefault("SourceIdentifier")
  valid_606286 = validateParameter(valid_606286, JString, required = true,
                                 default = nil)
  if valid_606286 != nil:
    section.add "SourceIdentifier", valid_606286
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606287: Call_PostAddSourceIdentifierToSubscription_606273;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_606287.validator(path, query, header, formData, body)
  let scheme = call_606287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606287.url(scheme.get, call_606287.host, call_606287.base,
                         call_606287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606287, url, valid)

proc call*(call_606288: Call_PostAddSourceIdentifierToSubscription_606273;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606289 = newJObject()
  var formData_606290 = newJObject()
  add(formData_606290, "SubscriptionName", newJString(SubscriptionName))
  add(formData_606290, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_606289, "Action", newJString(Action))
  add(query_606289, "Version", newJString(Version))
  result = call_606288.call(nil, query_606289, nil, formData_606290, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_606273(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_606274, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_606275,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_606256 = ref object of OpenApiRestCall_605589
proc url_GetAddSourceIdentifierToSubscription_606258(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_606257(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_606259 = query.getOrDefault("SourceIdentifier")
  valid_606259 = validateParameter(valid_606259, JString, required = true,
                                 default = nil)
  if valid_606259 != nil:
    section.add "SourceIdentifier", valid_606259
  var valid_606260 = query.getOrDefault("SubscriptionName")
  valid_606260 = validateParameter(valid_606260, JString, required = true,
                                 default = nil)
  if valid_606260 != nil:
    section.add "SubscriptionName", valid_606260
  var valid_606261 = query.getOrDefault("Action")
  valid_606261 = validateParameter(valid_606261, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_606261 != nil:
    section.add "Action", valid_606261
  var valid_606262 = query.getOrDefault("Version")
  valid_606262 = validateParameter(valid_606262, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606262 != nil:
    section.add "Version", valid_606262
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606263 = header.getOrDefault("X-Amz-Signature")
  valid_606263 = validateParameter(valid_606263, JString, required = false,
                                 default = nil)
  if valid_606263 != nil:
    section.add "X-Amz-Signature", valid_606263
  var valid_606264 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606264 = validateParameter(valid_606264, JString, required = false,
                                 default = nil)
  if valid_606264 != nil:
    section.add "X-Amz-Content-Sha256", valid_606264
  var valid_606265 = header.getOrDefault("X-Amz-Date")
  valid_606265 = validateParameter(valid_606265, JString, required = false,
                                 default = nil)
  if valid_606265 != nil:
    section.add "X-Amz-Date", valid_606265
  var valid_606266 = header.getOrDefault("X-Amz-Credential")
  valid_606266 = validateParameter(valid_606266, JString, required = false,
                                 default = nil)
  if valid_606266 != nil:
    section.add "X-Amz-Credential", valid_606266
  var valid_606267 = header.getOrDefault("X-Amz-Security-Token")
  valid_606267 = validateParameter(valid_606267, JString, required = false,
                                 default = nil)
  if valid_606267 != nil:
    section.add "X-Amz-Security-Token", valid_606267
  var valid_606268 = header.getOrDefault("X-Amz-Algorithm")
  valid_606268 = validateParameter(valid_606268, JString, required = false,
                                 default = nil)
  if valid_606268 != nil:
    section.add "X-Amz-Algorithm", valid_606268
  var valid_606269 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606269 = validateParameter(valid_606269, JString, required = false,
                                 default = nil)
  if valid_606269 != nil:
    section.add "X-Amz-SignedHeaders", valid_606269
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606270: Call_GetAddSourceIdentifierToSubscription_606256;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_606270.validator(path, query, header, formData, body)
  let scheme = call_606270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606270.url(scheme.get, call_606270.host, call_606270.base,
                         call_606270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606270, url, valid)

proc call*(call_606271: Call_GetAddSourceIdentifierToSubscription_606256;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606272 = newJObject()
  add(query_606272, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_606272, "SubscriptionName", newJString(SubscriptionName))
  add(query_606272, "Action", newJString(Action))
  add(query_606272, "Version", newJString(Version))
  result = call_606271.call(nil, query_606272, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_606256(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_606257, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_606258,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_606308 = ref object of OpenApiRestCall_605589
proc url_PostAddTagsToResource_606310(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_606309(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606311 = query.getOrDefault("Action")
  valid_606311 = validateParameter(valid_606311, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_606311 != nil:
    section.add "Action", valid_606311
  var valid_606312 = query.getOrDefault("Version")
  valid_606312 = validateParameter(valid_606312, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606312 != nil:
    section.add "Version", valid_606312
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606313 = header.getOrDefault("X-Amz-Signature")
  valid_606313 = validateParameter(valid_606313, JString, required = false,
                                 default = nil)
  if valid_606313 != nil:
    section.add "X-Amz-Signature", valid_606313
  var valid_606314 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606314 = validateParameter(valid_606314, JString, required = false,
                                 default = nil)
  if valid_606314 != nil:
    section.add "X-Amz-Content-Sha256", valid_606314
  var valid_606315 = header.getOrDefault("X-Amz-Date")
  valid_606315 = validateParameter(valid_606315, JString, required = false,
                                 default = nil)
  if valid_606315 != nil:
    section.add "X-Amz-Date", valid_606315
  var valid_606316 = header.getOrDefault("X-Amz-Credential")
  valid_606316 = validateParameter(valid_606316, JString, required = false,
                                 default = nil)
  if valid_606316 != nil:
    section.add "X-Amz-Credential", valid_606316
  var valid_606317 = header.getOrDefault("X-Amz-Security-Token")
  valid_606317 = validateParameter(valid_606317, JString, required = false,
                                 default = nil)
  if valid_606317 != nil:
    section.add "X-Amz-Security-Token", valid_606317
  var valid_606318 = header.getOrDefault("X-Amz-Algorithm")
  valid_606318 = validateParameter(valid_606318, JString, required = false,
                                 default = nil)
  if valid_606318 != nil:
    section.add "X-Amz-Algorithm", valid_606318
  var valid_606319 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606319 = validateParameter(valid_606319, JString, required = false,
                                 default = nil)
  if valid_606319 != nil:
    section.add "X-Amz-SignedHeaders", valid_606319
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_606320 = formData.getOrDefault("Tags")
  valid_606320 = validateParameter(valid_606320, JArray, required = true, default = nil)
  if valid_606320 != nil:
    section.add "Tags", valid_606320
  var valid_606321 = formData.getOrDefault("ResourceName")
  valid_606321 = validateParameter(valid_606321, JString, required = true,
                                 default = nil)
  if valid_606321 != nil:
    section.add "ResourceName", valid_606321
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606322: Call_PostAddTagsToResource_606308; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_606322.validator(path, query, header, formData, body)
  let scheme = call_606322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606322.url(scheme.get, call_606322.host, call_606322.base,
                         call_606322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606322, url, valid)

proc call*(call_606323: Call_PostAddTagsToResource_606308; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  var query_606324 = newJObject()
  var formData_606325 = newJObject()
  add(query_606324, "Action", newJString(Action))
  if Tags != nil:
    formData_606325.add "Tags", Tags
  add(query_606324, "Version", newJString(Version))
  add(formData_606325, "ResourceName", newJString(ResourceName))
  result = call_606323.call(nil, query_606324, nil, formData_606325, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_606308(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_606309, base: "/",
    url: url_PostAddTagsToResource_606310, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_606291 = ref object of OpenApiRestCall_605589
proc url_GetAddTagsToResource_606293(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_606292(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_606294 = query.getOrDefault("Tags")
  valid_606294 = validateParameter(valid_606294, JArray, required = true, default = nil)
  if valid_606294 != nil:
    section.add "Tags", valid_606294
  var valid_606295 = query.getOrDefault("ResourceName")
  valid_606295 = validateParameter(valid_606295, JString, required = true,
                                 default = nil)
  if valid_606295 != nil:
    section.add "ResourceName", valid_606295
  var valid_606296 = query.getOrDefault("Action")
  valid_606296 = validateParameter(valid_606296, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_606296 != nil:
    section.add "Action", valid_606296
  var valid_606297 = query.getOrDefault("Version")
  valid_606297 = validateParameter(valid_606297, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606297 != nil:
    section.add "Version", valid_606297
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606298 = header.getOrDefault("X-Amz-Signature")
  valid_606298 = validateParameter(valid_606298, JString, required = false,
                                 default = nil)
  if valid_606298 != nil:
    section.add "X-Amz-Signature", valid_606298
  var valid_606299 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606299 = validateParameter(valid_606299, JString, required = false,
                                 default = nil)
  if valid_606299 != nil:
    section.add "X-Amz-Content-Sha256", valid_606299
  var valid_606300 = header.getOrDefault("X-Amz-Date")
  valid_606300 = validateParameter(valid_606300, JString, required = false,
                                 default = nil)
  if valid_606300 != nil:
    section.add "X-Amz-Date", valid_606300
  var valid_606301 = header.getOrDefault("X-Amz-Credential")
  valid_606301 = validateParameter(valid_606301, JString, required = false,
                                 default = nil)
  if valid_606301 != nil:
    section.add "X-Amz-Credential", valid_606301
  var valid_606302 = header.getOrDefault("X-Amz-Security-Token")
  valid_606302 = validateParameter(valid_606302, JString, required = false,
                                 default = nil)
  if valid_606302 != nil:
    section.add "X-Amz-Security-Token", valid_606302
  var valid_606303 = header.getOrDefault("X-Amz-Algorithm")
  valid_606303 = validateParameter(valid_606303, JString, required = false,
                                 default = nil)
  if valid_606303 != nil:
    section.add "X-Amz-Algorithm", valid_606303
  var valid_606304 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606304 = validateParameter(valid_606304, JString, required = false,
                                 default = nil)
  if valid_606304 != nil:
    section.add "X-Amz-SignedHeaders", valid_606304
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606305: Call_GetAddTagsToResource_606291; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_606305.validator(path, query, header, formData, body)
  let scheme = call_606305.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606305.url(scheme.get, call_606305.host, call_606305.base,
                         call_606305.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606305, url, valid)

proc call*(call_606306: Call_GetAddTagsToResource_606291; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606307 = newJObject()
  if Tags != nil:
    query_606307.add "Tags", Tags
  add(query_606307, "ResourceName", newJString(ResourceName))
  add(query_606307, "Action", newJString(Action))
  add(query_606307, "Version", newJString(Version))
  result = call_606306.call(nil, query_606307, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_606291(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_606292, base: "/",
    url: url_GetAddTagsToResource_606293, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_606344 = ref object of OpenApiRestCall_605589
proc url_PostApplyPendingMaintenanceAction_606346(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_606345(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606347 = query.getOrDefault("Action")
  valid_606347 = validateParameter(valid_606347, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_606347 != nil:
    section.add "Action", valid_606347
  var valid_606348 = query.getOrDefault("Version")
  valid_606348 = validateParameter(valid_606348, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606348 != nil:
    section.add "Version", valid_606348
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606349 = header.getOrDefault("X-Amz-Signature")
  valid_606349 = validateParameter(valid_606349, JString, required = false,
                                 default = nil)
  if valid_606349 != nil:
    section.add "X-Amz-Signature", valid_606349
  var valid_606350 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606350 = validateParameter(valid_606350, JString, required = false,
                                 default = nil)
  if valid_606350 != nil:
    section.add "X-Amz-Content-Sha256", valid_606350
  var valid_606351 = header.getOrDefault("X-Amz-Date")
  valid_606351 = validateParameter(valid_606351, JString, required = false,
                                 default = nil)
  if valid_606351 != nil:
    section.add "X-Amz-Date", valid_606351
  var valid_606352 = header.getOrDefault("X-Amz-Credential")
  valid_606352 = validateParameter(valid_606352, JString, required = false,
                                 default = nil)
  if valid_606352 != nil:
    section.add "X-Amz-Credential", valid_606352
  var valid_606353 = header.getOrDefault("X-Amz-Security-Token")
  valid_606353 = validateParameter(valid_606353, JString, required = false,
                                 default = nil)
  if valid_606353 != nil:
    section.add "X-Amz-Security-Token", valid_606353
  var valid_606354 = header.getOrDefault("X-Amz-Algorithm")
  valid_606354 = validateParameter(valid_606354, JString, required = false,
                                 default = nil)
  if valid_606354 != nil:
    section.add "X-Amz-Algorithm", valid_606354
  var valid_606355 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606355 = validateParameter(valid_606355, JString, required = false,
                                 default = nil)
  if valid_606355 != nil:
    section.add "X-Amz-SignedHeaders", valid_606355
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ResourceIdentifier` field"
  var valid_606356 = formData.getOrDefault("ResourceIdentifier")
  valid_606356 = validateParameter(valid_606356, JString, required = true,
                                 default = nil)
  if valid_606356 != nil:
    section.add "ResourceIdentifier", valid_606356
  var valid_606357 = formData.getOrDefault("ApplyAction")
  valid_606357 = validateParameter(valid_606357, JString, required = true,
                                 default = nil)
  if valid_606357 != nil:
    section.add "ApplyAction", valid_606357
  var valid_606358 = formData.getOrDefault("OptInType")
  valid_606358 = validateParameter(valid_606358, JString, required = true,
                                 default = nil)
  if valid_606358 != nil:
    section.add "OptInType", valid_606358
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606359: Call_PostApplyPendingMaintenanceAction_606344;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_606359.validator(path, query, header, formData, body)
  let scheme = call_606359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606359.url(scheme.get, call_606359.host, call_606359.base,
                         call_606359.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606359, url, valid)

proc call*(call_606360: Call_PostApplyPendingMaintenanceAction_606344;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_606361 = newJObject()
  var formData_606362 = newJObject()
  add(formData_606362, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_606362, "ApplyAction", newJString(ApplyAction))
  add(query_606361, "Action", newJString(Action))
  add(formData_606362, "OptInType", newJString(OptInType))
  add(query_606361, "Version", newJString(Version))
  result = call_606360.call(nil, query_606361, nil, formData_606362, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_606344(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_606345, base: "/",
    url: url_PostApplyPendingMaintenanceAction_606346,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_606326 = ref object of OpenApiRestCall_605589
proc url_GetApplyPendingMaintenanceAction_606328(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_606327(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ResourceIdentifier` field"
  var valid_606329 = query.getOrDefault("ResourceIdentifier")
  valid_606329 = validateParameter(valid_606329, JString, required = true,
                                 default = nil)
  if valid_606329 != nil:
    section.add "ResourceIdentifier", valid_606329
  var valid_606330 = query.getOrDefault("ApplyAction")
  valid_606330 = validateParameter(valid_606330, JString, required = true,
                                 default = nil)
  if valid_606330 != nil:
    section.add "ApplyAction", valid_606330
  var valid_606331 = query.getOrDefault("Action")
  valid_606331 = validateParameter(valid_606331, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_606331 != nil:
    section.add "Action", valid_606331
  var valid_606332 = query.getOrDefault("OptInType")
  valid_606332 = validateParameter(valid_606332, JString, required = true,
                                 default = nil)
  if valid_606332 != nil:
    section.add "OptInType", valid_606332
  var valid_606333 = query.getOrDefault("Version")
  valid_606333 = validateParameter(valid_606333, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606333 != nil:
    section.add "Version", valid_606333
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606334 = header.getOrDefault("X-Amz-Signature")
  valid_606334 = validateParameter(valid_606334, JString, required = false,
                                 default = nil)
  if valid_606334 != nil:
    section.add "X-Amz-Signature", valid_606334
  var valid_606335 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606335 = validateParameter(valid_606335, JString, required = false,
                                 default = nil)
  if valid_606335 != nil:
    section.add "X-Amz-Content-Sha256", valid_606335
  var valid_606336 = header.getOrDefault("X-Amz-Date")
  valid_606336 = validateParameter(valid_606336, JString, required = false,
                                 default = nil)
  if valid_606336 != nil:
    section.add "X-Amz-Date", valid_606336
  var valid_606337 = header.getOrDefault("X-Amz-Credential")
  valid_606337 = validateParameter(valid_606337, JString, required = false,
                                 default = nil)
  if valid_606337 != nil:
    section.add "X-Amz-Credential", valid_606337
  var valid_606338 = header.getOrDefault("X-Amz-Security-Token")
  valid_606338 = validateParameter(valid_606338, JString, required = false,
                                 default = nil)
  if valid_606338 != nil:
    section.add "X-Amz-Security-Token", valid_606338
  var valid_606339 = header.getOrDefault("X-Amz-Algorithm")
  valid_606339 = validateParameter(valid_606339, JString, required = false,
                                 default = nil)
  if valid_606339 != nil:
    section.add "X-Amz-Algorithm", valid_606339
  var valid_606340 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606340 = validateParameter(valid_606340, JString, required = false,
                                 default = nil)
  if valid_606340 != nil:
    section.add "X-Amz-SignedHeaders", valid_606340
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606341: Call_GetApplyPendingMaintenanceAction_606326;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_606341.validator(path, query, header, formData, body)
  let scheme = call_606341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606341.url(scheme.get, call_606341.host, call_606341.base,
                         call_606341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606341, url, valid)

proc call*(call_606342: Call_GetApplyPendingMaintenanceAction_606326;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_606343 = newJObject()
  add(query_606343, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_606343, "ApplyAction", newJString(ApplyAction))
  add(query_606343, "Action", newJString(Action))
  add(query_606343, "OptInType", newJString(OptInType))
  add(query_606343, "Version", newJString(Version))
  result = call_606342.call(nil, query_606343, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_606326(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_606327, base: "/",
    url: url_GetApplyPendingMaintenanceAction_606328,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeDBSecurityGroupIngress_606383 = ref object of OpenApiRestCall_605589
proc url_PostAuthorizeDBSecurityGroupIngress_606385(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAuthorizeDBSecurityGroupIngress_606384(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606386 = query.getOrDefault("Action")
  valid_606386 = validateParameter(valid_606386, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_606386 != nil:
    section.add "Action", valid_606386
  var valid_606387 = query.getOrDefault("Version")
  valid_606387 = validateParameter(valid_606387, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606387 != nil:
    section.add "Version", valid_606387
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606388 = header.getOrDefault("X-Amz-Signature")
  valid_606388 = validateParameter(valid_606388, JString, required = false,
                                 default = nil)
  if valid_606388 != nil:
    section.add "X-Amz-Signature", valid_606388
  var valid_606389 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606389 = validateParameter(valid_606389, JString, required = false,
                                 default = nil)
  if valid_606389 != nil:
    section.add "X-Amz-Content-Sha256", valid_606389
  var valid_606390 = header.getOrDefault("X-Amz-Date")
  valid_606390 = validateParameter(valid_606390, JString, required = false,
                                 default = nil)
  if valid_606390 != nil:
    section.add "X-Amz-Date", valid_606390
  var valid_606391 = header.getOrDefault("X-Amz-Credential")
  valid_606391 = validateParameter(valid_606391, JString, required = false,
                                 default = nil)
  if valid_606391 != nil:
    section.add "X-Amz-Credential", valid_606391
  var valid_606392 = header.getOrDefault("X-Amz-Security-Token")
  valid_606392 = validateParameter(valid_606392, JString, required = false,
                                 default = nil)
  if valid_606392 != nil:
    section.add "X-Amz-Security-Token", valid_606392
  var valid_606393 = header.getOrDefault("X-Amz-Algorithm")
  valid_606393 = validateParameter(valid_606393, JString, required = false,
                                 default = nil)
  if valid_606393 != nil:
    section.add "X-Amz-Algorithm", valid_606393
  var valid_606394 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606394 = validateParameter(valid_606394, JString, required = false,
                                 default = nil)
  if valid_606394 != nil:
    section.add "X-Amz-SignedHeaders", valid_606394
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_606395 = formData.getOrDefault("DBSecurityGroupName")
  valid_606395 = validateParameter(valid_606395, JString, required = true,
                                 default = nil)
  if valid_606395 != nil:
    section.add "DBSecurityGroupName", valid_606395
  var valid_606396 = formData.getOrDefault("EC2SecurityGroupName")
  valid_606396 = validateParameter(valid_606396, JString, required = false,
                                 default = nil)
  if valid_606396 != nil:
    section.add "EC2SecurityGroupName", valid_606396
  var valid_606397 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_606397 = validateParameter(valid_606397, JString, required = false,
                                 default = nil)
  if valid_606397 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_606397
  var valid_606398 = formData.getOrDefault("EC2SecurityGroupId")
  valid_606398 = validateParameter(valid_606398, JString, required = false,
                                 default = nil)
  if valid_606398 != nil:
    section.add "EC2SecurityGroupId", valid_606398
  var valid_606399 = formData.getOrDefault("CIDRIP")
  valid_606399 = validateParameter(valid_606399, JString, required = false,
                                 default = nil)
  if valid_606399 != nil:
    section.add "CIDRIP", valid_606399
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606400: Call_PostAuthorizeDBSecurityGroupIngress_606383;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_606400.validator(path, query, header, formData, body)
  let scheme = call_606400.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606400.url(scheme.get, call_606400.host, call_606400.base,
                         call_606400.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606400, url, valid)

proc call*(call_606401: Call_PostAuthorizeDBSecurityGroupIngress_606383;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606402 = newJObject()
  var formData_606403 = newJObject()
  add(formData_606403, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_606403, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_606403, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_606403, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_606403, "CIDRIP", newJString(CIDRIP))
  add(query_606402, "Action", newJString(Action))
  add(query_606402, "Version", newJString(Version))
  result = call_606401.call(nil, query_606402, nil, formData_606403, nil)

var postAuthorizeDBSecurityGroupIngress* = Call_PostAuthorizeDBSecurityGroupIngress_606383(
    name: "postAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_PostAuthorizeDBSecurityGroupIngress_606384, base: "/",
    url: url_PostAuthorizeDBSecurityGroupIngress_606385,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeDBSecurityGroupIngress_606363 = ref object of OpenApiRestCall_605589
proc url_GetAuthorizeDBSecurityGroupIngress_606365(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAuthorizeDBSecurityGroupIngress_606364(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  var valid_606366 = query.getOrDefault("EC2SecurityGroupName")
  valid_606366 = validateParameter(valid_606366, JString, required = false,
                                 default = nil)
  if valid_606366 != nil:
    section.add "EC2SecurityGroupName", valid_606366
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_606367 = query.getOrDefault("DBSecurityGroupName")
  valid_606367 = validateParameter(valid_606367, JString, required = true,
                                 default = nil)
  if valid_606367 != nil:
    section.add "DBSecurityGroupName", valid_606367
  var valid_606368 = query.getOrDefault("EC2SecurityGroupId")
  valid_606368 = validateParameter(valid_606368, JString, required = false,
                                 default = nil)
  if valid_606368 != nil:
    section.add "EC2SecurityGroupId", valid_606368
  var valid_606369 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_606369 = validateParameter(valid_606369, JString, required = false,
                                 default = nil)
  if valid_606369 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_606369
  var valid_606370 = query.getOrDefault("Action")
  valid_606370 = validateParameter(valid_606370, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_606370 != nil:
    section.add "Action", valid_606370
  var valid_606371 = query.getOrDefault("Version")
  valid_606371 = validateParameter(valid_606371, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606371 != nil:
    section.add "Version", valid_606371
  var valid_606372 = query.getOrDefault("CIDRIP")
  valid_606372 = validateParameter(valid_606372, JString, required = false,
                                 default = nil)
  if valid_606372 != nil:
    section.add "CIDRIP", valid_606372
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606373 = header.getOrDefault("X-Amz-Signature")
  valid_606373 = validateParameter(valid_606373, JString, required = false,
                                 default = nil)
  if valid_606373 != nil:
    section.add "X-Amz-Signature", valid_606373
  var valid_606374 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606374 = validateParameter(valid_606374, JString, required = false,
                                 default = nil)
  if valid_606374 != nil:
    section.add "X-Amz-Content-Sha256", valid_606374
  var valid_606375 = header.getOrDefault("X-Amz-Date")
  valid_606375 = validateParameter(valid_606375, JString, required = false,
                                 default = nil)
  if valid_606375 != nil:
    section.add "X-Amz-Date", valid_606375
  var valid_606376 = header.getOrDefault("X-Amz-Credential")
  valid_606376 = validateParameter(valid_606376, JString, required = false,
                                 default = nil)
  if valid_606376 != nil:
    section.add "X-Amz-Credential", valid_606376
  var valid_606377 = header.getOrDefault("X-Amz-Security-Token")
  valid_606377 = validateParameter(valid_606377, JString, required = false,
                                 default = nil)
  if valid_606377 != nil:
    section.add "X-Amz-Security-Token", valid_606377
  var valid_606378 = header.getOrDefault("X-Amz-Algorithm")
  valid_606378 = validateParameter(valid_606378, JString, required = false,
                                 default = nil)
  if valid_606378 != nil:
    section.add "X-Amz-Algorithm", valid_606378
  var valid_606379 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606379 = validateParameter(valid_606379, JString, required = false,
                                 default = nil)
  if valid_606379 != nil:
    section.add "X-Amz-SignedHeaders", valid_606379
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606380: Call_GetAuthorizeDBSecurityGroupIngress_606363;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_606380.validator(path, query, header, formData, body)
  let scheme = call_606380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606380.url(scheme.get, call_606380.host, call_606380.base,
                         call_606380.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606380, url, valid)

proc call*(call_606381: Call_GetAuthorizeDBSecurityGroupIngress_606363;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  var query_606382 = newJObject()
  add(query_606382, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_606382, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_606382, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_606382, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_606382, "Action", newJString(Action))
  add(query_606382, "Version", newJString(Version))
  add(query_606382, "CIDRIP", newJString(CIDRIP))
  result = call_606381.call(nil, query_606382, nil, nil, nil)

var getAuthorizeDBSecurityGroupIngress* = Call_GetAuthorizeDBSecurityGroupIngress_606363(
    name: "getAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_GetAuthorizeDBSecurityGroupIngress_606364, base: "/",
    url: url_GetAuthorizeDBSecurityGroupIngress_606365,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBacktrackDBCluster_606423 = ref object of OpenApiRestCall_605589
proc url_PostBacktrackDBCluster_606425(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBacktrackDBCluster_606424(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606426 = query.getOrDefault("Action")
  valid_606426 = validateParameter(valid_606426, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_606426 != nil:
    section.add "Action", valid_606426
  var valid_606427 = query.getOrDefault("Version")
  valid_606427 = validateParameter(valid_606427, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606427 != nil:
    section.add "Version", valid_606427
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606428 = header.getOrDefault("X-Amz-Signature")
  valid_606428 = validateParameter(valid_606428, JString, required = false,
                                 default = nil)
  if valid_606428 != nil:
    section.add "X-Amz-Signature", valid_606428
  var valid_606429 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606429 = validateParameter(valid_606429, JString, required = false,
                                 default = nil)
  if valid_606429 != nil:
    section.add "X-Amz-Content-Sha256", valid_606429
  var valid_606430 = header.getOrDefault("X-Amz-Date")
  valid_606430 = validateParameter(valid_606430, JString, required = false,
                                 default = nil)
  if valid_606430 != nil:
    section.add "X-Amz-Date", valid_606430
  var valid_606431 = header.getOrDefault("X-Amz-Credential")
  valid_606431 = validateParameter(valid_606431, JString, required = false,
                                 default = nil)
  if valid_606431 != nil:
    section.add "X-Amz-Credential", valid_606431
  var valid_606432 = header.getOrDefault("X-Amz-Security-Token")
  valid_606432 = validateParameter(valid_606432, JString, required = false,
                                 default = nil)
  if valid_606432 != nil:
    section.add "X-Amz-Security-Token", valid_606432
  var valid_606433 = header.getOrDefault("X-Amz-Algorithm")
  valid_606433 = validateParameter(valid_606433, JString, required = false,
                                 default = nil)
  if valid_606433 != nil:
    section.add "X-Amz-Algorithm", valid_606433
  var valid_606434 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606434 = validateParameter(valid_606434, JString, required = false,
                                 default = nil)
  if valid_606434 != nil:
    section.add "X-Amz-SignedHeaders", valid_606434
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  section = newJObject()
  var valid_606435 = formData.getOrDefault("Force")
  valid_606435 = validateParameter(valid_606435, JBool, required = false, default = nil)
  if valid_606435 != nil:
    section.add "Force", valid_606435
  var valid_606436 = formData.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_606436 = validateParameter(valid_606436, JBool, required = false, default = nil)
  if valid_606436 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_606436
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606437 = formData.getOrDefault("DBClusterIdentifier")
  valid_606437 = validateParameter(valid_606437, JString, required = true,
                                 default = nil)
  if valid_606437 != nil:
    section.add "DBClusterIdentifier", valid_606437
  var valid_606438 = formData.getOrDefault("BacktrackTo")
  valid_606438 = validateParameter(valid_606438, JString, required = true,
                                 default = nil)
  if valid_606438 != nil:
    section.add "BacktrackTo", valid_606438
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606439: Call_PostBacktrackDBCluster_606423; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606439.validator(path, query, header, formData, body)
  let scheme = call_606439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606439.url(scheme.get, call_606439.host, call_606439.base,
                         call_606439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606439, url, valid)

proc call*(call_606440: Call_PostBacktrackDBCluster_606423;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  var query_606441 = newJObject()
  var formData_606442 = newJObject()
  add(formData_606442, "Force", newJBool(Force))
  add(formData_606442, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_606441, "Action", newJString(Action))
  add(query_606441, "Version", newJString(Version))
  add(formData_606442, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_606442, "BacktrackTo", newJString(BacktrackTo))
  result = call_606440.call(nil, query_606441, nil, formData_606442, nil)

var postBacktrackDBCluster* = Call_PostBacktrackDBCluster_606423(
    name: "postBacktrackDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_PostBacktrackDBCluster_606424, base: "/",
    url: url_PostBacktrackDBCluster_606425, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBacktrackDBCluster_606404 = ref object of OpenApiRestCall_605589
proc url_GetBacktrackDBCluster_606406(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBacktrackDBCluster_606405(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: JString (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606407 = query.getOrDefault("DBClusterIdentifier")
  valid_606407 = validateParameter(valid_606407, JString, required = true,
                                 default = nil)
  if valid_606407 != nil:
    section.add "DBClusterIdentifier", valid_606407
  var valid_606408 = query.getOrDefault("BacktrackTo")
  valid_606408 = validateParameter(valid_606408, JString, required = true,
                                 default = nil)
  if valid_606408 != nil:
    section.add "BacktrackTo", valid_606408
  var valid_606409 = query.getOrDefault("Force")
  valid_606409 = validateParameter(valid_606409, JBool, required = false, default = nil)
  if valid_606409 != nil:
    section.add "Force", valid_606409
  var valid_606410 = query.getOrDefault("Action")
  valid_606410 = validateParameter(valid_606410, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_606410 != nil:
    section.add "Action", valid_606410
  var valid_606411 = query.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_606411 = validateParameter(valid_606411, JBool, required = false, default = nil)
  if valid_606411 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_606411
  var valid_606412 = query.getOrDefault("Version")
  valid_606412 = validateParameter(valid_606412, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606412 != nil:
    section.add "Version", valid_606412
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606413 = header.getOrDefault("X-Amz-Signature")
  valid_606413 = validateParameter(valid_606413, JString, required = false,
                                 default = nil)
  if valid_606413 != nil:
    section.add "X-Amz-Signature", valid_606413
  var valid_606414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606414 = validateParameter(valid_606414, JString, required = false,
                                 default = nil)
  if valid_606414 != nil:
    section.add "X-Amz-Content-Sha256", valid_606414
  var valid_606415 = header.getOrDefault("X-Amz-Date")
  valid_606415 = validateParameter(valid_606415, JString, required = false,
                                 default = nil)
  if valid_606415 != nil:
    section.add "X-Amz-Date", valid_606415
  var valid_606416 = header.getOrDefault("X-Amz-Credential")
  valid_606416 = validateParameter(valid_606416, JString, required = false,
                                 default = nil)
  if valid_606416 != nil:
    section.add "X-Amz-Credential", valid_606416
  var valid_606417 = header.getOrDefault("X-Amz-Security-Token")
  valid_606417 = validateParameter(valid_606417, JString, required = false,
                                 default = nil)
  if valid_606417 != nil:
    section.add "X-Amz-Security-Token", valid_606417
  var valid_606418 = header.getOrDefault("X-Amz-Algorithm")
  valid_606418 = validateParameter(valid_606418, JString, required = false,
                                 default = nil)
  if valid_606418 != nil:
    section.add "X-Amz-Algorithm", valid_606418
  var valid_606419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606419 = validateParameter(valid_606419, JString, required = false,
                                 default = nil)
  if valid_606419 != nil:
    section.add "X-Amz-SignedHeaders", valid_606419
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606420: Call_GetBacktrackDBCluster_606404; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606420.validator(path, query, header, formData, body)
  let scheme = call_606420.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606420.url(scheme.get, call_606420.host, call_606420.base,
                         call_606420.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606420, url, valid)

proc call*(call_606421: Call_GetBacktrackDBCluster_606404;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          Action: string = "BacktrackDBCluster";
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: string (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: string (required)
  var query_606422 = newJObject()
  add(query_606422, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606422, "BacktrackTo", newJString(BacktrackTo))
  add(query_606422, "Force", newJBool(Force))
  add(query_606422, "Action", newJString(Action))
  add(query_606422, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_606422, "Version", newJString(Version))
  result = call_606421.call(nil, query_606422, nil, nil, nil)

var getBacktrackDBCluster* = Call_GetBacktrackDBCluster_606404(
    name: "getBacktrackDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_GetBacktrackDBCluster_606405, base: "/",
    url: url_GetBacktrackDBCluster_606406, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_606462 = ref object of OpenApiRestCall_605589
proc url_PostCopyDBClusterParameterGroup_606464(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_606463(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606465 = query.getOrDefault("Action")
  valid_606465 = validateParameter(valid_606465, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_606465 != nil:
    section.add "Action", valid_606465
  var valid_606466 = query.getOrDefault("Version")
  valid_606466 = validateParameter(valid_606466, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606466 != nil:
    section.add "Version", valid_606466
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606467 = header.getOrDefault("X-Amz-Signature")
  valid_606467 = validateParameter(valid_606467, JString, required = false,
                                 default = nil)
  if valid_606467 != nil:
    section.add "X-Amz-Signature", valid_606467
  var valid_606468 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606468 = validateParameter(valid_606468, JString, required = false,
                                 default = nil)
  if valid_606468 != nil:
    section.add "X-Amz-Content-Sha256", valid_606468
  var valid_606469 = header.getOrDefault("X-Amz-Date")
  valid_606469 = validateParameter(valid_606469, JString, required = false,
                                 default = nil)
  if valid_606469 != nil:
    section.add "X-Amz-Date", valid_606469
  var valid_606470 = header.getOrDefault("X-Amz-Credential")
  valid_606470 = validateParameter(valid_606470, JString, required = false,
                                 default = nil)
  if valid_606470 != nil:
    section.add "X-Amz-Credential", valid_606470
  var valid_606471 = header.getOrDefault("X-Amz-Security-Token")
  valid_606471 = validateParameter(valid_606471, JString, required = false,
                                 default = nil)
  if valid_606471 != nil:
    section.add "X-Amz-Security-Token", valid_606471
  var valid_606472 = header.getOrDefault("X-Amz-Algorithm")
  valid_606472 = validateParameter(valid_606472, JString, required = false,
                                 default = nil)
  if valid_606472 != nil:
    section.add "X-Amz-Algorithm", valid_606472
  var valid_606473 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606473 = validateParameter(valid_606473, JString, required = false,
                                 default = nil)
  if valid_606473 != nil:
    section.add "X-Amz-SignedHeaders", valid_606473
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupIdentifier` field"
  var valid_606474 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_606474 = validateParameter(valid_606474, JString, required = true,
                                 default = nil)
  if valid_606474 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_606474
  var valid_606475 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_606475 = validateParameter(valid_606475, JString, required = true,
                                 default = nil)
  if valid_606475 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_606475
  var valid_606476 = formData.getOrDefault("Tags")
  valid_606476 = validateParameter(valid_606476, JArray, required = false,
                                 default = nil)
  if valid_606476 != nil:
    section.add "Tags", valid_606476
  var valid_606477 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_606477 = validateParameter(valid_606477, JString, required = true,
                                 default = nil)
  if valid_606477 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_606477
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606478: Call_PostCopyDBClusterParameterGroup_606462;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606478.validator(path, query, header, formData, body)
  let scheme = call_606478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606478.url(scheme.get, call_606478.host, call_606478.base,
                         call_606478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606478, url, valid)

proc call*(call_606479: Call_PostCopyDBClusterParameterGroup_606462;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          Action: string = "CopyDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  var query_606480 = newJObject()
  var formData_606481 = newJObject()
  add(formData_606481, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(formData_606481, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_606480, "Action", newJString(Action))
  if Tags != nil:
    formData_606481.add "Tags", Tags
  add(query_606480, "Version", newJString(Version))
  add(formData_606481, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  result = call_606479.call(nil, query_606480, nil, formData_606481, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_606462(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_606463, base: "/",
    url: url_PostCopyDBClusterParameterGroup_606464,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_606443 = ref object of OpenApiRestCall_605589
proc url_GetCopyDBClusterParameterGroup_606445(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_606444(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: JString (required)
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_606446 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_606446 = validateParameter(valid_606446, JString, required = true,
                                 default = nil)
  if valid_606446 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_606446
  var valid_606447 = query.getOrDefault("Tags")
  valid_606447 = validateParameter(valid_606447, JArray, required = false,
                                 default = nil)
  if valid_606447 != nil:
    section.add "Tags", valid_606447
  var valid_606448 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_606448 = validateParameter(valid_606448, JString, required = true,
                                 default = nil)
  if valid_606448 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_606448
  var valid_606449 = query.getOrDefault("Action")
  valid_606449 = validateParameter(valid_606449, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_606449 != nil:
    section.add "Action", valid_606449
  var valid_606450 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_606450 = validateParameter(valid_606450, JString, required = true,
                                 default = nil)
  if valid_606450 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_606450
  var valid_606451 = query.getOrDefault("Version")
  valid_606451 = validateParameter(valid_606451, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606451 != nil:
    section.add "Version", valid_606451
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606452 = header.getOrDefault("X-Amz-Signature")
  valid_606452 = validateParameter(valid_606452, JString, required = false,
                                 default = nil)
  if valid_606452 != nil:
    section.add "X-Amz-Signature", valid_606452
  var valid_606453 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606453 = validateParameter(valid_606453, JString, required = false,
                                 default = nil)
  if valid_606453 != nil:
    section.add "X-Amz-Content-Sha256", valid_606453
  var valid_606454 = header.getOrDefault("X-Amz-Date")
  valid_606454 = validateParameter(valid_606454, JString, required = false,
                                 default = nil)
  if valid_606454 != nil:
    section.add "X-Amz-Date", valid_606454
  var valid_606455 = header.getOrDefault("X-Amz-Credential")
  valid_606455 = validateParameter(valid_606455, JString, required = false,
                                 default = nil)
  if valid_606455 != nil:
    section.add "X-Amz-Credential", valid_606455
  var valid_606456 = header.getOrDefault("X-Amz-Security-Token")
  valid_606456 = validateParameter(valid_606456, JString, required = false,
                                 default = nil)
  if valid_606456 != nil:
    section.add "X-Amz-Security-Token", valid_606456
  var valid_606457 = header.getOrDefault("X-Amz-Algorithm")
  valid_606457 = validateParameter(valid_606457, JString, required = false,
                                 default = nil)
  if valid_606457 != nil:
    section.add "X-Amz-Algorithm", valid_606457
  var valid_606458 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606458 = validateParameter(valid_606458, JString, required = false,
                                 default = nil)
  if valid_606458 != nil:
    section.add "X-Amz-SignedHeaders", valid_606458
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606459: Call_GetCopyDBClusterParameterGroup_606443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606459.validator(path, query, header, formData, body)
  let scheme = call_606459.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606459.url(scheme.get, call_606459.host, call_606459.base,
                         call_606459.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606459, url, valid)

proc call*(call_606460: Call_GetCopyDBClusterParameterGroup_606443;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_606461 = newJObject()
  add(query_606461, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    query_606461.add "Tags", Tags
  add(query_606461, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_606461, "Action", newJString(Action))
  add(query_606461, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_606461, "Version", newJString(Version))
  result = call_606460.call(nil, query_606461, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_606443(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_606444, base: "/",
    url: url_GetCopyDBClusterParameterGroup_606445,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_606504 = ref object of OpenApiRestCall_605589
proc url_PostCopyDBClusterSnapshot_606506(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterSnapshot_606505(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606507 = query.getOrDefault("Action")
  valid_606507 = validateParameter(valid_606507, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_606507 != nil:
    section.add "Action", valid_606507
  var valid_606508 = query.getOrDefault("Version")
  valid_606508 = validateParameter(valid_606508, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606508 != nil:
    section.add "Version", valid_606508
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606509 = header.getOrDefault("X-Amz-Signature")
  valid_606509 = validateParameter(valid_606509, JString, required = false,
                                 default = nil)
  if valid_606509 != nil:
    section.add "X-Amz-Signature", valid_606509
  var valid_606510 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606510 = validateParameter(valid_606510, JString, required = false,
                                 default = nil)
  if valid_606510 != nil:
    section.add "X-Amz-Content-Sha256", valid_606510
  var valid_606511 = header.getOrDefault("X-Amz-Date")
  valid_606511 = validateParameter(valid_606511, JString, required = false,
                                 default = nil)
  if valid_606511 != nil:
    section.add "X-Amz-Date", valid_606511
  var valid_606512 = header.getOrDefault("X-Amz-Credential")
  valid_606512 = validateParameter(valid_606512, JString, required = false,
                                 default = nil)
  if valid_606512 != nil:
    section.add "X-Amz-Credential", valid_606512
  var valid_606513 = header.getOrDefault("X-Amz-Security-Token")
  valid_606513 = validateParameter(valid_606513, JString, required = false,
                                 default = nil)
  if valid_606513 != nil:
    section.add "X-Amz-Security-Token", valid_606513
  var valid_606514 = header.getOrDefault("X-Amz-Algorithm")
  valid_606514 = validateParameter(valid_606514, JString, required = false,
                                 default = nil)
  if valid_606514 != nil:
    section.add "X-Amz-Algorithm", valid_606514
  var valid_606515 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606515 = validateParameter(valid_606515, JString, required = false,
                                 default = nil)
  if valid_606515 != nil:
    section.add "X-Amz-SignedHeaders", valid_606515
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_606516 = formData.getOrDefault("SourceRegion")
  valid_606516 = validateParameter(valid_606516, JString, required = false,
                                 default = nil)
  if valid_606516 != nil:
    section.add "SourceRegion", valid_606516
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_606517 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_606517 = validateParameter(valid_606517, JString, required = true,
                                 default = nil)
  if valid_606517 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_606517
  var valid_606518 = formData.getOrDefault("KmsKeyId")
  valid_606518 = validateParameter(valid_606518, JString, required = false,
                                 default = nil)
  if valid_606518 != nil:
    section.add "KmsKeyId", valid_606518
  var valid_606519 = formData.getOrDefault("PreSignedUrl")
  valid_606519 = validateParameter(valid_606519, JString, required = false,
                                 default = nil)
  if valid_606519 != nil:
    section.add "PreSignedUrl", valid_606519
  var valid_606520 = formData.getOrDefault("CopyTags")
  valid_606520 = validateParameter(valid_606520, JBool, required = false, default = nil)
  if valid_606520 != nil:
    section.add "CopyTags", valid_606520
  var valid_606521 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_606521 = validateParameter(valid_606521, JString, required = true,
                                 default = nil)
  if valid_606521 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_606521
  var valid_606522 = formData.getOrDefault("Tags")
  valid_606522 = validateParameter(valid_606522, JArray, required = false,
                                 default = nil)
  if valid_606522 != nil:
    section.add "Tags", valid_606522
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606523: Call_PostCopyDBClusterSnapshot_606504; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606523.validator(path, query, header, formData, body)
  let scheme = call_606523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606523.url(scheme.get, call_606523.host, call_606523.base,
                         call_606523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606523, url, valid)

proc call*(call_606524: Call_PostCopyDBClusterSnapshot_606504;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; SourceRegion: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_606525 = newJObject()
  var formData_606526 = newJObject()
  add(formData_606526, "SourceRegion", newJString(SourceRegion))
  add(formData_606526, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_606526, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606526, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_606526, "CopyTags", newJBool(CopyTags))
  add(formData_606526, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_606525, "Action", newJString(Action))
  if Tags != nil:
    formData_606526.add "Tags", Tags
  add(query_606525, "Version", newJString(Version))
  result = call_606524.call(nil, query_606525, nil, formData_606526, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_606504(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_606505, base: "/",
    url: url_PostCopyDBClusterSnapshot_606506,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_606482 = ref object of OpenApiRestCall_605589
proc url_GetCopyDBClusterSnapshot_606484(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterSnapshot_606483(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606485 = query.getOrDefault("Tags")
  valid_606485 = validateParameter(valid_606485, JArray, required = false,
                                 default = nil)
  if valid_606485 != nil:
    section.add "Tags", valid_606485
  var valid_606486 = query.getOrDefault("KmsKeyId")
  valid_606486 = validateParameter(valid_606486, JString, required = false,
                                 default = nil)
  if valid_606486 != nil:
    section.add "KmsKeyId", valid_606486
  var valid_606487 = query.getOrDefault("PreSignedUrl")
  valid_606487 = validateParameter(valid_606487, JString, required = false,
                                 default = nil)
  if valid_606487 != nil:
    section.add "PreSignedUrl", valid_606487
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_606488 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_606488 = validateParameter(valid_606488, JString, required = true,
                                 default = nil)
  if valid_606488 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_606488
  var valid_606489 = query.getOrDefault("SourceRegion")
  valid_606489 = validateParameter(valid_606489, JString, required = false,
                                 default = nil)
  if valid_606489 != nil:
    section.add "SourceRegion", valid_606489
  var valid_606490 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_606490 = validateParameter(valid_606490, JString, required = true,
                                 default = nil)
  if valid_606490 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_606490
  var valid_606491 = query.getOrDefault("Action")
  valid_606491 = validateParameter(valid_606491, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_606491 != nil:
    section.add "Action", valid_606491
  var valid_606492 = query.getOrDefault("CopyTags")
  valid_606492 = validateParameter(valid_606492, JBool, required = false, default = nil)
  if valid_606492 != nil:
    section.add "CopyTags", valid_606492
  var valid_606493 = query.getOrDefault("Version")
  valid_606493 = validateParameter(valid_606493, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606493 != nil:
    section.add "Version", valid_606493
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606494 = header.getOrDefault("X-Amz-Signature")
  valid_606494 = validateParameter(valid_606494, JString, required = false,
                                 default = nil)
  if valid_606494 != nil:
    section.add "X-Amz-Signature", valid_606494
  var valid_606495 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606495 = validateParameter(valid_606495, JString, required = false,
                                 default = nil)
  if valid_606495 != nil:
    section.add "X-Amz-Content-Sha256", valid_606495
  var valid_606496 = header.getOrDefault("X-Amz-Date")
  valid_606496 = validateParameter(valid_606496, JString, required = false,
                                 default = nil)
  if valid_606496 != nil:
    section.add "X-Amz-Date", valid_606496
  var valid_606497 = header.getOrDefault("X-Amz-Credential")
  valid_606497 = validateParameter(valid_606497, JString, required = false,
                                 default = nil)
  if valid_606497 != nil:
    section.add "X-Amz-Credential", valid_606497
  var valid_606498 = header.getOrDefault("X-Amz-Security-Token")
  valid_606498 = validateParameter(valid_606498, JString, required = false,
                                 default = nil)
  if valid_606498 != nil:
    section.add "X-Amz-Security-Token", valid_606498
  var valid_606499 = header.getOrDefault("X-Amz-Algorithm")
  valid_606499 = validateParameter(valid_606499, JString, required = false,
                                 default = nil)
  if valid_606499 != nil:
    section.add "X-Amz-Algorithm", valid_606499
  var valid_606500 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606500 = validateParameter(valid_606500, JString, required = false,
                                 default = nil)
  if valid_606500 != nil:
    section.add "X-Amz-SignedHeaders", valid_606500
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606501: Call_GetCopyDBClusterSnapshot_606482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606501.validator(path, query, header, formData, body)
  let scheme = call_606501.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606501.url(scheme.get, call_606501.host, call_606501.base,
                         call_606501.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606501, url, valid)

proc call*(call_606502: Call_GetCopyDBClusterSnapshot_606482;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; Tags: JsonNode = nil;
          KmsKeyId: string = ""; PreSignedUrl: string = ""; SourceRegion: string = "";
          Action: string = "CopyDBClusterSnapshot"; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: string (required)
  var query_606503 = newJObject()
  if Tags != nil:
    query_606503.add "Tags", Tags
  add(query_606503, "KmsKeyId", newJString(KmsKeyId))
  add(query_606503, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_606503, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_606503, "SourceRegion", newJString(SourceRegion))
  add(query_606503, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_606503, "Action", newJString(Action))
  add(query_606503, "CopyTags", newJBool(CopyTags))
  add(query_606503, "Version", newJString(Version))
  result = call_606502.call(nil, query_606503, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_606482(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_606483, base: "/",
    url: url_GetCopyDBClusterSnapshot_606484, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_606546 = ref object of OpenApiRestCall_605589
proc url_PostCopyDBParameterGroup_606548(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBParameterGroup_606547(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606549 = query.getOrDefault("Action")
  valid_606549 = validateParameter(valid_606549, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_606549 != nil:
    section.add "Action", valid_606549
  var valid_606550 = query.getOrDefault("Version")
  valid_606550 = validateParameter(valid_606550, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606550 != nil:
    section.add "Version", valid_606550
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606551 = header.getOrDefault("X-Amz-Signature")
  valid_606551 = validateParameter(valid_606551, JString, required = false,
                                 default = nil)
  if valid_606551 != nil:
    section.add "X-Amz-Signature", valid_606551
  var valid_606552 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606552 = validateParameter(valid_606552, JString, required = false,
                                 default = nil)
  if valid_606552 != nil:
    section.add "X-Amz-Content-Sha256", valid_606552
  var valid_606553 = header.getOrDefault("X-Amz-Date")
  valid_606553 = validateParameter(valid_606553, JString, required = false,
                                 default = nil)
  if valid_606553 != nil:
    section.add "X-Amz-Date", valid_606553
  var valid_606554 = header.getOrDefault("X-Amz-Credential")
  valid_606554 = validateParameter(valid_606554, JString, required = false,
                                 default = nil)
  if valid_606554 != nil:
    section.add "X-Amz-Credential", valid_606554
  var valid_606555 = header.getOrDefault("X-Amz-Security-Token")
  valid_606555 = validateParameter(valid_606555, JString, required = false,
                                 default = nil)
  if valid_606555 != nil:
    section.add "X-Amz-Security-Token", valid_606555
  var valid_606556 = header.getOrDefault("X-Amz-Algorithm")
  valid_606556 = validateParameter(valid_606556, JString, required = false,
                                 default = nil)
  if valid_606556 != nil:
    section.add "X-Amz-Algorithm", valid_606556
  var valid_606557 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606557 = validateParameter(valid_606557, JString, required = false,
                                 default = nil)
  if valid_606557 != nil:
    section.add "X-Amz-SignedHeaders", valid_606557
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_606558 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_606558 = validateParameter(valid_606558, JString, required = true,
                                 default = nil)
  if valid_606558 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_606558
  var valid_606559 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_606559 = validateParameter(valid_606559, JString, required = true,
                                 default = nil)
  if valid_606559 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_606559
  var valid_606560 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_606560 = validateParameter(valid_606560, JString, required = true,
                                 default = nil)
  if valid_606560 != nil:
    section.add "TargetDBParameterGroupDescription", valid_606560
  var valid_606561 = formData.getOrDefault("Tags")
  valid_606561 = validateParameter(valid_606561, JArray, required = false,
                                 default = nil)
  if valid_606561 != nil:
    section.add "Tags", valid_606561
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606562: Call_PostCopyDBParameterGroup_606546; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_606562.validator(path, query, header, formData, body)
  let scheme = call_606562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606562.url(scheme.get, call_606562.host, call_606562.base,
                         call_606562.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606562, url, valid)

proc call*(call_606563: Call_PostCopyDBParameterGroup_606546;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          Action: string = "CopyDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_606564 = newJObject()
  var formData_606565 = newJObject()
  add(formData_606565, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(formData_606565, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(formData_606565, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_606564, "Action", newJString(Action))
  if Tags != nil:
    formData_606565.add "Tags", Tags
  add(query_606564, "Version", newJString(Version))
  result = call_606563.call(nil, query_606564, nil, formData_606565, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_606546(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_606547, base: "/",
    url: url_PostCopyDBParameterGroup_606548, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_606527 = ref object of OpenApiRestCall_605589
proc url_GetCopyDBParameterGroup_606529(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBParameterGroup_606528(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_606530 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_606530 = validateParameter(valid_606530, JString, required = true,
                                 default = nil)
  if valid_606530 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_606530
  var valid_606531 = query.getOrDefault("Tags")
  valid_606531 = validateParameter(valid_606531, JArray, required = false,
                                 default = nil)
  if valid_606531 != nil:
    section.add "Tags", valid_606531
  var valid_606532 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_606532 = validateParameter(valid_606532, JString, required = true,
                                 default = nil)
  if valid_606532 != nil:
    section.add "TargetDBParameterGroupDescription", valid_606532
  var valid_606533 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_606533 = validateParameter(valid_606533, JString, required = true,
                                 default = nil)
  if valid_606533 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_606533
  var valid_606534 = query.getOrDefault("Action")
  valid_606534 = validateParameter(valid_606534, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_606534 != nil:
    section.add "Action", valid_606534
  var valid_606535 = query.getOrDefault("Version")
  valid_606535 = validateParameter(valid_606535, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606535 != nil:
    section.add "Version", valid_606535
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606536 = header.getOrDefault("X-Amz-Signature")
  valid_606536 = validateParameter(valid_606536, JString, required = false,
                                 default = nil)
  if valid_606536 != nil:
    section.add "X-Amz-Signature", valid_606536
  var valid_606537 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606537 = validateParameter(valid_606537, JString, required = false,
                                 default = nil)
  if valid_606537 != nil:
    section.add "X-Amz-Content-Sha256", valid_606537
  var valid_606538 = header.getOrDefault("X-Amz-Date")
  valid_606538 = validateParameter(valid_606538, JString, required = false,
                                 default = nil)
  if valid_606538 != nil:
    section.add "X-Amz-Date", valid_606538
  var valid_606539 = header.getOrDefault("X-Amz-Credential")
  valid_606539 = validateParameter(valid_606539, JString, required = false,
                                 default = nil)
  if valid_606539 != nil:
    section.add "X-Amz-Credential", valid_606539
  var valid_606540 = header.getOrDefault("X-Amz-Security-Token")
  valid_606540 = validateParameter(valid_606540, JString, required = false,
                                 default = nil)
  if valid_606540 != nil:
    section.add "X-Amz-Security-Token", valid_606540
  var valid_606541 = header.getOrDefault("X-Amz-Algorithm")
  valid_606541 = validateParameter(valid_606541, JString, required = false,
                                 default = nil)
  if valid_606541 != nil:
    section.add "X-Amz-Algorithm", valid_606541
  var valid_606542 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606542 = validateParameter(valid_606542, JString, required = false,
                                 default = nil)
  if valid_606542 != nil:
    section.add "X-Amz-SignedHeaders", valid_606542
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606543: Call_GetCopyDBParameterGroup_606527; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_606543.validator(path, query, header, formData, body)
  let scheme = call_606543.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606543.url(scheme.get, call_606543.host, call_606543.base,
                         call_606543.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606543, url, valid)

proc call*(call_606544: Call_GetCopyDBParameterGroup_606527;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606545 = newJObject()
  add(query_606545, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  if Tags != nil:
    query_606545.add "Tags", Tags
  add(query_606545, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_606545, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(query_606545, "Action", newJString(Action))
  add(query_606545, "Version", newJString(Version))
  result = call_606544.call(nil, query_606545, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_606527(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_606528, base: "/",
    url: url_GetCopyDBParameterGroup_606529, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBSnapshot_606589 = ref object of OpenApiRestCall_605589
proc url_PostCopyDBSnapshot_606591(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBSnapshot_606590(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606592 = query.getOrDefault("Action")
  valid_606592 = validateParameter(valid_606592, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_606592 != nil:
    section.add "Action", valid_606592
  var valid_606593 = query.getOrDefault("Version")
  valid_606593 = validateParameter(valid_606593, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606593 != nil:
    section.add "Version", valid_606593
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606594 = header.getOrDefault("X-Amz-Signature")
  valid_606594 = validateParameter(valid_606594, JString, required = false,
                                 default = nil)
  if valid_606594 != nil:
    section.add "X-Amz-Signature", valid_606594
  var valid_606595 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606595 = validateParameter(valid_606595, JString, required = false,
                                 default = nil)
  if valid_606595 != nil:
    section.add "X-Amz-Content-Sha256", valid_606595
  var valid_606596 = header.getOrDefault("X-Amz-Date")
  valid_606596 = validateParameter(valid_606596, JString, required = false,
                                 default = nil)
  if valid_606596 != nil:
    section.add "X-Amz-Date", valid_606596
  var valid_606597 = header.getOrDefault("X-Amz-Credential")
  valid_606597 = validateParameter(valid_606597, JString, required = false,
                                 default = nil)
  if valid_606597 != nil:
    section.add "X-Amz-Credential", valid_606597
  var valid_606598 = header.getOrDefault("X-Amz-Security-Token")
  valid_606598 = validateParameter(valid_606598, JString, required = false,
                                 default = nil)
  if valid_606598 != nil:
    section.add "X-Amz-Security-Token", valid_606598
  var valid_606599 = header.getOrDefault("X-Amz-Algorithm")
  valid_606599 = validateParameter(valid_606599, JString, required = false,
                                 default = nil)
  if valid_606599 != nil:
    section.add "X-Amz-Algorithm", valid_606599
  var valid_606600 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606600 = validateParameter(valid_606600, JString, required = false,
                                 default = nil)
  if valid_606600 != nil:
    section.add "X-Amz-SignedHeaders", valid_606600
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_606601 = formData.getOrDefault("SourceRegion")
  valid_606601 = validateParameter(valid_606601, JString, required = false,
                                 default = nil)
  if valid_606601 != nil:
    section.add "SourceRegion", valid_606601
  var valid_606602 = formData.getOrDefault("KmsKeyId")
  valid_606602 = validateParameter(valid_606602, JString, required = false,
                                 default = nil)
  if valid_606602 != nil:
    section.add "KmsKeyId", valid_606602
  assert formData != nil, "formData argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_606603 = formData.getOrDefault("SourceDBSnapshotIdentifier")
  valid_606603 = validateParameter(valid_606603, JString, required = true,
                                 default = nil)
  if valid_606603 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_606603
  var valid_606604 = formData.getOrDefault("CopyTags")
  valid_606604 = validateParameter(valid_606604, JBool, required = false, default = nil)
  if valid_606604 != nil:
    section.add "CopyTags", valid_606604
  var valid_606605 = formData.getOrDefault("PreSignedUrl")
  valid_606605 = validateParameter(valid_606605, JString, required = false,
                                 default = nil)
  if valid_606605 != nil:
    section.add "PreSignedUrl", valid_606605
  var valid_606606 = formData.getOrDefault("Tags")
  valid_606606 = validateParameter(valid_606606, JArray, required = false,
                                 default = nil)
  if valid_606606 != nil:
    section.add "Tags", valid_606606
  var valid_606607 = formData.getOrDefault("TargetDBSnapshotIdentifier")
  valid_606607 = validateParameter(valid_606607, JString, required = true,
                                 default = nil)
  if valid_606607 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_606607
  var valid_606608 = formData.getOrDefault("OptionGroupName")
  valid_606608 = validateParameter(valid_606608, JString, required = false,
                                 default = nil)
  if valid_606608 != nil:
    section.add "OptionGroupName", valid_606608
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606609: Call_PostCopyDBSnapshot_606589; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_606609.validator(path, query, header, formData, body)
  let scheme = call_606609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606609.url(scheme.get, call_606609.host, call_606609.base,
                         call_606609.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606609, url, valid)

proc call*(call_606610: Call_PostCopyDBSnapshot_606589;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          SourceRegion: string = ""; KmsKeyId: string = ""; CopyTags: bool = false;
          PreSignedUrl: string = ""; Action: string = "CopyDBSnapshot";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_606611 = newJObject()
  var formData_606612 = newJObject()
  add(formData_606612, "SourceRegion", newJString(SourceRegion))
  add(formData_606612, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606612, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(formData_606612, "CopyTags", newJBool(CopyTags))
  add(formData_606612, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_606611, "Action", newJString(Action))
  if Tags != nil:
    formData_606612.add "Tags", Tags
  add(formData_606612, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(formData_606612, "OptionGroupName", newJString(OptionGroupName))
  add(query_606611, "Version", newJString(Version))
  result = call_606610.call(nil, query_606611, nil, formData_606612, nil)

var postCopyDBSnapshot* = Call_PostCopyDBSnapshot_606589(
    name: "postCopyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBSnapshot",
    validator: validate_PostCopyDBSnapshot_606590, base: "/",
    url: url_PostCopyDBSnapshot_606591, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBSnapshot_606566 = ref object of OpenApiRestCall_605589
proc url_GetCopyDBSnapshot_606568(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBSnapshot_606567(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_606569 = query.getOrDefault("SourceDBSnapshotIdentifier")
  valid_606569 = validateParameter(valid_606569, JString, required = true,
                                 default = nil)
  if valid_606569 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_606569
  var valid_606570 = query.getOrDefault("Tags")
  valid_606570 = validateParameter(valid_606570, JArray, required = false,
                                 default = nil)
  if valid_606570 != nil:
    section.add "Tags", valid_606570
  var valid_606571 = query.getOrDefault("KmsKeyId")
  valid_606571 = validateParameter(valid_606571, JString, required = false,
                                 default = nil)
  if valid_606571 != nil:
    section.add "KmsKeyId", valid_606571
  var valid_606572 = query.getOrDefault("PreSignedUrl")
  valid_606572 = validateParameter(valid_606572, JString, required = false,
                                 default = nil)
  if valid_606572 != nil:
    section.add "PreSignedUrl", valid_606572
  var valid_606573 = query.getOrDefault("SourceRegion")
  valid_606573 = validateParameter(valid_606573, JString, required = false,
                                 default = nil)
  if valid_606573 != nil:
    section.add "SourceRegion", valid_606573
  var valid_606574 = query.getOrDefault("Action")
  valid_606574 = validateParameter(valid_606574, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_606574 != nil:
    section.add "Action", valid_606574
  var valid_606575 = query.getOrDefault("OptionGroupName")
  valid_606575 = validateParameter(valid_606575, JString, required = false,
                                 default = nil)
  if valid_606575 != nil:
    section.add "OptionGroupName", valid_606575
  var valid_606576 = query.getOrDefault("CopyTags")
  valid_606576 = validateParameter(valid_606576, JBool, required = false, default = nil)
  if valid_606576 != nil:
    section.add "CopyTags", valid_606576
  var valid_606577 = query.getOrDefault("TargetDBSnapshotIdentifier")
  valid_606577 = validateParameter(valid_606577, JString, required = true,
                                 default = nil)
  if valid_606577 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_606577
  var valid_606578 = query.getOrDefault("Version")
  valid_606578 = validateParameter(valid_606578, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606578 != nil:
    section.add "Version", valid_606578
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606579 = header.getOrDefault("X-Amz-Signature")
  valid_606579 = validateParameter(valid_606579, JString, required = false,
                                 default = nil)
  if valid_606579 != nil:
    section.add "X-Amz-Signature", valid_606579
  var valid_606580 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606580 = validateParameter(valid_606580, JString, required = false,
                                 default = nil)
  if valid_606580 != nil:
    section.add "X-Amz-Content-Sha256", valid_606580
  var valid_606581 = header.getOrDefault("X-Amz-Date")
  valid_606581 = validateParameter(valid_606581, JString, required = false,
                                 default = nil)
  if valid_606581 != nil:
    section.add "X-Amz-Date", valid_606581
  var valid_606582 = header.getOrDefault("X-Amz-Credential")
  valid_606582 = validateParameter(valid_606582, JString, required = false,
                                 default = nil)
  if valid_606582 != nil:
    section.add "X-Amz-Credential", valid_606582
  var valid_606583 = header.getOrDefault("X-Amz-Security-Token")
  valid_606583 = validateParameter(valid_606583, JString, required = false,
                                 default = nil)
  if valid_606583 != nil:
    section.add "X-Amz-Security-Token", valid_606583
  var valid_606584 = header.getOrDefault("X-Amz-Algorithm")
  valid_606584 = validateParameter(valid_606584, JString, required = false,
                                 default = nil)
  if valid_606584 != nil:
    section.add "X-Amz-Algorithm", valid_606584
  var valid_606585 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606585 = validateParameter(valid_606585, JString, required = false,
                                 default = nil)
  if valid_606585 != nil:
    section.add "X-Amz-SignedHeaders", valid_606585
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606586: Call_GetCopyDBSnapshot_606566; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_606586.validator(path, query, header, formData, body)
  let scheme = call_606586.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606586.url(scheme.get, call_606586.host, call_606586.base,
                         call_606586.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606586, url, valid)

proc call*(call_606587: Call_GetCopyDBSnapshot_606566;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          Tags: JsonNode = nil; KmsKeyId: string = ""; PreSignedUrl: string = "";
          SourceRegion: string = ""; Action: string = "CopyDBSnapshot";
          OptionGroupName: string = ""; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: string (required)
  var query_606588 = newJObject()
  add(query_606588, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  if Tags != nil:
    query_606588.add "Tags", Tags
  add(query_606588, "KmsKeyId", newJString(KmsKeyId))
  add(query_606588, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_606588, "SourceRegion", newJString(SourceRegion))
  add(query_606588, "Action", newJString(Action))
  add(query_606588, "OptionGroupName", newJString(OptionGroupName))
  add(query_606588, "CopyTags", newJBool(CopyTags))
  add(query_606588, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(query_606588, "Version", newJString(Version))
  result = call_606587.call(nil, query_606588, nil, nil, nil)

var getCopyDBSnapshot* = Call_GetCopyDBSnapshot_606566(name: "getCopyDBSnapshot",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyDBSnapshot", validator: validate_GetCopyDBSnapshot_606567,
    base: "/", url: url_GetCopyDBSnapshot_606568,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyOptionGroup_606632 = ref object of OpenApiRestCall_605589
proc url_PostCopyOptionGroup_606634(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyOptionGroup_606633(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606635 = query.getOrDefault("Action")
  valid_606635 = validateParameter(valid_606635, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_606635 != nil:
    section.add "Action", valid_606635
  var valid_606636 = query.getOrDefault("Version")
  valid_606636 = validateParameter(valid_606636, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606636 != nil:
    section.add "Version", valid_606636
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606637 = header.getOrDefault("X-Amz-Signature")
  valid_606637 = validateParameter(valid_606637, JString, required = false,
                                 default = nil)
  if valid_606637 != nil:
    section.add "X-Amz-Signature", valid_606637
  var valid_606638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606638 = validateParameter(valid_606638, JString, required = false,
                                 default = nil)
  if valid_606638 != nil:
    section.add "X-Amz-Content-Sha256", valid_606638
  var valid_606639 = header.getOrDefault("X-Amz-Date")
  valid_606639 = validateParameter(valid_606639, JString, required = false,
                                 default = nil)
  if valid_606639 != nil:
    section.add "X-Amz-Date", valid_606639
  var valid_606640 = header.getOrDefault("X-Amz-Credential")
  valid_606640 = validateParameter(valid_606640, JString, required = false,
                                 default = nil)
  if valid_606640 != nil:
    section.add "X-Amz-Credential", valid_606640
  var valid_606641 = header.getOrDefault("X-Amz-Security-Token")
  valid_606641 = validateParameter(valid_606641, JString, required = false,
                                 default = nil)
  if valid_606641 != nil:
    section.add "X-Amz-Security-Token", valid_606641
  var valid_606642 = header.getOrDefault("X-Amz-Algorithm")
  valid_606642 = validateParameter(valid_606642, JString, required = false,
                                 default = nil)
  if valid_606642 != nil:
    section.add "X-Amz-Algorithm", valid_606642
  var valid_606643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606643 = validateParameter(valid_606643, JString, required = false,
                                 default = nil)
  if valid_606643 != nil:
    section.add "X-Amz-SignedHeaders", valid_606643
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetOptionGroupIdentifier` field"
  var valid_606644 = formData.getOrDefault("TargetOptionGroupIdentifier")
  valid_606644 = validateParameter(valid_606644, JString, required = true,
                                 default = nil)
  if valid_606644 != nil:
    section.add "TargetOptionGroupIdentifier", valid_606644
  var valid_606645 = formData.getOrDefault("TargetOptionGroupDescription")
  valid_606645 = validateParameter(valid_606645, JString, required = true,
                                 default = nil)
  if valid_606645 != nil:
    section.add "TargetOptionGroupDescription", valid_606645
  var valid_606646 = formData.getOrDefault("SourceOptionGroupIdentifier")
  valid_606646 = validateParameter(valid_606646, JString, required = true,
                                 default = nil)
  if valid_606646 != nil:
    section.add "SourceOptionGroupIdentifier", valid_606646
  var valid_606647 = formData.getOrDefault("Tags")
  valid_606647 = validateParameter(valid_606647, JArray, required = false,
                                 default = nil)
  if valid_606647 != nil:
    section.add "Tags", valid_606647
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606648: Call_PostCopyOptionGroup_606632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_606648.validator(path, query, header, formData, body)
  let scheme = call_606648.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606648.url(scheme.get, call_606648.host, call_606648.base,
                         call_606648.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606648, url, valid)

proc call*(call_606649: Call_PostCopyOptionGroup_606632;
          TargetOptionGroupIdentifier: string;
          TargetOptionGroupDescription: string;
          SourceOptionGroupIdentifier: string; Action: string = "CopyOptionGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCopyOptionGroup
  ## Copies the specified option group.
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_606650 = newJObject()
  var formData_606651 = newJObject()
  add(formData_606651, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(formData_606651, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(formData_606651, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  add(query_606650, "Action", newJString(Action))
  if Tags != nil:
    formData_606651.add "Tags", Tags
  add(query_606650, "Version", newJString(Version))
  result = call_606649.call(nil, query_606650, nil, formData_606651, nil)

var postCopyOptionGroup* = Call_PostCopyOptionGroup_606632(
    name: "postCopyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyOptionGroup",
    validator: validate_PostCopyOptionGroup_606633, base: "/",
    url: url_PostCopyOptionGroup_606634, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyOptionGroup_606613 = ref object of OpenApiRestCall_605589
proc url_GetCopyOptionGroup_606615(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyOptionGroup_606614(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Action: JString (required)
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: JString (required)
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  section = newJObject()
  var valid_606616 = query.getOrDefault("Tags")
  valid_606616 = validateParameter(valid_606616, JArray, required = false,
                                 default = nil)
  if valid_606616 != nil:
    section.add "Tags", valid_606616
  assert query != nil, "query argument is necessary due to required `TargetOptionGroupDescription` field"
  var valid_606617 = query.getOrDefault("TargetOptionGroupDescription")
  valid_606617 = validateParameter(valid_606617, JString, required = true,
                                 default = nil)
  if valid_606617 != nil:
    section.add "TargetOptionGroupDescription", valid_606617
  var valid_606618 = query.getOrDefault("Action")
  valid_606618 = validateParameter(valid_606618, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_606618 != nil:
    section.add "Action", valid_606618
  var valid_606619 = query.getOrDefault("TargetOptionGroupIdentifier")
  valid_606619 = validateParameter(valid_606619, JString, required = true,
                                 default = nil)
  if valid_606619 != nil:
    section.add "TargetOptionGroupIdentifier", valid_606619
  var valid_606620 = query.getOrDefault("Version")
  valid_606620 = validateParameter(valid_606620, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606620 != nil:
    section.add "Version", valid_606620
  var valid_606621 = query.getOrDefault("SourceOptionGroupIdentifier")
  valid_606621 = validateParameter(valid_606621, JString, required = true,
                                 default = nil)
  if valid_606621 != nil:
    section.add "SourceOptionGroupIdentifier", valid_606621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606622 = header.getOrDefault("X-Amz-Signature")
  valid_606622 = validateParameter(valid_606622, JString, required = false,
                                 default = nil)
  if valid_606622 != nil:
    section.add "X-Amz-Signature", valid_606622
  var valid_606623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606623 = validateParameter(valid_606623, JString, required = false,
                                 default = nil)
  if valid_606623 != nil:
    section.add "X-Amz-Content-Sha256", valid_606623
  var valid_606624 = header.getOrDefault("X-Amz-Date")
  valid_606624 = validateParameter(valid_606624, JString, required = false,
                                 default = nil)
  if valid_606624 != nil:
    section.add "X-Amz-Date", valid_606624
  var valid_606625 = header.getOrDefault("X-Amz-Credential")
  valid_606625 = validateParameter(valid_606625, JString, required = false,
                                 default = nil)
  if valid_606625 != nil:
    section.add "X-Amz-Credential", valid_606625
  var valid_606626 = header.getOrDefault("X-Amz-Security-Token")
  valid_606626 = validateParameter(valid_606626, JString, required = false,
                                 default = nil)
  if valid_606626 != nil:
    section.add "X-Amz-Security-Token", valid_606626
  var valid_606627 = header.getOrDefault("X-Amz-Algorithm")
  valid_606627 = validateParameter(valid_606627, JString, required = false,
                                 default = nil)
  if valid_606627 != nil:
    section.add "X-Amz-Algorithm", valid_606627
  var valid_606628 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606628 = validateParameter(valid_606628, JString, required = false,
                                 default = nil)
  if valid_606628 != nil:
    section.add "X-Amz-SignedHeaders", valid_606628
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606629: Call_GetCopyOptionGroup_606613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_606629.validator(path, query, header, formData, body)
  let scheme = call_606629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606629.url(scheme.get, call_606629.host, call_606629.base,
                         call_606629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606629, url, valid)

proc call*(call_606630: Call_GetCopyOptionGroup_606613;
          TargetOptionGroupDescription: string;
          TargetOptionGroupIdentifier: string;
          SourceOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyOptionGroup
  ## Copies the specified option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Action: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: string (required)
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  var query_606631 = newJObject()
  if Tags != nil:
    query_606631.add "Tags", Tags
  add(query_606631, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(query_606631, "Action", newJString(Action))
  add(query_606631, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(query_606631, "Version", newJString(Version))
  add(query_606631, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  result = call_606630.call(nil, query_606631, nil, nil, nil)

var getCopyOptionGroup* = Call_GetCopyOptionGroup_606613(
    name: "getCopyOptionGroup", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyOptionGroup", validator: validate_GetCopyOptionGroup_606614,
    base: "/", url: url_GetCopyOptionGroup_606615,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomAvailabilityZone_606671 = ref object of OpenApiRestCall_605589
proc url_PostCreateCustomAvailabilityZone_606673(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCustomAvailabilityZone_606672(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606674 = query.getOrDefault("Action")
  valid_606674 = validateParameter(valid_606674, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_606674 != nil:
    section.add "Action", valid_606674
  var valid_606675 = query.getOrDefault("Version")
  valid_606675 = validateParameter(valid_606675, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606675 != nil:
    section.add "Version", valid_606675
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606676 = header.getOrDefault("X-Amz-Signature")
  valid_606676 = validateParameter(valid_606676, JString, required = false,
                                 default = nil)
  if valid_606676 != nil:
    section.add "X-Amz-Signature", valid_606676
  var valid_606677 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606677 = validateParameter(valid_606677, JString, required = false,
                                 default = nil)
  if valid_606677 != nil:
    section.add "X-Amz-Content-Sha256", valid_606677
  var valid_606678 = header.getOrDefault("X-Amz-Date")
  valid_606678 = validateParameter(valid_606678, JString, required = false,
                                 default = nil)
  if valid_606678 != nil:
    section.add "X-Amz-Date", valid_606678
  var valid_606679 = header.getOrDefault("X-Amz-Credential")
  valid_606679 = validateParameter(valid_606679, JString, required = false,
                                 default = nil)
  if valid_606679 != nil:
    section.add "X-Amz-Credential", valid_606679
  var valid_606680 = header.getOrDefault("X-Amz-Security-Token")
  valid_606680 = validateParameter(valid_606680, JString, required = false,
                                 default = nil)
  if valid_606680 != nil:
    section.add "X-Amz-Security-Token", valid_606680
  var valid_606681 = header.getOrDefault("X-Amz-Algorithm")
  valid_606681 = validateParameter(valid_606681, JString, required = false,
                                 default = nil)
  if valid_606681 != nil:
    section.add "X-Amz-Algorithm", valid_606681
  var valid_606682 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606682 = validateParameter(valid_606682, JString, required = false,
                                 default = nil)
  if valid_606682 != nil:
    section.add "X-Amz-SignedHeaders", valid_606682
  result.add "header", section
  ## parameters in `formData` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  section = newJObject()
  var valid_606683 = formData.getOrDefault("VpnTunnelOriginatorIP")
  valid_606683 = validateParameter(valid_606683, JString, required = false,
                                 default = nil)
  if valid_606683 != nil:
    section.add "VpnTunnelOriginatorIP", valid_606683
  var valid_606684 = formData.getOrDefault("ExistingVpnId")
  valid_606684 = validateParameter(valid_606684, JString, required = false,
                                 default = nil)
  if valid_606684 != nil:
    section.add "ExistingVpnId", valid_606684
  var valid_606685 = formData.getOrDefault("NewVpnTunnelName")
  valid_606685 = validateParameter(valid_606685, JString, required = false,
                                 default = nil)
  if valid_606685 != nil:
    section.add "NewVpnTunnelName", valid_606685
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneName` field"
  var valid_606686 = formData.getOrDefault("CustomAvailabilityZoneName")
  valid_606686 = validateParameter(valid_606686, JString, required = true,
                                 default = nil)
  if valid_606686 != nil:
    section.add "CustomAvailabilityZoneName", valid_606686
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606687: Call_PostCreateCustomAvailabilityZone_606671;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_606687.validator(path, query, header, formData, body)
  let scheme = call_606687.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606687.url(scheme.get, call_606687.host, call_606687.base,
                         call_606687.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606687, url, valid)

proc call*(call_606688: Call_PostCreateCustomAvailabilityZone_606671;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          ExistingVpnId: string = ""; NewVpnTunnelName: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: string (required)
  var query_606689 = newJObject()
  var formData_606690 = newJObject()
  add(formData_606690, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(formData_606690, "ExistingVpnId", newJString(ExistingVpnId))
  add(formData_606690, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  add(query_606689, "Action", newJString(Action))
  add(formData_606690, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_606689, "Version", newJString(Version))
  result = call_606688.call(nil, query_606689, nil, formData_606690, nil)

var postCreateCustomAvailabilityZone* = Call_PostCreateCustomAvailabilityZone_606671(
    name: "postCreateCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_PostCreateCustomAvailabilityZone_606672, base: "/",
    url: url_PostCreateCustomAvailabilityZone_606673,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomAvailabilityZone_606652 = ref object of OpenApiRestCall_605589
proc url_GetCreateCustomAvailabilityZone_606654(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCustomAvailabilityZone_606653(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: JString (required)
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: JString (required)
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  section = newJObject()
  var valid_606655 = query.getOrDefault("VpnTunnelOriginatorIP")
  valid_606655 = validateParameter(valid_606655, JString, required = false,
                                 default = nil)
  if valid_606655 != nil:
    section.add "VpnTunnelOriginatorIP", valid_606655
  var valid_606656 = query.getOrDefault("ExistingVpnId")
  valid_606656 = validateParameter(valid_606656, JString, required = false,
                                 default = nil)
  if valid_606656 != nil:
    section.add "ExistingVpnId", valid_606656
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606657 = query.getOrDefault("Action")
  valid_606657 = validateParameter(valid_606657, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_606657 != nil:
    section.add "Action", valid_606657
  var valid_606658 = query.getOrDefault("CustomAvailabilityZoneName")
  valid_606658 = validateParameter(valid_606658, JString, required = true,
                                 default = nil)
  if valid_606658 != nil:
    section.add "CustomAvailabilityZoneName", valid_606658
  var valid_606659 = query.getOrDefault("Version")
  valid_606659 = validateParameter(valid_606659, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606659 != nil:
    section.add "Version", valid_606659
  var valid_606660 = query.getOrDefault("NewVpnTunnelName")
  valid_606660 = validateParameter(valid_606660, JString, required = false,
                                 default = nil)
  if valid_606660 != nil:
    section.add "NewVpnTunnelName", valid_606660
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606661 = header.getOrDefault("X-Amz-Signature")
  valid_606661 = validateParameter(valid_606661, JString, required = false,
                                 default = nil)
  if valid_606661 != nil:
    section.add "X-Amz-Signature", valid_606661
  var valid_606662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606662 = validateParameter(valid_606662, JString, required = false,
                                 default = nil)
  if valid_606662 != nil:
    section.add "X-Amz-Content-Sha256", valid_606662
  var valid_606663 = header.getOrDefault("X-Amz-Date")
  valid_606663 = validateParameter(valid_606663, JString, required = false,
                                 default = nil)
  if valid_606663 != nil:
    section.add "X-Amz-Date", valid_606663
  var valid_606664 = header.getOrDefault("X-Amz-Credential")
  valid_606664 = validateParameter(valid_606664, JString, required = false,
                                 default = nil)
  if valid_606664 != nil:
    section.add "X-Amz-Credential", valid_606664
  var valid_606665 = header.getOrDefault("X-Amz-Security-Token")
  valid_606665 = validateParameter(valid_606665, JString, required = false,
                                 default = nil)
  if valid_606665 != nil:
    section.add "X-Amz-Security-Token", valid_606665
  var valid_606666 = header.getOrDefault("X-Amz-Algorithm")
  valid_606666 = validateParameter(valid_606666, JString, required = false,
                                 default = nil)
  if valid_606666 != nil:
    section.add "X-Amz-Algorithm", valid_606666
  var valid_606667 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606667 = validateParameter(valid_606667, JString, required = false,
                                 default = nil)
  if valid_606667 != nil:
    section.add "X-Amz-SignedHeaders", valid_606667
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606668: Call_GetCreateCustomAvailabilityZone_606652;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_606668.validator(path, query, header, formData, body)
  let scheme = call_606668.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606668.url(scheme.get, call_606668.host, call_606668.base,
                         call_606668.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606668, url, valid)

proc call*(call_606669: Call_GetCreateCustomAvailabilityZone_606652;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          ExistingVpnId: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"; NewVpnTunnelName: string = ""): Recallable =
  ## getCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: string (required)
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  var query_606670 = newJObject()
  add(query_606670, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(query_606670, "ExistingVpnId", newJString(ExistingVpnId))
  add(query_606670, "Action", newJString(Action))
  add(query_606670, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_606670, "Version", newJString(Version))
  add(query_606670, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  result = call_606669.call(nil, query_606670, nil, nil, nil)

var getCreateCustomAvailabilityZone* = Call_GetCreateCustomAvailabilityZone_606652(
    name: "getCreateCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_GetCreateCustomAvailabilityZone_606653, base: "/",
    url: url_GetCreateCustomAvailabilityZone_606654,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_606759 = ref object of OpenApiRestCall_605589
proc url_PostCreateDBCluster_606761(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBCluster_606760(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606762 = query.getOrDefault("Action")
  valid_606762 = validateParameter(valid_606762, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_606762 != nil:
    section.add "Action", valid_606762
  var valid_606763 = query.getOrDefault("Version")
  valid_606763 = validateParameter(valid_606763, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606763 != nil:
    section.add "Version", valid_606763
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_606764 = header.getOrDefault("X-Amz-Security-Token")
  valid_606764 = validateParameter(valid_606764, JString, required = false,
                                 default = nil)
  if valid_606764 != nil:
    section.add "X-Amz-Security-Token", valid_606764
  var valid_606765 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606765 = validateParameter(valid_606765, JString, required = false,
                                 default = nil)
  if valid_606765 != nil:
    section.add "X-Amz-SignedHeaders", valid_606765
  var valid_606766 = header.getOrDefault("X-Amz-Signature")
  valid_606766 = validateParameter(valid_606766, JString, required = false,
                                 default = nil)
  if valid_606766 != nil:
    section.add "X-Amz-Signature", valid_606766
  var valid_606767 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606767 = validateParameter(valid_606767, JString, required = false,
                                 default = nil)
  if valid_606767 != nil:
    section.add "X-Amz-Content-Sha256", valid_606767
  var valid_606768 = header.getOrDefault("X-Amz-Date")
  valid_606768 = validateParameter(valid_606768, JString, required = false,
                                 default = nil)
  if valid_606768 != nil:
    section.add "X-Amz-Date", valid_606768
  var valid_606769 = header.getOrDefault("X-Amz-Credential")
  valid_606769 = validateParameter(valid_606769, JString, required = false,
                                 default = nil)
  if valid_606769 != nil:
    section.add "X-Amz-Credential", valid_606769
  var valid_606770 = header.getOrDefault("X-Amz-Algorithm")
  valid_606770 = validateParameter(valid_606770, JString, required = false,
                                 default = nil)
  if valid_606770 != nil:
    section.add "X-Amz-Algorithm", valid_606770
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: JString
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  section = newJObject()
  var valid_606771 = formData.getOrDefault("Port")
  valid_606771 = validateParameter(valid_606771, JInt, required = false, default = nil)
  if valid_606771 != nil:
    section.add "Port", valid_606771
  var valid_606772 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_606772 = validateParameter(valid_606772, JString, required = false,
                                 default = nil)
  if valid_606772 != nil:
    section.add "GlobalClusterIdentifier", valid_606772
  var valid_606773 = formData.getOrDefault("MasterUsername")
  valid_606773 = validateParameter(valid_606773, JString, required = false,
                                 default = nil)
  if valid_606773 != nil:
    section.add "MasterUsername", valid_606773
  var valid_606774 = formData.getOrDefault("DatabaseName")
  valid_606774 = validateParameter(valid_606774, JString, required = false,
                                 default = nil)
  if valid_606774 != nil:
    section.add "DatabaseName", valid_606774
  var valid_606775 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_606775 = validateParameter(valid_606775, JArray, required = false,
                                 default = nil)
  if valid_606775 != nil:
    section.add "VpcSecurityGroupIds", valid_606775
  var valid_606776 = formData.getOrDefault("AvailabilityZones")
  valid_606776 = validateParameter(valid_606776, JArray, required = false,
                                 default = nil)
  if valid_606776 != nil:
    section.add "AvailabilityZones", valid_606776
  var valid_606777 = formData.getOrDefault("EngineMode")
  valid_606777 = validateParameter(valid_606777, JString, required = false,
                                 default = nil)
  if valid_606777 != nil:
    section.add "EngineMode", valid_606777
  var valid_606778 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_606778 = validateParameter(valid_606778, JArray, required = false,
                                 default = nil)
  if valid_606778 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606778
  var valid_606779 = formData.getOrDefault("DBSubnetGroupName")
  valid_606779 = validateParameter(valid_606779, JString, required = false,
                                 default = nil)
  if valid_606779 != nil:
    section.add "DBSubnetGroupName", valid_606779
  var valid_606780 = formData.getOrDefault("CharacterSetName")
  valid_606780 = validateParameter(valid_606780, JString, required = false,
                                 default = nil)
  if valid_606780 != nil:
    section.add "CharacterSetName", valid_606780
  var valid_606781 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606781 = validateParameter(valid_606781, JString, required = false,
                                 default = nil)
  if valid_606781 != nil:
    section.add "DBClusterParameterGroupName", valid_606781
  var valid_606782 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_606782 = validateParameter(valid_606782, JBool, required = false, default = nil)
  if valid_606782 != nil:
    section.add "CopyTagsToSnapshot", valid_606782
  var valid_606783 = formData.getOrDefault("DeletionProtection")
  valid_606783 = validateParameter(valid_606783, JBool, required = false, default = nil)
  if valid_606783 != nil:
    section.add "DeletionProtection", valid_606783
  var valid_606784 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_606784 = validateParameter(valid_606784, JString, required = false,
                                 default = nil)
  if valid_606784 != nil:
    section.add "PreferredMaintenanceWindow", valid_606784
  var valid_606785 = formData.getOrDefault("PreferredBackupWindow")
  valid_606785 = validateParameter(valid_606785, JString, required = false,
                                 default = nil)
  if valid_606785 != nil:
    section.add "PreferredBackupWindow", valid_606785
  var valid_606786 = formData.getOrDefault("MasterUserPassword")
  valid_606786 = validateParameter(valid_606786, JString, required = false,
                                 default = nil)
  if valid_606786 != nil:
    section.add "MasterUserPassword", valid_606786
  var valid_606787 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_606787 = validateParameter(valid_606787, JString, required = false,
                                 default = nil)
  if valid_606787 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_606787
  var valid_606788 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_606788 = validateParameter(valid_606788, JString, required = false,
                                 default = nil)
  if valid_606788 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_606788
  var valid_606789 = formData.getOrDefault("SourceRegion")
  valid_606789 = validateParameter(valid_606789, JString, required = false,
                                 default = nil)
  if valid_606789 != nil:
    section.add "SourceRegion", valid_606789
  var valid_606790 = formData.getOrDefault("EngineVersion")
  valid_606790 = validateParameter(valid_606790, JString, required = false,
                                 default = nil)
  if valid_606790 != nil:
    section.add "EngineVersion", valid_606790
  var valid_606791 = formData.getOrDefault("BacktrackWindow")
  valid_606791 = validateParameter(valid_606791, JInt, required = false, default = nil)
  if valid_606791 != nil:
    section.add "BacktrackWindow", valid_606791
  var valid_606792 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606792 = validateParameter(valid_606792, JBool, required = false, default = nil)
  if valid_606792 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606792
  var valid_606793 = formData.getOrDefault("BackupRetentionPeriod")
  valid_606793 = validateParameter(valid_606793, JInt, required = false, default = nil)
  if valid_606793 != nil:
    section.add "BackupRetentionPeriod", valid_606793
  var valid_606794 = formData.getOrDefault("KmsKeyId")
  valid_606794 = validateParameter(valid_606794, JString, required = false,
                                 default = nil)
  if valid_606794 != nil:
    section.add "KmsKeyId", valid_606794
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_606795 = formData.getOrDefault("Engine")
  valid_606795 = validateParameter(valid_606795, JString, required = true,
                                 default = nil)
  if valid_606795 != nil:
    section.add "Engine", valid_606795
  var valid_606796 = formData.getOrDefault("PreSignedUrl")
  valid_606796 = validateParameter(valid_606796, JString, required = false,
                                 default = nil)
  if valid_606796 != nil:
    section.add "PreSignedUrl", valid_606796
  var valid_606797 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_606797 = validateParameter(valid_606797, JString, required = false,
                                 default = nil)
  if valid_606797 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_606797
  var valid_606798 = formData.getOrDefault("Tags")
  valid_606798 = validateParameter(valid_606798, JArray, required = false,
                                 default = nil)
  if valid_606798 != nil:
    section.add "Tags", valid_606798
  var valid_606799 = formData.getOrDefault("EnableHttpEndpoint")
  valid_606799 = validateParameter(valid_606799, JBool, required = false, default = nil)
  if valid_606799 != nil:
    section.add "EnableHttpEndpoint", valid_606799
  var valid_606800 = formData.getOrDefault("OptionGroupName")
  valid_606800 = validateParameter(valid_606800, JString, required = false,
                                 default = nil)
  if valid_606800 != nil:
    section.add "OptionGroupName", valid_606800
  var valid_606801 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_606801 = validateParameter(valid_606801, JString, required = false,
                                 default = nil)
  if valid_606801 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_606801
  var valid_606802 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_606802 = validateParameter(valid_606802, JString, required = false,
                                 default = nil)
  if valid_606802 != nil:
    section.add "ReplicationSourceIdentifier", valid_606802
  var valid_606803 = formData.getOrDefault("StorageEncrypted")
  valid_606803 = validateParameter(valid_606803, JBool, required = false, default = nil)
  if valid_606803 != nil:
    section.add "StorageEncrypted", valid_606803
  var valid_606804 = formData.getOrDefault("DBClusterIdentifier")
  valid_606804 = validateParameter(valid_606804, JString, required = true,
                                 default = nil)
  if valid_606804 != nil:
    section.add "DBClusterIdentifier", valid_606804
  var valid_606805 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_606805 = validateParameter(valid_606805, JString, required = false,
                                 default = nil)
  if valid_606805 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_606805
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606806: Call_PostCreateDBCluster_606759; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606806.validator(path, query, header, formData, body)
  let scheme = call_606806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606806.url(scheme.get, call_606806.host, call_606806.base,
                         call_606806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606806, url, valid)

proc call*(call_606807: Call_PostCreateDBCluster_606759; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          GlobalClusterIdentifier: string = ""; MasterUsername: string = "";
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; EngineMode: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBCluster"; DBSubnetGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = ""; SourceRegion: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          PreSignedUrl: string = ""; ScalingConfigurationMaxCapacity: string = "";
          Tags: JsonNode = nil; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          ReplicationSourceIdentifier: string = ""; Version: string = "2014-10-31";
          StorageEncrypted: bool = false; ScalingConfigurationAutoPause: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: string
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  var query_606808 = newJObject()
  var formData_606809 = newJObject()
  add(formData_606809, "Port", newJInt(Port))
  add(formData_606809, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_606809, "MasterUsername", newJString(MasterUsername))
  add(formData_606809, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_606809.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if AvailabilityZones != nil:
    formData_606809.add "AvailabilityZones", AvailabilityZones
  add(formData_606809, "EngineMode", newJString(EngineMode))
  if EnableCloudwatchLogsExports != nil:
    formData_606809.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606808, "Action", newJString(Action))
  add(formData_606809, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_606809, "CharacterSetName", newJString(CharacterSetName))
  add(formData_606809, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_606809, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_606809, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_606809, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_606809, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_606809, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_606809, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_606809, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_606809, "SourceRegion", newJString(SourceRegion))
  add(formData_606809, "EngineVersion", newJString(EngineVersion))
  add(formData_606809, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_606809, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_606809, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_606809, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606809, "Engine", newJString(Engine))
  add(formData_606809, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_606809, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  if Tags != nil:
    formData_606809.add "Tags", Tags
  add(formData_606809, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_606809, "OptionGroupName", newJString(OptionGroupName))
  add(formData_606809, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_606809, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_606808, "Version", newJString(Version))
  add(formData_606809, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_606809, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_606809, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  result = call_606807.call(nil, query_606808, nil, formData_606809, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_606759(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_606760, base: "/",
    url: url_PostCreateDBCluster_606761, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_606691 = ref object of OpenApiRestCall_605589
proc url_GetCreateDBCluster_606693(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBCluster_606692(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: JString
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_606712 = query.getOrDefault("GlobalClusterIdentifier")
  valid_606712 = validateParameter(valid_606712, JString, required = false,
                                 default = nil)
  if valid_606712 != nil:
    section.add "GlobalClusterIdentifier", valid_606712
  var valid_606713 = query.getOrDefault("DatabaseName")
  valid_606713 = validateParameter(valid_606713, JString, required = false,
                                 default = nil)
  if valid_606713 != nil:
    section.add "DatabaseName", valid_606713
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_606714 = query.getOrDefault("Engine")
  valid_606714 = validateParameter(valid_606714, JString, required = true,
                                 default = nil)
  if valid_606714 != nil:
    section.add "Engine", valid_606714
  var valid_606715 = query.getOrDefault("CopyTagsToSnapshot")
  valid_606715 = validateParameter(valid_606715, JBool, required = false, default = nil)
  if valid_606715 != nil:
    section.add "CopyTagsToSnapshot", valid_606715
  var valid_606716 = query.getOrDefault("EnableHttpEndpoint")
  valid_606716 = validateParameter(valid_606716, JBool, required = false, default = nil)
  if valid_606716 != nil:
    section.add "EnableHttpEndpoint", valid_606716
  var valid_606717 = query.getOrDefault("KmsKeyId")
  valid_606717 = validateParameter(valid_606717, JString, required = false,
                                 default = nil)
  if valid_606717 != nil:
    section.add "KmsKeyId", valid_606717
  var valid_606718 = query.getOrDefault("PreSignedUrl")
  valid_606718 = validateParameter(valid_606718, JString, required = false,
                                 default = nil)
  if valid_606718 != nil:
    section.add "PreSignedUrl", valid_606718
  var valid_606719 = query.getOrDefault("EngineMode")
  valid_606719 = validateParameter(valid_606719, JString, required = false,
                                 default = nil)
  if valid_606719 != nil:
    section.add "EngineMode", valid_606719
  var valid_606720 = query.getOrDefault("MasterUsername")
  valid_606720 = validateParameter(valid_606720, JString, required = false,
                                 default = nil)
  if valid_606720 != nil:
    section.add "MasterUsername", valid_606720
  var valid_606721 = query.getOrDefault("BackupRetentionPeriod")
  valid_606721 = validateParameter(valid_606721, JInt, required = false, default = nil)
  if valid_606721 != nil:
    section.add "BackupRetentionPeriod", valid_606721
  var valid_606722 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_606722 = validateParameter(valid_606722, JString, required = false,
                                 default = nil)
  if valid_606722 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_606722
  var valid_606723 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_606723 = validateParameter(valid_606723, JArray, required = false,
                                 default = nil)
  if valid_606723 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606723
  var valid_606724 = query.getOrDefault("EngineVersion")
  valid_606724 = validateParameter(valid_606724, JString, required = false,
                                 default = nil)
  if valid_606724 != nil:
    section.add "EngineVersion", valid_606724
  var valid_606725 = query.getOrDefault("Action")
  valid_606725 = validateParameter(valid_606725, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_606725 != nil:
    section.add "Action", valid_606725
  var valid_606726 = query.getOrDefault("VpcSecurityGroupIds")
  valid_606726 = validateParameter(valid_606726, JArray, required = false,
                                 default = nil)
  if valid_606726 != nil:
    section.add "VpcSecurityGroupIds", valid_606726
  var valid_606727 = query.getOrDefault("StorageEncrypted")
  valid_606727 = validateParameter(valid_606727, JBool, required = false, default = nil)
  if valid_606727 != nil:
    section.add "StorageEncrypted", valid_606727
  var valid_606728 = query.getOrDefault("DeletionProtection")
  valid_606728 = validateParameter(valid_606728, JBool, required = false, default = nil)
  if valid_606728 != nil:
    section.add "DeletionProtection", valid_606728
  var valid_606729 = query.getOrDefault("CharacterSetName")
  valid_606729 = validateParameter(valid_606729, JString, required = false,
                                 default = nil)
  if valid_606729 != nil:
    section.add "CharacterSetName", valid_606729
  var valid_606730 = query.getOrDefault("Tags")
  valid_606730 = validateParameter(valid_606730, JArray, required = false,
                                 default = nil)
  if valid_606730 != nil:
    section.add "Tags", valid_606730
  var valid_606731 = query.getOrDefault("DBClusterIdentifier")
  valid_606731 = validateParameter(valid_606731, JString, required = true,
                                 default = nil)
  if valid_606731 != nil:
    section.add "DBClusterIdentifier", valid_606731
  var valid_606732 = query.getOrDefault("BacktrackWindow")
  valid_606732 = validateParameter(valid_606732, JInt, required = false, default = nil)
  if valid_606732 != nil:
    section.add "BacktrackWindow", valid_606732
  var valid_606733 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606733 = validateParameter(valid_606733, JString, required = false,
                                 default = nil)
  if valid_606733 != nil:
    section.add "DBClusterParameterGroupName", valid_606733
  var valid_606734 = query.getOrDefault("AvailabilityZones")
  valid_606734 = validateParameter(valid_606734, JArray, required = false,
                                 default = nil)
  if valid_606734 != nil:
    section.add "AvailabilityZones", valid_606734
  var valid_606735 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_606735 = validateParameter(valid_606735, JString, required = false,
                                 default = nil)
  if valid_606735 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_606735
  var valid_606736 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_606736 = validateParameter(valid_606736, JString, required = false,
                                 default = nil)
  if valid_606736 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_606736
  var valid_606737 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606737 = validateParameter(valid_606737, JBool, required = false, default = nil)
  if valid_606737 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606737
  var valid_606738 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_606738 = validateParameter(valid_606738, JString, required = false,
                                 default = nil)
  if valid_606738 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_606738
  var valid_606739 = query.getOrDefault("SourceRegion")
  valid_606739 = validateParameter(valid_606739, JString, required = false,
                                 default = nil)
  if valid_606739 != nil:
    section.add "SourceRegion", valid_606739
  var valid_606740 = query.getOrDefault("Port")
  valid_606740 = validateParameter(valid_606740, JInt, required = false, default = nil)
  if valid_606740 != nil:
    section.add "Port", valid_606740
  var valid_606741 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_606741 = validateParameter(valid_606741, JString, required = false,
                                 default = nil)
  if valid_606741 != nil:
    section.add "ReplicationSourceIdentifier", valid_606741
  var valid_606742 = query.getOrDefault("MasterUserPassword")
  valid_606742 = validateParameter(valid_606742, JString, required = false,
                                 default = nil)
  if valid_606742 != nil:
    section.add "MasterUserPassword", valid_606742
  var valid_606743 = query.getOrDefault("OptionGroupName")
  valid_606743 = validateParameter(valid_606743, JString, required = false,
                                 default = nil)
  if valid_606743 != nil:
    section.add "OptionGroupName", valid_606743
  var valid_606744 = query.getOrDefault("DBSubnetGroupName")
  valid_606744 = validateParameter(valid_606744, JString, required = false,
                                 default = nil)
  if valid_606744 != nil:
    section.add "DBSubnetGroupName", valid_606744
  var valid_606745 = query.getOrDefault("PreferredBackupWindow")
  valid_606745 = validateParameter(valid_606745, JString, required = false,
                                 default = nil)
  if valid_606745 != nil:
    section.add "PreferredBackupWindow", valid_606745
  var valid_606746 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_606746 = validateParameter(valid_606746, JString, required = false,
                                 default = nil)
  if valid_606746 != nil:
    section.add "PreferredMaintenanceWindow", valid_606746
  var valid_606747 = query.getOrDefault("Version")
  valid_606747 = validateParameter(valid_606747, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606747 != nil:
    section.add "Version", valid_606747
  var valid_606748 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_606748 = validateParameter(valid_606748, JString, required = false,
                                 default = nil)
  if valid_606748 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_606748
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_606749 = header.getOrDefault("X-Amz-Security-Token")
  valid_606749 = validateParameter(valid_606749, JString, required = false,
                                 default = nil)
  if valid_606749 != nil:
    section.add "X-Amz-Security-Token", valid_606749
  var valid_606750 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606750 = validateParameter(valid_606750, JString, required = false,
                                 default = nil)
  if valid_606750 != nil:
    section.add "X-Amz-SignedHeaders", valid_606750
  var valid_606751 = header.getOrDefault("X-Amz-Signature")
  valid_606751 = validateParameter(valid_606751, JString, required = false,
                                 default = nil)
  if valid_606751 != nil:
    section.add "X-Amz-Signature", valid_606751
  var valid_606752 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606752 = validateParameter(valid_606752, JString, required = false,
                                 default = nil)
  if valid_606752 != nil:
    section.add "X-Amz-Content-Sha256", valid_606752
  var valid_606753 = header.getOrDefault("X-Amz-Date")
  valid_606753 = validateParameter(valid_606753, JString, required = false,
                                 default = nil)
  if valid_606753 != nil:
    section.add "X-Amz-Date", valid_606753
  var valid_606754 = header.getOrDefault("X-Amz-Credential")
  valid_606754 = validateParameter(valid_606754, JString, required = false,
                                 default = nil)
  if valid_606754 != nil:
    section.add "X-Amz-Credential", valid_606754
  var valid_606755 = header.getOrDefault("X-Amz-Algorithm")
  valid_606755 = validateParameter(valid_606755, JString, required = false,
                                 default = nil)
  if valid_606755 != nil:
    section.add "X-Amz-Algorithm", valid_606755
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606756: Call_GetCreateDBCluster_606691; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606756.validator(path, query, header, formData, body)
  let scheme = call_606756.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606756.url(scheme.get, call_606756.host, call_606756.base,
                         call_606756.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606756, url, valid)

proc call*(call_606757: Call_GetCreateDBCluster_606691; Engine: string;
          DBClusterIdentifier: string; GlobalClusterIdentifier: string = "";
          DatabaseName: string = ""; CopyTagsToSnapshot: bool = false;
          EnableHttpEndpoint: bool = false; KmsKeyId: string = "";
          PreSignedUrl: string = ""; EngineMode: string = "";
          MasterUsername: string = ""; BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBCluster"; VpcSecurityGroupIds: JsonNode = nil;
          StorageEncrypted: bool = false; DeletionProtection: bool = false;
          CharacterSetName: string = ""; Tags: JsonNode = nil; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          SourceRegion: string = ""; Port: int = 0;
          ReplicationSourceIdentifier: string = ""; MasterUserPassword: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: string
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_606758 = newJObject()
  add(query_606758, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_606758, "DatabaseName", newJString(DatabaseName))
  add(query_606758, "Engine", newJString(Engine))
  add(query_606758, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_606758, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_606758, "KmsKeyId", newJString(KmsKeyId))
  add(query_606758, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_606758, "EngineMode", newJString(EngineMode))
  add(query_606758, "MasterUsername", newJString(MasterUsername))
  add(query_606758, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_606758, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  if EnableCloudwatchLogsExports != nil:
    query_606758.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606758, "EngineVersion", newJString(EngineVersion))
  add(query_606758, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_606758.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_606758, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_606758, "DeletionProtection", newJBool(DeletionProtection))
  add(query_606758, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_606758.add "Tags", Tags
  add(query_606758, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606758, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_606758, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_606758.add "AvailabilityZones", AvailabilityZones
  add(query_606758, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_606758, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_606758, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_606758, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_606758, "SourceRegion", newJString(SourceRegion))
  add(query_606758, "Port", newJInt(Port))
  add(query_606758, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_606758, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_606758, "OptionGroupName", newJString(OptionGroupName))
  add(query_606758, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606758, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_606758, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_606758, "Version", newJString(Version))
  add(query_606758, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_606757.call(nil, query_606758, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_606691(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_606692,
    base: "/", url: url_GetCreateDBCluster_606693,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterEndpoint_606831 = ref object of OpenApiRestCall_605589
proc url_PostCreateDBClusterEndpoint_606833(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterEndpoint_606832(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606834 = query.getOrDefault("Action")
  valid_606834 = validateParameter(valid_606834, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_606834 != nil:
    section.add "Action", valid_606834
  var valid_606835 = query.getOrDefault("Version")
  valid_606835 = validateParameter(valid_606835, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606835 != nil:
    section.add "Version", valid_606835
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606836 = header.getOrDefault("X-Amz-Signature")
  valid_606836 = validateParameter(valid_606836, JString, required = false,
                                 default = nil)
  if valid_606836 != nil:
    section.add "X-Amz-Signature", valid_606836
  var valid_606837 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606837 = validateParameter(valid_606837, JString, required = false,
                                 default = nil)
  if valid_606837 != nil:
    section.add "X-Amz-Content-Sha256", valid_606837
  var valid_606838 = header.getOrDefault("X-Amz-Date")
  valid_606838 = validateParameter(valid_606838, JString, required = false,
                                 default = nil)
  if valid_606838 != nil:
    section.add "X-Amz-Date", valid_606838
  var valid_606839 = header.getOrDefault("X-Amz-Credential")
  valid_606839 = validateParameter(valid_606839, JString, required = false,
                                 default = nil)
  if valid_606839 != nil:
    section.add "X-Amz-Credential", valid_606839
  var valid_606840 = header.getOrDefault("X-Amz-Security-Token")
  valid_606840 = validateParameter(valid_606840, JString, required = false,
                                 default = nil)
  if valid_606840 != nil:
    section.add "X-Amz-Security-Token", valid_606840
  var valid_606841 = header.getOrDefault("X-Amz-Algorithm")
  valid_606841 = validateParameter(valid_606841, JString, required = false,
                                 default = nil)
  if valid_606841 != nil:
    section.add "X-Amz-Algorithm", valid_606841
  var valid_606842 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606842 = validateParameter(valid_606842, JString, required = false,
                                 default = nil)
  if valid_606842 != nil:
    section.add "X-Amz-SignedHeaders", valid_606842
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_606843 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_606843 = validateParameter(valid_606843, JString, required = true,
                                 default = nil)
  if valid_606843 != nil:
    section.add "DBClusterEndpointIdentifier", valid_606843
  var valid_606844 = formData.getOrDefault("StaticMembers")
  valid_606844 = validateParameter(valid_606844, JArray, required = false,
                                 default = nil)
  if valid_606844 != nil:
    section.add "StaticMembers", valid_606844
  var valid_606845 = formData.getOrDefault("EndpointType")
  valid_606845 = validateParameter(valid_606845, JString, required = true,
                                 default = nil)
  if valid_606845 != nil:
    section.add "EndpointType", valid_606845
  var valid_606846 = formData.getOrDefault("ExcludedMembers")
  valid_606846 = validateParameter(valid_606846, JArray, required = false,
                                 default = nil)
  if valid_606846 != nil:
    section.add "ExcludedMembers", valid_606846
  var valid_606847 = formData.getOrDefault("Tags")
  valid_606847 = validateParameter(valid_606847, JArray, required = false,
                                 default = nil)
  if valid_606847 != nil:
    section.add "Tags", valid_606847
  var valid_606848 = formData.getOrDefault("DBClusterIdentifier")
  valid_606848 = validateParameter(valid_606848, JString, required = true,
                                 default = nil)
  if valid_606848 != nil:
    section.add "DBClusterIdentifier", valid_606848
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606849: Call_PostCreateDBClusterEndpoint_606831; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606849.validator(path, query, header, formData, body)
  let scheme = call_606849.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606849.url(scheme.get, call_606849.host, call_606849.base,
                         call_606849.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606849, url, valid)

proc call*(call_606850: Call_PostCreateDBClusterEndpoint_606831;
          DBClusterEndpointIdentifier: string; EndpointType: string;
          DBClusterIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "CreateDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_606851 = newJObject()
  var formData_606852 = newJObject()
  add(formData_606852, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_606852.add "StaticMembers", StaticMembers
  add(query_606851, "Action", newJString(Action))
  add(formData_606852, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_606852.add "ExcludedMembers", ExcludedMembers
  if Tags != nil:
    formData_606852.add "Tags", Tags
  add(query_606851, "Version", newJString(Version))
  add(formData_606852, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606850.call(nil, query_606851, nil, formData_606852, nil)

var postCreateDBClusterEndpoint* = Call_PostCreateDBClusterEndpoint_606831(
    name: "postCreateDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_PostCreateDBClusterEndpoint_606832, base: "/",
    url: url_PostCreateDBClusterEndpoint_606833,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterEndpoint_606810 = ref object of OpenApiRestCall_605589
proc url_GetCreateDBClusterEndpoint_606812(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterEndpoint_606811(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606813 = query.getOrDefault("ExcludedMembers")
  valid_606813 = validateParameter(valid_606813, JArray, required = false,
                                 default = nil)
  if valid_606813 != nil:
    section.add "ExcludedMembers", valid_606813
  var valid_606814 = query.getOrDefault("Tags")
  valid_606814 = validateParameter(valid_606814, JArray, required = false,
                                 default = nil)
  if valid_606814 != nil:
    section.add "Tags", valid_606814
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606815 = query.getOrDefault("DBClusterIdentifier")
  valid_606815 = validateParameter(valid_606815, JString, required = true,
                                 default = nil)
  if valid_606815 != nil:
    section.add "DBClusterIdentifier", valid_606815
  var valid_606816 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_606816 = validateParameter(valid_606816, JString, required = true,
                                 default = nil)
  if valid_606816 != nil:
    section.add "DBClusterEndpointIdentifier", valid_606816
  var valid_606817 = query.getOrDefault("StaticMembers")
  valid_606817 = validateParameter(valid_606817, JArray, required = false,
                                 default = nil)
  if valid_606817 != nil:
    section.add "StaticMembers", valid_606817
  var valid_606818 = query.getOrDefault("EndpointType")
  valid_606818 = validateParameter(valid_606818, JString, required = true,
                                 default = nil)
  if valid_606818 != nil:
    section.add "EndpointType", valid_606818
  var valid_606819 = query.getOrDefault("Action")
  valid_606819 = validateParameter(valid_606819, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_606819 != nil:
    section.add "Action", valid_606819
  var valid_606820 = query.getOrDefault("Version")
  valid_606820 = validateParameter(valid_606820, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606820 != nil:
    section.add "Version", valid_606820
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606821 = header.getOrDefault("X-Amz-Signature")
  valid_606821 = validateParameter(valid_606821, JString, required = false,
                                 default = nil)
  if valid_606821 != nil:
    section.add "X-Amz-Signature", valid_606821
  var valid_606822 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606822 = validateParameter(valid_606822, JString, required = false,
                                 default = nil)
  if valid_606822 != nil:
    section.add "X-Amz-Content-Sha256", valid_606822
  var valid_606823 = header.getOrDefault("X-Amz-Date")
  valid_606823 = validateParameter(valid_606823, JString, required = false,
                                 default = nil)
  if valid_606823 != nil:
    section.add "X-Amz-Date", valid_606823
  var valid_606824 = header.getOrDefault("X-Amz-Credential")
  valid_606824 = validateParameter(valid_606824, JString, required = false,
                                 default = nil)
  if valid_606824 != nil:
    section.add "X-Amz-Credential", valid_606824
  var valid_606825 = header.getOrDefault("X-Amz-Security-Token")
  valid_606825 = validateParameter(valid_606825, JString, required = false,
                                 default = nil)
  if valid_606825 != nil:
    section.add "X-Amz-Security-Token", valid_606825
  var valid_606826 = header.getOrDefault("X-Amz-Algorithm")
  valid_606826 = validateParameter(valid_606826, JString, required = false,
                                 default = nil)
  if valid_606826 != nil:
    section.add "X-Amz-Algorithm", valid_606826
  var valid_606827 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606827 = validateParameter(valid_606827, JString, required = false,
                                 default = nil)
  if valid_606827 != nil:
    section.add "X-Amz-SignedHeaders", valid_606827
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606828: Call_GetCreateDBClusterEndpoint_606810; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606828.validator(path, query, header, formData, body)
  let scheme = call_606828.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606828.url(scheme.get, call_606828.host, call_606828.base,
                         call_606828.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606828, url, valid)

proc call*(call_606829: Call_GetCreateDBClusterEndpoint_606810;
          DBClusterIdentifier: string; DBClusterEndpointIdentifier: string;
          EndpointType: string; ExcludedMembers: JsonNode = nil; Tags: JsonNode = nil;
          StaticMembers: JsonNode = nil; Action: string = "CreateDBClusterEndpoint";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606830 = newJObject()
  if ExcludedMembers != nil:
    query_606830.add "ExcludedMembers", ExcludedMembers
  if Tags != nil:
    query_606830.add "Tags", Tags
  add(query_606830, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606830, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_606830.add "StaticMembers", StaticMembers
  add(query_606830, "EndpointType", newJString(EndpointType))
  add(query_606830, "Action", newJString(Action))
  add(query_606830, "Version", newJString(Version))
  result = call_606829.call(nil, query_606830, nil, nil, nil)

var getCreateDBClusterEndpoint* = Call_GetCreateDBClusterEndpoint_606810(
    name: "getCreateDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_GetCreateDBClusterEndpoint_606811, base: "/",
    url: url_GetCreateDBClusterEndpoint_606812,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_606872 = ref object of OpenApiRestCall_605589
proc url_PostCreateDBClusterParameterGroup_606874(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_606873(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606875 = query.getOrDefault("Action")
  valid_606875 = validateParameter(valid_606875, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_606875 != nil:
    section.add "Action", valid_606875
  var valid_606876 = query.getOrDefault("Version")
  valid_606876 = validateParameter(valid_606876, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606876 != nil:
    section.add "Version", valid_606876
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606877 = header.getOrDefault("X-Amz-Signature")
  valid_606877 = validateParameter(valid_606877, JString, required = false,
                                 default = nil)
  if valid_606877 != nil:
    section.add "X-Amz-Signature", valid_606877
  var valid_606878 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606878 = validateParameter(valid_606878, JString, required = false,
                                 default = nil)
  if valid_606878 != nil:
    section.add "X-Amz-Content-Sha256", valid_606878
  var valid_606879 = header.getOrDefault("X-Amz-Date")
  valid_606879 = validateParameter(valid_606879, JString, required = false,
                                 default = nil)
  if valid_606879 != nil:
    section.add "X-Amz-Date", valid_606879
  var valid_606880 = header.getOrDefault("X-Amz-Credential")
  valid_606880 = validateParameter(valid_606880, JString, required = false,
                                 default = nil)
  if valid_606880 != nil:
    section.add "X-Amz-Credential", valid_606880
  var valid_606881 = header.getOrDefault("X-Amz-Security-Token")
  valid_606881 = validateParameter(valid_606881, JString, required = false,
                                 default = nil)
  if valid_606881 != nil:
    section.add "X-Amz-Security-Token", valid_606881
  var valid_606882 = header.getOrDefault("X-Amz-Algorithm")
  valid_606882 = validateParameter(valid_606882, JString, required = false,
                                 default = nil)
  if valid_606882 != nil:
    section.add "X-Amz-Algorithm", valid_606882
  var valid_606883 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606883 = validateParameter(valid_606883, JString, required = false,
                                 default = nil)
  if valid_606883 != nil:
    section.add "X-Amz-SignedHeaders", valid_606883
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_606884 = formData.getOrDefault("Description")
  valid_606884 = validateParameter(valid_606884, JString, required = true,
                                 default = nil)
  if valid_606884 != nil:
    section.add "Description", valid_606884
  var valid_606885 = formData.getOrDefault("Tags")
  valid_606885 = validateParameter(valid_606885, JArray, required = false,
                                 default = nil)
  if valid_606885 != nil:
    section.add "Tags", valid_606885
  var valid_606886 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606886 = validateParameter(valid_606886, JString, required = true,
                                 default = nil)
  if valid_606886 != nil:
    section.add "DBClusterParameterGroupName", valid_606886
  var valid_606887 = formData.getOrDefault("DBParameterGroupFamily")
  valid_606887 = validateParameter(valid_606887, JString, required = true,
                                 default = nil)
  if valid_606887 != nil:
    section.add "DBParameterGroupFamily", valid_606887
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606888: Call_PostCreateDBClusterParameterGroup_606872;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606888.validator(path, query, header, formData, body)
  let scheme = call_606888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606888.url(scheme.get, call_606888.host, call_606888.base,
                         call_606888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606888, url, valid)

proc call*(call_606889: Call_PostCreateDBClusterParameterGroup_606872;
          Description: string; DBClusterParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  var query_606890 = newJObject()
  var formData_606891 = newJObject()
  add(formData_606891, "Description", newJString(Description))
  add(query_606890, "Action", newJString(Action))
  if Tags != nil:
    formData_606891.add "Tags", Tags
  add(formData_606891, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606890, "Version", newJString(Version))
  add(formData_606891, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_606889.call(nil, query_606890, nil, formData_606891, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_606872(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_606873, base: "/",
    url: url_PostCreateDBClusterParameterGroup_606874,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_606853 = ref object of OpenApiRestCall_605589
proc url_GetCreateDBClusterParameterGroup_606855(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_606854(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_606856 = query.getOrDefault("DBParameterGroupFamily")
  valid_606856 = validateParameter(valid_606856, JString, required = true,
                                 default = nil)
  if valid_606856 != nil:
    section.add "DBParameterGroupFamily", valid_606856
  var valid_606857 = query.getOrDefault("Tags")
  valid_606857 = validateParameter(valid_606857, JArray, required = false,
                                 default = nil)
  if valid_606857 != nil:
    section.add "Tags", valid_606857
  var valid_606858 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606858 = validateParameter(valid_606858, JString, required = true,
                                 default = nil)
  if valid_606858 != nil:
    section.add "DBClusterParameterGroupName", valid_606858
  var valid_606859 = query.getOrDefault("Action")
  valid_606859 = validateParameter(valid_606859, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_606859 != nil:
    section.add "Action", valid_606859
  var valid_606860 = query.getOrDefault("Description")
  valid_606860 = validateParameter(valid_606860, JString, required = true,
                                 default = nil)
  if valid_606860 != nil:
    section.add "Description", valid_606860
  var valid_606861 = query.getOrDefault("Version")
  valid_606861 = validateParameter(valid_606861, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606861 != nil:
    section.add "Version", valid_606861
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606862 = header.getOrDefault("X-Amz-Signature")
  valid_606862 = validateParameter(valid_606862, JString, required = false,
                                 default = nil)
  if valid_606862 != nil:
    section.add "X-Amz-Signature", valid_606862
  var valid_606863 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606863 = validateParameter(valid_606863, JString, required = false,
                                 default = nil)
  if valid_606863 != nil:
    section.add "X-Amz-Content-Sha256", valid_606863
  var valid_606864 = header.getOrDefault("X-Amz-Date")
  valid_606864 = validateParameter(valid_606864, JString, required = false,
                                 default = nil)
  if valid_606864 != nil:
    section.add "X-Amz-Date", valid_606864
  var valid_606865 = header.getOrDefault("X-Amz-Credential")
  valid_606865 = validateParameter(valid_606865, JString, required = false,
                                 default = nil)
  if valid_606865 != nil:
    section.add "X-Amz-Credential", valid_606865
  var valid_606866 = header.getOrDefault("X-Amz-Security-Token")
  valid_606866 = validateParameter(valid_606866, JString, required = false,
                                 default = nil)
  if valid_606866 != nil:
    section.add "X-Amz-Security-Token", valid_606866
  var valid_606867 = header.getOrDefault("X-Amz-Algorithm")
  valid_606867 = validateParameter(valid_606867, JString, required = false,
                                 default = nil)
  if valid_606867 != nil:
    section.add "X-Amz-Algorithm", valid_606867
  var valid_606868 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606868 = validateParameter(valid_606868, JString, required = false,
                                 default = nil)
  if valid_606868 != nil:
    section.add "X-Amz-SignedHeaders", valid_606868
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606869: Call_GetCreateDBClusterParameterGroup_606853;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606869.validator(path, query, header, formData, body)
  let scheme = call_606869.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606869.url(scheme.get, call_606869.host, call_606869.base,
                         call_606869.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606869, url, valid)

proc call*(call_606870: Call_GetCreateDBClusterParameterGroup_606853;
          DBParameterGroupFamily: string; DBClusterParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: string (required)
  var query_606871 = newJObject()
  add(query_606871, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_606871.add "Tags", Tags
  add(query_606871, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606871, "Action", newJString(Action))
  add(query_606871, "Description", newJString(Description))
  add(query_606871, "Version", newJString(Version))
  result = call_606870.call(nil, query_606871, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_606853(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_606854, base: "/",
    url: url_GetCreateDBClusterParameterGroup_606855,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_606910 = ref object of OpenApiRestCall_605589
proc url_PostCreateDBClusterSnapshot_606912(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterSnapshot_606911(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606913 = query.getOrDefault("Action")
  valid_606913 = validateParameter(valid_606913, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_606913 != nil:
    section.add "Action", valid_606913
  var valid_606914 = query.getOrDefault("Version")
  valid_606914 = validateParameter(valid_606914, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606914 != nil:
    section.add "Version", valid_606914
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606915 = header.getOrDefault("X-Amz-Signature")
  valid_606915 = validateParameter(valid_606915, JString, required = false,
                                 default = nil)
  if valid_606915 != nil:
    section.add "X-Amz-Signature", valid_606915
  var valid_606916 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606916 = validateParameter(valid_606916, JString, required = false,
                                 default = nil)
  if valid_606916 != nil:
    section.add "X-Amz-Content-Sha256", valid_606916
  var valid_606917 = header.getOrDefault("X-Amz-Date")
  valid_606917 = validateParameter(valid_606917, JString, required = false,
                                 default = nil)
  if valid_606917 != nil:
    section.add "X-Amz-Date", valid_606917
  var valid_606918 = header.getOrDefault("X-Amz-Credential")
  valid_606918 = validateParameter(valid_606918, JString, required = false,
                                 default = nil)
  if valid_606918 != nil:
    section.add "X-Amz-Credential", valid_606918
  var valid_606919 = header.getOrDefault("X-Amz-Security-Token")
  valid_606919 = validateParameter(valid_606919, JString, required = false,
                                 default = nil)
  if valid_606919 != nil:
    section.add "X-Amz-Security-Token", valid_606919
  var valid_606920 = header.getOrDefault("X-Amz-Algorithm")
  valid_606920 = validateParameter(valid_606920, JString, required = false,
                                 default = nil)
  if valid_606920 != nil:
    section.add "X-Amz-Algorithm", valid_606920
  var valid_606921 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606921 = validateParameter(valid_606921, JString, required = false,
                                 default = nil)
  if valid_606921 != nil:
    section.add "X-Amz-SignedHeaders", valid_606921
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_606922 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_606922 = validateParameter(valid_606922, JString, required = true,
                                 default = nil)
  if valid_606922 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_606922
  var valid_606923 = formData.getOrDefault("Tags")
  valid_606923 = validateParameter(valid_606923, JArray, required = false,
                                 default = nil)
  if valid_606923 != nil:
    section.add "Tags", valid_606923
  var valid_606924 = formData.getOrDefault("DBClusterIdentifier")
  valid_606924 = validateParameter(valid_606924, JString, required = true,
                                 default = nil)
  if valid_606924 != nil:
    section.add "DBClusterIdentifier", valid_606924
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606925: Call_PostCreateDBClusterSnapshot_606910; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606925.validator(path, query, header, formData, body)
  let scheme = call_606925.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606925.url(scheme.get, call_606925.host, call_606925.base,
                         call_606925.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606925, url, valid)

proc call*(call_606926: Call_PostCreateDBClusterSnapshot_606910;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Action: string = "CreateDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_606927 = newJObject()
  var formData_606928 = newJObject()
  add(formData_606928, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_606927, "Action", newJString(Action))
  if Tags != nil:
    formData_606928.add "Tags", Tags
  add(query_606927, "Version", newJString(Version))
  add(formData_606928, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606926.call(nil, query_606927, nil, formData_606928, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_606910(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_606911, base: "/",
    url: url_PostCreateDBClusterSnapshot_606912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_606892 = ref object of OpenApiRestCall_605589
proc url_GetCreateDBClusterSnapshot_606894(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterSnapshot_606893(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_606895 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_606895 = validateParameter(valid_606895, JString, required = true,
                                 default = nil)
  if valid_606895 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_606895
  var valid_606896 = query.getOrDefault("Tags")
  valid_606896 = validateParameter(valid_606896, JArray, required = false,
                                 default = nil)
  if valid_606896 != nil:
    section.add "Tags", valid_606896
  var valid_606897 = query.getOrDefault("DBClusterIdentifier")
  valid_606897 = validateParameter(valid_606897, JString, required = true,
                                 default = nil)
  if valid_606897 != nil:
    section.add "DBClusterIdentifier", valid_606897
  var valid_606898 = query.getOrDefault("Action")
  valid_606898 = validateParameter(valid_606898, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_606898 != nil:
    section.add "Action", valid_606898
  var valid_606899 = query.getOrDefault("Version")
  valid_606899 = validateParameter(valid_606899, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606899 != nil:
    section.add "Version", valid_606899
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606900 = header.getOrDefault("X-Amz-Signature")
  valid_606900 = validateParameter(valid_606900, JString, required = false,
                                 default = nil)
  if valid_606900 != nil:
    section.add "X-Amz-Signature", valid_606900
  var valid_606901 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606901 = validateParameter(valid_606901, JString, required = false,
                                 default = nil)
  if valid_606901 != nil:
    section.add "X-Amz-Content-Sha256", valid_606901
  var valid_606902 = header.getOrDefault("X-Amz-Date")
  valid_606902 = validateParameter(valid_606902, JString, required = false,
                                 default = nil)
  if valid_606902 != nil:
    section.add "X-Amz-Date", valid_606902
  var valid_606903 = header.getOrDefault("X-Amz-Credential")
  valid_606903 = validateParameter(valid_606903, JString, required = false,
                                 default = nil)
  if valid_606903 != nil:
    section.add "X-Amz-Credential", valid_606903
  var valid_606904 = header.getOrDefault("X-Amz-Security-Token")
  valid_606904 = validateParameter(valid_606904, JString, required = false,
                                 default = nil)
  if valid_606904 != nil:
    section.add "X-Amz-Security-Token", valid_606904
  var valid_606905 = header.getOrDefault("X-Amz-Algorithm")
  valid_606905 = validateParameter(valid_606905, JString, required = false,
                                 default = nil)
  if valid_606905 != nil:
    section.add "X-Amz-Algorithm", valid_606905
  var valid_606906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606906 = validateParameter(valid_606906, JString, required = false,
                                 default = nil)
  if valid_606906 != nil:
    section.add "X-Amz-SignedHeaders", valid_606906
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606907: Call_GetCreateDBClusterSnapshot_606892; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606907.validator(path, query, header, formData, body)
  let scheme = call_606907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606907.url(scheme.get, call_606907.host, call_606907.base,
                         call_606907.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606907, url, valid)

proc call*(call_606908: Call_GetCreateDBClusterSnapshot_606892;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606909 = newJObject()
  add(query_606909, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_606909.add "Tags", Tags
  add(query_606909, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606909, "Action", newJString(Action))
  add(query_606909, "Version", newJString(Version))
  result = call_606908.call(nil, query_606909, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_606892(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_606893, base: "/",
    url: url_GetCreateDBClusterSnapshot_606894,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_606990 = ref object of OpenApiRestCall_605589
proc url_PostCreateDBInstance_606992(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstance_606991(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606993 = query.getOrDefault("Action")
  valid_606993 = validateParameter(valid_606993, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_606993 != nil:
    section.add "Action", valid_606993
  var valid_606994 = query.getOrDefault("Version")
  valid_606994 = validateParameter(valid_606994, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606994 != nil:
    section.add "Version", valid_606994
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_606995 = header.getOrDefault("X-Amz-Security-Token")
  valid_606995 = validateParameter(valid_606995, JString, required = false,
                                 default = nil)
  if valid_606995 != nil:
    section.add "X-Amz-Security-Token", valid_606995
  var valid_606996 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606996 = validateParameter(valid_606996, JString, required = false,
                                 default = nil)
  if valid_606996 != nil:
    section.add "X-Amz-SignedHeaders", valid_606996
  var valid_606997 = header.getOrDefault("X-Amz-Signature")
  valid_606997 = validateParameter(valid_606997, JString, required = false,
                                 default = nil)
  if valid_606997 != nil:
    section.add "X-Amz-Signature", valid_606997
  var valid_606998 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606998 = validateParameter(valid_606998, JString, required = false,
                                 default = nil)
  if valid_606998 != nil:
    section.add "X-Amz-Content-Sha256", valid_606998
  var valid_606999 = header.getOrDefault("X-Amz-Date")
  valid_606999 = validateParameter(valid_606999, JString, required = false,
                                 default = nil)
  if valid_606999 != nil:
    section.add "X-Amz-Date", valid_606999
  var valid_607000 = header.getOrDefault("X-Amz-Credential")
  valid_607000 = validateParameter(valid_607000, JString, required = false,
                                 default = nil)
  if valid_607000 != nil:
    section.add "X-Amz-Credential", valid_607000
  var valid_607001 = header.getOrDefault("X-Amz-Algorithm")
  valid_607001 = validateParameter(valid_607001, JString, required = false,
                                 default = nil)
  if valid_607001 != nil:
    section.add "X-Amz-Algorithm", valid_607001
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  section = newJObject()
  var valid_607002 = formData.getOrDefault("PromotionTier")
  valid_607002 = validateParameter(valid_607002, JInt, required = false, default = nil)
  if valid_607002 != nil:
    section.add "PromotionTier", valid_607002
  var valid_607003 = formData.getOrDefault("Port")
  valid_607003 = validateParameter(valid_607003, JInt, required = false, default = nil)
  if valid_607003 != nil:
    section.add "Port", valid_607003
  var valid_607004 = formData.getOrDefault("MultiAZ")
  valid_607004 = validateParameter(valid_607004, JBool, required = false, default = nil)
  if valid_607004 != nil:
    section.add "MultiAZ", valid_607004
  var valid_607005 = formData.getOrDefault("MasterUsername")
  valid_607005 = validateParameter(valid_607005, JString, required = false,
                                 default = nil)
  if valid_607005 != nil:
    section.add "MasterUsername", valid_607005
  var valid_607006 = formData.getOrDefault("MonitoringRoleArn")
  valid_607006 = validateParameter(valid_607006, JString, required = false,
                                 default = nil)
  if valid_607006 != nil:
    section.add "MonitoringRoleArn", valid_607006
  var valid_607007 = formData.getOrDefault("MonitoringInterval")
  valid_607007 = validateParameter(valid_607007, JInt, required = false, default = nil)
  if valid_607007 != nil:
    section.add "MonitoringInterval", valid_607007
  var valid_607008 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_607008 = validateParameter(valid_607008, JArray, required = false,
                                 default = nil)
  if valid_607008 != nil:
    section.add "VpcSecurityGroupIds", valid_607008
  var valid_607009 = formData.getOrDefault("AvailabilityZone")
  valid_607009 = validateParameter(valid_607009, JString, required = false,
                                 default = nil)
  if valid_607009 != nil:
    section.add "AvailabilityZone", valid_607009
  var valid_607010 = formData.getOrDefault("EnablePerformanceInsights")
  valid_607010 = validateParameter(valid_607010, JBool, required = false, default = nil)
  if valid_607010 != nil:
    section.add "EnablePerformanceInsights", valid_607010
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607011 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607011 = validateParameter(valid_607011, JString, required = true,
                                 default = nil)
  if valid_607011 != nil:
    section.add "DBInstanceIdentifier", valid_607011
  var valid_607012 = formData.getOrDefault("TdeCredentialArn")
  valid_607012 = validateParameter(valid_607012, JString, required = false,
                                 default = nil)
  if valid_607012 != nil:
    section.add "TdeCredentialArn", valid_607012
  var valid_607013 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_607013 = validateParameter(valid_607013, JArray, required = false,
                                 default = nil)
  if valid_607013 != nil:
    section.add "EnableCloudwatchLogsExports", valid_607013
  var valid_607014 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_607014 = validateParameter(valid_607014, JInt, required = false, default = nil)
  if valid_607014 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_607014
  var valid_607015 = formData.getOrDefault("DBSubnetGroupName")
  valid_607015 = validateParameter(valid_607015, JString, required = false,
                                 default = nil)
  if valid_607015 != nil:
    section.add "DBSubnetGroupName", valid_607015
  var valid_607016 = formData.getOrDefault("CharacterSetName")
  valid_607016 = validateParameter(valid_607016, JString, required = false,
                                 default = nil)
  if valid_607016 != nil:
    section.add "CharacterSetName", valid_607016
  var valid_607017 = formData.getOrDefault("StorageType")
  valid_607017 = validateParameter(valid_607017, JString, required = false,
                                 default = nil)
  if valid_607017 != nil:
    section.add "StorageType", valid_607017
  var valid_607018 = formData.getOrDefault("MaxAllocatedStorage")
  valid_607018 = validateParameter(valid_607018, JInt, required = false, default = nil)
  if valid_607018 != nil:
    section.add "MaxAllocatedStorage", valid_607018
  var valid_607019 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_607019 = validateParameter(valid_607019, JBool, required = false, default = nil)
  if valid_607019 != nil:
    section.add "CopyTagsToSnapshot", valid_607019
  var valid_607020 = formData.getOrDefault("DeletionProtection")
  valid_607020 = validateParameter(valid_607020, JBool, required = false, default = nil)
  if valid_607020 != nil:
    section.add "DeletionProtection", valid_607020
  var valid_607021 = formData.getOrDefault("ProcessorFeatures")
  valid_607021 = validateParameter(valid_607021, JArray, required = false,
                                 default = nil)
  if valid_607021 != nil:
    section.add "ProcessorFeatures", valid_607021
  var valid_607022 = formData.getOrDefault("AllocatedStorage")
  valid_607022 = validateParameter(valid_607022, JInt, required = false, default = nil)
  if valid_607022 != nil:
    section.add "AllocatedStorage", valid_607022
  var valid_607023 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_607023 = validateParameter(valid_607023, JString, required = false,
                                 default = nil)
  if valid_607023 != nil:
    section.add "PreferredMaintenanceWindow", valid_607023
  var valid_607024 = formData.getOrDefault("DBInstanceClass")
  valid_607024 = validateParameter(valid_607024, JString, required = true,
                                 default = nil)
  if valid_607024 != nil:
    section.add "DBInstanceClass", valid_607024
  var valid_607025 = formData.getOrDefault("PreferredBackupWindow")
  valid_607025 = validateParameter(valid_607025, JString, required = false,
                                 default = nil)
  if valid_607025 != nil:
    section.add "PreferredBackupWindow", valid_607025
  var valid_607026 = formData.getOrDefault("MasterUserPassword")
  valid_607026 = validateParameter(valid_607026, JString, required = false,
                                 default = nil)
  if valid_607026 != nil:
    section.add "MasterUserPassword", valid_607026
  var valid_607027 = formData.getOrDefault("Domain")
  valid_607027 = validateParameter(valid_607027, JString, required = false,
                                 default = nil)
  if valid_607027 != nil:
    section.add "Domain", valid_607027
  var valid_607028 = formData.getOrDefault("Timezone")
  valid_607028 = validateParameter(valid_607028, JString, required = false,
                                 default = nil)
  if valid_607028 != nil:
    section.add "Timezone", valid_607028
  var valid_607029 = formData.getOrDefault("DBParameterGroupName")
  valid_607029 = validateParameter(valid_607029, JString, required = false,
                                 default = nil)
  if valid_607029 != nil:
    section.add "DBParameterGroupName", valid_607029
  var valid_607030 = formData.getOrDefault("EngineVersion")
  valid_607030 = validateParameter(valid_607030, JString, required = false,
                                 default = nil)
  if valid_607030 != nil:
    section.add "EngineVersion", valid_607030
  var valid_607031 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_607031 = validateParameter(valid_607031, JBool, required = false, default = nil)
  if valid_607031 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_607031
  var valid_607032 = formData.getOrDefault("BackupRetentionPeriod")
  valid_607032 = validateParameter(valid_607032, JInt, required = false, default = nil)
  if valid_607032 != nil:
    section.add "BackupRetentionPeriod", valid_607032
  var valid_607033 = formData.getOrDefault("KmsKeyId")
  valid_607033 = validateParameter(valid_607033, JString, required = false,
                                 default = nil)
  if valid_607033 != nil:
    section.add "KmsKeyId", valid_607033
  var valid_607034 = formData.getOrDefault("Engine")
  valid_607034 = validateParameter(valid_607034, JString, required = true,
                                 default = nil)
  if valid_607034 != nil:
    section.add "Engine", valid_607034
  var valid_607035 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_607035 = validateParameter(valid_607035, JBool, required = false, default = nil)
  if valid_607035 != nil:
    section.add "AutoMinorVersionUpgrade", valid_607035
  var valid_607036 = formData.getOrDefault("TdeCredentialPassword")
  valid_607036 = validateParameter(valid_607036, JString, required = false,
                                 default = nil)
  if valid_607036 != nil:
    section.add "TdeCredentialPassword", valid_607036
  var valid_607037 = formData.getOrDefault("DBName")
  valid_607037 = validateParameter(valid_607037, JString, required = false,
                                 default = nil)
  if valid_607037 != nil:
    section.add "DBName", valid_607037
  var valid_607038 = formData.getOrDefault("Iops")
  valid_607038 = validateParameter(valid_607038, JInt, required = false, default = nil)
  if valid_607038 != nil:
    section.add "Iops", valid_607038
  var valid_607039 = formData.getOrDefault("PubliclyAccessible")
  valid_607039 = validateParameter(valid_607039, JBool, required = false, default = nil)
  if valid_607039 != nil:
    section.add "PubliclyAccessible", valid_607039
  var valid_607040 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_607040 = validateParameter(valid_607040, JString, required = false,
                                 default = nil)
  if valid_607040 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_607040
  var valid_607041 = formData.getOrDefault("LicenseModel")
  valid_607041 = validateParameter(valid_607041, JString, required = false,
                                 default = nil)
  if valid_607041 != nil:
    section.add "LicenseModel", valid_607041
  var valid_607042 = formData.getOrDefault("Tags")
  valid_607042 = validateParameter(valid_607042, JArray, required = false,
                                 default = nil)
  if valid_607042 != nil:
    section.add "Tags", valid_607042
  var valid_607043 = formData.getOrDefault("DomainIAMRoleName")
  valid_607043 = validateParameter(valid_607043, JString, required = false,
                                 default = nil)
  if valid_607043 != nil:
    section.add "DomainIAMRoleName", valid_607043
  var valid_607044 = formData.getOrDefault("OptionGroupName")
  valid_607044 = validateParameter(valid_607044, JString, required = false,
                                 default = nil)
  if valid_607044 != nil:
    section.add "OptionGroupName", valid_607044
  var valid_607045 = formData.getOrDefault("DBSecurityGroups")
  valid_607045 = validateParameter(valid_607045, JArray, required = false,
                                 default = nil)
  if valid_607045 != nil:
    section.add "DBSecurityGroups", valid_607045
  var valid_607046 = formData.getOrDefault("StorageEncrypted")
  valid_607046 = validateParameter(valid_607046, JBool, required = false, default = nil)
  if valid_607046 != nil:
    section.add "StorageEncrypted", valid_607046
  var valid_607047 = formData.getOrDefault("DBClusterIdentifier")
  valid_607047 = validateParameter(valid_607047, JString, required = false,
                                 default = nil)
  if valid_607047 != nil:
    section.add "DBClusterIdentifier", valid_607047
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607048: Call_PostCreateDBInstance_606990; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_607048.validator(path, query, header, formData, body)
  let scheme = call_607048.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607048.url(scheme.get, call_607048.host, call_607048.base,
                         call_607048.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607048, url, valid)

proc call*(call_607049: Call_PostCreateDBInstance_606990;
          DBInstanceIdentifier: string; DBInstanceClass: string; Engine: string;
          PromotionTier: int = 0; Port: int = 0; MultiAZ: bool = false;
          MasterUsername: string = ""; MonitoringRoleArn: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; EnablePerformanceInsights: bool = false;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; CharacterSetName: string = "";
          StorageType: string = ""; MaxAllocatedStorage: int = 0;
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          Domain: string = ""; Timezone: string = ""; DBParameterGroupName: string = "";
          EngineVersion: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  var query_607050 = newJObject()
  var formData_607051 = newJObject()
  add(formData_607051, "PromotionTier", newJInt(PromotionTier))
  add(formData_607051, "Port", newJInt(Port))
  add(formData_607051, "MultiAZ", newJBool(MultiAZ))
  add(formData_607051, "MasterUsername", newJString(MasterUsername))
  add(formData_607051, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_607051, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_607051.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_607051, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_607051, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_607051, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_607051, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_607051.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_607050, "Action", newJString(Action))
  add(formData_607051, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_607051, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_607051, "CharacterSetName", newJString(CharacterSetName))
  add(formData_607051, "StorageType", newJString(StorageType))
  add(formData_607051, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_607051, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_607051, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_607051.add "ProcessorFeatures", ProcessorFeatures
  add(formData_607051, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_607051, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_607051, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_607051, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_607051, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_607051, "Domain", newJString(Domain))
  add(formData_607051, "Timezone", newJString(Timezone))
  add(formData_607051, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_607051, "EngineVersion", newJString(EngineVersion))
  add(formData_607051, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_607051, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_607051, "KmsKeyId", newJString(KmsKeyId))
  add(formData_607051, "Engine", newJString(Engine))
  add(formData_607051, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_607051, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_607051, "DBName", newJString(DBName))
  add(formData_607051, "Iops", newJInt(Iops))
  add(formData_607051, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_607051, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_607051, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_607051.add "Tags", Tags
  add(formData_607051, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_607051, "OptionGroupName", newJString(OptionGroupName))
  add(query_607050, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_607051.add "DBSecurityGroups", DBSecurityGroups
  add(formData_607051, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_607051, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607049.call(nil, query_607050, nil, formData_607051, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_606990(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_606991, base: "/",
    url: url_PostCreateDBInstance_606992, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_606929 = ref object of OpenApiRestCall_605589
proc url_GetCreateDBInstance_606931(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstance_606930(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: JString (required)
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_606932 = query.getOrDefault("Engine")
  valid_606932 = validateParameter(valid_606932, JString, required = true,
                                 default = nil)
  if valid_606932 != nil:
    section.add "Engine", valid_606932
  var valid_606933 = query.getOrDefault("CopyTagsToSnapshot")
  valid_606933 = validateParameter(valid_606933, JBool, required = false, default = nil)
  if valid_606933 != nil:
    section.add "CopyTagsToSnapshot", valid_606933
  var valid_606934 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_606934 = validateParameter(valid_606934, JInt, required = false, default = nil)
  if valid_606934 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_606934
  var valid_606935 = query.getOrDefault("MonitoringInterval")
  valid_606935 = validateParameter(valid_606935, JInt, required = false, default = nil)
  if valid_606935 != nil:
    section.add "MonitoringInterval", valid_606935
  var valid_606936 = query.getOrDefault("KmsKeyId")
  valid_606936 = validateParameter(valid_606936, JString, required = false,
                                 default = nil)
  if valid_606936 != nil:
    section.add "KmsKeyId", valid_606936
  var valid_606937 = query.getOrDefault("MonitoringRoleArn")
  valid_606937 = validateParameter(valid_606937, JString, required = false,
                                 default = nil)
  if valid_606937 != nil:
    section.add "MonitoringRoleArn", valid_606937
  var valid_606938 = query.getOrDefault("ProcessorFeatures")
  valid_606938 = validateParameter(valid_606938, JArray, required = false,
                                 default = nil)
  if valid_606938 != nil:
    section.add "ProcessorFeatures", valid_606938
  var valid_606939 = query.getOrDefault("MasterUsername")
  valid_606939 = validateParameter(valid_606939, JString, required = false,
                                 default = nil)
  if valid_606939 != nil:
    section.add "MasterUsername", valid_606939
  var valid_606940 = query.getOrDefault("BackupRetentionPeriod")
  valid_606940 = validateParameter(valid_606940, JInt, required = false, default = nil)
  if valid_606940 != nil:
    section.add "BackupRetentionPeriod", valid_606940
  var valid_606941 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_606941 = validateParameter(valid_606941, JArray, required = false,
                                 default = nil)
  if valid_606941 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606941
  var valid_606942 = query.getOrDefault("EngineVersion")
  valid_606942 = validateParameter(valid_606942, JString, required = false,
                                 default = nil)
  if valid_606942 != nil:
    section.add "EngineVersion", valid_606942
  var valid_606943 = query.getOrDefault("Action")
  valid_606943 = validateParameter(valid_606943, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_606943 != nil:
    section.add "Action", valid_606943
  var valid_606944 = query.getOrDefault("Domain")
  valid_606944 = validateParameter(valid_606944, JString, required = false,
                                 default = nil)
  if valid_606944 != nil:
    section.add "Domain", valid_606944
  var valid_606945 = query.getOrDefault("VpcSecurityGroupIds")
  valid_606945 = validateParameter(valid_606945, JArray, required = false,
                                 default = nil)
  if valid_606945 != nil:
    section.add "VpcSecurityGroupIds", valid_606945
  var valid_606946 = query.getOrDefault("AllocatedStorage")
  valid_606946 = validateParameter(valid_606946, JInt, required = false, default = nil)
  if valid_606946 != nil:
    section.add "AllocatedStorage", valid_606946
  var valid_606947 = query.getOrDefault("EnablePerformanceInsights")
  valid_606947 = validateParameter(valid_606947, JBool, required = false, default = nil)
  if valid_606947 != nil:
    section.add "EnablePerformanceInsights", valid_606947
  var valid_606948 = query.getOrDefault("PubliclyAccessible")
  valid_606948 = validateParameter(valid_606948, JBool, required = false, default = nil)
  if valid_606948 != nil:
    section.add "PubliclyAccessible", valid_606948
  var valid_606949 = query.getOrDefault("DBName")
  valid_606949 = validateParameter(valid_606949, JString, required = false,
                                 default = nil)
  if valid_606949 != nil:
    section.add "DBName", valid_606949
  var valid_606950 = query.getOrDefault("TdeCredentialPassword")
  valid_606950 = validateParameter(valid_606950, JString, required = false,
                                 default = nil)
  if valid_606950 != nil:
    section.add "TdeCredentialPassword", valid_606950
  var valid_606951 = query.getOrDefault("StorageEncrypted")
  valid_606951 = validateParameter(valid_606951, JBool, required = false, default = nil)
  if valid_606951 != nil:
    section.add "StorageEncrypted", valid_606951
  var valid_606952 = query.getOrDefault("DBParameterGroupName")
  valid_606952 = validateParameter(valid_606952, JString, required = false,
                                 default = nil)
  if valid_606952 != nil:
    section.add "DBParameterGroupName", valid_606952
  var valid_606953 = query.getOrDefault("DeletionProtection")
  valid_606953 = validateParameter(valid_606953, JBool, required = false, default = nil)
  if valid_606953 != nil:
    section.add "DeletionProtection", valid_606953
  var valid_606954 = query.getOrDefault("CharacterSetName")
  valid_606954 = validateParameter(valid_606954, JString, required = false,
                                 default = nil)
  if valid_606954 != nil:
    section.add "CharacterSetName", valid_606954
  var valid_606955 = query.getOrDefault("Tags")
  valid_606955 = validateParameter(valid_606955, JArray, required = false,
                                 default = nil)
  if valid_606955 != nil:
    section.add "Tags", valid_606955
  var valid_606956 = query.getOrDefault("MaxAllocatedStorage")
  valid_606956 = validateParameter(valid_606956, JInt, required = false, default = nil)
  if valid_606956 != nil:
    section.add "MaxAllocatedStorage", valid_606956
  var valid_606957 = query.getOrDefault("DBClusterIdentifier")
  valid_606957 = validateParameter(valid_606957, JString, required = false,
                                 default = nil)
  if valid_606957 != nil:
    section.add "DBClusterIdentifier", valid_606957
  var valid_606958 = query.getOrDefault("LicenseModel")
  valid_606958 = validateParameter(valid_606958, JString, required = false,
                                 default = nil)
  if valid_606958 != nil:
    section.add "LicenseModel", valid_606958
  var valid_606959 = query.getOrDefault("DBInstanceIdentifier")
  valid_606959 = validateParameter(valid_606959, JString, required = true,
                                 default = nil)
  if valid_606959 != nil:
    section.add "DBInstanceIdentifier", valid_606959
  var valid_606960 = query.getOrDefault("TdeCredentialArn")
  valid_606960 = validateParameter(valid_606960, JString, required = false,
                                 default = nil)
  if valid_606960 != nil:
    section.add "TdeCredentialArn", valid_606960
  var valid_606961 = query.getOrDefault("PromotionTier")
  valid_606961 = validateParameter(valid_606961, JInt, required = false, default = nil)
  if valid_606961 != nil:
    section.add "PromotionTier", valid_606961
  var valid_606962 = query.getOrDefault("StorageType")
  valid_606962 = validateParameter(valid_606962, JString, required = false,
                                 default = nil)
  if valid_606962 != nil:
    section.add "StorageType", valid_606962
  var valid_606963 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606963 = validateParameter(valid_606963, JBool, required = false, default = nil)
  if valid_606963 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606963
  var valid_606964 = query.getOrDefault("MultiAZ")
  valid_606964 = validateParameter(valid_606964, JBool, required = false, default = nil)
  if valid_606964 != nil:
    section.add "MultiAZ", valid_606964
  var valid_606965 = query.getOrDefault("DBSecurityGroups")
  valid_606965 = validateParameter(valid_606965, JArray, required = false,
                                 default = nil)
  if valid_606965 != nil:
    section.add "DBSecurityGroups", valid_606965
  var valid_606966 = query.getOrDefault("Port")
  valid_606966 = validateParameter(valid_606966, JInt, required = false, default = nil)
  if valid_606966 != nil:
    section.add "Port", valid_606966
  var valid_606967 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_606967 = validateParameter(valid_606967, JString, required = false,
                                 default = nil)
  if valid_606967 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_606967
  var valid_606968 = query.getOrDefault("MasterUserPassword")
  valid_606968 = validateParameter(valid_606968, JString, required = false,
                                 default = nil)
  if valid_606968 != nil:
    section.add "MasterUserPassword", valid_606968
  var valid_606969 = query.getOrDefault("AvailabilityZone")
  valid_606969 = validateParameter(valid_606969, JString, required = false,
                                 default = nil)
  if valid_606969 != nil:
    section.add "AvailabilityZone", valid_606969
  var valid_606970 = query.getOrDefault("OptionGroupName")
  valid_606970 = validateParameter(valid_606970, JString, required = false,
                                 default = nil)
  if valid_606970 != nil:
    section.add "OptionGroupName", valid_606970
  var valid_606971 = query.getOrDefault("DBSubnetGroupName")
  valid_606971 = validateParameter(valid_606971, JString, required = false,
                                 default = nil)
  if valid_606971 != nil:
    section.add "DBSubnetGroupName", valid_606971
  var valid_606972 = query.getOrDefault("PreferredBackupWindow")
  valid_606972 = validateParameter(valid_606972, JString, required = false,
                                 default = nil)
  if valid_606972 != nil:
    section.add "PreferredBackupWindow", valid_606972
  var valid_606973 = query.getOrDefault("DBInstanceClass")
  valid_606973 = validateParameter(valid_606973, JString, required = true,
                                 default = nil)
  if valid_606973 != nil:
    section.add "DBInstanceClass", valid_606973
  var valid_606974 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_606974 = validateParameter(valid_606974, JString, required = false,
                                 default = nil)
  if valid_606974 != nil:
    section.add "PreferredMaintenanceWindow", valid_606974
  var valid_606975 = query.getOrDefault("Timezone")
  valid_606975 = validateParameter(valid_606975, JString, required = false,
                                 default = nil)
  if valid_606975 != nil:
    section.add "Timezone", valid_606975
  var valid_606976 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_606976 = validateParameter(valid_606976, JBool, required = false, default = nil)
  if valid_606976 != nil:
    section.add "AutoMinorVersionUpgrade", valid_606976
  var valid_606977 = query.getOrDefault("Iops")
  valid_606977 = validateParameter(valid_606977, JInt, required = false, default = nil)
  if valid_606977 != nil:
    section.add "Iops", valid_606977
  var valid_606978 = query.getOrDefault("Version")
  valid_606978 = validateParameter(valid_606978, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606978 != nil:
    section.add "Version", valid_606978
  var valid_606979 = query.getOrDefault("DomainIAMRoleName")
  valid_606979 = validateParameter(valid_606979, JString, required = false,
                                 default = nil)
  if valid_606979 != nil:
    section.add "DomainIAMRoleName", valid_606979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_606980 = header.getOrDefault("X-Amz-Security-Token")
  valid_606980 = validateParameter(valid_606980, JString, required = false,
                                 default = nil)
  if valid_606980 != nil:
    section.add "X-Amz-Security-Token", valid_606980
  var valid_606981 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606981 = validateParameter(valid_606981, JString, required = false,
                                 default = nil)
  if valid_606981 != nil:
    section.add "X-Amz-SignedHeaders", valid_606981
  var valid_606982 = header.getOrDefault("X-Amz-Signature")
  valid_606982 = validateParameter(valid_606982, JString, required = false,
                                 default = nil)
  if valid_606982 != nil:
    section.add "X-Amz-Signature", valid_606982
  var valid_606983 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606983 = validateParameter(valid_606983, JString, required = false,
                                 default = nil)
  if valid_606983 != nil:
    section.add "X-Amz-Content-Sha256", valid_606983
  var valid_606984 = header.getOrDefault("X-Amz-Date")
  valid_606984 = validateParameter(valid_606984, JString, required = false,
                                 default = nil)
  if valid_606984 != nil:
    section.add "X-Amz-Date", valid_606984
  var valid_606985 = header.getOrDefault("X-Amz-Credential")
  valid_606985 = validateParameter(valid_606985, JString, required = false,
                                 default = nil)
  if valid_606985 != nil:
    section.add "X-Amz-Credential", valid_606985
  var valid_606986 = header.getOrDefault("X-Amz-Algorithm")
  valid_606986 = validateParameter(valid_606986, JString, required = false,
                                 default = nil)
  if valid_606986 != nil:
    section.add "X-Amz-Algorithm", valid_606986
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606987: Call_GetCreateDBInstance_606929; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_606987.validator(path, query, header, formData, body)
  let scheme = call_606987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606987.url(scheme.get, call_606987.host, call_606987.base,
                         call_606987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606987, url, valid)

proc call*(call_606988: Call_GetCreateDBInstance_606929; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; TdeCredentialPassword: string = "";
          StorageEncrypted: bool = false; DBParameterGroupName: string = "";
          DeletionProtection: bool = false; CharacterSetName: string = "";
          Tags: JsonNode = nil; MaxAllocatedStorage: int = 0;
          DBClusterIdentifier: string = ""; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Timezone: string = "";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          Version: string = "2014-10-31"; DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: string (required)
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_606989 = newJObject()
  add(query_606989, "Engine", newJString(Engine))
  add(query_606989, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_606989, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_606989, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_606989, "KmsKeyId", newJString(KmsKeyId))
  add(query_606989, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  if ProcessorFeatures != nil:
    query_606989.add "ProcessorFeatures", ProcessorFeatures
  add(query_606989, "MasterUsername", newJString(MasterUsername))
  add(query_606989, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_606989.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606989, "EngineVersion", newJString(EngineVersion))
  add(query_606989, "Action", newJString(Action))
  add(query_606989, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_606989.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_606989, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_606989, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_606989, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_606989, "DBName", newJString(DBName))
  add(query_606989, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_606989, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_606989, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_606989, "DeletionProtection", newJBool(DeletionProtection))
  add(query_606989, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_606989.add "Tags", Tags
  add(query_606989, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_606989, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606989, "LicenseModel", newJString(LicenseModel))
  add(query_606989, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606989, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_606989, "PromotionTier", newJInt(PromotionTier))
  add(query_606989, "StorageType", newJString(StorageType))
  add(query_606989, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_606989, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_606989.add "DBSecurityGroups", DBSecurityGroups
  add(query_606989, "Port", newJInt(Port))
  add(query_606989, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_606989, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_606989, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_606989, "OptionGroupName", newJString(OptionGroupName))
  add(query_606989, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606989, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_606989, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_606989, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_606989, "Timezone", newJString(Timezone))
  add(query_606989, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_606989, "Iops", newJInt(Iops))
  add(query_606989, "Version", newJString(Version))
  add(query_606989, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_606988.call(nil, query_606989, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_606929(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_606930, base: "/",
    url: url_GetCreateDBInstance_606931, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstanceReadReplica_607098 = ref object of OpenApiRestCall_605589
proc url_PostCreateDBInstanceReadReplica_607100(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstanceReadReplica_607099(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607101 = query.getOrDefault("Action")
  valid_607101 = validateParameter(valid_607101, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_607101 != nil:
    section.add "Action", valid_607101
  var valid_607102 = query.getOrDefault("Version")
  valid_607102 = validateParameter(valid_607102, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607102 != nil:
    section.add "Version", valid_607102
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607103 = header.getOrDefault("X-Amz-Signature")
  valid_607103 = validateParameter(valid_607103, JString, required = false,
                                 default = nil)
  if valid_607103 != nil:
    section.add "X-Amz-Signature", valid_607103
  var valid_607104 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607104 = validateParameter(valid_607104, JString, required = false,
                                 default = nil)
  if valid_607104 != nil:
    section.add "X-Amz-Content-Sha256", valid_607104
  var valid_607105 = header.getOrDefault("X-Amz-Date")
  valid_607105 = validateParameter(valid_607105, JString, required = false,
                                 default = nil)
  if valid_607105 != nil:
    section.add "X-Amz-Date", valid_607105
  var valid_607106 = header.getOrDefault("X-Amz-Credential")
  valid_607106 = validateParameter(valid_607106, JString, required = false,
                                 default = nil)
  if valid_607106 != nil:
    section.add "X-Amz-Credential", valid_607106
  var valid_607107 = header.getOrDefault("X-Amz-Security-Token")
  valid_607107 = validateParameter(valid_607107, JString, required = false,
                                 default = nil)
  if valid_607107 != nil:
    section.add "X-Amz-Security-Token", valid_607107
  var valid_607108 = header.getOrDefault("X-Amz-Algorithm")
  valid_607108 = validateParameter(valid_607108, JString, required = false,
                                 default = nil)
  if valid_607108 != nil:
    section.add "X-Amz-Algorithm", valid_607108
  var valid_607109 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607109 = validateParameter(valid_607109, JString, required = false,
                                 default = nil)
  if valid_607109 != nil:
    section.add "X-Amz-SignedHeaders", valid_607109
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_607110 = formData.getOrDefault("Port")
  valid_607110 = validateParameter(valid_607110, JInt, required = false, default = nil)
  if valid_607110 != nil:
    section.add "Port", valid_607110
  var valid_607111 = formData.getOrDefault("DBInstanceClass")
  valid_607111 = validateParameter(valid_607111, JString, required = false,
                                 default = nil)
  if valid_607111 != nil:
    section.add "DBInstanceClass", valid_607111
  var valid_607112 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_607112 = validateParameter(valid_607112, JBool, required = false, default = nil)
  if valid_607112 != nil:
    section.add "UseDefaultProcessorFeatures", valid_607112
  var valid_607113 = formData.getOrDefault("MultiAZ")
  valid_607113 = validateParameter(valid_607113, JBool, required = false, default = nil)
  if valid_607113 != nil:
    section.add "MultiAZ", valid_607113
  var valid_607114 = formData.getOrDefault("Domain")
  valid_607114 = validateParameter(valid_607114, JString, required = false,
                                 default = nil)
  if valid_607114 != nil:
    section.add "Domain", valid_607114
  var valid_607115 = formData.getOrDefault("MonitoringRoleArn")
  valid_607115 = validateParameter(valid_607115, JString, required = false,
                                 default = nil)
  if valid_607115 != nil:
    section.add "MonitoringRoleArn", valid_607115
  assert formData != nil, "formData argument is necessary due to required `SourceDBInstanceIdentifier` field"
  var valid_607116 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_607116 = validateParameter(valid_607116, JString, required = true,
                                 default = nil)
  if valid_607116 != nil:
    section.add "SourceDBInstanceIdentifier", valid_607116
  var valid_607117 = formData.getOrDefault("DBParameterGroupName")
  valid_607117 = validateParameter(valid_607117, JString, required = false,
                                 default = nil)
  if valid_607117 != nil:
    section.add "DBParameterGroupName", valid_607117
  var valid_607118 = formData.getOrDefault("SourceRegion")
  valid_607118 = validateParameter(valid_607118, JString, required = false,
                                 default = nil)
  if valid_607118 != nil:
    section.add "SourceRegion", valid_607118
  var valid_607119 = formData.getOrDefault("MonitoringInterval")
  valid_607119 = validateParameter(valid_607119, JInt, required = false, default = nil)
  if valid_607119 != nil:
    section.add "MonitoringInterval", valid_607119
  var valid_607120 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_607120 = validateParameter(valid_607120, JArray, required = false,
                                 default = nil)
  if valid_607120 != nil:
    section.add "VpcSecurityGroupIds", valid_607120
  var valid_607121 = formData.getOrDefault("AvailabilityZone")
  valid_607121 = validateParameter(valid_607121, JString, required = false,
                                 default = nil)
  if valid_607121 != nil:
    section.add "AvailabilityZone", valid_607121
  var valid_607122 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_607122 = validateParameter(valid_607122, JBool, required = false, default = nil)
  if valid_607122 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_607122
  var valid_607123 = formData.getOrDefault("KmsKeyId")
  valid_607123 = validateParameter(valid_607123, JString, required = false,
                                 default = nil)
  if valid_607123 != nil:
    section.add "KmsKeyId", valid_607123
  var valid_607124 = formData.getOrDefault("EnablePerformanceInsights")
  valid_607124 = validateParameter(valid_607124, JBool, required = false, default = nil)
  if valid_607124 != nil:
    section.add "EnablePerformanceInsights", valid_607124
  var valid_607125 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_607125 = validateParameter(valid_607125, JBool, required = false, default = nil)
  if valid_607125 != nil:
    section.add "AutoMinorVersionUpgrade", valid_607125
  var valid_607126 = formData.getOrDefault("PreSignedUrl")
  valid_607126 = validateParameter(valid_607126, JString, required = false,
                                 default = nil)
  if valid_607126 != nil:
    section.add "PreSignedUrl", valid_607126
  var valid_607127 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607127 = validateParameter(valid_607127, JString, required = true,
                                 default = nil)
  if valid_607127 != nil:
    section.add "DBInstanceIdentifier", valid_607127
  var valid_607128 = formData.getOrDefault("Iops")
  valid_607128 = validateParameter(valid_607128, JInt, required = false, default = nil)
  if valid_607128 != nil:
    section.add "Iops", valid_607128
  var valid_607129 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_607129 = validateParameter(valid_607129, JArray, required = false,
                                 default = nil)
  if valid_607129 != nil:
    section.add "EnableCloudwatchLogsExports", valid_607129
  var valid_607130 = formData.getOrDefault("PubliclyAccessible")
  valid_607130 = validateParameter(valid_607130, JBool, required = false, default = nil)
  if valid_607130 != nil:
    section.add "PubliclyAccessible", valid_607130
  var valid_607131 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_607131 = validateParameter(valid_607131, JString, required = false,
                                 default = nil)
  if valid_607131 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_607131
  var valid_607132 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_607132 = validateParameter(valid_607132, JInt, required = false, default = nil)
  if valid_607132 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_607132
  var valid_607133 = formData.getOrDefault("Tags")
  valid_607133 = validateParameter(valid_607133, JArray, required = false,
                                 default = nil)
  if valid_607133 != nil:
    section.add "Tags", valid_607133
  var valid_607134 = formData.getOrDefault("DBSubnetGroupName")
  valid_607134 = validateParameter(valid_607134, JString, required = false,
                                 default = nil)
  if valid_607134 != nil:
    section.add "DBSubnetGroupName", valid_607134
  var valid_607135 = formData.getOrDefault("DomainIAMRoleName")
  valid_607135 = validateParameter(valid_607135, JString, required = false,
                                 default = nil)
  if valid_607135 != nil:
    section.add "DomainIAMRoleName", valid_607135
  var valid_607136 = formData.getOrDefault("OptionGroupName")
  valid_607136 = validateParameter(valid_607136, JString, required = false,
                                 default = nil)
  if valid_607136 != nil:
    section.add "OptionGroupName", valid_607136
  var valid_607137 = formData.getOrDefault("StorageType")
  valid_607137 = validateParameter(valid_607137, JString, required = false,
                                 default = nil)
  if valid_607137 != nil:
    section.add "StorageType", valid_607137
  var valid_607138 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_607138 = validateParameter(valid_607138, JBool, required = false, default = nil)
  if valid_607138 != nil:
    section.add "CopyTagsToSnapshot", valid_607138
  var valid_607139 = formData.getOrDefault("DeletionProtection")
  valid_607139 = validateParameter(valid_607139, JBool, required = false, default = nil)
  if valid_607139 != nil:
    section.add "DeletionProtection", valid_607139
  var valid_607140 = formData.getOrDefault("ProcessorFeatures")
  valid_607140 = validateParameter(valid_607140, JArray, required = false,
                                 default = nil)
  if valid_607140 != nil:
    section.add "ProcessorFeatures", valid_607140
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607141: Call_PostCreateDBInstanceReadReplica_607098;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_607141.validator(path, query, header, formData, body)
  let scheme = call_607141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607141.url(scheme.get, call_607141.host, call_607141.base,
                         call_607141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607141, url, valid)

proc call*(call_607142: Call_PostCreateDBInstanceReadReplica_607098;
          SourceDBInstanceIdentifier: string; DBInstanceIdentifier: string;
          Port: int = 0; DBInstanceClass: string = "";
          UseDefaultProcessorFeatures: bool = false; MultiAZ: bool = false;
          Domain: string = ""; MonitoringRoleArn: string = "";
          DBParameterGroupName: string = ""; SourceRegion: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; PreSignedUrl: string = "";
          Iops: int = 0; EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "CreateDBInstanceReadReplica";
          PerformanceInsightsKMSKeyId: string = "";
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_607143 = newJObject()
  var formData_607144 = newJObject()
  add(formData_607144, "Port", newJInt(Port))
  add(formData_607144, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_607144, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_607144, "MultiAZ", newJBool(MultiAZ))
  add(formData_607144, "Domain", newJString(Domain))
  add(formData_607144, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_607144, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_607144, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_607144, "SourceRegion", newJString(SourceRegion))
  add(formData_607144, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_607144.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_607144, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_607144, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_607144, "KmsKeyId", newJString(KmsKeyId))
  add(formData_607144, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_607144, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_607144, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_607144, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_607144, "Iops", newJInt(Iops))
  if EnableCloudwatchLogsExports != nil:
    formData_607144.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_607144, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_607143, "Action", newJString(Action))
  add(formData_607144, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_607144, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    formData_607144.add "Tags", Tags
  add(formData_607144, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_607144, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_607144, "OptionGroupName", newJString(OptionGroupName))
  add(query_607143, "Version", newJString(Version))
  add(formData_607144, "StorageType", newJString(StorageType))
  add(formData_607144, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_607144, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_607144.add "ProcessorFeatures", ProcessorFeatures
  result = call_607142.call(nil, query_607143, nil, formData_607144, nil)

var postCreateDBInstanceReadReplica* = Call_PostCreateDBInstanceReadReplica_607098(
    name: "postCreateDBInstanceReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_PostCreateDBInstanceReadReplica_607099, base: "/",
    url: url_PostCreateDBInstanceReadReplica_607100,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstanceReadReplica_607052 = ref object of OpenApiRestCall_605589
proc url_GetCreateDBInstanceReadReplica_607054(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstanceReadReplica_607053(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_607055 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_607055 = validateParameter(valid_607055, JBool, required = false, default = nil)
  if valid_607055 != nil:
    section.add "UseDefaultProcessorFeatures", valid_607055
  var valid_607056 = query.getOrDefault("DeletionProtection")
  valid_607056 = validateParameter(valid_607056, JBool, required = false, default = nil)
  if valid_607056 != nil:
    section.add "DeletionProtection", valid_607056
  var valid_607057 = query.getOrDefault("DBParameterGroupName")
  valid_607057 = validateParameter(valid_607057, JString, required = false,
                                 default = nil)
  if valid_607057 != nil:
    section.add "DBParameterGroupName", valid_607057
  var valid_607058 = query.getOrDefault("CopyTagsToSnapshot")
  valid_607058 = validateParameter(valid_607058, JBool, required = false, default = nil)
  if valid_607058 != nil:
    section.add "CopyTagsToSnapshot", valid_607058
  var valid_607059 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_607059 = validateParameter(valid_607059, JInt, required = false, default = nil)
  if valid_607059 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_607059
  var valid_607060 = query.getOrDefault("Tags")
  valid_607060 = validateParameter(valid_607060, JArray, required = false,
                                 default = nil)
  if valid_607060 != nil:
    section.add "Tags", valid_607060
  var valid_607061 = query.getOrDefault("MonitoringInterval")
  valid_607061 = validateParameter(valid_607061, JInt, required = false, default = nil)
  if valid_607061 != nil:
    section.add "MonitoringInterval", valid_607061
  var valid_607062 = query.getOrDefault("MonitoringRoleArn")
  valid_607062 = validateParameter(valid_607062, JString, required = false,
                                 default = nil)
  if valid_607062 != nil:
    section.add "MonitoringRoleArn", valid_607062
  var valid_607063 = query.getOrDefault("KmsKeyId")
  valid_607063 = validateParameter(valid_607063, JString, required = false,
                                 default = nil)
  if valid_607063 != nil:
    section.add "KmsKeyId", valid_607063
  var valid_607064 = query.getOrDefault("PreSignedUrl")
  valid_607064 = validateParameter(valid_607064, JString, required = false,
                                 default = nil)
  if valid_607064 != nil:
    section.add "PreSignedUrl", valid_607064
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607065 = query.getOrDefault("DBInstanceIdentifier")
  valid_607065 = validateParameter(valid_607065, JString, required = true,
                                 default = nil)
  if valid_607065 != nil:
    section.add "DBInstanceIdentifier", valid_607065
  var valid_607066 = query.getOrDefault("ProcessorFeatures")
  valid_607066 = validateParameter(valid_607066, JArray, required = false,
                                 default = nil)
  if valid_607066 != nil:
    section.add "ProcessorFeatures", valid_607066
  var valid_607067 = query.getOrDefault("StorageType")
  valid_607067 = validateParameter(valid_607067, JString, required = false,
                                 default = nil)
  if valid_607067 != nil:
    section.add "StorageType", valid_607067
  var valid_607068 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_607068 = validateParameter(valid_607068, JBool, required = false, default = nil)
  if valid_607068 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_607068
  var valid_607069 = query.getOrDefault("SourceRegion")
  valid_607069 = validateParameter(valid_607069, JString, required = false,
                                 default = nil)
  if valid_607069 != nil:
    section.add "SourceRegion", valid_607069
  var valid_607070 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_607070 = validateParameter(valid_607070, JArray, required = false,
                                 default = nil)
  if valid_607070 != nil:
    section.add "EnableCloudwatchLogsExports", valid_607070
  var valid_607071 = query.getOrDefault("Action")
  valid_607071 = validateParameter(valid_607071, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_607071 != nil:
    section.add "Action", valid_607071
  var valid_607072 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_607072 = validateParameter(valid_607072, JString, required = true,
                                 default = nil)
  if valid_607072 != nil:
    section.add "SourceDBInstanceIdentifier", valid_607072
  var valid_607073 = query.getOrDefault("MultiAZ")
  valid_607073 = validateParameter(valid_607073, JBool, required = false, default = nil)
  if valid_607073 != nil:
    section.add "MultiAZ", valid_607073
  var valid_607074 = query.getOrDefault("Port")
  valid_607074 = validateParameter(valid_607074, JInt, required = false, default = nil)
  if valid_607074 != nil:
    section.add "Port", valid_607074
  var valid_607075 = query.getOrDefault("Domain")
  valid_607075 = validateParameter(valid_607075, JString, required = false,
                                 default = nil)
  if valid_607075 != nil:
    section.add "Domain", valid_607075
  var valid_607076 = query.getOrDefault("VpcSecurityGroupIds")
  valid_607076 = validateParameter(valid_607076, JArray, required = false,
                                 default = nil)
  if valid_607076 != nil:
    section.add "VpcSecurityGroupIds", valid_607076
  var valid_607077 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_607077 = validateParameter(valid_607077, JString, required = false,
                                 default = nil)
  if valid_607077 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_607077
  var valid_607078 = query.getOrDefault("AvailabilityZone")
  valid_607078 = validateParameter(valid_607078, JString, required = false,
                                 default = nil)
  if valid_607078 != nil:
    section.add "AvailabilityZone", valid_607078
  var valid_607079 = query.getOrDefault("OptionGroupName")
  valid_607079 = validateParameter(valid_607079, JString, required = false,
                                 default = nil)
  if valid_607079 != nil:
    section.add "OptionGroupName", valid_607079
  var valid_607080 = query.getOrDefault("DBSubnetGroupName")
  valid_607080 = validateParameter(valid_607080, JString, required = false,
                                 default = nil)
  if valid_607080 != nil:
    section.add "DBSubnetGroupName", valid_607080
  var valid_607081 = query.getOrDefault("Version")
  valid_607081 = validateParameter(valid_607081, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607081 != nil:
    section.add "Version", valid_607081
  var valid_607082 = query.getOrDefault("DBInstanceClass")
  valid_607082 = validateParameter(valid_607082, JString, required = false,
                                 default = nil)
  if valid_607082 != nil:
    section.add "DBInstanceClass", valid_607082
  var valid_607083 = query.getOrDefault("PubliclyAccessible")
  valid_607083 = validateParameter(valid_607083, JBool, required = false, default = nil)
  if valid_607083 != nil:
    section.add "PubliclyAccessible", valid_607083
  var valid_607084 = query.getOrDefault("EnablePerformanceInsights")
  valid_607084 = validateParameter(valid_607084, JBool, required = false, default = nil)
  if valid_607084 != nil:
    section.add "EnablePerformanceInsights", valid_607084
  var valid_607085 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_607085 = validateParameter(valid_607085, JBool, required = false, default = nil)
  if valid_607085 != nil:
    section.add "AutoMinorVersionUpgrade", valid_607085
  var valid_607086 = query.getOrDefault("Iops")
  valid_607086 = validateParameter(valid_607086, JInt, required = false, default = nil)
  if valid_607086 != nil:
    section.add "Iops", valid_607086
  var valid_607087 = query.getOrDefault("DomainIAMRoleName")
  valid_607087 = validateParameter(valid_607087, JString, required = false,
                                 default = nil)
  if valid_607087 != nil:
    section.add "DomainIAMRoleName", valid_607087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607088 = header.getOrDefault("X-Amz-Signature")
  valid_607088 = validateParameter(valid_607088, JString, required = false,
                                 default = nil)
  if valid_607088 != nil:
    section.add "X-Amz-Signature", valid_607088
  var valid_607089 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607089 = validateParameter(valid_607089, JString, required = false,
                                 default = nil)
  if valid_607089 != nil:
    section.add "X-Amz-Content-Sha256", valid_607089
  var valid_607090 = header.getOrDefault("X-Amz-Date")
  valid_607090 = validateParameter(valid_607090, JString, required = false,
                                 default = nil)
  if valid_607090 != nil:
    section.add "X-Amz-Date", valid_607090
  var valid_607091 = header.getOrDefault("X-Amz-Credential")
  valid_607091 = validateParameter(valid_607091, JString, required = false,
                                 default = nil)
  if valid_607091 != nil:
    section.add "X-Amz-Credential", valid_607091
  var valid_607092 = header.getOrDefault("X-Amz-Security-Token")
  valid_607092 = validateParameter(valid_607092, JString, required = false,
                                 default = nil)
  if valid_607092 != nil:
    section.add "X-Amz-Security-Token", valid_607092
  var valid_607093 = header.getOrDefault("X-Amz-Algorithm")
  valid_607093 = validateParameter(valid_607093, JString, required = false,
                                 default = nil)
  if valid_607093 != nil:
    section.add "X-Amz-Algorithm", valid_607093
  var valid_607094 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607094 = validateParameter(valid_607094, JString, required = false,
                                 default = nil)
  if valid_607094 != nil:
    section.add "X-Amz-SignedHeaders", valid_607094
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607095: Call_GetCreateDBInstanceReadReplica_607052; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_607095.validator(path, query, header, formData, body)
  let scheme = call_607095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607095.url(scheme.get, call_607095.host, call_607095.base,
                         call_607095.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607095, url, valid)

proc call*(call_607096: Call_GetCreateDBInstanceReadReplica_607052;
          DBInstanceIdentifier: string; SourceDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false;
          DeletionProtection: bool = false; DBParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          MonitoringInterval: int = 0; MonitoringRoleArn: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; SourceRegion: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstanceReadReplica"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          PerformanceInsightsKMSKeyId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_607097 = newJObject()
  add(query_607097, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_607097, "DeletionProtection", newJBool(DeletionProtection))
  add(query_607097, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607097, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_607097, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    query_607097.add "Tags", Tags
  add(query_607097, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_607097, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_607097, "KmsKeyId", newJString(KmsKeyId))
  add(query_607097, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_607097, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if ProcessorFeatures != nil:
    query_607097.add "ProcessorFeatures", ProcessorFeatures
  add(query_607097, "StorageType", newJString(StorageType))
  add(query_607097, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_607097, "SourceRegion", newJString(SourceRegion))
  if EnableCloudwatchLogsExports != nil:
    query_607097.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_607097, "Action", newJString(Action))
  add(query_607097, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_607097, "MultiAZ", newJBool(MultiAZ))
  add(query_607097, "Port", newJInt(Port))
  add(query_607097, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_607097.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_607097, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_607097, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_607097, "OptionGroupName", newJString(OptionGroupName))
  add(query_607097, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607097, "Version", newJString(Version))
  add(query_607097, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_607097, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_607097, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_607097, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_607097, "Iops", newJInt(Iops))
  add(query_607097, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_607096.call(nil, query_607097, nil, nil, nil)

var getCreateDBInstanceReadReplica* = Call_GetCreateDBInstanceReadReplica_607052(
    name: "getCreateDBInstanceReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_GetCreateDBInstanceReadReplica_607053, base: "/",
    url: url_GetCreateDBInstanceReadReplica_607054,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_607164 = ref object of OpenApiRestCall_605589
proc url_PostCreateDBParameterGroup_607166(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBParameterGroup_607165(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607167 = query.getOrDefault("Action")
  valid_607167 = validateParameter(valid_607167, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_607167 != nil:
    section.add "Action", valid_607167
  var valid_607168 = query.getOrDefault("Version")
  valid_607168 = validateParameter(valid_607168, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607168 != nil:
    section.add "Version", valid_607168
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607169 = header.getOrDefault("X-Amz-Signature")
  valid_607169 = validateParameter(valid_607169, JString, required = false,
                                 default = nil)
  if valid_607169 != nil:
    section.add "X-Amz-Signature", valid_607169
  var valid_607170 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607170 = validateParameter(valid_607170, JString, required = false,
                                 default = nil)
  if valid_607170 != nil:
    section.add "X-Amz-Content-Sha256", valid_607170
  var valid_607171 = header.getOrDefault("X-Amz-Date")
  valid_607171 = validateParameter(valid_607171, JString, required = false,
                                 default = nil)
  if valid_607171 != nil:
    section.add "X-Amz-Date", valid_607171
  var valid_607172 = header.getOrDefault("X-Amz-Credential")
  valid_607172 = validateParameter(valid_607172, JString, required = false,
                                 default = nil)
  if valid_607172 != nil:
    section.add "X-Amz-Credential", valid_607172
  var valid_607173 = header.getOrDefault("X-Amz-Security-Token")
  valid_607173 = validateParameter(valid_607173, JString, required = false,
                                 default = nil)
  if valid_607173 != nil:
    section.add "X-Amz-Security-Token", valid_607173
  var valid_607174 = header.getOrDefault("X-Amz-Algorithm")
  valid_607174 = validateParameter(valid_607174, JString, required = false,
                                 default = nil)
  if valid_607174 != nil:
    section.add "X-Amz-Algorithm", valid_607174
  var valid_607175 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607175 = validateParameter(valid_607175, JString, required = false,
                                 default = nil)
  if valid_607175 != nil:
    section.add "X-Amz-SignedHeaders", valid_607175
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_607176 = formData.getOrDefault("Description")
  valid_607176 = validateParameter(valid_607176, JString, required = true,
                                 default = nil)
  if valid_607176 != nil:
    section.add "Description", valid_607176
  var valid_607177 = formData.getOrDefault("DBParameterGroupName")
  valid_607177 = validateParameter(valid_607177, JString, required = true,
                                 default = nil)
  if valid_607177 != nil:
    section.add "DBParameterGroupName", valid_607177
  var valid_607178 = formData.getOrDefault("Tags")
  valid_607178 = validateParameter(valid_607178, JArray, required = false,
                                 default = nil)
  if valid_607178 != nil:
    section.add "Tags", valid_607178
  var valid_607179 = formData.getOrDefault("DBParameterGroupFamily")
  valid_607179 = validateParameter(valid_607179, JString, required = true,
                                 default = nil)
  if valid_607179 != nil:
    section.add "DBParameterGroupFamily", valid_607179
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607180: Call_PostCreateDBParameterGroup_607164; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_607180.validator(path, query, header, formData, body)
  let scheme = call_607180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607180.url(scheme.get, call_607180.host, call_607180.base,
                         call_607180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607180, url, valid)

proc call*(call_607181: Call_PostCreateDBParameterGroup_607164;
          Description: string; DBParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  var query_607182 = newJObject()
  var formData_607183 = newJObject()
  add(formData_607183, "Description", newJString(Description))
  add(formData_607183, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607182, "Action", newJString(Action))
  if Tags != nil:
    formData_607183.add "Tags", Tags
  add(query_607182, "Version", newJString(Version))
  add(formData_607183, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_607181.call(nil, query_607182, nil, formData_607183, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_607164(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_607165, base: "/",
    url: url_PostCreateDBParameterGroup_607166,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_607145 = ref object of OpenApiRestCall_605589
proc url_GetCreateDBParameterGroup_607147(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBParameterGroup_607146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607148 = query.getOrDefault("DBParameterGroupFamily")
  valid_607148 = validateParameter(valid_607148, JString, required = true,
                                 default = nil)
  if valid_607148 != nil:
    section.add "DBParameterGroupFamily", valid_607148
  var valid_607149 = query.getOrDefault("DBParameterGroupName")
  valid_607149 = validateParameter(valid_607149, JString, required = true,
                                 default = nil)
  if valid_607149 != nil:
    section.add "DBParameterGroupName", valid_607149
  var valid_607150 = query.getOrDefault("Tags")
  valid_607150 = validateParameter(valid_607150, JArray, required = false,
                                 default = nil)
  if valid_607150 != nil:
    section.add "Tags", valid_607150
  var valid_607151 = query.getOrDefault("Action")
  valid_607151 = validateParameter(valid_607151, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_607151 != nil:
    section.add "Action", valid_607151
  var valid_607152 = query.getOrDefault("Description")
  valid_607152 = validateParameter(valid_607152, JString, required = true,
                                 default = nil)
  if valid_607152 != nil:
    section.add "Description", valid_607152
  var valid_607153 = query.getOrDefault("Version")
  valid_607153 = validateParameter(valid_607153, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607153 != nil:
    section.add "Version", valid_607153
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607154 = header.getOrDefault("X-Amz-Signature")
  valid_607154 = validateParameter(valid_607154, JString, required = false,
                                 default = nil)
  if valid_607154 != nil:
    section.add "X-Amz-Signature", valid_607154
  var valid_607155 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607155 = validateParameter(valid_607155, JString, required = false,
                                 default = nil)
  if valid_607155 != nil:
    section.add "X-Amz-Content-Sha256", valid_607155
  var valid_607156 = header.getOrDefault("X-Amz-Date")
  valid_607156 = validateParameter(valid_607156, JString, required = false,
                                 default = nil)
  if valid_607156 != nil:
    section.add "X-Amz-Date", valid_607156
  var valid_607157 = header.getOrDefault("X-Amz-Credential")
  valid_607157 = validateParameter(valid_607157, JString, required = false,
                                 default = nil)
  if valid_607157 != nil:
    section.add "X-Amz-Credential", valid_607157
  var valid_607158 = header.getOrDefault("X-Amz-Security-Token")
  valid_607158 = validateParameter(valid_607158, JString, required = false,
                                 default = nil)
  if valid_607158 != nil:
    section.add "X-Amz-Security-Token", valid_607158
  var valid_607159 = header.getOrDefault("X-Amz-Algorithm")
  valid_607159 = validateParameter(valid_607159, JString, required = false,
                                 default = nil)
  if valid_607159 != nil:
    section.add "X-Amz-Algorithm", valid_607159
  var valid_607160 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607160 = validateParameter(valid_607160, JString, required = false,
                                 default = nil)
  if valid_607160 != nil:
    section.add "X-Amz-SignedHeaders", valid_607160
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607161: Call_GetCreateDBParameterGroup_607145; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_607161.validator(path, query, header, formData, body)
  let scheme = call_607161.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607161.url(scheme.get, call_607161.host, call_607161.base,
                         call_607161.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607161, url, valid)

proc call*(call_607162: Call_GetCreateDBParameterGroup_607145;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   Version: string (required)
  var query_607163 = newJObject()
  add(query_607163, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_607163, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_607163.add "Tags", Tags
  add(query_607163, "Action", newJString(Action))
  add(query_607163, "Description", newJString(Description))
  add(query_607163, "Version", newJString(Version))
  result = call_607162.call(nil, query_607163, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_607145(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_607146, base: "/",
    url: url_GetCreateDBParameterGroup_607147,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBProxy_607209 = ref object of OpenApiRestCall_605589
proc url_PostCreateDBProxy_607211(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBProxy_607210(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607212 = query.getOrDefault("Action")
  valid_607212 = validateParameter(valid_607212, JString, required = true,
                                 default = newJString("CreateDBProxy"))
  if valid_607212 != nil:
    section.add "Action", valid_607212
  var valid_607213 = query.getOrDefault("Version")
  valid_607213 = validateParameter(valid_607213, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607213 != nil:
    section.add "Version", valid_607213
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607214 = header.getOrDefault("X-Amz-Signature")
  valid_607214 = validateParameter(valid_607214, JString, required = false,
                                 default = nil)
  if valid_607214 != nil:
    section.add "X-Amz-Signature", valid_607214
  var valid_607215 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607215 = validateParameter(valid_607215, JString, required = false,
                                 default = nil)
  if valid_607215 != nil:
    section.add "X-Amz-Content-Sha256", valid_607215
  var valid_607216 = header.getOrDefault("X-Amz-Date")
  valid_607216 = validateParameter(valid_607216, JString, required = false,
                                 default = nil)
  if valid_607216 != nil:
    section.add "X-Amz-Date", valid_607216
  var valid_607217 = header.getOrDefault("X-Amz-Credential")
  valid_607217 = validateParameter(valid_607217, JString, required = false,
                                 default = nil)
  if valid_607217 != nil:
    section.add "X-Amz-Credential", valid_607217
  var valid_607218 = header.getOrDefault("X-Amz-Security-Token")
  valid_607218 = validateParameter(valid_607218, JString, required = false,
                                 default = nil)
  if valid_607218 != nil:
    section.add "X-Amz-Security-Token", valid_607218
  var valid_607219 = header.getOrDefault("X-Amz-Algorithm")
  valid_607219 = validateParameter(valid_607219, JString, required = false,
                                 default = nil)
  if valid_607219 != nil:
    section.add "X-Amz-Algorithm", valid_607219
  var valid_607220 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607220 = validateParameter(valid_607220, JString, required = false,
                                 default = nil)
  if valid_607220 != nil:
    section.add "X-Amz-SignedHeaders", valid_607220
  result.add "header", section
  ## parameters in `formData` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   RequireTLS: JBool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   EngineFamily: JString (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_607221 = formData.getOrDefault("IdleClientTimeout")
  valid_607221 = validateParameter(valid_607221, JInt, required = false, default = nil)
  if valid_607221 != nil:
    section.add "IdleClientTimeout", valid_607221
  assert formData != nil,
        "formData argument is necessary due to required `VpcSubnetIds` field"
  var valid_607222 = formData.getOrDefault("VpcSubnetIds")
  valid_607222 = validateParameter(valid_607222, JArray, required = true, default = nil)
  if valid_607222 != nil:
    section.add "VpcSubnetIds", valid_607222
  var valid_607223 = formData.getOrDefault("RequireTLS")
  valid_607223 = validateParameter(valid_607223, JBool, required = false, default = nil)
  if valid_607223 != nil:
    section.add "RequireTLS", valid_607223
  var valid_607224 = formData.getOrDefault("DebugLogging")
  valid_607224 = validateParameter(valid_607224, JBool, required = false, default = nil)
  if valid_607224 != nil:
    section.add "DebugLogging", valid_607224
  var valid_607225 = formData.getOrDefault("RoleArn")
  valid_607225 = validateParameter(valid_607225, JString, required = true,
                                 default = nil)
  if valid_607225 != nil:
    section.add "RoleArn", valid_607225
  var valid_607226 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_607226 = validateParameter(valid_607226, JArray, required = false,
                                 default = nil)
  if valid_607226 != nil:
    section.add "VpcSecurityGroupIds", valid_607226
  var valid_607227 = formData.getOrDefault("EngineFamily")
  valid_607227 = validateParameter(valid_607227, JString, required = true,
                                 default = newJString("MYSQL"))
  if valid_607227 != nil:
    section.add "EngineFamily", valid_607227
  var valid_607228 = formData.getOrDefault("Auth")
  valid_607228 = validateParameter(valid_607228, JArray, required = true, default = nil)
  if valid_607228 != nil:
    section.add "Auth", valid_607228
  var valid_607229 = formData.getOrDefault("DBProxyName")
  valid_607229 = validateParameter(valid_607229, JString, required = true,
                                 default = nil)
  if valid_607229 != nil:
    section.add "DBProxyName", valid_607229
  var valid_607230 = formData.getOrDefault("Tags")
  valid_607230 = validateParameter(valid_607230, JArray, required = false,
                                 default = nil)
  if valid_607230 != nil:
    section.add "Tags", valid_607230
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607231: Call_PostCreateDBProxy_607209; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  let valid = call_607231.validator(path, query, header, formData, body)
  let scheme = call_607231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607231.url(scheme.get, call_607231.host, call_607231.base,
                         call_607231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607231, url, valid)

proc call*(call_607232: Call_PostCreateDBProxy_607209; VpcSubnetIds: JsonNode;
          RoleArn: string; Auth: JsonNode; DBProxyName: string;
          IdleClientTimeout: int = 0; RequireTLS: bool = false;
          DebugLogging: bool = false; VpcSecurityGroupIds: JsonNode = nil;
          EngineFamily: string = "MYSQL"; Action: string = "CreateDBProxy";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   RequireTLS: bool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   EngineFamily: string (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   DBProxyName: string (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_607233 = newJObject()
  var formData_607234 = newJObject()
  add(formData_607234, "IdleClientTimeout", newJInt(IdleClientTimeout))
  if VpcSubnetIds != nil:
    formData_607234.add "VpcSubnetIds", VpcSubnetIds
  add(formData_607234, "RequireTLS", newJBool(RequireTLS))
  add(formData_607234, "DebugLogging", newJBool(DebugLogging))
  add(formData_607234, "RoleArn", newJString(RoleArn))
  if VpcSecurityGroupIds != nil:
    formData_607234.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_607234, "EngineFamily", newJString(EngineFamily))
  if Auth != nil:
    formData_607234.add "Auth", Auth
  add(formData_607234, "DBProxyName", newJString(DBProxyName))
  add(query_607233, "Action", newJString(Action))
  if Tags != nil:
    formData_607234.add "Tags", Tags
  add(query_607233, "Version", newJString(Version))
  result = call_607232.call(nil, query_607233, nil, formData_607234, nil)

var postCreateDBProxy* = Call_PostCreateDBProxy_607209(name: "postCreateDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBProxy", validator: validate_PostCreateDBProxy_607210,
    base: "/", url: url_PostCreateDBProxy_607211,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBProxy_607184 = ref object of OpenApiRestCall_605589
proc url_GetCreateDBProxy_607186(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBProxy_607185(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   RequireTLS: JBool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   EngineFamily: JString (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   Version: JString (required)
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  section = newJObject()
  var valid_607187 = query.getOrDefault("IdleClientTimeout")
  valid_607187 = validateParameter(valid_607187, JInt, required = false, default = nil)
  if valid_607187 != nil:
    section.add "IdleClientTimeout", valid_607187
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_607188 = query.getOrDefault("RoleArn")
  valid_607188 = validateParameter(valid_607188, JString, required = true,
                                 default = nil)
  if valid_607188 != nil:
    section.add "RoleArn", valid_607188
  var valid_607189 = query.getOrDefault("Tags")
  valid_607189 = validateParameter(valid_607189, JArray, required = false,
                                 default = nil)
  if valid_607189 != nil:
    section.add "Tags", valid_607189
  var valid_607190 = query.getOrDefault("Auth")
  valid_607190 = validateParameter(valid_607190, JArray, required = true, default = nil)
  if valid_607190 != nil:
    section.add "Auth", valid_607190
  var valid_607191 = query.getOrDefault("RequireTLS")
  valid_607191 = validateParameter(valid_607191, JBool, required = false, default = nil)
  if valid_607191 != nil:
    section.add "RequireTLS", valid_607191
  var valid_607192 = query.getOrDefault("EngineFamily")
  valid_607192 = validateParameter(valid_607192, JString, required = true,
                                 default = newJString("MYSQL"))
  if valid_607192 != nil:
    section.add "EngineFamily", valid_607192
  var valid_607193 = query.getOrDefault("Action")
  valid_607193 = validateParameter(valid_607193, JString, required = true,
                                 default = newJString("CreateDBProxy"))
  if valid_607193 != nil:
    section.add "Action", valid_607193
  var valid_607194 = query.getOrDefault("VpcSecurityGroupIds")
  valid_607194 = validateParameter(valid_607194, JArray, required = false,
                                 default = nil)
  if valid_607194 != nil:
    section.add "VpcSecurityGroupIds", valid_607194
  var valid_607195 = query.getOrDefault("VpcSubnetIds")
  valid_607195 = validateParameter(valid_607195, JArray, required = true, default = nil)
  if valid_607195 != nil:
    section.add "VpcSubnetIds", valid_607195
  var valid_607196 = query.getOrDefault("Version")
  valid_607196 = validateParameter(valid_607196, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607196 != nil:
    section.add "Version", valid_607196
  var valid_607197 = query.getOrDefault("DebugLogging")
  valid_607197 = validateParameter(valid_607197, JBool, required = false, default = nil)
  if valid_607197 != nil:
    section.add "DebugLogging", valid_607197
  var valid_607198 = query.getOrDefault("DBProxyName")
  valid_607198 = validateParameter(valid_607198, JString, required = true,
                                 default = nil)
  if valid_607198 != nil:
    section.add "DBProxyName", valid_607198
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607199 = header.getOrDefault("X-Amz-Signature")
  valid_607199 = validateParameter(valid_607199, JString, required = false,
                                 default = nil)
  if valid_607199 != nil:
    section.add "X-Amz-Signature", valid_607199
  var valid_607200 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607200 = validateParameter(valid_607200, JString, required = false,
                                 default = nil)
  if valid_607200 != nil:
    section.add "X-Amz-Content-Sha256", valid_607200
  var valid_607201 = header.getOrDefault("X-Amz-Date")
  valid_607201 = validateParameter(valid_607201, JString, required = false,
                                 default = nil)
  if valid_607201 != nil:
    section.add "X-Amz-Date", valid_607201
  var valid_607202 = header.getOrDefault("X-Amz-Credential")
  valid_607202 = validateParameter(valid_607202, JString, required = false,
                                 default = nil)
  if valid_607202 != nil:
    section.add "X-Amz-Credential", valid_607202
  var valid_607203 = header.getOrDefault("X-Amz-Security-Token")
  valid_607203 = validateParameter(valid_607203, JString, required = false,
                                 default = nil)
  if valid_607203 != nil:
    section.add "X-Amz-Security-Token", valid_607203
  var valid_607204 = header.getOrDefault("X-Amz-Algorithm")
  valid_607204 = validateParameter(valid_607204, JString, required = false,
                                 default = nil)
  if valid_607204 != nil:
    section.add "X-Amz-Algorithm", valid_607204
  var valid_607205 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607205 = validateParameter(valid_607205, JString, required = false,
                                 default = nil)
  if valid_607205 != nil:
    section.add "X-Amz-SignedHeaders", valid_607205
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607206: Call_GetCreateDBProxy_607184; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  let valid = call_607206.validator(path, query, header, formData, body)
  let scheme = call_607206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607206.url(scheme.get, call_607206.host, call_607206.base,
                         call_607206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607206, url, valid)

proc call*(call_607207: Call_GetCreateDBProxy_607184; RoleArn: string;
          Auth: JsonNode; VpcSubnetIds: JsonNode; DBProxyName: string;
          IdleClientTimeout: int = 0; Tags: JsonNode = nil; RequireTLS: bool = false;
          EngineFamily: string = "MYSQL"; Action: string = "CreateDBProxy";
          VpcSecurityGroupIds: JsonNode = nil; Version: string = "2014-10-31";
          DebugLogging: bool = false): Recallable =
  ## getCreateDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   RequireTLS: bool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   EngineFamily: string (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   Version: string (required)
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: string (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  var query_607208 = newJObject()
  add(query_607208, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(query_607208, "RoleArn", newJString(RoleArn))
  if Tags != nil:
    query_607208.add "Tags", Tags
  if Auth != nil:
    query_607208.add "Auth", Auth
  add(query_607208, "RequireTLS", newJBool(RequireTLS))
  add(query_607208, "EngineFamily", newJString(EngineFamily))
  add(query_607208, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_607208.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if VpcSubnetIds != nil:
    query_607208.add "VpcSubnetIds", VpcSubnetIds
  add(query_607208, "Version", newJString(Version))
  add(query_607208, "DebugLogging", newJBool(DebugLogging))
  add(query_607208, "DBProxyName", newJString(DBProxyName))
  result = call_607207.call(nil, query_607208, nil, nil, nil)

var getCreateDBProxy* = Call_GetCreateDBProxy_607184(name: "getCreateDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBProxy", validator: validate_GetCreateDBProxy_607185,
    base: "/", url: url_GetCreateDBProxy_607186,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSecurityGroup_607253 = ref object of OpenApiRestCall_605589
proc url_PostCreateDBSecurityGroup_607255(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSecurityGroup_607254(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607256 = query.getOrDefault("Action")
  valid_607256 = validateParameter(valid_607256, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_607256 != nil:
    section.add "Action", valid_607256
  var valid_607257 = query.getOrDefault("Version")
  valid_607257 = validateParameter(valid_607257, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607257 != nil:
    section.add "Version", valid_607257
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607258 = header.getOrDefault("X-Amz-Signature")
  valid_607258 = validateParameter(valid_607258, JString, required = false,
                                 default = nil)
  if valid_607258 != nil:
    section.add "X-Amz-Signature", valid_607258
  var valid_607259 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607259 = validateParameter(valid_607259, JString, required = false,
                                 default = nil)
  if valid_607259 != nil:
    section.add "X-Amz-Content-Sha256", valid_607259
  var valid_607260 = header.getOrDefault("X-Amz-Date")
  valid_607260 = validateParameter(valid_607260, JString, required = false,
                                 default = nil)
  if valid_607260 != nil:
    section.add "X-Amz-Date", valid_607260
  var valid_607261 = header.getOrDefault("X-Amz-Credential")
  valid_607261 = validateParameter(valid_607261, JString, required = false,
                                 default = nil)
  if valid_607261 != nil:
    section.add "X-Amz-Credential", valid_607261
  var valid_607262 = header.getOrDefault("X-Amz-Security-Token")
  valid_607262 = validateParameter(valid_607262, JString, required = false,
                                 default = nil)
  if valid_607262 != nil:
    section.add "X-Amz-Security-Token", valid_607262
  var valid_607263 = header.getOrDefault("X-Amz-Algorithm")
  valid_607263 = validateParameter(valid_607263, JString, required = false,
                                 default = nil)
  if valid_607263 != nil:
    section.add "X-Amz-Algorithm", valid_607263
  var valid_607264 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607264 = validateParameter(valid_607264, JString, required = false,
                                 default = nil)
  if valid_607264 != nil:
    section.add "X-Amz-SignedHeaders", valid_607264
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupDescription` field"
  var valid_607265 = formData.getOrDefault("DBSecurityGroupDescription")
  valid_607265 = validateParameter(valid_607265, JString, required = true,
                                 default = nil)
  if valid_607265 != nil:
    section.add "DBSecurityGroupDescription", valid_607265
  var valid_607266 = formData.getOrDefault("DBSecurityGroupName")
  valid_607266 = validateParameter(valid_607266, JString, required = true,
                                 default = nil)
  if valid_607266 != nil:
    section.add "DBSecurityGroupName", valid_607266
  var valid_607267 = formData.getOrDefault("Tags")
  valid_607267 = validateParameter(valid_607267, JArray, required = false,
                                 default = nil)
  if valid_607267 != nil:
    section.add "Tags", valid_607267
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607268: Call_PostCreateDBSecurityGroup_607253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_607268.validator(path, query, header, formData, body)
  let scheme = call_607268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607268.url(scheme.get, call_607268.host, call_607268.base,
                         call_607268.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607268, url, valid)

proc call*(call_607269: Call_PostCreateDBSecurityGroup_607253;
          DBSecurityGroupDescription: string; DBSecurityGroupName: string;
          Action: string = "CreateDBSecurityGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_607270 = newJObject()
  var formData_607271 = newJObject()
  add(formData_607271, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(formData_607271, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_607270, "Action", newJString(Action))
  if Tags != nil:
    formData_607271.add "Tags", Tags
  add(query_607270, "Version", newJString(Version))
  result = call_607269.call(nil, query_607270, nil, formData_607271, nil)

var postCreateDBSecurityGroup* = Call_PostCreateDBSecurityGroup_607253(
    name: "postCreateDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_PostCreateDBSecurityGroup_607254, base: "/",
    url: url_PostCreateDBSecurityGroup_607255,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSecurityGroup_607235 = ref object of OpenApiRestCall_605589
proc url_GetCreateDBSecurityGroup_607237(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSecurityGroup_607236(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_607238 = query.getOrDefault("DBSecurityGroupName")
  valid_607238 = validateParameter(valid_607238, JString, required = true,
                                 default = nil)
  if valid_607238 != nil:
    section.add "DBSecurityGroupName", valid_607238
  var valid_607239 = query.getOrDefault("Tags")
  valid_607239 = validateParameter(valid_607239, JArray, required = false,
                                 default = nil)
  if valid_607239 != nil:
    section.add "Tags", valid_607239
  var valid_607240 = query.getOrDefault("DBSecurityGroupDescription")
  valid_607240 = validateParameter(valid_607240, JString, required = true,
                                 default = nil)
  if valid_607240 != nil:
    section.add "DBSecurityGroupDescription", valid_607240
  var valid_607241 = query.getOrDefault("Action")
  valid_607241 = validateParameter(valid_607241, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_607241 != nil:
    section.add "Action", valid_607241
  var valid_607242 = query.getOrDefault("Version")
  valid_607242 = validateParameter(valid_607242, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607242 != nil:
    section.add "Version", valid_607242
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607243 = header.getOrDefault("X-Amz-Signature")
  valid_607243 = validateParameter(valid_607243, JString, required = false,
                                 default = nil)
  if valid_607243 != nil:
    section.add "X-Amz-Signature", valid_607243
  var valid_607244 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607244 = validateParameter(valid_607244, JString, required = false,
                                 default = nil)
  if valid_607244 != nil:
    section.add "X-Amz-Content-Sha256", valid_607244
  var valid_607245 = header.getOrDefault("X-Amz-Date")
  valid_607245 = validateParameter(valid_607245, JString, required = false,
                                 default = nil)
  if valid_607245 != nil:
    section.add "X-Amz-Date", valid_607245
  var valid_607246 = header.getOrDefault("X-Amz-Credential")
  valid_607246 = validateParameter(valid_607246, JString, required = false,
                                 default = nil)
  if valid_607246 != nil:
    section.add "X-Amz-Credential", valid_607246
  var valid_607247 = header.getOrDefault("X-Amz-Security-Token")
  valid_607247 = validateParameter(valid_607247, JString, required = false,
                                 default = nil)
  if valid_607247 != nil:
    section.add "X-Amz-Security-Token", valid_607247
  var valid_607248 = header.getOrDefault("X-Amz-Algorithm")
  valid_607248 = validateParameter(valid_607248, JString, required = false,
                                 default = nil)
  if valid_607248 != nil:
    section.add "X-Amz-Algorithm", valid_607248
  var valid_607249 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607249 = validateParameter(valid_607249, JString, required = false,
                                 default = nil)
  if valid_607249 != nil:
    section.add "X-Amz-SignedHeaders", valid_607249
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607250: Call_GetCreateDBSecurityGroup_607235; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_607250.validator(path, query, header, formData, body)
  let scheme = call_607250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607250.url(scheme.get, call_607250.host, call_607250.base,
                         call_607250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607250, url, valid)

proc call*(call_607251: Call_GetCreateDBSecurityGroup_607235;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607252 = newJObject()
  add(query_607252, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Tags != nil:
    query_607252.add "Tags", Tags
  add(query_607252, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(query_607252, "Action", newJString(Action))
  add(query_607252, "Version", newJString(Version))
  result = call_607251.call(nil, query_607252, nil, nil, nil)

var getCreateDBSecurityGroup* = Call_GetCreateDBSecurityGroup_607235(
    name: "getCreateDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_GetCreateDBSecurityGroup_607236, base: "/",
    url: url_GetCreateDBSecurityGroup_607237, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSnapshot_607290 = ref object of OpenApiRestCall_605589
proc url_PostCreateDBSnapshot_607292(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSnapshot_607291(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607293 = query.getOrDefault("Action")
  valid_607293 = validateParameter(valid_607293, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_607293 != nil:
    section.add "Action", valid_607293
  var valid_607294 = query.getOrDefault("Version")
  valid_607294 = validateParameter(valid_607294, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607294 != nil:
    section.add "Version", valid_607294
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607295 = header.getOrDefault("X-Amz-Signature")
  valid_607295 = validateParameter(valid_607295, JString, required = false,
                                 default = nil)
  if valid_607295 != nil:
    section.add "X-Amz-Signature", valid_607295
  var valid_607296 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607296 = validateParameter(valid_607296, JString, required = false,
                                 default = nil)
  if valid_607296 != nil:
    section.add "X-Amz-Content-Sha256", valid_607296
  var valid_607297 = header.getOrDefault("X-Amz-Date")
  valid_607297 = validateParameter(valid_607297, JString, required = false,
                                 default = nil)
  if valid_607297 != nil:
    section.add "X-Amz-Date", valid_607297
  var valid_607298 = header.getOrDefault("X-Amz-Credential")
  valid_607298 = validateParameter(valid_607298, JString, required = false,
                                 default = nil)
  if valid_607298 != nil:
    section.add "X-Amz-Credential", valid_607298
  var valid_607299 = header.getOrDefault("X-Amz-Security-Token")
  valid_607299 = validateParameter(valid_607299, JString, required = false,
                                 default = nil)
  if valid_607299 != nil:
    section.add "X-Amz-Security-Token", valid_607299
  var valid_607300 = header.getOrDefault("X-Amz-Algorithm")
  valid_607300 = validateParameter(valid_607300, JString, required = false,
                                 default = nil)
  if valid_607300 != nil:
    section.add "X-Amz-Algorithm", valid_607300
  var valid_607301 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607301 = validateParameter(valid_607301, JString, required = false,
                                 default = nil)
  if valid_607301 != nil:
    section.add "X-Amz-SignedHeaders", valid_607301
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607302 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607302 = validateParameter(valid_607302, JString, required = true,
                                 default = nil)
  if valid_607302 != nil:
    section.add "DBInstanceIdentifier", valid_607302
  var valid_607303 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_607303 = validateParameter(valid_607303, JString, required = true,
                                 default = nil)
  if valid_607303 != nil:
    section.add "DBSnapshotIdentifier", valid_607303
  var valid_607304 = formData.getOrDefault("Tags")
  valid_607304 = validateParameter(valid_607304, JArray, required = false,
                                 default = nil)
  if valid_607304 != nil:
    section.add "Tags", valid_607304
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607305: Call_PostCreateDBSnapshot_607290; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_607305.validator(path, query, header, formData, body)
  let scheme = call_607305.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607305.url(scheme.get, call_607305.host, call_607305.base,
                         call_607305.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607305, url, valid)

proc call*(call_607306: Call_PostCreateDBSnapshot_607290;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Action: string = "CreateDBSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_607307 = newJObject()
  var formData_607308 = newJObject()
  add(formData_607308, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_607308, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_607307, "Action", newJString(Action))
  if Tags != nil:
    formData_607308.add "Tags", Tags
  add(query_607307, "Version", newJString(Version))
  result = call_607306.call(nil, query_607307, nil, formData_607308, nil)

var postCreateDBSnapshot* = Call_PostCreateDBSnapshot_607290(
    name: "postCreateDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_PostCreateDBSnapshot_607291, base: "/",
    url: url_PostCreateDBSnapshot_607292, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSnapshot_607272 = ref object of OpenApiRestCall_605589
proc url_GetCreateDBSnapshot_607274(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSnapshot_607273(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607275 = query.getOrDefault("Tags")
  valid_607275 = validateParameter(valid_607275, JArray, required = false,
                                 default = nil)
  if valid_607275 != nil:
    section.add "Tags", valid_607275
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607276 = query.getOrDefault("DBInstanceIdentifier")
  valid_607276 = validateParameter(valid_607276, JString, required = true,
                                 default = nil)
  if valid_607276 != nil:
    section.add "DBInstanceIdentifier", valid_607276
  var valid_607277 = query.getOrDefault("DBSnapshotIdentifier")
  valid_607277 = validateParameter(valid_607277, JString, required = true,
                                 default = nil)
  if valid_607277 != nil:
    section.add "DBSnapshotIdentifier", valid_607277
  var valid_607278 = query.getOrDefault("Action")
  valid_607278 = validateParameter(valid_607278, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_607278 != nil:
    section.add "Action", valid_607278
  var valid_607279 = query.getOrDefault("Version")
  valid_607279 = validateParameter(valid_607279, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607279 != nil:
    section.add "Version", valid_607279
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607280 = header.getOrDefault("X-Amz-Signature")
  valid_607280 = validateParameter(valid_607280, JString, required = false,
                                 default = nil)
  if valid_607280 != nil:
    section.add "X-Amz-Signature", valid_607280
  var valid_607281 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607281 = validateParameter(valid_607281, JString, required = false,
                                 default = nil)
  if valid_607281 != nil:
    section.add "X-Amz-Content-Sha256", valid_607281
  var valid_607282 = header.getOrDefault("X-Amz-Date")
  valid_607282 = validateParameter(valid_607282, JString, required = false,
                                 default = nil)
  if valid_607282 != nil:
    section.add "X-Amz-Date", valid_607282
  var valid_607283 = header.getOrDefault("X-Amz-Credential")
  valid_607283 = validateParameter(valid_607283, JString, required = false,
                                 default = nil)
  if valid_607283 != nil:
    section.add "X-Amz-Credential", valid_607283
  var valid_607284 = header.getOrDefault("X-Amz-Security-Token")
  valid_607284 = validateParameter(valid_607284, JString, required = false,
                                 default = nil)
  if valid_607284 != nil:
    section.add "X-Amz-Security-Token", valid_607284
  var valid_607285 = header.getOrDefault("X-Amz-Algorithm")
  valid_607285 = validateParameter(valid_607285, JString, required = false,
                                 default = nil)
  if valid_607285 != nil:
    section.add "X-Amz-Algorithm", valid_607285
  var valid_607286 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607286 = validateParameter(valid_607286, JString, required = false,
                                 default = nil)
  if valid_607286 != nil:
    section.add "X-Amz-SignedHeaders", valid_607286
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607287: Call_GetCreateDBSnapshot_607272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_607287.validator(path, query, header, formData, body)
  let scheme = call_607287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607287.url(scheme.get, call_607287.host, call_607287.base,
                         call_607287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607287, url, valid)

proc call*(call_607288: Call_GetCreateDBSnapshot_607272;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607289 = newJObject()
  if Tags != nil:
    query_607289.add "Tags", Tags
  add(query_607289, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607289, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_607289, "Action", newJString(Action))
  add(query_607289, "Version", newJString(Version))
  result = call_607288.call(nil, query_607289, nil, nil, nil)

var getCreateDBSnapshot* = Call_GetCreateDBSnapshot_607272(
    name: "getCreateDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_GetCreateDBSnapshot_607273, base: "/",
    url: url_GetCreateDBSnapshot_607274, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_607328 = ref object of OpenApiRestCall_605589
proc url_PostCreateDBSubnetGroup_607330(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSubnetGroup_607329(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607331 = query.getOrDefault("Action")
  valid_607331 = validateParameter(valid_607331, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_607331 != nil:
    section.add "Action", valid_607331
  var valid_607332 = query.getOrDefault("Version")
  valid_607332 = validateParameter(valid_607332, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607332 != nil:
    section.add "Version", valid_607332
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607333 = header.getOrDefault("X-Amz-Signature")
  valid_607333 = validateParameter(valid_607333, JString, required = false,
                                 default = nil)
  if valid_607333 != nil:
    section.add "X-Amz-Signature", valid_607333
  var valid_607334 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607334 = validateParameter(valid_607334, JString, required = false,
                                 default = nil)
  if valid_607334 != nil:
    section.add "X-Amz-Content-Sha256", valid_607334
  var valid_607335 = header.getOrDefault("X-Amz-Date")
  valid_607335 = validateParameter(valid_607335, JString, required = false,
                                 default = nil)
  if valid_607335 != nil:
    section.add "X-Amz-Date", valid_607335
  var valid_607336 = header.getOrDefault("X-Amz-Credential")
  valid_607336 = validateParameter(valid_607336, JString, required = false,
                                 default = nil)
  if valid_607336 != nil:
    section.add "X-Amz-Credential", valid_607336
  var valid_607337 = header.getOrDefault("X-Amz-Security-Token")
  valid_607337 = validateParameter(valid_607337, JString, required = false,
                                 default = nil)
  if valid_607337 != nil:
    section.add "X-Amz-Security-Token", valid_607337
  var valid_607338 = header.getOrDefault("X-Amz-Algorithm")
  valid_607338 = validateParameter(valid_607338, JString, required = false,
                                 default = nil)
  if valid_607338 != nil:
    section.add "X-Amz-Algorithm", valid_607338
  var valid_607339 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607339 = validateParameter(valid_607339, JString, required = false,
                                 default = nil)
  if valid_607339 != nil:
    section.add "X-Amz-SignedHeaders", valid_607339
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupDescription` field"
  var valid_607340 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_607340 = validateParameter(valid_607340, JString, required = true,
                                 default = nil)
  if valid_607340 != nil:
    section.add "DBSubnetGroupDescription", valid_607340
  var valid_607341 = formData.getOrDefault("Tags")
  valid_607341 = validateParameter(valid_607341, JArray, required = false,
                                 default = nil)
  if valid_607341 != nil:
    section.add "Tags", valid_607341
  var valid_607342 = formData.getOrDefault("DBSubnetGroupName")
  valid_607342 = validateParameter(valid_607342, JString, required = true,
                                 default = nil)
  if valid_607342 != nil:
    section.add "DBSubnetGroupName", valid_607342
  var valid_607343 = formData.getOrDefault("SubnetIds")
  valid_607343 = validateParameter(valid_607343, JArray, required = true, default = nil)
  if valid_607343 != nil:
    section.add "SubnetIds", valid_607343
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607344: Call_PostCreateDBSubnetGroup_607328; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_607344.validator(path, query, header, formData, body)
  let scheme = call_607344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607344.url(scheme.get, call_607344.host, call_607344.base,
                         call_607344.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607344, url, valid)

proc call*(call_607345: Call_PostCreateDBSubnetGroup_607328;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateDBSubnetGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  var query_607346 = newJObject()
  var formData_607347 = newJObject()
  add(formData_607347, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_607346, "Action", newJString(Action))
  if Tags != nil:
    formData_607347.add "Tags", Tags
  add(formData_607347, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607346, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_607347.add "SubnetIds", SubnetIds
  result = call_607345.call(nil, query_607346, nil, formData_607347, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_607328(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_607329, base: "/",
    url: url_PostCreateDBSubnetGroup_607330, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_607309 = ref object of OpenApiRestCall_605589
proc url_GetCreateDBSubnetGroup_607311(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSubnetGroup_607310(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_607312 = query.getOrDefault("Tags")
  valid_607312 = validateParameter(valid_607312, JArray, required = false,
                                 default = nil)
  if valid_607312 != nil:
    section.add "Tags", valid_607312
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_607313 = query.getOrDefault("SubnetIds")
  valid_607313 = validateParameter(valid_607313, JArray, required = true, default = nil)
  if valid_607313 != nil:
    section.add "SubnetIds", valid_607313
  var valid_607314 = query.getOrDefault("Action")
  valid_607314 = validateParameter(valid_607314, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_607314 != nil:
    section.add "Action", valid_607314
  var valid_607315 = query.getOrDefault("DBSubnetGroupDescription")
  valid_607315 = validateParameter(valid_607315, JString, required = true,
                                 default = nil)
  if valid_607315 != nil:
    section.add "DBSubnetGroupDescription", valid_607315
  var valid_607316 = query.getOrDefault("DBSubnetGroupName")
  valid_607316 = validateParameter(valid_607316, JString, required = true,
                                 default = nil)
  if valid_607316 != nil:
    section.add "DBSubnetGroupName", valid_607316
  var valid_607317 = query.getOrDefault("Version")
  valid_607317 = validateParameter(valid_607317, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607317 != nil:
    section.add "Version", valid_607317
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607318 = header.getOrDefault("X-Amz-Signature")
  valid_607318 = validateParameter(valid_607318, JString, required = false,
                                 default = nil)
  if valid_607318 != nil:
    section.add "X-Amz-Signature", valid_607318
  var valid_607319 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607319 = validateParameter(valid_607319, JString, required = false,
                                 default = nil)
  if valid_607319 != nil:
    section.add "X-Amz-Content-Sha256", valid_607319
  var valid_607320 = header.getOrDefault("X-Amz-Date")
  valid_607320 = validateParameter(valid_607320, JString, required = false,
                                 default = nil)
  if valid_607320 != nil:
    section.add "X-Amz-Date", valid_607320
  var valid_607321 = header.getOrDefault("X-Amz-Credential")
  valid_607321 = validateParameter(valid_607321, JString, required = false,
                                 default = nil)
  if valid_607321 != nil:
    section.add "X-Amz-Credential", valid_607321
  var valid_607322 = header.getOrDefault("X-Amz-Security-Token")
  valid_607322 = validateParameter(valid_607322, JString, required = false,
                                 default = nil)
  if valid_607322 != nil:
    section.add "X-Amz-Security-Token", valid_607322
  var valid_607323 = header.getOrDefault("X-Amz-Algorithm")
  valid_607323 = validateParameter(valid_607323, JString, required = false,
                                 default = nil)
  if valid_607323 != nil:
    section.add "X-Amz-Algorithm", valid_607323
  var valid_607324 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607324 = validateParameter(valid_607324, JString, required = false,
                                 default = nil)
  if valid_607324 != nil:
    section.add "X-Amz-SignedHeaders", valid_607324
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607325: Call_GetCreateDBSubnetGroup_607309; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_607325.validator(path, query, header, formData, body)
  let scheme = call_607325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607325.url(scheme.get, call_607325.host, call_607325.base,
                         call_607325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607325, url, valid)

proc call*(call_607326: Call_GetCreateDBSubnetGroup_607309; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_607327 = newJObject()
  if Tags != nil:
    query_607327.add "Tags", Tags
  if SubnetIds != nil:
    query_607327.add "SubnetIds", SubnetIds
  add(query_607327, "Action", newJString(Action))
  add(query_607327, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_607327, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607327, "Version", newJString(Version))
  result = call_607326.call(nil, query_607327, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_607309(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_607310, base: "/",
    url: url_GetCreateDBSubnetGroup_607311, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_607370 = ref object of OpenApiRestCall_605589
proc url_PostCreateEventSubscription_607372(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateEventSubscription_607371(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607373 = query.getOrDefault("Action")
  valid_607373 = validateParameter(valid_607373, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_607373 != nil:
    section.add "Action", valid_607373
  var valid_607374 = query.getOrDefault("Version")
  valid_607374 = validateParameter(valid_607374, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607374 != nil:
    section.add "Version", valid_607374
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607375 = header.getOrDefault("X-Amz-Signature")
  valid_607375 = validateParameter(valid_607375, JString, required = false,
                                 default = nil)
  if valid_607375 != nil:
    section.add "X-Amz-Signature", valid_607375
  var valid_607376 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607376 = validateParameter(valid_607376, JString, required = false,
                                 default = nil)
  if valid_607376 != nil:
    section.add "X-Amz-Content-Sha256", valid_607376
  var valid_607377 = header.getOrDefault("X-Amz-Date")
  valid_607377 = validateParameter(valid_607377, JString, required = false,
                                 default = nil)
  if valid_607377 != nil:
    section.add "X-Amz-Date", valid_607377
  var valid_607378 = header.getOrDefault("X-Amz-Credential")
  valid_607378 = validateParameter(valid_607378, JString, required = false,
                                 default = nil)
  if valid_607378 != nil:
    section.add "X-Amz-Credential", valid_607378
  var valid_607379 = header.getOrDefault("X-Amz-Security-Token")
  valid_607379 = validateParameter(valid_607379, JString, required = false,
                                 default = nil)
  if valid_607379 != nil:
    section.add "X-Amz-Security-Token", valid_607379
  var valid_607380 = header.getOrDefault("X-Amz-Algorithm")
  valid_607380 = validateParameter(valid_607380, JString, required = false,
                                 default = nil)
  if valid_607380 != nil:
    section.add "X-Amz-Algorithm", valid_607380
  var valid_607381 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607381 = validateParameter(valid_607381, JString, required = false,
                                 default = nil)
  if valid_607381 != nil:
    section.add "X-Amz-SignedHeaders", valid_607381
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_607382 = formData.getOrDefault("SourceIds")
  valid_607382 = validateParameter(valid_607382, JArray, required = false,
                                 default = nil)
  if valid_607382 != nil:
    section.add "SourceIds", valid_607382
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_607383 = formData.getOrDefault("SnsTopicArn")
  valid_607383 = validateParameter(valid_607383, JString, required = true,
                                 default = nil)
  if valid_607383 != nil:
    section.add "SnsTopicArn", valid_607383
  var valid_607384 = formData.getOrDefault("Enabled")
  valid_607384 = validateParameter(valid_607384, JBool, required = false, default = nil)
  if valid_607384 != nil:
    section.add "Enabled", valid_607384
  var valid_607385 = formData.getOrDefault("SubscriptionName")
  valid_607385 = validateParameter(valid_607385, JString, required = true,
                                 default = nil)
  if valid_607385 != nil:
    section.add "SubscriptionName", valid_607385
  var valid_607386 = formData.getOrDefault("SourceType")
  valid_607386 = validateParameter(valid_607386, JString, required = false,
                                 default = nil)
  if valid_607386 != nil:
    section.add "SourceType", valid_607386
  var valid_607387 = formData.getOrDefault("EventCategories")
  valid_607387 = validateParameter(valid_607387, JArray, required = false,
                                 default = nil)
  if valid_607387 != nil:
    section.add "EventCategories", valid_607387
  var valid_607388 = formData.getOrDefault("Tags")
  valid_607388 = validateParameter(valid_607388, JArray, required = false,
                                 default = nil)
  if valid_607388 != nil:
    section.add "Tags", valid_607388
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607389: Call_PostCreateEventSubscription_607370; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  let valid = call_607389.validator(path, query, header, formData, body)
  let scheme = call_607389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607389.url(scheme.get, call_607389.host, call_607389.base,
                         call_607389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607389, url, valid)

proc call*(call_607390: Call_PostCreateEventSubscription_607370;
          SnsTopicArn: string; SubscriptionName: string; SourceIds: JsonNode = nil;
          Enabled: bool = false; SourceType: string = "";
          EventCategories: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_607391 = newJObject()
  var formData_607392 = newJObject()
  if SourceIds != nil:
    formData_607392.add "SourceIds", SourceIds
  add(formData_607392, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_607392, "Enabled", newJBool(Enabled))
  add(formData_607392, "SubscriptionName", newJString(SubscriptionName))
  add(formData_607392, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_607392.add "EventCategories", EventCategories
  add(query_607391, "Action", newJString(Action))
  if Tags != nil:
    formData_607392.add "Tags", Tags
  add(query_607391, "Version", newJString(Version))
  result = call_607390.call(nil, query_607391, nil, formData_607392, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_607370(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_607371, base: "/",
    url: url_PostCreateEventSubscription_607372,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_607348 = ref object of OpenApiRestCall_605589
proc url_GetCreateEventSubscription_607350(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateEventSubscription_607349(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_607351 = query.getOrDefault("Tags")
  valid_607351 = validateParameter(valid_607351, JArray, required = false,
                                 default = nil)
  if valid_607351 != nil:
    section.add "Tags", valid_607351
  var valid_607352 = query.getOrDefault("SourceType")
  valid_607352 = validateParameter(valid_607352, JString, required = false,
                                 default = nil)
  if valid_607352 != nil:
    section.add "SourceType", valid_607352
  var valid_607353 = query.getOrDefault("Enabled")
  valid_607353 = validateParameter(valid_607353, JBool, required = false, default = nil)
  if valid_607353 != nil:
    section.add "Enabled", valid_607353
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_607354 = query.getOrDefault("SubscriptionName")
  valid_607354 = validateParameter(valid_607354, JString, required = true,
                                 default = nil)
  if valid_607354 != nil:
    section.add "SubscriptionName", valid_607354
  var valid_607355 = query.getOrDefault("EventCategories")
  valid_607355 = validateParameter(valid_607355, JArray, required = false,
                                 default = nil)
  if valid_607355 != nil:
    section.add "EventCategories", valid_607355
  var valid_607356 = query.getOrDefault("SourceIds")
  valid_607356 = validateParameter(valid_607356, JArray, required = false,
                                 default = nil)
  if valid_607356 != nil:
    section.add "SourceIds", valid_607356
  var valid_607357 = query.getOrDefault("Action")
  valid_607357 = validateParameter(valid_607357, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_607357 != nil:
    section.add "Action", valid_607357
  var valid_607358 = query.getOrDefault("SnsTopicArn")
  valid_607358 = validateParameter(valid_607358, JString, required = true,
                                 default = nil)
  if valid_607358 != nil:
    section.add "SnsTopicArn", valid_607358
  var valid_607359 = query.getOrDefault("Version")
  valid_607359 = validateParameter(valid_607359, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607359 != nil:
    section.add "Version", valid_607359
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607360 = header.getOrDefault("X-Amz-Signature")
  valid_607360 = validateParameter(valid_607360, JString, required = false,
                                 default = nil)
  if valid_607360 != nil:
    section.add "X-Amz-Signature", valid_607360
  var valid_607361 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607361 = validateParameter(valid_607361, JString, required = false,
                                 default = nil)
  if valid_607361 != nil:
    section.add "X-Amz-Content-Sha256", valid_607361
  var valid_607362 = header.getOrDefault("X-Amz-Date")
  valid_607362 = validateParameter(valid_607362, JString, required = false,
                                 default = nil)
  if valid_607362 != nil:
    section.add "X-Amz-Date", valid_607362
  var valid_607363 = header.getOrDefault("X-Amz-Credential")
  valid_607363 = validateParameter(valid_607363, JString, required = false,
                                 default = nil)
  if valid_607363 != nil:
    section.add "X-Amz-Credential", valid_607363
  var valid_607364 = header.getOrDefault("X-Amz-Security-Token")
  valid_607364 = validateParameter(valid_607364, JString, required = false,
                                 default = nil)
  if valid_607364 != nil:
    section.add "X-Amz-Security-Token", valid_607364
  var valid_607365 = header.getOrDefault("X-Amz-Algorithm")
  valid_607365 = validateParameter(valid_607365, JString, required = false,
                                 default = nil)
  if valid_607365 != nil:
    section.add "X-Amz-Algorithm", valid_607365
  var valid_607366 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607366 = validateParameter(valid_607366, JString, required = false,
                                 default = nil)
  if valid_607366 != nil:
    section.add "X-Amz-SignedHeaders", valid_607366
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607367: Call_GetCreateEventSubscription_607348; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  let valid = call_607367.validator(path, query, header, formData, body)
  let scheme = call_607367.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607367.url(scheme.get, call_607367.host, call_607367.base,
                         call_607367.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607367, url, valid)

proc call*(call_607368: Call_GetCreateEventSubscription_607348;
          SubscriptionName: string; SnsTopicArn: string; Tags: JsonNode = nil;
          SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_607369 = newJObject()
  if Tags != nil:
    query_607369.add "Tags", Tags
  add(query_607369, "SourceType", newJString(SourceType))
  add(query_607369, "Enabled", newJBool(Enabled))
  add(query_607369, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_607369.add "EventCategories", EventCategories
  if SourceIds != nil:
    query_607369.add "SourceIds", SourceIds
  add(query_607369, "Action", newJString(Action))
  add(query_607369, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_607369, "Version", newJString(Version))
  result = call_607368.call(nil, query_607369, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_607348(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_607349, base: "/",
    url: url_GetCreateEventSubscription_607350,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGlobalCluster_607415 = ref object of OpenApiRestCall_605589
proc url_PostCreateGlobalCluster_607417(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateGlobalCluster_607416(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607418 = query.getOrDefault("Action")
  valid_607418 = validateParameter(valid_607418, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_607418 != nil:
    section.add "Action", valid_607418
  var valid_607419 = query.getOrDefault("Version")
  valid_607419 = validateParameter(valid_607419, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607419 != nil:
    section.add "Version", valid_607419
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607420 = header.getOrDefault("X-Amz-Signature")
  valid_607420 = validateParameter(valid_607420, JString, required = false,
                                 default = nil)
  if valid_607420 != nil:
    section.add "X-Amz-Signature", valid_607420
  var valid_607421 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607421 = validateParameter(valid_607421, JString, required = false,
                                 default = nil)
  if valid_607421 != nil:
    section.add "X-Amz-Content-Sha256", valid_607421
  var valid_607422 = header.getOrDefault("X-Amz-Date")
  valid_607422 = validateParameter(valid_607422, JString, required = false,
                                 default = nil)
  if valid_607422 != nil:
    section.add "X-Amz-Date", valid_607422
  var valid_607423 = header.getOrDefault("X-Amz-Credential")
  valid_607423 = validateParameter(valid_607423, JString, required = false,
                                 default = nil)
  if valid_607423 != nil:
    section.add "X-Amz-Credential", valid_607423
  var valid_607424 = header.getOrDefault("X-Amz-Security-Token")
  valid_607424 = validateParameter(valid_607424, JString, required = false,
                                 default = nil)
  if valid_607424 != nil:
    section.add "X-Amz-Security-Token", valid_607424
  var valid_607425 = header.getOrDefault("X-Amz-Algorithm")
  valid_607425 = validateParameter(valid_607425, JString, required = false,
                                 default = nil)
  if valid_607425 != nil:
    section.add "X-Amz-Algorithm", valid_607425
  var valid_607426 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607426 = validateParameter(valid_607426, JString, required = false,
                                 default = nil)
  if valid_607426 != nil:
    section.add "X-Amz-SignedHeaders", valid_607426
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  section = newJObject()
  var valid_607427 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_607427 = validateParameter(valid_607427, JString, required = false,
                                 default = nil)
  if valid_607427 != nil:
    section.add "GlobalClusterIdentifier", valid_607427
  var valid_607428 = formData.getOrDefault("EngineVersion")
  valid_607428 = validateParameter(valid_607428, JString, required = false,
                                 default = nil)
  if valid_607428 != nil:
    section.add "EngineVersion", valid_607428
  var valid_607429 = formData.getOrDefault("DatabaseName")
  valid_607429 = validateParameter(valid_607429, JString, required = false,
                                 default = nil)
  if valid_607429 != nil:
    section.add "DatabaseName", valid_607429
  var valid_607430 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_607430 = validateParameter(valid_607430, JString, required = false,
                                 default = nil)
  if valid_607430 != nil:
    section.add "SourceDBClusterIdentifier", valid_607430
  var valid_607431 = formData.getOrDefault("Engine")
  valid_607431 = validateParameter(valid_607431, JString, required = false,
                                 default = nil)
  if valid_607431 != nil:
    section.add "Engine", valid_607431
  var valid_607432 = formData.getOrDefault("StorageEncrypted")
  valid_607432 = validateParameter(valid_607432, JBool, required = false, default = nil)
  if valid_607432 != nil:
    section.add "StorageEncrypted", valid_607432
  var valid_607433 = formData.getOrDefault("DeletionProtection")
  valid_607433 = validateParameter(valid_607433, JBool, required = false, default = nil)
  if valid_607433 != nil:
    section.add "DeletionProtection", valid_607433
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607434: Call_PostCreateGlobalCluster_607415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607434.validator(path, query, header, formData, body)
  let scheme = call_607434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607434.url(scheme.get, call_607434.host, call_607434.base,
                         call_607434.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607434, url, valid)

proc call*(call_607435: Call_PostCreateGlobalCluster_607415;
          GlobalClusterIdentifier: string = ""; EngineVersion: string = "";
          DatabaseName: string = ""; SourceDBClusterIdentifier: string = "";
          Engine: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false): Recallable =
  ## postCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  var query_607436 = newJObject()
  var formData_607437 = newJObject()
  add(formData_607437, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_607437, "EngineVersion", newJString(EngineVersion))
  add(formData_607437, "DatabaseName", newJString(DatabaseName))
  add(formData_607437, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_607437, "Engine", newJString(Engine))
  add(query_607436, "Action", newJString(Action))
  add(query_607436, "Version", newJString(Version))
  add(formData_607437, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_607437, "DeletionProtection", newJBool(DeletionProtection))
  result = call_607435.call(nil, query_607436, nil, formData_607437, nil)

var postCreateGlobalCluster* = Call_PostCreateGlobalCluster_607415(
    name: "postCreateGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_PostCreateGlobalCluster_607416, base: "/",
    url: url_PostCreateGlobalCluster_607417, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGlobalCluster_607393 = ref object of OpenApiRestCall_605589
proc url_GetCreateGlobalCluster_607395(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateGlobalCluster_607394(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607396 = query.getOrDefault("GlobalClusterIdentifier")
  valid_607396 = validateParameter(valid_607396, JString, required = false,
                                 default = nil)
  if valid_607396 != nil:
    section.add "GlobalClusterIdentifier", valid_607396
  var valid_607397 = query.getOrDefault("DatabaseName")
  valid_607397 = validateParameter(valid_607397, JString, required = false,
                                 default = nil)
  if valid_607397 != nil:
    section.add "DatabaseName", valid_607397
  var valid_607398 = query.getOrDefault("DeletionProtection")
  valid_607398 = validateParameter(valid_607398, JBool, required = false, default = nil)
  if valid_607398 != nil:
    section.add "DeletionProtection", valid_607398
  var valid_607399 = query.getOrDefault("Engine")
  valid_607399 = validateParameter(valid_607399, JString, required = false,
                                 default = nil)
  if valid_607399 != nil:
    section.add "Engine", valid_607399
  var valid_607400 = query.getOrDefault("StorageEncrypted")
  valid_607400 = validateParameter(valid_607400, JBool, required = false, default = nil)
  if valid_607400 != nil:
    section.add "StorageEncrypted", valid_607400
  var valid_607401 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_607401 = validateParameter(valid_607401, JString, required = false,
                                 default = nil)
  if valid_607401 != nil:
    section.add "SourceDBClusterIdentifier", valid_607401
  var valid_607402 = query.getOrDefault("EngineVersion")
  valid_607402 = validateParameter(valid_607402, JString, required = false,
                                 default = nil)
  if valid_607402 != nil:
    section.add "EngineVersion", valid_607402
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607403 = query.getOrDefault("Action")
  valid_607403 = validateParameter(valid_607403, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_607403 != nil:
    section.add "Action", valid_607403
  var valid_607404 = query.getOrDefault("Version")
  valid_607404 = validateParameter(valid_607404, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607404 != nil:
    section.add "Version", valid_607404
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607405 = header.getOrDefault("X-Amz-Signature")
  valid_607405 = validateParameter(valid_607405, JString, required = false,
                                 default = nil)
  if valid_607405 != nil:
    section.add "X-Amz-Signature", valid_607405
  var valid_607406 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607406 = validateParameter(valid_607406, JString, required = false,
                                 default = nil)
  if valid_607406 != nil:
    section.add "X-Amz-Content-Sha256", valid_607406
  var valid_607407 = header.getOrDefault("X-Amz-Date")
  valid_607407 = validateParameter(valid_607407, JString, required = false,
                                 default = nil)
  if valid_607407 != nil:
    section.add "X-Amz-Date", valid_607407
  var valid_607408 = header.getOrDefault("X-Amz-Credential")
  valid_607408 = validateParameter(valid_607408, JString, required = false,
                                 default = nil)
  if valid_607408 != nil:
    section.add "X-Amz-Credential", valid_607408
  var valid_607409 = header.getOrDefault("X-Amz-Security-Token")
  valid_607409 = validateParameter(valid_607409, JString, required = false,
                                 default = nil)
  if valid_607409 != nil:
    section.add "X-Amz-Security-Token", valid_607409
  var valid_607410 = header.getOrDefault("X-Amz-Algorithm")
  valid_607410 = validateParameter(valid_607410, JString, required = false,
                                 default = nil)
  if valid_607410 != nil:
    section.add "X-Amz-Algorithm", valid_607410
  var valid_607411 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607411 = validateParameter(valid_607411, JString, required = false,
                                 default = nil)
  if valid_607411 != nil:
    section.add "X-Amz-SignedHeaders", valid_607411
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607412: Call_GetCreateGlobalCluster_607393; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607412.validator(path, query, header, formData, body)
  let scheme = call_607412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607412.url(scheme.get, call_607412.host, call_607412.base,
                         call_607412.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607412, url, valid)

proc call*(call_607413: Call_GetCreateGlobalCluster_607393;
          GlobalClusterIdentifier: string = ""; DatabaseName: string = "";
          DeletionProtection: bool = false; Engine: string = "";
          StorageEncrypted: bool = false; SourceDBClusterIdentifier: string = "";
          EngineVersion: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607414 = newJObject()
  add(query_607414, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_607414, "DatabaseName", newJString(DatabaseName))
  add(query_607414, "DeletionProtection", newJBool(DeletionProtection))
  add(query_607414, "Engine", newJString(Engine))
  add(query_607414, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_607414, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_607414, "EngineVersion", newJString(EngineVersion))
  add(query_607414, "Action", newJString(Action))
  add(query_607414, "Version", newJString(Version))
  result = call_607413.call(nil, query_607414, nil, nil, nil)

var getCreateGlobalCluster* = Call_GetCreateGlobalCluster_607393(
    name: "getCreateGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_GetCreateGlobalCluster_607394, base: "/",
    url: url_GetCreateGlobalCluster_607395, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOptionGroup_607458 = ref object of OpenApiRestCall_605589
proc url_PostCreateOptionGroup_607460(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOptionGroup_607459(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607461 = query.getOrDefault("Action")
  valid_607461 = validateParameter(valid_607461, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_607461 != nil:
    section.add "Action", valid_607461
  var valid_607462 = query.getOrDefault("Version")
  valid_607462 = validateParameter(valid_607462, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607462 != nil:
    section.add "Version", valid_607462
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607463 = header.getOrDefault("X-Amz-Signature")
  valid_607463 = validateParameter(valid_607463, JString, required = false,
                                 default = nil)
  if valid_607463 != nil:
    section.add "X-Amz-Signature", valid_607463
  var valid_607464 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607464 = validateParameter(valid_607464, JString, required = false,
                                 default = nil)
  if valid_607464 != nil:
    section.add "X-Amz-Content-Sha256", valid_607464
  var valid_607465 = header.getOrDefault("X-Amz-Date")
  valid_607465 = validateParameter(valid_607465, JString, required = false,
                                 default = nil)
  if valid_607465 != nil:
    section.add "X-Amz-Date", valid_607465
  var valid_607466 = header.getOrDefault("X-Amz-Credential")
  valid_607466 = validateParameter(valid_607466, JString, required = false,
                                 default = nil)
  if valid_607466 != nil:
    section.add "X-Amz-Credential", valid_607466
  var valid_607467 = header.getOrDefault("X-Amz-Security-Token")
  valid_607467 = validateParameter(valid_607467, JString, required = false,
                                 default = nil)
  if valid_607467 != nil:
    section.add "X-Amz-Security-Token", valid_607467
  var valid_607468 = header.getOrDefault("X-Amz-Algorithm")
  valid_607468 = validateParameter(valid_607468, JString, required = false,
                                 default = nil)
  if valid_607468 != nil:
    section.add "X-Amz-Algorithm", valid_607468
  var valid_607469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607469 = validateParameter(valid_607469, JString, required = false,
                                 default = nil)
  if valid_607469 != nil:
    section.add "X-Amz-SignedHeaders", valid_607469
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupDescription` field"
  var valid_607470 = formData.getOrDefault("OptionGroupDescription")
  valid_607470 = validateParameter(valid_607470, JString, required = true,
                                 default = nil)
  if valid_607470 != nil:
    section.add "OptionGroupDescription", valid_607470
  var valid_607471 = formData.getOrDefault("EngineName")
  valid_607471 = validateParameter(valid_607471, JString, required = true,
                                 default = nil)
  if valid_607471 != nil:
    section.add "EngineName", valid_607471
  var valid_607472 = formData.getOrDefault("MajorEngineVersion")
  valid_607472 = validateParameter(valid_607472, JString, required = true,
                                 default = nil)
  if valid_607472 != nil:
    section.add "MajorEngineVersion", valid_607472
  var valid_607473 = formData.getOrDefault("Tags")
  valid_607473 = validateParameter(valid_607473, JArray, required = false,
                                 default = nil)
  if valid_607473 != nil:
    section.add "Tags", valid_607473
  var valid_607474 = formData.getOrDefault("OptionGroupName")
  valid_607474 = validateParameter(valid_607474, JString, required = true,
                                 default = nil)
  if valid_607474 != nil:
    section.add "OptionGroupName", valid_607474
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607475: Call_PostCreateOptionGroup_607458; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_607475.validator(path, query, header, formData, body)
  let scheme = call_607475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607475.url(scheme.get, call_607475.host, call_607475.base,
                         call_607475.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607475, url, valid)

proc call*(call_607476: Call_PostCreateOptionGroup_607458;
          OptionGroupDescription: string; EngineName: string;
          MajorEngineVersion: string; OptionGroupName: string;
          Action: string = "CreateOptionGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  var query_607477 = newJObject()
  var formData_607478 = newJObject()
  add(formData_607478, "OptionGroupDescription",
      newJString(OptionGroupDescription))
  add(formData_607478, "EngineName", newJString(EngineName))
  add(formData_607478, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_607477, "Action", newJString(Action))
  if Tags != nil:
    formData_607478.add "Tags", Tags
  add(formData_607478, "OptionGroupName", newJString(OptionGroupName))
  add(query_607477, "Version", newJString(Version))
  result = call_607476.call(nil, query_607477, nil, formData_607478, nil)

var postCreateOptionGroup* = Call_PostCreateOptionGroup_607458(
    name: "postCreateOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_PostCreateOptionGroup_607459, base: "/",
    url: url_PostCreateOptionGroup_607460, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOptionGroup_607438 = ref object of OpenApiRestCall_605589
proc url_GetCreateOptionGroup_607440(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOptionGroup_607439(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: JString (required)
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_607441 = query.getOrDefault("EngineName")
  valid_607441 = validateParameter(valid_607441, JString, required = true,
                                 default = nil)
  if valid_607441 != nil:
    section.add "EngineName", valid_607441
  var valid_607442 = query.getOrDefault("OptionGroupDescription")
  valid_607442 = validateParameter(valid_607442, JString, required = true,
                                 default = nil)
  if valid_607442 != nil:
    section.add "OptionGroupDescription", valid_607442
  var valid_607443 = query.getOrDefault("Tags")
  valid_607443 = validateParameter(valid_607443, JArray, required = false,
                                 default = nil)
  if valid_607443 != nil:
    section.add "Tags", valid_607443
  var valid_607444 = query.getOrDefault("Action")
  valid_607444 = validateParameter(valid_607444, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_607444 != nil:
    section.add "Action", valid_607444
  var valid_607445 = query.getOrDefault("OptionGroupName")
  valid_607445 = validateParameter(valid_607445, JString, required = true,
                                 default = nil)
  if valid_607445 != nil:
    section.add "OptionGroupName", valid_607445
  var valid_607446 = query.getOrDefault("Version")
  valid_607446 = validateParameter(valid_607446, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607446 != nil:
    section.add "Version", valid_607446
  var valid_607447 = query.getOrDefault("MajorEngineVersion")
  valid_607447 = validateParameter(valid_607447, JString, required = true,
                                 default = nil)
  if valid_607447 != nil:
    section.add "MajorEngineVersion", valid_607447
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607448 = header.getOrDefault("X-Amz-Signature")
  valid_607448 = validateParameter(valid_607448, JString, required = false,
                                 default = nil)
  if valid_607448 != nil:
    section.add "X-Amz-Signature", valid_607448
  var valid_607449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607449 = validateParameter(valid_607449, JString, required = false,
                                 default = nil)
  if valid_607449 != nil:
    section.add "X-Amz-Content-Sha256", valid_607449
  var valid_607450 = header.getOrDefault("X-Amz-Date")
  valid_607450 = validateParameter(valid_607450, JString, required = false,
                                 default = nil)
  if valid_607450 != nil:
    section.add "X-Amz-Date", valid_607450
  var valid_607451 = header.getOrDefault("X-Amz-Credential")
  valid_607451 = validateParameter(valid_607451, JString, required = false,
                                 default = nil)
  if valid_607451 != nil:
    section.add "X-Amz-Credential", valid_607451
  var valid_607452 = header.getOrDefault("X-Amz-Security-Token")
  valid_607452 = validateParameter(valid_607452, JString, required = false,
                                 default = nil)
  if valid_607452 != nil:
    section.add "X-Amz-Security-Token", valid_607452
  var valid_607453 = header.getOrDefault("X-Amz-Algorithm")
  valid_607453 = validateParameter(valid_607453, JString, required = false,
                                 default = nil)
  if valid_607453 != nil:
    section.add "X-Amz-Algorithm", valid_607453
  var valid_607454 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607454 = validateParameter(valid_607454, JString, required = false,
                                 default = nil)
  if valid_607454 != nil:
    section.add "X-Amz-SignedHeaders", valid_607454
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607455: Call_GetCreateOptionGroup_607438; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_607455.validator(path, query, header, formData, body)
  let scheme = call_607455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607455.url(scheme.get, call_607455.host, call_607455.base,
                         call_607455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607455, url, valid)

proc call*(call_607456: Call_GetCreateOptionGroup_607438; EngineName: string;
          OptionGroupDescription: string; OptionGroupName: string;
          MajorEngineVersion: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  var query_607457 = newJObject()
  add(query_607457, "EngineName", newJString(EngineName))
  add(query_607457, "OptionGroupDescription", newJString(OptionGroupDescription))
  if Tags != nil:
    query_607457.add "Tags", Tags
  add(query_607457, "Action", newJString(Action))
  add(query_607457, "OptionGroupName", newJString(OptionGroupName))
  add(query_607457, "Version", newJString(Version))
  add(query_607457, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_607456.call(nil, query_607457, nil, nil, nil)

var getCreateOptionGroup* = Call_GetCreateOptionGroup_607438(
    name: "getCreateOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_GetCreateOptionGroup_607439, base: "/",
    url: url_GetCreateOptionGroup_607440, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomAvailabilityZone_607495 = ref object of OpenApiRestCall_605589
proc url_PostDeleteCustomAvailabilityZone_607497(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCustomAvailabilityZone_607496(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607498 = query.getOrDefault("Action")
  valid_607498 = validateParameter(valid_607498, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_607498 != nil:
    section.add "Action", valid_607498
  var valid_607499 = query.getOrDefault("Version")
  valid_607499 = validateParameter(valid_607499, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607499 != nil:
    section.add "Version", valid_607499
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607500 = header.getOrDefault("X-Amz-Signature")
  valid_607500 = validateParameter(valid_607500, JString, required = false,
                                 default = nil)
  if valid_607500 != nil:
    section.add "X-Amz-Signature", valid_607500
  var valid_607501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607501 = validateParameter(valid_607501, JString, required = false,
                                 default = nil)
  if valid_607501 != nil:
    section.add "X-Amz-Content-Sha256", valid_607501
  var valid_607502 = header.getOrDefault("X-Amz-Date")
  valid_607502 = validateParameter(valid_607502, JString, required = false,
                                 default = nil)
  if valid_607502 != nil:
    section.add "X-Amz-Date", valid_607502
  var valid_607503 = header.getOrDefault("X-Amz-Credential")
  valid_607503 = validateParameter(valid_607503, JString, required = false,
                                 default = nil)
  if valid_607503 != nil:
    section.add "X-Amz-Credential", valid_607503
  var valid_607504 = header.getOrDefault("X-Amz-Security-Token")
  valid_607504 = validateParameter(valid_607504, JString, required = false,
                                 default = nil)
  if valid_607504 != nil:
    section.add "X-Amz-Security-Token", valid_607504
  var valid_607505 = header.getOrDefault("X-Amz-Algorithm")
  valid_607505 = validateParameter(valid_607505, JString, required = false,
                                 default = nil)
  if valid_607505 != nil:
    section.add "X-Amz-Algorithm", valid_607505
  var valid_607506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607506 = validateParameter(valid_607506, JString, required = false,
                                 default = nil)
  if valid_607506 != nil:
    section.add "X-Amz-SignedHeaders", valid_607506
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_607507 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_607507 = validateParameter(valid_607507, JString, required = true,
                                 default = nil)
  if valid_607507 != nil:
    section.add "CustomAvailabilityZoneId", valid_607507
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607508: Call_PostDeleteCustomAvailabilityZone_607495;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_607508.validator(path, query, header, formData, body)
  let scheme = call_607508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607508.url(scheme.get, call_607508.host, call_607508.base,
                         call_607508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607508, url, valid)

proc call*(call_607509: Call_PostDeleteCustomAvailabilityZone_607495;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Version: string (required)
  var query_607510 = newJObject()
  var formData_607511 = newJObject()
  add(query_607510, "Action", newJString(Action))
  add(formData_607511, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_607510, "Version", newJString(Version))
  result = call_607509.call(nil, query_607510, nil, formData_607511, nil)

var postDeleteCustomAvailabilityZone* = Call_PostDeleteCustomAvailabilityZone_607495(
    name: "postDeleteCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_PostDeleteCustomAvailabilityZone_607496, base: "/",
    url: url_PostDeleteCustomAvailabilityZone_607497,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomAvailabilityZone_607479 = ref object of OpenApiRestCall_605589
proc url_GetDeleteCustomAvailabilityZone_607481(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCustomAvailabilityZone_607480(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_607482 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_607482 = validateParameter(valid_607482, JString, required = true,
                                 default = nil)
  if valid_607482 != nil:
    section.add "CustomAvailabilityZoneId", valid_607482
  var valid_607483 = query.getOrDefault("Action")
  valid_607483 = validateParameter(valid_607483, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_607483 != nil:
    section.add "Action", valid_607483
  var valid_607484 = query.getOrDefault("Version")
  valid_607484 = validateParameter(valid_607484, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607484 != nil:
    section.add "Version", valid_607484
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607485 = header.getOrDefault("X-Amz-Signature")
  valid_607485 = validateParameter(valid_607485, JString, required = false,
                                 default = nil)
  if valid_607485 != nil:
    section.add "X-Amz-Signature", valid_607485
  var valid_607486 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607486 = validateParameter(valid_607486, JString, required = false,
                                 default = nil)
  if valid_607486 != nil:
    section.add "X-Amz-Content-Sha256", valid_607486
  var valid_607487 = header.getOrDefault("X-Amz-Date")
  valid_607487 = validateParameter(valid_607487, JString, required = false,
                                 default = nil)
  if valid_607487 != nil:
    section.add "X-Amz-Date", valid_607487
  var valid_607488 = header.getOrDefault("X-Amz-Credential")
  valid_607488 = validateParameter(valid_607488, JString, required = false,
                                 default = nil)
  if valid_607488 != nil:
    section.add "X-Amz-Credential", valid_607488
  var valid_607489 = header.getOrDefault("X-Amz-Security-Token")
  valid_607489 = validateParameter(valid_607489, JString, required = false,
                                 default = nil)
  if valid_607489 != nil:
    section.add "X-Amz-Security-Token", valid_607489
  var valid_607490 = header.getOrDefault("X-Amz-Algorithm")
  valid_607490 = validateParameter(valid_607490, JString, required = false,
                                 default = nil)
  if valid_607490 != nil:
    section.add "X-Amz-Algorithm", valid_607490
  var valid_607491 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607491 = validateParameter(valid_607491, JString, required = false,
                                 default = nil)
  if valid_607491 != nil:
    section.add "X-Amz-SignedHeaders", valid_607491
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607492: Call_GetDeleteCustomAvailabilityZone_607479;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_607492.validator(path, query, header, formData, body)
  let scheme = call_607492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607492.url(scheme.get, call_607492.host, call_607492.base,
                         call_607492.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607492, url, valid)

proc call*(call_607493: Call_GetDeleteCustomAvailabilityZone_607479;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607494 = newJObject()
  add(query_607494, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_607494, "Action", newJString(Action))
  add(query_607494, "Version", newJString(Version))
  result = call_607493.call(nil, query_607494, nil, nil, nil)

var getDeleteCustomAvailabilityZone* = Call_GetDeleteCustomAvailabilityZone_607479(
    name: "getDeleteCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_GetDeleteCustomAvailabilityZone_607480, base: "/",
    url: url_GetDeleteCustomAvailabilityZone_607481,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_607530 = ref object of OpenApiRestCall_605589
proc url_PostDeleteDBCluster_607532(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBCluster_607531(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607533 = query.getOrDefault("Action")
  valid_607533 = validateParameter(valid_607533, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_607533 != nil:
    section.add "Action", valid_607533
  var valid_607534 = query.getOrDefault("Version")
  valid_607534 = validateParameter(valid_607534, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607534 != nil:
    section.add "Version", valid_607534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607535 = header.getOrDefault("X-Amz-Signature")
  valid_607535 = validateParameter(valid_607535, JString, required = false,
                                 default = nil)
  if valid_607535 != nil:
    section.add "X-Amz-Signature", valid_607535
  var valid_607536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607536 = validateParameter(valid_607536, JString, required = false,
                                 default = nil)
  if valid_607536 != nil:
    section.add "X-Amz-Content-Sha256", valid_607536
  var valid_607537 = header.getOrDefault("X-Amz-Date")
  valid_607537 = validateParameter(valid_607537, JString, required = false,
                                 default = nil)
  if valid_607537 != nil:
    section.add "X-Amz-Date", valid_607537
  var valid_607538 = header.getOrDefault("X-Amz-Credential")
  valid_607538 = validateParameter(valid_607538, JString, required = false,
                                 default = nil)
  if valid_607538 != nil:
    section.add "X-Amz-Credential", valid_607538
  var valid_607539 = header.getOrDefault("X-Amz-Security-Token")
  valid_607539 = validateParameter(valid_607539, JString, required = false,
                                 default = nil)
  if valid_607539 != nil:
    section.add "X-Amz-Security-Token", valid_607539
  var valid_607540 = header.getOrDefault("X-Amz-Algorithm")
  valid_607540 = validateParameter(valid_607540, JString, required = false,
                                 default = nil)
  if valid_607540 != nil:
    section.add "X-Amz-Algorithm", valid_607540
  var valid_607541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607541 = validateParameter(valid_607541, JString, required = false,
                                 default = nil)
  if valid_607541 != nil:
    section.add "X-Amz-SignedHeaders", valid_607541
  result.add "header", section
  ## parameters in `formData` object:
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_607542 = formData.getOrDefault("SkipFinalSnapshot")
  valid_607542 = validateParameter(valid_607542, JBool, required = false, default = nil)
  if valid_607542 != nil:
    section.add "SkipFinalSnapshot", valid_607542
  var valid_607543 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_607543 = validateParameter(valid_607543, JString, required = false,
                                 default = nil)
  if valid_607543 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_607543
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_607544 = formData.getOrDefault("DBClusterIdentifier")
  valid_607544 = validateParameter(valid_607544, JString, required = true,
                                 default = nil)
  if valid_607544 != nil:
    section.add "DBClusterIdentifier", valid_607544
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607545: Call_PostDeleteDBCluster_607530; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607545.validator(path, query, header, formData, body)
  let scheme = call_607545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607545.url(scheme.get, call_607545.host, call_607545.base,
                         call_607545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607545, url, valid)

proc call*(call_607546: Call_PostDeleteDBCluster_607530;
          DBClusterIdentifier: string; Action: string = "DeleteDBCluster";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_607547 = newJObject()
  var formData_607548 = newJObject()
  add(query_607547, "Action", newJString(Action))
  add(formData_607548, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_607548, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_607547, "Version", newJString(Version))
  add(formData_607548, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607546.call(nil, query_607547, nil, formData_607548, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_607530(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_607531, base: "/",
    url: url_PostDeleteDBCluster_607532, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_607512 = ref object of OpenApiRestCall_605589
proc url_GetDeleteDBCluster_607514(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBCluster_607513(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_607515 = query.getOrDefault("DBClusterIdentifier")
  valid_607515 = validateParameter(valid_607515, JString, required = true,
                                 default = nil)
  if valid_607515 != nil:
    section.add "DBClusterIdentifier", valid_607515
  var valid_607516 = query.getOrDefault("SkipFinalSnapshot")
  valid_607516 = validateParameter(valid_607516, JBool, required = false, default = nil)
  if valid_607516 != nil:
    section.add "SkipFinalSnapshot", valid_607516
  var valid_607517 = query.getOrDefault("Action")
  valid_607517 = validateParameter(valid_607517, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_607517 != nil:
    section.add "Action", valid_607517
  var valid_607518 = query.getOrDefault("Version")
  valid_607518 = validateParameter(valid_607518, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607518 != nil:
    section.add "Version", valid_607518
  var valid_607519 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_607519 = validateParameter(valid_607519, JString, required = false,
                                 default = nil)
  if valid_607519 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_607519
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607520 = header.getOrDefault("X-Amz-Signature")
  valid_607520 = validateParameter(valid_607520, JString, required = false,
                                 default = nil)
  if valid_607520 != nil:
    section.add "X-Amz-Signature", valid_607520
  var valid_607521 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607521 = validateParameter(valid_607521, JString, required = false,
                                 default = nil)
  if valid_607521 != nil:
    section.add "X-Amz-Content-Sha256", valid_607521
  var valid_607522 = header.getOrDefault("X-Amz-Date")
  valid_607522 = validateParameter(valid_607522, JString, required = false,
                                 default = nil)
  if valid_607522 != nil:
    section.add "X-Amz-Date", valid_607522
  var valid_607523 = header.getOrDefault("X-Amz-Credential")
  valid_607523 = validateParameter(valid_607523, JString, required = false,
                                 default = nil)
  if valid_607523 != nil:
    section.add "X-Amz-Credential", valid_607523
  var valid_607524 = header.getOrDefault("X-Amz-Security-Token")
  valid_607524 = validateParameter(valid_607524, JString, required = false,
                                 default = nil)
  if valid_607524 != nil:
    section.add "X-Amz-Security-Token", valid_607524
  var valid_607525 = header.getOrDefault("X-Amz-Algorithm")
  valid_607525 = validateParameter(valid_607525, JString, required = false,
                                 default = nil)
  if valid_607525 != nil:
    section.add "X-Amz-Algorithm", valid_607525
  var valid_607526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607526 = validateParameter(valid_607526, JString, required = false,
                                 default = nil)
  if valid_607526 != nil:
    section.add "X-Amz-SignedHeaders", valid_607526
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607527: Call_GetDeleteDBCluster_607512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607527.validator(path, query, header, formData, body)
  let scheme = call_607527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607527.url(scheme.get, call_607527.host, call_607527.base,
                         call_607527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607527, url, valid)

proc call*(call_607528: Call_GetDeleteDBCluster_607512;
          DBClusterIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_607529 = newJObject()
  add(query_607529, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607529, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_607529, "Action", newJString(Action))
  add(query_607529, "Version", newJString(Version))
  add(query_607529, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_607528.call(nil, query_607529, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_607512(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_607513,
    base: "/", url: url_GetDeleteDBCluster_607514,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterEndpoint_607565 = ref object of OpenApiRestCall_605589
proc url_PostDeleteDBClusterEndpoint_607567(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterEndpoint_607566(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607568 = query.getOrDefault("Action")
  valid_607568 = validateParameter(valid_607568, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_607568 != nil:
    section.add "Action", valid_607568
  var valid_607569 = query.getOrDefault("Version")
  valid_607569 = validateParameter(valid_607569, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607569 != nil:
    section.add "Version", valid_607569
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607570 = header.getOrDefault("X-Amz-Signature")
  valid_607570 = validateParameter(valid_607570, JString, required = false,
                                 default = nil)
  if valid_607570 != nil:
    section.add "X-Amz-Signature", valid_607570
  var valid_607571 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607571 = validateParameter(valid_607571, JString, required = false,
                                 default = nil)
  if valid_607571 != nil:
    section.add "X-Amz-Content-Sha256", valid_607571
  var valid_607572 = header.getOrDefault("X-Amz-Date")
  valid_607572 = validateParameter(valid_607572, JString, required = false,
                                 default = nil)
  if valid_607572 != nil:
    section.add "X-Amz-Date", valid_607572
  var valid_607573 = header.getOrDefault("X-Amz-Credential")
  valid_607573 = validateParameter(valid_607573, JString, required = false,
                                 default = nil)
  if valid_607573 != nil:
    section.add "X-Amz-Credential", valid_607573
  var valid_607574 = header.getOrDefault("X-Amz-Security-Token")
  valid_607574 = validateParameter(valid_607574, JString, required = false,
                                 default = nil)
  if valid_607574 != nil:
    section.add "X-Amz-Security-Token", valid_607574
  var valid_607575 = header.getOrDefault("X-Amz-Algorithm")
  valid_607575 = validateParameter(valid_607575, JString, required = false,
                                 default = nil)
  if valid_607575 != nil:
    section.add "X-Amz-Algorithm", valid_607575
  var valid_607576 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607576 = validateParameter(valid_607576, JString, required = false,
                                 default = nil)
  if valid_607576 != nil:
    section.add "X-Amz-SignedHeaders", valid_607576
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_607577 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_607577 = validateParameter(valid_607577, JString, required = true,
                                 default = nil)
  if valid_607577 != nil:
    section.add "DBClusterEndpointIdentifier", valid_607577
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607578: Call_PostDeleteDBClusterEndpoint_607565; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607578.validator(path, query, header, formData, body)
  let scheme = call_607578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607578.url(scheme.get, call_607578.host, call_607578.base,
                         call_607578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607578, url, valid)

proc call*(call_607579: Call_PostDeleteDBClusterEndpoint_607565;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607580 = newJObject()
  var formData_607581 = newJObject()
  add(formData_607581, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_607580, "Action", newJString(Action))
  add(query_607580, "Version", newJString(Version))
  result = call_607579.call(nil, query_607580, nil, formData_607581, nil)

var postDeleteDBClusterEndpoint* = Call_PostDeleteDBClusterEndpoint_607565(
    name: "postDeleteDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_PostDeleteDBClusterEndpoint_607566, base: "/",
    url: url_PostDeleteDBClusterEndpoint_607567,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterEndpoint_607549 = ref object of OpenApiRestCall_605589
proc url_GetDeleteDBClusterEndpoint_607551(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterEndpoint_607550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_607552 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_607552 = validateParameter(valid_607552, JString, required = true,
                                 default = nil)
  if valid_607552 != nil:
    section.add "DBClusterEndpointIdentifier", valid_607552
  var valid_607553 = query.getOrDefault("Action")
  valid_607553 = validateParameter(valid_607553, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_607553 != nil:
    section.add "Action", valid_607553
  var valid_607554 = query.getOrDefault("Version")
  valid_607554 = validateParameter(valid_607554, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607554 != nil:
    section.add "Version", valid_607554
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607555 = header.getOrDefault("X-Amz-Signature")
  valid_607555 = validateParameter(valid_607555, JString, required = false,
                                 default = nil)
  if valid_607555 != nil:
    section.add "X-Amz-Signature", valid_607555
  var valid_607556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607556 = validateParameter(valid_607556, JString, required = false,
                                 default = nil)
  if valid_607556 != nil:
    section.add "X-Amz-Content-Sha256", valid_607556
  var valid_607557 = header.getOrDefault("X-Amz-Date")
  valid_607557 = validateParameter(valid_607557, JString, required = false,
                                 default = nil)
  if valid_607557 != nil:
    section.add "X-Amz-Date", valid_607557
  var valid_607558 = header.getOrDefault("X-Amz-Credential")
  valid_607558 = validateParameter(valid_607558, JString, required = false,
                                 default = nil)
  if valid_607558 != nil:
    section.add "X-Amz-Credential", valid_607558
  var valid_607559 = header.getOrDefault("X-Amz-Security-Token")
  valid_607559 = validateParameter(valid_607559, JString, required = false,
                                 default = nil)
  if valid_607559 != nil:
    section.add "X-Amz-Security-Token", valid_607559
  var valid_607560 = header.getOrDefault("X-Amz-Algorithm")
  valid_607560 = validateParameter(valid_607560, JString, required = false,
                                 default = nil)
  if valid_607560 != nil:
    section.add "X-Amz-Algorithm", valid_607560
  var valid_607561 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607561 = validateParameter(valid_607561, JString, required = false,
                                 default = nil)
  if valid_607561 != nil:
    section.add "X-Amz-SignedHeaders", valid_607561
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607562: Call_GetDeleteDBClusterEndpoint_607549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607562.validator(path, query, header, formData, body)
  let scheme = call_607562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607562.url(scheme.get, call_607562.host, call_607562.base,
                         call_607562.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607562, url, valid)

proc call*(call_607563: Call_GetDeleteDBClusterEndpoint_607549;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607564 = newJObject()
  add(query_607564, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_607564, "Action", newJString(Action))
  add(query_607564, "Version", newJString(Version))
  result = call_607563.call(nil, query_607564, nil, nil, nil)

var getDeleteDBClusterEndpoint* = Call_GetDeleteDBClusterEndpoint_607549(
    name: "getDeleteDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_GetDeleteDBClusterEndpoint_607550, base: "/",
    url: url_GetDeleteDBClusterEndpoint_607551,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_607598 = ref object of OpenApiRestCall_605589
proc url_PostDeleteDBClusterParameterGroup_607600(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_607599(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607601 = query.getOrDefault("Action")
  valid_607601 = validateParameter(valid_607601, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_607601 != nil:
    section.add "Action", valid_607601
  var valid_607602 = query.getOrDefault("Version")
  valid_607602 = validateParameter(valid_607602, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607602 != nil:
    section.add "Version", valid_607602
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607603 = header.getOrDefault("X-Amz-Signature")
  valid_607603 = validateParameter(valid_607603, JString, required = false,
                                 default = nil)
  if valid_607603 != nil:
    section.add "X-Amz-Signature", valid_607603
  var valid_607604 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607604 = validateParameter(valid_607604, JString, required = false,
                                 default = nil)
  if valid_607604 != nil:
    section.add "X-Amz-Content-Sha256", valid_607604
  var valid_607605 = header.getOrDefault("X-Amz-Date")
  valid_607605 = validateParameter(valid_607605, JString, required = false,
                                 default = nil)
  if valid_607605 != nil:
    section.add "X-Amz-Date", valid_607605
  var valid_607606 = header.getOrDefault("X-Amz-Credential")
  valid_607606 = validateParameter(valid_607606, JString, required = false,
                                 default = nil)
  if valid_607606 != nil:
    section.add "X-Amz-Credential", valid_607606
  var valid_607607 = header.getOrDefault("X-Amz-Security-Token")
  valid_607607 = validateParameter(valid_607607, JString, required = false,
                                 default = nil)
  if valid_607607 != nil:
    section.add "X-Amz-Security-Token", valid_607607
  var valid_607608 = header.getOrDefault("X-Amz-Algorithm")
  valid_607608 = validateParameter(valid_607608, JString, required = false,
                                 default = nil)
  if valid_607608 != nil:
    section.add "X-Amz-Algorithm", valid_607608
  var valid_607609 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607609 = validateParameter(valid_607609, JString, required = false,
                                 default = nil)
  if valid_607609 != nil:
    section.add "X-Amz-SignedHeaders", valid_607609
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_607610 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_607610 = validateParameter(valid_607610, JString, required = true,
                                 default = nil)
  if valid_607610 != nil:
    section.add "DBClusterParameterGroupName", valid_607610
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607611: Call_PostDeleteDBClusterParameterGroup_607598;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607611.validator(path, query, header, formData, body)
  let scheme = call_607611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607611.url(scheme.get, call_607611.host, call_607611.base,
                         call_607611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607611, url, valid)

proc call*(call_607612: Call_PostDeleteDBClusterParameterGroup_607598;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_607613 = newJObject()
  var formData_607614 = newJObject()
  add(query_607613, "Action", newJString(Action))
  add(formData_607614, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607613, "Version", newJString(Version))
  result = call_607612.call(nil, query_607613, nil, formData_607614, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_607598(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_607599, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_607600,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_607582 = ref object of OpenApiRestCall_605589
proc url_GetDeleteDBClusterParameterGroup_607584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_607583(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_607585 = query.getOrDefault("DBClusterParameterGroupName")
  valid_607585 = validateParameter(valid_607585, JString, required = true,
                                 default = nil)
  if valid_607585 != nil:
    section.add "DBClusterParameterGroupName", valid_607585
  var valid_607586 = query.getOrDefault("Action")
  valid_607586 = validateParameter(valid_607586, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_607586 != nil:
    section.add "Action", valid_607586
  var valid_607587 = query.getOrDefault("Version")
  valid_607587 = validateParameter(valid_607587, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607587 != nil:
    section.add "Version", valid_607587
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607588 = header.getOrDefault("X-Amz-Signature")
  valid_607588 = validateParameter(valid_607588, JString, required = false,
                                 default = nil)
  if valid_607588 != nil:
    section.add "X-Amz-Signature", valid_607588
  var valid_607589 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607589 = validateParameter(valid_607589, JString, required = false,
                                 default = nil)
  if valid_607589 != nil:
    section.add "X-Amz-Content-Sha256", valid_607589
  var valid_607590 = header.getOrDefault("X-Amz-Date")
  valid_607590 = validateParameter(valid_607590, JString, required = false,
                                 default = nil)
  if valid_607590 != nil:
    section.add "X-Amz-Date", valid_607590
  var valid_607591 = header.getOrDefault("X-Amz-Credential")
  valid_607591 = validateParameter(valid_607591, JString, required = false,
                                 default = nil)
  if valid_607591 != nil:
    section.add "X-Amz-Credential", valid_607591
  var valid_607592 = header.getOrDefault("X-Amz-Security-Token")
  valid_607592 = validateParameter(valid_607592, JString, required = false,
                                 default = nil)
  if valid_607592 != nil:
    section.add "X-Amz-Security-Token", valid_607592
  var valid_607593 = header.getOrDefault("X-Amz-Algorithm")
  valid_607593 = validateParameter(valid_607593, JString, required = false,
                                 default = nil)
  if valid_607593 != nil:
    section.add "X-Amz-Algorithm", valid_607593
  var valid_607594 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607594 = validateParameter(valid_607594, JString, required = false,
                                 default = nil)
  if valid_607594 != nil:
    section.add "X-Amz-SignedHeaders", valid_607594
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607595: Call_GetDeleteDBClusterParameterGroup_607582;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607595.validator(path, query, header, formData, body)
  let scheme = call_607595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607595.url(scheme.get, call_607595.host, call_607595.base,
                         call_607595.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607595, url, valid)

proc call*(call_607596: Call_GetDeleteDBClusterParameterGroup_607582;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607597 = newJObject()
  add(query_607597, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607597, "Action", newJString(Action))
  add(query_607597, "Version", newJString(Version))
  result = call_607596.call(nil, query_607597, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_607582(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_607583, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_607584,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_607631 = ref object of OpenApiRestCall_605589
proc url_PostDeleteDBClusterSnapshot_607633(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_607632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607634 = query.getOrDefault("Action")
  valid_607634 = validateParameter(valid_607634, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_607634 != nil:
    section.add "Action", valid_607634
  var valid_607635 = query.getOrDefault("Version")
  valid_607635 = validateParameter(valid_607635, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607635 != nil:
    section.add "Version", valid_607635
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607636 = header.getOrDefault("X-Amz-Signature")
  valid_607636 = validateParameter(valid_607636, JString, required = false,
                                 default = nil)
  if valid_607636 != nil:
    section.add "X-Amz-Signature", valid_607636
  var valid_607637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607637 = validateParameter(valid_607637, JString, required = false,
                                 default = nil)
  if valid_607637 != nil:
    section.add "X-Amz-Content-Sha256", valid_607637
  var valid_607638 = header.getOrDefault("X-Amz-Date")
  valid_607638 = validateParameter(valid_607638, JString, required = false,
                                 default = nil)
  if valid_607638 != nil:
    section.add "X-Amz-Date", valid_607638
  var valid_607639 = header.getOrDefault("X-Amz-Credential")
  valid_607639 = validateParameter(valid_607639, JString, required = false,
                                 default = nil)
  if valid_607639 != nil:
    section.add "X-Amz-Credential", valid_607639
  var valid_607640 = header.getOrDefault("X-Amz-Security-Token")
  valid_607640 = validateParameter(valid_607640, JString, required = false,
                                 default = nil)
  if valid_607640 != nil:
    section.add "X-Amz-Security-Token", valid_607640
  var valid_607641 = header.getOrDefault("X-Amz-Algorithm")
  valid_607641 = validateParameter(valid_607641, JString, required = false,
                                 default = nil)
  if valid_607641 != nil:
    section.add "X-Amz-Algorithm", valid_607641
  var valid_607642 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607642 = validateParameter(valid_607642, JString, required = false,
                                 default = nil)
  if valid_607642 != nil:
    section.add "X-Amz-SignedHeaders", valid_607642
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_607643 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607643 = validateParameter(valid_607643, JString, required = true,
                                 default = nil)
  if valid_607643 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607643
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607644: Call_PostDeleteDBClusterSnapshot_607631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607644.validator(path, query, header, formData, body)
  let scheme = call_607644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607644.url(scheme.get, call_607644.host, call_607644.base,
                         call_607644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607644, url, valid)

proc call*(call_607645: Call_PostDeleteDBClusterSnapshot_607631;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607646 = newJObject()
  var formData_607647 = newJObject()
  add(formData_607647, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607646, "Action", newJString(Action))
  add(query_607646, "Version", newJString(Version))
  result = call_607645.call(nil, query_607646, nil, formData_607647, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_607631(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_607632, base: "/",
    url: url_PostDeleteDBClusterSnapshot_607633,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_607615 = ref object of OpenApiRestCall_605589
proc url_GetDeleteDBClusterSnapshot_607617(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_607616(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_607618 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607618 = validateParameter(valid_607618, JString, required = true,
                                 default = nil)
  if valid_607618 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607618
  var valid_607619 = query.getOrDefault("Action")
  valid_607619 = validateParameter(valid_607619, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_607619 != nil:
    section.add "Action", valid_607619
  var valid_607620 = query.getOrDefault("Version")
  valid_607620 = validateParameter(valid_607620, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607620 != nil:
    section.add "Version", valid_607620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607621 = header.getOrDefault("X-Amz-Signature")
  valid_607621 = validateParameter(valid_607621, JString, required = false,
                                 default = nil)
  if valid_607621 != nil:
    section.add "X-Amz-Signature", valid_607621
  var valid_607622 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607622 = validateParameter(valid_607622, JString, required = false,
                                 default = nil)
  if valid_607622 != nil:
    section.add "X-Amz-Content-Sha256", valid_607622
  var valid_607623 = header.getOrDefault("X-Amz-Date")
  valid_607623 = validateParameter(valid_607623, JString, required = false,
                                 default = nil)
  if valid_607623 != nil:
    section.add "X-Amz-Date", valid_607623
  var valid_607624 = header.getOrDefault("X-Amz-Credential")
  valid_607624 = validateParameter(valid_607624, JString, required = false,
                                 default = nil)
  if valid_607624 != nil:
    section.add "X-Amz-Credential", valid_607624
  var valid_607625 = header.getOrDefault("X-Amz-Security-Token")
  valid_607625 = validateParameter(valid_607625, JString, required = false,
                                 default = nil)
  if valid_607625 != nil:
    section.add "X-Amz-Security-Token", valid_607625
  var valid_607626 = header.getOrDefault("X-Amz-Algorithm")
  valid_607626 = validateParameter(valid_607626, JString, required = false,
                                 default = nil)
  if valid_607626 != nil:
    section.add "X-Amz-Algorithm", valid_607626
  var valid_607627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607627 = validateParameter(valid_607627, JString, required = false,
                                 default = nil)
  if valid_607627 != nil:
    section.add "X-Amz-SignedHeaders", valid_607627
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607628: Call_GetDeleteDBClusterSnapshot_607615; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607628.validator(path, query, header, formData, body)
  let scheme = call_607628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607628.url(scheme.get, call_607628.host, call_607628.base,
                         call_607628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607628, url, valid)

proc call*(call_607629: Call_GetDeleteDBClusterSnapshot_607615;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607630 = newJObject()
  add(query_607630, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607630, "Action", newJString(Action))
  add(query_607630, "Version", newJString(Version))
  result = call_607629.call(nil, query_607630, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_607615(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_607616, base: "/",
    url: url_GetDeleteDBClusterSnapshot_607617,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_607667 = ref object of OpenApiRestCall_605589
proc url_PostDeleteDBInstance_607669(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstance_607668(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607670 = query.getOrDefault("Action")
  valid_607670 = validateParameter(valid_607670, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_607670 != nil:
    section.add "Action", valid_607670
  var valid_607671 = query.getOrDefault("Version")
  valid_607671 = validateParameter(valid_607671, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607671 != nil:
    section.add "Version", valid_607671
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607672 = header.getOrDefault("X-Amz-Signature")
  valid_607672 = validateParameter(valid_607672, JString, required = false,
                                 default = nil)
  if valid_607672 != nil:
    section.add "X-Amz-Signature", valid_607672
  var valid_607673 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607673 = validateParameter(valid_607673, JString, required = false,
                                 default = nil)
  if valid_607673 != nil:
    section.add "X-Amz-Content-Sha256", valid_607673
  var valid_607674 = header.getOrDefault("X-Amz-Date")
  valid_607674 = validateParameter(valid_607674, JString, required = false,
                                 default = nil)
  if valid_607674 != nil:
    section.add "X-Amz-Date", valid_607674
  var valid_607675 = header.getOrDefault("X-Amz-Credential")
  valid_607675 = validateParameter(valid_607675, JString, required = false,
                                 default = nil)
  if valid_607675 != nil:
    section.add "X-Amz-Credential", valid_607675
  var valid_607676 = header.getOrDefault("X-Amz-Security-Token")
  valid_607676 = validateParameter(valid_607676, JString, required = false,
                                 default = nil)
  if valid_607676 != nil:
    section.add "X-Amz-Security-Token", valid_607676
  var valid_607677 = header.getOrDefault("X-Amz-Algorithm")
  valid_607677 = validateParameter(valid_607677, JString, required = false,
                                 default = nil)
  if valid_607677 != nil:
    section.add "X-Amz-Algorithm", valid_607677
  var valid_607678 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607678 = validateParameter(valid_607678, JString, required = false,
                                 default = nil)
  if valid_607678 != nil:
    section.add "X-Amz-SignedHeaders", valid_607678
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607679 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607679 = validateParameter(valid_607679, JString, required = true,
                                 default = nil)
  if valid_607679 != nil:
    section.add "DBInstanceIdentifier", valid_607679
  var valid_607680 = formData.getOrDefault("SkipFinalSnapshot")
  valid_607680 = validateParameter(valid_607680, JBool, required = false, default = nil)
  if valid_607680 != nil:
    section.add "SkipFinalSnapshot", valid_607680
  var valid_607681 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_607681 = validateParameter(valid_607681, JString, required = false,
                                 default = nil)
  if valid_607681 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_607681
  var valid_607682 = formData.getOrDefault("DeleteAutomatedBackups")
  valid_607682 = validateParameter(valid_607682, JBool, required = false, default = nil)
  if valid_607682 != nil:
    section.add "DeleteAutomatedBackups", valid_607682
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607683: Call_PostDeleteDBInstance_607667; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_607683.validator(path, query, header, formData, body)
  let scheme = call_607683.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607683.url(scheme.get, call_607683.host, call_607683.base,
                         call_607683.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607683, url, valid)

proc call*(call_607684: Call_PostDeleteDBInstance_607667;
          DBInstanceIdentifier: string; Action: string = "DeleteDBInstance";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"; DeleteAutomatedBackups: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Version: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  var query_607685 = newJObject()
  var formData_607686 = newJObject()
  add(formData_607686, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607685, "Action", newJString(Action))
  add(formData_607686, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_607686, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_607685, "Version", newJString(Version))
  add(formData_607686, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  result = call_607684.call(nil, query_607685, nil, formData_607686, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_607667(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_607668, base: "/",
    url: url_PostDeleteDBInstance_607669, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_607648 = ref object of OpenApiRestCall_605589
proc url_GetDeleteDBInstance_607650(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstance_607649(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  var valid_607651 = query.getOrDefault("DeleteAutomatedBackups")
  valid_607651 = validateParameter(valid_607651, JBool, required = false, default = nil)
  if valid_607651 != nil:
    section.add "DeleteAutomatedBackups", valid_607651
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607652 = query.getOrDefault("DBInstanceIdentifier")
  valid_607652 = validateParameter(valid_607652, JString, required = true,
                                 default = nil)
  if valid_607652 != nil:
    section.add "DBInstanceIdentifier", valid_607652
  var valid_607653 = query.getOrDefault("SkipFinalSnapshot")
  valid_607653 = validateParameter(valid_607653, JBool, required = false, default = nil)
  if valid_607653 != nil:
    section.add "SkipFinalSnapshot", valid_607653
  var valid_607654 = query.getOrDefault("Action")
  valid_607654 = validateParameter(valid_607654, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_607654 != nil:
    section.add "Action", valid_607654
  var valid_607655 = query.getOrDefault("Version")
  valid_607655 = validateParameter(valid_607655, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607655 != nil:
    section.add "Version", valid_607655
  var valid_607656 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_607656 = validateParameter(valid_607656, JString, required = false,
                                 default = nil)
  if valid_607656 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_607656
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607657 = header.getOrDefault("X-Amz-Signature")
  valid_607657 = validateParameter(valid_607657, JString, required = false,
                                 default = nil)
  if valid_607657 != nil:
    section.add "X-Amz-Signature", valid_607657
  var valid_607658 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607658 = validateParameter(valid_607658, JString, required = false,
                                 default = nil)
  if valid_607658 != nil:
    section.add "X-Amz-Content-Sha256", valid_607658
  var valid_607659 = header.getOrDefault("X-Amz-Date")
  valid_607659 = validateParameter(valid_607659, JString, required = false,
                                 default = nil)
  if valid_607659 != nil:
    section.add "X-Amz-Date", valid_607659
  var valid_607660 = header.getOrDefault("X-Amz-Credential")
  valid_607660 = validateParameter(valid_607660, JString, required = false,
                                 default = nil)
  if valid_607660 != nil:
    section.add "X-Amz-Credential", valid_607660
  var valid_607661 = header.getOrDefault("X-Amz-Security-Token")
  valid_607661 = validateParameter(valid_607661, JString, required = false,
                                 default = nil)
  if valid_607661 != nil:
    section.add "X-Amz-Security-Token", valid_607661
  var valid_607662 = header.getOrDefault("X-Amz-Algorithm")
  valid_607662 = validateParameter(valid_607662, JString, required = false,
                                 default = nil)
  if valid_607662 != nil:
    section.add "X-Amz-Algorithm", valid_607662
  var valid_607663 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607663 = validateParameter(valid_607663, JString, required = false,
                                 default = nil)
  if valid_607663 != nil:
    section.add "X-Amz-SignedHeaders", valid_607663
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607664: Call_GetDeleteDBInstance_607648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_607664.validator(path, query, header, formData, body)
  let scheme = call_607664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607664.url(scheme.get, call_607664.host, call_607664.base,
                         call_607664.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607664, url, valid)

proc call*(call_607665: Call_GetDeleteDBInstance_607648;
          DBInstanceIdentifier: string; DeleteAutomatedBackups: bool = false;
          SkipFinalSnapshot: bool = false; Action: string = "DeleteDBInstance";
          Version: string = "2014-10-31"; FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  var query_607666 = newJObject()
  add(query_607666, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  add(query_607666, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607666, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_607666, "Action", newJString(Action))
  add(query_607666, "Version", newJString(Version))
  add(query_607666, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_607665.call(nil, query_607666, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_607648(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_607649, base: "/",
    url: url_GetDeleteDBInstance_607650, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstanceAutomatedBackup_607703 = ref object of OpenApiRestCall_605589
proc url_PostDeleteDBInstanceAutomatedBackup_607705(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstanceAutomatedBackup_607704(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607706 = query.getOrDefault("Action")
  valid_607706 = validateParameter(valid_607706, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_607706 != nil:
    section.add "Action", valid_607706
  var valid_607707 = query.getOrDefault("Version")
  valid_607707 = validateParameter(valid_607707, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607707 != nil:
    section.add "Version", valid_607707
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607708 = header.getOrDefault("X-Amz-Signature")
  valid_607708 = validateParameter(valid_607708, JString, required = false,
                                 default = nil)
  if valid_607708 != nil:
    section.add "X-Amz-Signature", valid_607708
  var valid_607709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607709 = validateParameter(valid_607709, JString, required = false,
                                 default = nil)
  if valid_607709 != nil:
    section.add "X-Amz-Content-Sha256", valid_607709
  var valid_607710 = header.getOrDefault("X-Amz-Date")
  valid_607710 = validateParameter(valid_607710, JString, required = false,
                                 default = nil)
  if valid_607710 != nil:
    section.add "X-Amz-Date", valid_607710
  var valid_607711 = header.getOrDefault("X-Amz-Credential")
  valid_607711 = validateParameter(valid_607711, JString, required = false,
                                 default = nil)
  if valid_607711 != nil:
    section.add "X-Amz-Credential", valid_607711
  var valid_607712 = header.getOrDefault("X-Amz-Security-Token")
  valid_607712 = validateParameter(valid_607712, JString, required = false,
                                 default = nil)
  if valid_607712 != nil:
    section.add "X-Amz-Security-Token", valid_607712
  var valid_607713 = header.getOrDefault("X-Amz-Algorithm")
  valid_607713 = validateParameter(valid_607713, JString, required = false,
                                 default = nil)
  if valid_607713 != nil:
    section.add "X-Amz-Algorithm", valid_607713
  var valid_607714 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607714 = validateParameter(valid_607714, JString, required = false,
                                 default = nil)
  if valid_607714 != nil:
    section.add "X-Amz-SignedHeaders", valid_607714
  result.add "header", section
  ## parameters in `formData` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DbiResourceId` field"
  var valid_607715 = formData.getOrDefault("DbiResourceId")
  valid_607715 = validateParameter(valid_607715, JString, required = true,
                                 default = nil)
  if valid_607715 != nil:
    section.add "DbiResourceId", valid_607715
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607716: Call_PostDeleteDBInstanceAutomatedBackup_607703;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_607716.validator(path, query, header, formData, body)
  let scheme = call_607716.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607716.url(scheme.get, call_607716.host, call_607716.base,
                         call_607716.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607716, url, valid)

proc call*(call_607717: Call_PostDeleteDBInstanceAutomatedBackup_607703;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607718 = newJObject()
  var formData_607719 = newJObject()
  add(formData_607719, "DbiResourceId", newJString(DbiResourceId))
  add(query_607718, "Action", newJString(Action))
  add(query_607718, "Version", newJString(Version))
  result = call_607717.call(nil, query_607718, nil, formData_607719, nil)

var postDeleteDBInstanceAutomatedBackup* = Call_PostDeleteDBInstanceAutomatedBackup_607703(
    name: "postDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_PostDeleteDBInstanceAutomatedBackup_607704, base: "/",
    url: url_PostDeleteDBInstanceAutomatedBackup_607705,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstanceAutomatedBackup_607687 = ref object of OpenApiRestCall_605589
proc url_GetDeleteDBInstanceAutomatedBackup_607689(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstanceAutomatedBackup_607688(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DbiResourceId` field"
  var valid_607690 = query.getOrDefault("DbiResourceId")
  valid_607690 = validateParameter(valid_607690, JString, required = true,
                                 default = nil)
  if valid_607690 != nil:
    section.add "DbiResourceId", valid_607690
  var valid_607691 = query.getOrDefault("Action")
  valid_607691 = validateParameter(valid_607691, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_607691 != nil:
    section.add "Action", valid_607691
  var valid_607692 = query.getOrDefault("Version")
  valid_607692 = validateParameter(valid_607692, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607692 != nil:
    section.add "Version", valid_607692
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607693 = header.getOrDefault("X-Amz-Signature")
  valid_607693 = validateParameter(valid_607693, JString, required = false,
                                 default = nil)
  if valid_607693 != nil:
    section.add "X-Amz-Signature", valid_607693
  var valid_607694 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607694 = validateParameter(valid_607694, JString, required = false,
                                 default = nil)
  if valid_607694 != nil:
    section.add "X-Amz-Content-Sha256", valid_607694
  var valid_607695 = header.getOrDefault("X-Amz-Date")
  valid_607695 = validateParameter(valid_607695, JString, required = false,
                                 default = nil)
  if valid_607695 != nil:
    section.add "X-Amz-Date", valid_607695
  var valid_607696 = header.getOrDefault("X-Amz-Credential")
  valid_607696 = validateParameter(valid_607696, JString, required = false,
                                 default = nil)
  if valid_607696 != nil:
    section.add "X-Amz-Credential", valid_607696
  var valid_607697 = header.getOrDefault("X-Amz-Security-Token")
  valid_607697 = validateParameter(valid_607697, JString, required = false,
                                 default = nil)
  if valid_607697 != nil:
    section.add "X-Amz-Security-Token", valid_607697
  var valid_607698 = header.getOrDefault("X-Amz-Algorithm")
  valid_607698 = validateParameter(valid_607698, JString, required = false,
                                 default = nil)
  if valid_607698 != nil:
    section.add "X-Amz-Algorithm", valid_607698
  var valid_607699 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607699 = validateParameter(valid_607699, JString, required = false,
                                 default = nil)
  if valid_607699 != nil:
    section.add "X-Amz-SignedHeaders", valid_607699
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607700: Call_GetDeleteDBInstanceAutomatedBackup_607687;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_607700.validator(path, query, header, formData, body)
  let scheme = call_607700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607700.url(scheme.get, call_607700.host, call_607700.base,
                         call_607700.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607700, url, valid)

proc call*(call_607701: Call_GetDeleteDBInstanceAutomatedBackup_607687;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607702 = newJObject()
  add(query_607702, "DbiResourceId", newJString(DbiResourceId))
  add(query_607702, "Action", newJString(Action))
  add(query_607702, "Version", newJString(Version))
  result = call_607701.call(nil, query_607702, nil, nil, nil)

var getDeleteDBInstanceAutomatedBackup* = Call_GetDeleteDBInstanceAutomatedBackup_607687(
    name: "getDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_GetDeleteDBInstanceAutomatedBackup_607688, base: "/",
    url: url_GetDeleteDBInstanceAutomatedBackup_607689,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_607736 = ref object of OpenApiRestCall_605589
proc url_PostDeleteDBParameterGroup_607738(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBParameterGroup_607737(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607739 = query.getOrDefault("Action")
  valid_607739 = validateParameter(valid_607739, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_607739 != nil:
    section.add "Action", valid_607739
  var valid_607740 = query.getOrDefault("Version")
  valid_607740 = validateParameter(valid_607740, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607740 != nil:
    section.add "Version", valid_607740
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607741 = header.getOrDefault("X-Amz-Signature")
  valid_607741 = validateParameter(valid_607741, JString, required = false,
                                 default = nil)
  if valid_607741 != nil:
    section.add "X-Amz-Signature", valid_607741
  var valid_607742 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607742 = validateParameter(valid_607742, JString, required = false,
                                 default = nil)
  if valid_607742 != nil:
    section.add "X-Amz-Content-Sha256", valid_607742
  var valid_607743 = header.getOrDefault("X-Amz-Date")
  valid_607743 = validateParameter(valid_607743, JString, required = false,
                                 default = nil)
  if valid_607743 != nil:
    section.add "X-Amz-Date", valid_607743
  var valid_607744 = header.getOrDefault("X-Amz-Credential")
  valid_607744 = validateParameter(valid_607744, JString, required = false,
                                 default = nil)
  if valid_607744 != nil:
    section.add "X-Amz-Credential", valid_607744
  var valid_607745 = header.getOrDefault("X-Amz-Security-Token")
  valid_607745 = validateParameter(valid_607745, JString, required = false,
                                 default = nil)
  if valid_607745 != nil:
    section.add "X-Amz-Security-Token", valid_607745
  var valid_607746 = header.getOrDefault("X-Amz-Algorithm")
  valid_607746 = validateParameter(valid_607746, JString, required = false,
                                 default = nil)
  if valid_607746 != nil:
    section.add "X-Amz-Algorithm", valid_607746
  var valid_607747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607747 = validateParameter(valid_607747, JString, required = false,
                                 default = nil)
  if valid_607747 != nil:
    section.add "X-Amz-SignedHeaders", valid_607747
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_607748 = formData.getOrDefault("DBParameterGroupName")
  valid_607748 = validateParameter(valid_607748, JString, required = true,
                                 default = nil)
  if valid_607748 != nil:
    section.add "DBParameterGroupName", valid_607748
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607749: Call_PostDeleteDBParameterGroup_607736; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_607749.validator(path, query, header, formData, body)
  let scheme = call_607749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607749.url(scheme.get, call_607749.host, call_607749.base,
                         call_607749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607749, url, valid)

proc call*(call_607750: Call_PostDeleteDBParameterGroup_607736;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607751 = newJObject()
  var formData_607752 = newJObject()
  add(formData_607752, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607751, "Action", newJString(Action))
  add(query_607751, "Version", newJString(Version))
  result = call_607750.call(nil, query_607751, nil, formData_607752, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_607736(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_607737, base: "/",
    url: url_PostDeleteDBParameterGroup_607738,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_607720 = ref object of OpenApiRestCall_605589
proc url_GetDeleteDBParameterGroup_607722(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBParameterGroup_607721(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_607723 = query.getOrDefault("DBParameterGroupName")
  valid_607723 = validateParameter(valid_607723, JString, required = true,
                                 default = nil)
  if valid_607723 != nil:
    section.add "DBParameterGroupName", valid_607723
  var valid_607724 = query.getOrDefault("Action")
  valid_607724 = validateParameter(valid_607724, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_607724 != nil:
    section.add "Action", valid_607724
  var valid_607725 = query.getOrDefault("Version")
  valid_607725 = validateParameter(valid_607725, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607725 != nil:
    section.add "Version", valid_607725
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607726 = header.getOrDefault("X-Amz-Signature")
  valid_607726 = validateParameter(valid_607726, JString, required = false,
                                 default = nil)
  if valid_607726 != nil:
    section.add "X-Amz-Signature", valid_607726
  var valid_607727 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607727 = validateParameter(valid_607727, JString, required = false,
                                 default = nil)
  if valid_607727 != nil:
    section.add "X-Amz-Content-Sha256", valid_607727
  var valid_607728 = header.getOrDefault("X-Amz-Date")
  valid_607728 = validateParameter(valid_607728, JString, required = false,
                                 default = nil)
  if valid_607728 != nil:
    section.add "X-Amz-Date", valid_607728
  var valid_607729 = header.getOrDefault("X-Amz-Credential")
  valid_607729 = validateParameter(valid_607729, JString, required = false,
                                 default = nil)
  if valid_607729 != nil:
    section.add "X-Amz-Credential", valid_607729
  var valid_607730 = header.getOrDefault("X-Amz-Security-Token")
  valid_607730 = validateParameter(valid_607730, JString, required = false,
                                 default = nil)
  if valid_607730 != nil:
    section.add "X-Amz-Security-Token", valid_607730
  var valid_607731 = header.getOrDefault("X-Amz-Algorithm")
  valid_607731 = validateParameter(valid_607731, JString, required = false,
                                 default = nil)
  if valid_607731 != nil:
    section.add "X-Amz-Algorithm", valid_607731
  var valid_607732 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607732 = validateParameter(valid_607732, JString, required = false,
                                 default = nil)
  if valid_607732 != nil:
    section.add "X-Amz-SignedHeaders", valid_607732
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607733: Call_GetDeleteDBParameterGroup_607720; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_607733.validator(path, query, header, formData, body)
  let scheme = call_607733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607733.url(scheme.get, call_607733.host, call_607733.base,
                         call_607733.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607733, url, valid)

proc call*(call_607734: Call_GetDeleteDBParameterGroup_607720;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607735 = newJObject()
  add(query_607735, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607735, "Action", newJString(Action))
  add(query_607735, "Version", newJString(Version))
  result = call_607734.call(nil, query_607735, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_607720(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_607721, base: "/",
    url: url_GetDeleteDBParameterGroup_607722,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBProxy_607769 = ref object of OpenApiRestCall_605589
proc url_PostDeleteDBProxy_607771(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBProxy_607770(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607772 = query.getOrDefault("Action")
  valid_607772 = validateParameter(valid_607772, JString, required = true,
                                 default = newJString("DeleteDBProxy"))
  if valid_607772 != nil:
    section.add "Action", valid_607772
  var valid_607773 = query.getOrDefault("Version")
  valid_607773 = validateParameter(valid_607773, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607773 != nil:
    section.add "Version", valid_607773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607774 = header.getOrDefault("X-Amz-Signature")
  valid_607774 = validateParameter(valid_607774, JString, required = false,
                                 default = nil)
  if valid_607774 != nil:
    section.add "X-Amz-Signature", valid_607774
  var valid_607775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607775 = validateParameter(valid_607775, JString, required = false,
                                 default = nil)
  if valid_607775 != nil:
    section.add "X-Amz-Content-Sha256", valid_607775
  var valid_607776 = header.getOrDefault("X-Amz-Date")
  valid_607776 = validateParameter(valid_607776, JString, required = false,
                                 default = nil)
  if valid_607776 != nil:
    section.add "X-Amz-Date", valid_607776
  var valid_607777 = header.getOrDefault("X-Amz-Credential")
  valid_607777 = validateParameter(valid_607777, JString, required = false,
                                 default = nil)
  if valid_607777 != nil:
    section.add "X-Amz-Credential", valid_607777
  var valid_607778 = header.getOrDefault("X-Amz-Security-Token")
  valid_607778 = validateParameter(valid_607778, JString, required = false,
                                 default = nil)
  if valid_607778 != nil:
    section.add "X-Amz-Security-Token", valid_607778
  var valid_607779 = header.getOrDefault("X-Amz-Algorithm")
  valid_607779 = validateParameter(valid_607779, JString, required = false,
                                 default = nil)
  if valid_607779 != nil:
    section.add "X-Amz-Algorithm", valid_607779
  var valid_607780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607780 = validateParameter(valid_607780, JString, required = false,
                                 default = nil)
  if valid_607780 != nil:
    section.add "X-Amz-SignedHeaders", valid_607780
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBProxyName: JString (required)
  ##              : The name of the DB proxy to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_607781 = formData.getOrDefault("DBProxyName")
  valid_607781 = validateParameter(valid_607781, JString, required = true,
                                 default = nil)
  if valid_607781 != nil:
    section.add "DBProxyName", valid_607781
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607782: Call_PostDeleteDBProxy_607769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  let valid = call_607782.validator(path, query, header, formData, body)
  let scheme = call_607782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607782.url(scheme.get, call_607782.host, call_607782.base,
                         call_607782.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607782, url, valid)

proc call*(call_607783: Call_PostDeleteDBProxy_607769; DBProxyName: string;
          Action: string = "DeleteDBProxy"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ##   DBProxyName: string (required)
  ##              : The name of the DB proxy to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607784 = newJObject()
  var formData_607785 = newJObject()
  add(formData_607785, "DBProxyName", newJString(DBProxyName))
  add(query_607784, "Action", newJString(Action))
  add(query_607784, "Version", newJString(Version))
  result = call_607783.call(nil, query_607784, nil, formData_607785, nil)

var postDeleteDBProxy* = Call_PostDeleteDBProxy_607769(name: "postDeleteDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBProxy", validator: validate_PostDeleteDBProxy_607770,
    base: "/", url: url_PostDeleteDBProxy_607771,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBProxy_607753 = ref object of OpenApiRestCall_605589
proc url_GetDeleteDBProxy_607755(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBProxy_607754(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The name of the DB proxy to delete.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607756 = query.getOrDefault("Action")
  valid_607756 = validateParameter(valid_607756, JString, required = true,
                                 default = newJString("DeleteDBProxy"))
  if valid_607756 != nil:
    section.add "Action", valid_607756
  var valid_607757 = query.getOrDefault("Version")
  valid_607757 = validateParameter(valid_607757, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607757 != nil:
    section.add "Version", valid_607757
  var valid_607758 = query.getOrDefault("DBProxyName")
  valid_607758 = validateParameter(valid_607758, JString, required = true,
                                 default = nil)
  if valid_607758 != nil:
    section.add "DBProxyName", valid_607758
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607759 = header.getOrDefault("X-Amz-Signature")
  valid_607759 = validateParameter(valid_607759, JString, required = false,
                                 default = nil)
  if valid_607759 != nil:
    section.add "X-Amz-Signature", valid_607759
  var valid_607760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607760 = validateParameter(valid_607760, JString, required = false,
                                 default = nil)
  if valid_607760 != nil:
    section.add "X-Amz-Content-Sha256", valid_607760
  var valid_607761 = header.getOrDefault("X-Amz-Date")
  valid_607761 = validateParameter(valid_607761, JString, required = false,
                                 default = nil)
  if valid_607761 != nil:
    section.add "X-Amz-Date", valid_607761
  var valid_607762 = header.getOrDefault("X-Amz-Credential")
  valid_607762 = validateParameter(valid_607762, JString, required = false,
                                 default = nil)
  if valid_607762 != nil:
    section.add "X-Amz-Credential", valid_607762
  var valid_607763 = header.getOrDefault("X-Amz-Security-Token")
  valid_607763 = validateParameter(valid_607763, JString, required = false,
                                 default = nil)
  if valid_607763 != nil:
    section.add "X-Amz-Security-Token", valid_607763
  var valid_607764 = header.getOrDefault("X-Amz-Algorithm")
  valid_607764 = validateParameter(valid_607764, JString, required = false,
                                 default = nil)
  if valid_607764 != nil:
    section.add "X-Amz-Algorithm", valid_607764
  var valid_607765 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607765 = validateParameter(valid_607765, JString, required = false,
                                 default = nil)
  if valid_607765 != nil:
    section.add "X-Amz-SignedHeaders", valid_607765
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607766: Call_GetDeleteDBProxy_607753; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  let valid = call_607766.validator(path, query, header, formData, body)
  let scheme = call_607766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607766.url(scheme.get, call_607766.host, call_607766.base,
                         call_607766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607766, url, valid)

proc call*(call_607767: Call_GetDeleteDBProxy_607753; DBProxyName: string;
          Action: string = "DeleteDBProxy"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the DB proxy to delete.
  var query_607768 = newJObject()
  add(query_607768, "Action", newJString(Action))
  add(query_607768, "Version", newJString(Version))
  add(query_607768, "DBProxyName", newJString(DBProxyName))
  result = call_607767.call(nil, query_607768, nil, nil, nil)

var getDeleteDBProxy* = Call_GetDeleteDBProxy_607753(name: "getDeleteDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBProxy", validator: validate_GetDeleteDBProxy_607754,
    base: "/", url: url_GetDeleteDBProxy_607755,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSecurityGroup_607802 = ref object of OpenApiRestCall_605589
proc url_PostDeleteDBSecurityGroup_607804(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSecurityGroup_607803(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607805 = query.getOrDefault("Action")
  valid_607805 = validateParameter(valid_607805, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_607805 != nil:
    section.add "Action", valid_607805
  var valid_607806 = query.getOrDefault("Version")
  valid_607806 = validateParameter(valid_607806, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607806 != nil:
    section.add "Version", valid_607806
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607807 = header.getOrDefault("X-Amz-Signature")
  valid_607807 = validateParameter(valid_607807, JString, required = false,
                                 default = nil)
  if valid_607807 != nil:
    section.add "X-Amz-Signature", valid_607807
  var valid_607808 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607808 = validateParameter(valid_607808, JString, required = false,
                                 default = nil)
  if valid_607808 != nil:
    section.add "X-Amz-Content-Sha256", valid_607808
  var valid_607809 = header.getOrDefault("X-Amz-Date")
  valid_607809 = validateParameter(valid_607809, JString, required = false,
                                 default = nil)
  if valid_607809 != nil:
    section.add "X-Amz-Date", valid_607809
  var valid_607810 = header.getOrDefault("X-Amz-Credential")
  valid_607810 = validateParameter(valid_607810, JString, required = false,
                                 default = nil)
  if valid_607810 != nil:
    section.add "X-Amz-Credential", valid_607810
  var valid_607811 = header.getOrDefault("X-Amz-Security-Token")
  valid_607811 = validateParameter(valid_607811, JString, required = false,
                                 default = nil)
  if valid_607811 != nil:
    section.add "X-Amz-Security-Token", valid_607811
  var valid_607812 = header.getOrDefault("X-Amz-Algorithm")
  valid_607812 = validateParameter(valid_607812, JString, required = false,
                                 default = nil)
  if valid_607812 != nil:
    section.add "X-Amz-Algorithm", valid_607812
  var valid_607813 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607813 = validateParameter(valid_607813, JString, required = false,
                                 default = nil)
  if valid_607813 != nil:
    section.add "X-Amz-SignedHeaders", valid_607813
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_607814 = formData.getOrDefault("DBSecurityGroupName")
  valid_607814 = validateParameter(valid_607814, JString, required = true,
                                 default = nil)
  if valid_607814 != nil:
    section.add "DBSecurityGroupName", valid_607814
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607815: Call_PostDeleteDBSecurityGroup_607802; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_607815.validator(path, query, header, formData, body)
  let scheme = call_607815.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607815.url(scheme.get, call_607815.host, call_607815.base,
                         call_607815.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607815, url, valid)

proc call*(call_607816: Call_PostDeleteDBSecurityGroup_607802;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607817 = newJObject()
  var formData_607818 = newJObject()
  add(formData_607818, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_607817, "Action", newJString(Action))
  add(query_607817, "Version", newJString(Version))
  result = call_607816.call(nil, query_607817, nil, formData_607818, nil)

var postDeleteDBSecurityGroup* = Call_PostDeleteDBSecurityGroup_607802(
    name: "postDeleteDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_PostDeleteDBSecurityGroup_607803, base: "/",
    url: url_PostDeleteDBSecurityGroup_607804,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSecurityGroup_607786 = ref object of OpenApiRestCall_605589
proc url_GetDeleteDBSecurityGroup_607788(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSecurityGroup_607787(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_607789 = query.getOrDefault("DBSecurityGroupName")
  valid_607789 = validateParameter(valid_607789, JString, required = true,
                                 default = nil)
  if valid_607789 != nil:
    section.add "DBSecurityGroupName", valid_607789
  var valid_607790 = query.getOrDefault("Action")
  valid_607790 = validateParameter(valid_607790, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_607790 != nil:
    section.add "Action", valid_607790
  var valid_607791 = query.getOrDefault("Version")
  valid_607791 = validateParameter(valid_607791, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607791 != nil:
    section.add "Version", valid_607791
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607792 = header.getOrDefault("X-Amz-Signature")
  valid_607792 = validateParameter(valid_607792, JString, required = false,
                                 default = nil)
  if valid_607792 != nil:
    section.add "X-Amz-Signature", valid_607792
  var valid_607793 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607793 = validateParameter(valid_607793, JString, required = false,
                                 default = nil)
  if valid_607793 != nil:
    section.add "X-Amz-Content-Sha256", valid_607793
  var valid_607794 = header.getOrDefault("X-Amz-Date")
  valid_607794 = validateParameter(valid_607794, JString, required = false,
                                 default = nil)
  if valid_607794 != nil:
    section.add "X-Amz-Date", valid_607794
  var valid_607795 = header.getOrDefault("X-Amz-Credential")
  valid_607795 = validateParameter(valid_607795, JString, required = false,
                                 default = nil)
  if valid_607795 != nil:
    section.add "X-Amz-Credential", valid_607795
  var valid_607796 = header.getOrDefault("X-Amz-Security-Token")
  valid_607796 = validateParameter(valid_607796, JString, required = false,
                                 default = nil)
  if valid_607796 != nil:
    section.add "X-Amz-Security-Token", valid_607796
  var valid_607797 = header.getOrDefault("X-Amz-Algorithm")
  valid_607797 = validateParameter(valid_607797, JString, required = false,
                                 default = nil)
  if valid_607797 != nil:
    section.add "X-Amz-Algorithm", valid_607797
  var valid_607798 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607798 = validateParameter(valid_607798, JString, required = false,
                                 default = nil)
  if valid_607798 != nil:
    section.add "X-Amz-SignedHeaders", valid_607798
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607799: Call_GetDeleteDBSecurityGroup_607786; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_607799.validator(path, query, header, formData, body)
  let scheme = call_607799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607799.url(scheme.get, call_607799.host, call_607799.base,
                         call_607799.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607799, url, valid)

proc call*(call_607800: Call_GetDeleteDBSecurityGroup_607786;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607801 = newJObject()
  add(query_607801, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_607801, "Action", newJString(Action))
  add(query_607801, "Version", newJString(Version))
  result = call_607800.call(nil, query_607801, nil, nil, nil)

var getDeleteDBSecurityGroup* = Call_GetDeleteDBSecurityGroup_607786(
    name: "getDeleteDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_GetDeleteDBSecurityGroup_607787, base: "/",
    url: url_GetDeleteDBSecurityGroup_607788, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSnapshot_607835 = ref object of OpenApiRestCall_605589
proc url_PostDeleteDBSnapshot_607837(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSnapshot_607836(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607838 = query.getOrDefault("Action")
  valid_607838 = validateParameter(valid_607838, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_607838 != nil:
    section.add "Action", valid_607838
  var valid_607839 = query.getOrDefault("Version")
  valid_607839 = validateParameter(valid_607839, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607839 != nil:
    section.add "Version", valid_607839
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607840 = header.getOrDefault("X-Amz-Signature")
  valid_607840 = validateParameter(valid_607840, JString, required = false,
                                 default = nil)
  if valid_607840 != nil:
    section.add "X-Amz-Signature", valid_607840
  var valid_607841 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607841 = validateParameter(valid_607841, JString, required = false,
                                 default = nil)
  if valid_607841 != nil:
    section.add "X-Amz-Content-Sha256", valid_607841
  var valid_607842 = header.getOrDefault("X-Amz-Date")
  valid_607842 = validateParameter(valid_607842, JString, required = false,
                                 default = nil)
  if valid_607842 != nil:
    section.add "X-Amz-Date", valid_607842
  var valid_607843 = header.getOrDefault("X-Amz-Credential")
  valid_607843 = validateParameter(valid_607843, JString, required = false,
                                 default = nil)
  if valid_607843 != nil:
    section.add "X-Amz-Credential", valid_607843
  var valid_607844 = header.getOrDefault("X-Amz-Security-Token")
  valid_607844 = validateParameter(valid_607844, JString, required = false,
                                 default = nil)
  if valid_607844 != nil:
    section.add "X-Amz-Security-Token", valid_607844
  var valid_607845 = header.getOrDefault("X-Amz-Algorithm")
  valid_607845 = validateParameter(valid_607845, JString, required = false,
                                 default = nil)
  if valid_607845 != nil:
    section.add "X-Amz-Algorithm", valid_607845
  var valid_607846 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607846 = validateParameter(valid_607846, JString, required = false,
                                 default = nil)
  if valid_607846 != nil:
    section.add "X-Amz-SignedHeaders", valid_607846
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_607847 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_607847 = validateParameter(valid_607847, JString, required = true,
                                 default = nil)
  if valid_607847 != nil:
    section.add "DBSnapshotIdentifier", valid_607847
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607848: Call_PostDeleteDBSnapshot_607835; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_607848.validator(path, query, header, formData, body)
  let scheme = call_607848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607848.url(scheme.get, call_607848.host, call_607848.base,
                         call_607848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607848, url, valid)

proc call*(call_607849: Call_PostDeleteDBSnapshot_607835;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607850 = newJObject()
  var formData_607851 = newJObject()
  add(formData_607851, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_607850, "Action", newJString(Action))
  add(query_607850, "Version", newJString(Version))
  result = call_607849.call(nil, query_607850, nil, formData_607851, nil)

var postDeleteDBSnapshot* = Call_PostDeleteDBSnapshot_607835(
    name: "postDeleteDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_PostDeleteDBSnapshot_607836, base: "/",
    url: url_PostDeleteDBSnapshot_607837, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSnapshot_607819 = ref object of OpenApiRestCall_605589
proc url_GetDeleteDBSnapshot_607821(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSnapshot_607820(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_607822 = query.getOrDefault("DBSnapshotIdentifier")
  valid_607822 = validateParameter(valid_607822, JString, required = true,
                                 default = nil)
  if valid_607822 != nil:
    section.add "DBSnapshotIdentifier", valid_607822
  var valid_607823 = query.getOrDefault("Action")
  valid_607823 = validateParameter(valid_607823, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_607823 != nil:
    section.add "Action", valid_607823
  var valid_607824 = query.getOrDefault("Version")
  valid_607824 = validateParameter(valid_607824, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607824 != nil:
    section.add "Version", valid_607824
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607825 = header.getOrDefault("X-Amz-Signature")
  valid_607825 = validateParameter(valid_607825, JString, required = false,
                                 default = nil)
  if valid_607825 != nil:
    section.add "X-Amz-Signature", valid_607825
  var valid_607826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607826 = validateParameter(valid_607826, JString, required = false,
                                 default = nil)
  if valid_607826 != nil:
    section.add "X-Amz-Content-Sha256", valid_607826
  var valid_607827 = header.getOrDefault("X-Amz-Date")
  valid_607827 = validateParameter(valid_607827, JString, required = false,
                                 default = nil)
  if valid_607827 != nil:
    section.add "X-Amz-Date", valid_607827
  var valid_607828 = header.getOrDefault("X-Amz-Credential")
  valid_607828 = validateParameter(valid_607828, JString, required = false,
                                 default = nil)
  if valid_607828 != nil:
    section.add "X-Amz-Credential", valid_607828
  var valid_607829 = header.getOrDefault("X-Amz-Security-Token")
  valid_607829 = validateParameter(valid_607829, JString, required = false,
                                 default = nil)
  if valid_607829 != nil:
    section.add "X-Amz-Security-Token", valid_607829
  var valid_607830 = header.getOrDefault("X-Amz-Algorithm")
  valid_607830 = validateParameter(valid_607830, JString, required = false,
                                 default = nil)
  if valid_607830 != nil:
    section.add "X-Amz-Algorithm", valid_607830
  var valid_607831 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607831 = validateParameter(valid_607831, JString, required = false,
                                 default = nil)
  if valid_607831 != nil:
    section.add "X-Amz-SignedHeaders", valid_607831
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607832: Call_GetDeleteDBSnapshot_607819; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_607832.validator(path, query, header, formData, body)
  let scheme = call_607832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607832.url(scheme.get, call_607832.host, call_607832.base,
                         call_607832.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607832, url, valid)

proc call*(call_607833: Call_GetDeleteDBSnapshot_607819;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607834 = newJObject()
  add(query_607834, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_607834, "Action", newJString(Action))
  add(query_607834, "Version", newJString(Version))
  result = call_607833.call(nil, query_607834, nil, nil, nil)

var getDeleteDBSnapshot* = Call_GetDeleteDBSnapshot_607819(
    name: "getDeleteDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_GetDeleteDBSnapshot_607820, base: "/",
    url: url_GetDeleteDBSnapshot_607821, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_607868 = ref object of OpenApiRestCall_605589
proc url_PostDeleteDBSubnetGroup_607870(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSubnetGroup_607869(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607871 = query.getOrDefault("Action")
  valid_607871 = validateParameter(valid_607871, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_607871 != nil:
    section.add "Action", valid_607871
  var valid_607872 = query.getOrDefault("Version")
  valid_607872 = validateParameter(valid_607872, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607872 != nil:
    section.add "Version", valid_607872
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607873 = header.getOrDefault("X-Amz-Signature")
  valid_607873 = validateParameter(valid_607873, JString, required = false,
                                 default = nil)
  if valid_607873 != nil:
    section.add "X-Amz-Signature", valid_607873
  var valid_607874 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607874 = validateParameter(valid_607874, JString, required = false,
                                 default = nil)
  if valid_607874 != nil:
    section.add "X-Amz-Content-Sha256", valid_607874
  var valid_607875 = header.getOrDefault("X-Amz-Date")
  valid_607875 = validateParameter(valid_607875, JString, required = false,
                                 default = nil)
  if valid_607875 != nil:
    section.add "X-Amz-Date", valid_607875
  var valid_607876 = header.getOrDefault("X-Amz-Credential")
  valid_607876 = validateParameter(valid_607876, JString, required = false,
                                 default = nil)
  if valid_607876 != nil:
    section.add "X-Amz-Credential", valid_607876
  var valid_607877 = header.getOrDefault("X-Amz-Security-Token")
  valid_607877 = validateParameter(valid_607877, JString, required = false,
                                 default = nil)
  if valid_607877 != nil:
    section.add "X-Amz-Security-Token", valid_607877
  var valid_607878 = header.getOrDefault("X-Amz-Algorithm")
  valid_607878 = validateParameter(valid_607878, JString, required = false,
                                 default = nil)
  if valid_607878 != nil:
    section.add "X-Amz-Algorithm", valid_607878
  var valid_607879 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607879 = validateParameter(valid_607879, JString, required = false,
                                 default = nil)
  if valid_607879 != nil:
    section.add "X-Amz-SignedHeaders", valid_607879
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_607880 = formData.getOrDefault("DBSubnetGroupName")
  valid_607880 = validateParameter(valid_607880, JString, required = true,
                                 default = nil)
  if valid_607880 != nil:
    section.add "DBSubnetGroupName", valid_607880
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607881: Call_PostDeleteDBSubnetGroup_607868; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_607881.validator(path, query, header, formData, body)
  let scheme = call_607881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607881.url(scheme.get, call_607881.host, call_607881.base,
                         call_607881.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607881, url, valid)

proc call*(call_607882: Call_PostDeleteDBSubnetGroup_607868;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_607883 = newJObject()
  var formData_607884 = newJObject()
  add(query_607883, "Action", newJString(Action))
  add(formData_607884, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607883, "Version", newJString(Version))
  result = call_607882.call(nil, query_607883, nil, formData_607884, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_607868(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_607869, base: "/",
    url: url_PostDeleteDBSubnetGroup_607870, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_607852 = ref object of OpenApiRestCall_605589
proc url_GetDeleteDBSubnetGroup_607854(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSubnetGroup_607853(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607855 = query.getOrDefault("Action")
  valid_607855 = validateParameter(valid_607855, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_607855 != nil:
    section.add "Action", valid_607855
  var valid_607856 = query.getOrDefault("DBSubnetGroupName")
  valid_607856 = validateParameter(valid_607856, JString, required = true,
                                 default = nil)
  if valid_607856 != nil:
    section.add "DBSubnetGroupName", valid_607856
  var valid_607857 = query.getOrDefault("Version")
  valid_607857 = validateParameter(valid_607857, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607857 != nil:
    section.add "Version", valid_607857
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607858 = header.getOrDefault("X-Amz-Signature")
  valid_607858 = validateParameter(valid_607858, JString, required = false,
                                 default = nil)
  if valid_607858 != nil:
    section.add "X-Amz-Signature", valid_607858
  var valid_607859 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607859 = validateParameter(valid_607859, JString, required = false,
                                 default = nil)
  if valid_607859 != nil:
    section.add "X-Amz-Content-Sha256", valid_607859
  var valid_607860 = header.getOrDefault("X-Amz-Date")
  valid_607860 = validateParameter(valid_607860, JString, required = false,
                                 default = nil)
  if valid_607860 != nil:
    section.add "X-Amz-Date", valid_607860
  var valid_607861 = header.getOrDefault("X-Amz-Credential")
  valid_607861 = validateParameter(valid_607861, JString, required = false,
                                 default = nil)
  if valid_607861 != nil:
    section.add "X-Amz-Credential", valid_607861
  var valid_607862 = header.getOrDefault("X-Amz-Security-Token")
  valid_607862 = validateParameter(valid_607862, JString, required = false,
                                 default = nil)
  if valid_607862 != nil:
    section.add "X-Amz-Security-Token", valid_607862
  var valid_607863 = header.getOrDefault("X-Amz-Algorithm")
  valid_607863 = validateParameter(valid_607863, JString, required = false,
                                 default = nil)
  if valid_607863 != nil:
    section.add "X-Amz-Algorithm", valid_607863
  var valid_607864 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607864 = validateParameter(valid_607864, JString, required = false,
                                 default = nil)
  if valid_607864 != nil:
    section.add "X-Amz-SignedHeaders", valid_607864
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607865: Call_GetDeleteDBSubnetGroup_607852; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_607865.validator(path, query, header, formData, body)
  let scheme = call_607865.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607865.url(scheme.get, call_607865.host, call_607865.base,
                         call_607865.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607865, url, valid)

proc call*(call_607866: Call_GetDeleteDBSubnetGroup_607852;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_607867 = newJObject()
  add(query_607867, "Action", newJString(Action))
  add(query_607867, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607867, "Version", newJString(Version))
  result = call_607866.call(nil, query_607867, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_607852(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_607853, base: "/",
    url: url_GetDeleteDBSubnetGroup_607854, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_607901 = ref object of OpenApiRestCall_605589
proc url_PostDeleteEventSubscription_607903(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteEventSubscription_607902(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607904 = query.getOrDefault("Action")
  valid_607904 = validateParameter(valid_607904, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_607904 != nil:
    section.add "Action", valid_607904
  var valid_607905 = query.getOrDefault("Version")
  valid_607905 = validateParameter(valid_607905, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607905 != nil:
    section.add "Version", valid_607905
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607906 = header.getOrDefault("X-Amz-Signature")
  valid_607906 = validateParameter(valid_607906, JString, required = false,
                                 default = nil)
  if valid_607906 != nil:
    section.add "X-Amz-Signature", valid_607906
  var valid_607907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607907 = validateParameter(valid_607907, JString, required = false,
                                 default = nil)
  if valid_607907 != nil:
    section.add "X-Amz-Content-Sha256", valid_607907
  var valid_607908 = header.getOrDefault("X-Amz-Date")
  valid_607908 = validateParameter(valid_607908, JString, required = false,
                                 default = nil)
  if valid_607908 != nil:
    section.add "X-Amz-Date", valid_607908
  var valid_607909 = header.getOrDefault("X-Amz-Credential")
  valid_607909 = validateParameter(valid_607909, JString, required = false,
                                 default = nil)
  if valid_607909 != nil:
    section.add "X-Amz-Credential", valid_607909
  var valid_607910 = header.getOrDefault("X-Amz-Security-Token")
  valid_607910 = validateParameter(valid_607910, JString, required = false,
                                 default = nil)
  if valid_607910 != nil:
    section.add "X-Amz-Security-Token", valid_607910
  var valid_607911 = header.getOrDefault("X-Amz-Algorithm")
  valid_607911 = validateParameter(valid_607911, JString, required = false,
                                 default = nil)
  if valid_607911 != nil:
    section.add "X-Amz-Algorithm", valid_607911
  var valid_607912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607912 = validateParameter(valid_607912, JString, required = false,
                                 default = nil)
  if valid_607912 != nil:
    section.add "X-Amz-SignedHeaders", valid_607912
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_607913 = formData.getOrDefault("SubscriptionName")
  valid_607913 = validateParameter(valid_607913, JString, required = true,
                                 default = nil)
  if valid_607913 != nil:
    section.add "SubscriptionName", valid_607913
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607914: Call_PostDeleteEventSubscription_607901; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_607914.validator(path, query, header, formData, body)
  let scheme = call_607914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607914.url(scheme.get, call_607914.host, call_607914.base,
                         call_607914.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607914, url, valid)

proc call*(call_607915: Call_PostDeleteEventSubscription_607901;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607916 = newJObject()
  var formData_607917 = newJObject()
  add(formData_607917, "SubscriptionName", newJString(SubscriptionName))
  add(query_607916, "Action", newJString(Action))
  add(query_607916, "Version", newJString(Version))
  result = call_607915.call(nil, query_607916, nil, formData_607917, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_607901(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_607902, base: "/",
    url: url_PostDeleteEventSubscription_607903,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_607885 = ref object of OpenApiRestCall_605589
proc url_GetDeleteEventSubscription_607887(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteEventSubscription_607886(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_607888 = query.getOrDefault("SubscriptionName")
  valid_607888 = validateParameter(valid_607888, JString, required = true,
                                 default = nil)
  if valid_607888 != nil:
    section.add "SubscriptionName", valid_607888
  var valid_607889 = query.getOrDefault("Action")
  valid_607889 = validateParameter(valid_607889, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_607889 != nil:
    section.add "Action", valid_607889
  var valid_607890 = query.getOrDefault("Version")
  valid_607890 = validateParameter(valid_607890, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607890 != nil:
    section.add "Version", valid_607890
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607891 = header.getOrDefault("X-Amz-Signature")
  valid_607891 = validateParameter(valid_607891, JString, required = false,
                                 default = nil)
  if valid_607891 != nil:
    section.add "X-Amz-Signature", valid_607891
  var valid_607892 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607892 = validateParameter(valid_607892, JString, required = false,
                                 default = nil)
  if valid_607892 != nil:
    section.add "X-Amz-Content-Sha256", valid_607892
  var valid_607893 = header.getOrDefault("X-Amz-Date")
  valid_607893 = validateParameter(valid_607893, JString, required = false,
                                 default = nil)
  if valid_607893 != nil:
    section.add "X-Amz-Date", valid_607893
  var valid_607894 = header.getOrDefault("X-Amz-Credential")
  valid_607894 = validateParameter(valid_607894, JString, required = false,
                                 default = nil)
  if valid_607894 != nil:
    section.add "X-Amz-Credential", valid_607894
  var valid_607895 = header.getOrDefault("X-Amz-Security-Token")
  valid_607895 = validateParameter(valid_607895, JString, required = false,
                                 default = nil)
  if valid_607895 != nil:
    section.add "X-Amz-Security-Token", valid_607895
  var valid_607896 = header.getOrDefault("X-Amz-Algorithm")
  valid_607896 = validateParameter(valid_607896, JString, required = false,
                                 default = nil)
  if valid_607896 != nil:
    section.add "X-Amz-Algorithm", valid_607896
  var valid_607897 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607897 = validateParameter(valid_607897, JString, required = false,
                                 default = nil)
  if valid_607897 != nil:
    section.add "X-Amz-SignedHeaders", valid_607897
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607898: Call_GetDeleteEventSubscription_607885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_607898.validator(path, query, header, formData, body)
  let scheme = call_607898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607898.url(scheme.get, call_607898.host, call_607898.base,
                         call_607898.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607898, url, valid)

proc call*(call_607899: Call_GetDeleteEventSubscription_607885;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607900 = newJObject()
  add(query_607900, "SubscriptionName", newJString(SubscriptionName))
  add(query_607900, "Action", newJString(Action))
  add(query_607900, "Version", newJString(Version))
  result = call_607899.call(nil, query_607900, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_607885(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_607886, base: "/",
    url: url_GetDeleteEventSubscription_607887,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGlobalCluster_607934 = ref object of OpenApiRestCall_605589
proc url_PostDeleteGlobalCluster_607936(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGlobalCluster_607935(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607937 = query.getOrDefault("Action")
  valid_607937 = validateParameter(valid_607937, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_607937 != nil:
    section.add "Action", valid_607937
  var valid_607938 = query.getOrDefault("Version")
  valid_607938 = validateParameter(valid_607938, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607938 != nil:
    section.add "Version", valid_607938
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607939 = header.getOrDefault("X-Amz-Signature")
  valid_607939 = validateParameter(valid_607939, JString, required = false,
                                 default = nil)
  if valid_607939 != nil:
    section.add "X-Amz-Signature", valid_607939
  var valid_607940 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607940 = validateParameter(valid_607940, JString, required = false,
                                 default = nil)
  if valid_607940 != nil:
    section.add "X-Amz-Content-Sha256", valid_607940
  var valid_607941 = header.getOrDefault("X-Amz-Date")
  valid_607941 = validateParameter(valid_607941, JString, required = false,
                                 default = nil)
  if valid_607941 != nil:
    section.add "X-Amz-Date", valid_607941
  var valid_607942 = header.getOrDefault("X-Amz-Credential")
  valid_607942 = validateParameter(valid_607942, JString, required = false,
                                 default = nil)
  if valid_607942 != nil:
    section.add "X-Amz-Credential", valid_607942
  var valid_607943 = header.getOrDefault("X-Amz-Security-Token")
  valid_607943 = validateParameter(valid_607943, JString, required = false,
                                 default = nil)
  if valid_607943 != nil:
    section.add "X-Amz-Security-Token", valid_607943
  var valid_607944 = header.getOrDefault("X-Amz-Algorithm")
  valid_607944 = validateParameter(valid_607944, JString, required = false,
                                 default = nil)
  if valid_607944 != nil:
    section.add "X-Amz-Algorithm", valid_607944
  var valid_607945 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607945 = validateParameter(valid_607945, JString, required = false,
                                 default = nil)
  if valid_607945 != nil:
    section.add "X-Amz-SignedHeaders", valid_607945
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_607946 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_607946 = validateParameter(valid_607946, JString, required = true,
                                 default = nil)
  if valid_607946 != nil:
    section.add "GlobalClusterIdentifier", valid_607946
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607947: Call_PostDeleteGlobalCluster_607934; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607947.validator(path, query, header, formData, body)
  let scheme = call_607947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607947.url(scheme.get, call_607947.host, call_607947.base,
                         call_607947.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607947, url, valid)

proc call*(call_607948: Call_PostDeleteGlobalCluster_607934;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607949 = newJObject()
  var formData_607950 = newJObject()
  add(formData_607950, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_607949, "Action", newJString(Action))
  add(query_607949, "Version", newJString(Version))
  result = call_607948.call(nil, query_607949, nil, formData_607950, nil)

var postDeleteGlobalCluster* = Call_PostDeleteGlobalCluster_607934(
    name: "postDeleteGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_PostDeleteGlobalCluster_607935, base: "/",
    url: url_PostDeleteGlobalCluster_607936, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGlobalCluster_607918 = ref object of OpenApiRestCall_605589
proc url_GetDeleteGlobalCluster_607920(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGlobalCluster_607919(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_607921 = query.getOrDefault("GlobalClusterIdentifier")
  valid_607921 = validateParameter(valid_607921, JString, required = true,
                                 default = nil)
  if valid_607921 != nil:
    section.add "GlobalClusterIdentifier", valid_607921
  var valid_607922 = query.getOrDefault("Action")
  valid_607922 = validateParameter(valid_607922, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_607922 != nil:
    section.add "Action", valid_607922
  var valid_607923 = query.getOrDefault("Version")
  valid_607923 = validateParameter(valid_607923, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607923 != nil:
    section.add "Version", valid_607923
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607924 = header.getOrDefault("X-Amz-Signature")
  valid_607924 = validateParameter(valid_607924, JString, required = false,
                                 default = nil)
  if valid_607924 != nil:
    section.add "X-Amz-Signature", valid_607924
  var valid_607925 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607925 = validateParameter(valid_607925, JString, required = false,
                                 default = nil)
  if valid_607925 != nil:
    section.add "X-Amz-Content-Sha256", valid_607925
  var valid_607926 = header.getOrDefault("X-Amz-Date")
  valid_607926 = validateParameter(valid_607926, JString, required = false,
                                 default = nil)
  if valid_607926 != nil:
    section.add "X-Amz-Date", valid_607926
  var valid_607927 = header.getOrDefault("X-Amz-Credential")
  valid_607927 = validateParameter(valid_607927, JString, required = false,
                                 default = nil)
  if valid_607927 != nil:
    section.add "X-Amz-Credential", valid_607927
  var valid_607928 = header.getOrDefault("X-Amz-Security-Token")
  valid_607928 = validateParameter(valid_607928, JString, required = false,
                                 default = nil)
  if valid_607928 != nil:
    section.add "X-Amz-Security-Token", valid_607928
  var valid_607929 = header.getOrDefault("X-Amz-Algorithm")
  valid_607929 = validateParameter(valid_607929, JString, required = false,
                                 default = nil)
  if valid_607929 != nil:
    section.add "X-Amz-Algorithm", valid_607929
  var valid_607930 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607930 = validateParameter(valid_607930, JString, required = false,
                                 default = nil)
  if valid_607930 != nil:
    section.add "X-Amz-SignedHeaders", valid_607930
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607931: Call_GetDeleteGlobalCluster_607918; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607931.validator(path, query, header, formData, body)
  let scheme = call_607931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607931.url(scheme.get, call_607931.host, call_607931.base,
                         call_607931.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607931, url, valid)

proc call*(call_607932: Call_GetDeleteGlobalCluster_607918;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607933 = newJObject()
  add(query_607933, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_607933, "Action", newJString(Action))
  add(query_607933, "Version", newJString(Version))
  result = call_607932.call(nil, query_607933, nil, nil, nil)

var getDeleteGlobalCluster* = Call_GetDeleteGlobalCluster_607918(
    name: "getDeleteGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_GetDeleteGlobalCluster_607919, base: "/",
    url: url_GetDeleteGlobalCluster_607920, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstallationMedia_607967 = ref object of OpenApiRestCall_605589
proc url_PostDeleteInstallationMedia_607969(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteInstallationMedia_607968(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607970 = query.getOrDefault("Action")
  valid_607970 = validateParameter(valid_607970, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_607970 != nil:
    section.add "Action", valid_607970
  var valid_607971 = query.getOrDefault("Version")
  valid_607971 = validateParameter(valid_607971, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607971 != nil:
    section.add "Version", valid_607971
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607972 = header.getOrDefault("X-Amz-Signature")
  valid_607972 = validateParameter(valid_607972, JString, required = false,
                                 default = nil)
  if valid_607972 != nil:
    section.add "X-Amz-Signature", valid_607972
  var valid_607973 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607973 = validateParameter(valid_607973, JString, required = false,
                                 default = nil)
  if valid_607973 != nil:
    section.add "X-Amz-Content-Sha256", valid_607973
  var valid_607974 = header.getOrDefault("X-Amz-Date")
  valid_607974 = validateParameter(valid_607974, JString, required = false,
                                 default = nil)
  if valid_607974 != nil:
    section.add "X-Amz-Date", valid_607974
  var valid_607975 = header.getOrDefault("X-Amz-Credential")
  valid_607975 = validateParameter(valid_607975, JString, required = false,
                                 default = nil)
  if valid_607975 != nil:
    section.add "X-Amz-Credential", valid_607975
  var valid_607976 = header.getOrDefault("X-Amz-Security-Token")
  valid_607976 = validateParameter(valid_607976, JString, required = false,
                                 default = nil)
  if valid_607976 != nil:
    section.add "X-Amz-Security-Token", valid_607976
  var valid_607977 = header.getOrDefault("X-Amz-Algorithm")
  valid_607977 = validateParameter(valid_607977, JString, required = false,
                                 default = nil)
  if valid_607977 != nil:
    section.add "X-Amz-Algorithm", valid_607977
  var valid_607978 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607978 = validateParameter(valid_607978, JString, required = false,
                                 default = nil)
  if valid_607978 != nil:
    section.add "X-Amz-SignedHeaders", valid_607978
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation medium ID.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstallationMediaId` field"
  var valid_607979 = formData.getOrDefault("InstallationMediaId")
  valid_607979 = validateParameter(valid_607979, JString, required = true,
                                 default = nil)
  if valid_607979 != nil:
    section.add "InstallationMediaId", valid_607979
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607980: Call_PostDeleteInstallationMedia_607967; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_607980.validator(path, query, header, formData, body)
  let scheme = call_607980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607980.url(scheme.get, call_607980.host, call_607980.base,
                         call_607980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607980, url, valid)

proc call*(call_607981: Call_PostDeleteInstallationMedia_607967;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteInstallationMedia
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607982 = newJObject()
  var formData_607983 = newJObject()
  add(formData_607983, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_607982, "Action", newJString(Action))
  add(query_607982, "Version", newJString(Version))
  result = call_607981.call(nil, query_607982, nil, formData_607983, nil)

var postDeleteInstallationMedia* = Call_PostDeleteInstallationMedia_607967(
    name: "postDeleteInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_PostDeleteInstallationMedia_607968, base: "/",
    url: url_PostDeleteInstallationMedia_607969,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstallationMedia_607951 = ref object of OpenApiRestCall_605589
proc url_GetDeleteInstallationMedia_607953(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteInstallationMedia_607952(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation medium ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstallationMediaId` field"
  var valid_607954 = query.getOrDefault("InstallationMediaId")
  valid_607954 = validateParameter(valid_607954, JString, required = true,
                                 default = nil)
  if valid_607954 != nil:
    section.add "InstallationMediaId", valid_607954
  var valid_607955 = query.getOrDefault("Action")
  valid_607955 = validateParameter(valid_607955, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_607955 != nil:
    section.add "Action", valid_607955
  var valid_607956 = query.getOrDefault("Version")
  valid_607956 = validateParameter(valid_607956, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607956 != nil:
    section.add "Version", valid_607956
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607957 = header.getOrDefault("X-Amz-Signature")
  valid_607957 = validateParameter(valid_607957, JString, required = false,
                                 default = nil)
  if valid_607957 != nil:
    section.add "X-Amz-Signature", valid_607957
  var valid_607958 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607958 = validateParameter(valid_607958, JString, required = false,
                                 default = nil)
  if valid_607958 != nil:
    section.add "X-Amz-Content-Sha256", valid_607958
  var valid_607959 = header.getOrDefault("X-Amz-Date")
  valid_607959 = validateParameter(valid_607959, JString, required = false,
                                 default = nil)
  if valid_607959 != nil:
    section.add "X-Amz-Date", valid_607959
  var valid_607960 = header.getOrDefault("X-Amz-Credential")
  valid_607960 = validateParameter(valid_607960, JString, required = false,
                                 default = nil)
  if valid_607960 != nil:
    section.add "X-Amz-Credential", valid_607960
  var valid_607961 = header.getOrDefault("X-Amz-Security-Token")
  valid_607961 = validateParameter(valid_607961, JString, required = false,
                                 default = nil)
  if valid_607961 != nil:
    section.add "X-Amz-Security-Token", valid_607961
  var valid_607962 = header.getOrDefault("X-Amz-Algorithm")
  valid_607962 = validateParameter(valid_607962, JString, required = false,
                                 default = nil)
  if valid_607962 != nil:
    section.add "X-Amz-Algorithm", valid_607962
  var valid_607963 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607963 = validateParameter(valid_607963, JString, required = false,
                                 default = nil)
  if valid_607963 != nil:
    section.add "X-Amz-SignedHeaders", valid_607963
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607964: Call_GetDeleteInstallationMedia_607951; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_607964.validator(path, query, header, formData, body)
  let scheme = call_607964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607964.url(scheme.get, call_607964.host, call_607964.base,
                         call_607964.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607964, url, valid)

proc call*(call_607965: Call_GetDeleteInstallationMedia_607951;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteInstallationMedia
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607966 = newJObject()
  add(query_607966, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_607966, "Action", newJString(Action))
  add(query_607966, "Version", newJString(Version))
  result = call_607965.call(nil, query_607966, nil, nil, nil)

var getDeleteInstallationMedia* = Call_GetDeleteInstallationMedia_607951(
    name: "getDeleteInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_GetDeleteInstallationMedia_607952, base: "/",
    url: url_GetDeleteInstallationMedia_607953,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOptionGroup_608000 = ref object of OpenApiRestCall_605589
proc url_PostDeleteOptionGroup_608002(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteOptionGroup_608001(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608003 = query.getOrDefault("Action")
  valid_608003 = validateParameter(valid_608003, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_608003 != nil:
    section.add "Action", valid_608003
  var valid_608004 = query.getOrDefault("Version")
  valid_608004 = validateParameter(valid_608004, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608004 != nil:
    section.add "Version", valid_608004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608005 = header.getOrDefault("X-Amz-Signature")
  valid_608005 = validateParameter(valid_608005, JString, required = false,
                                 default = nil)
  if valid_608005 != nil:
    section.add "X-Amz-Signature", valid_608005
  var valid_608006 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608006 = validateParameter(valid_608006, JString, required = false,
                                 default = nil)
  if valid_608006 != nil:
    section.add "X-Amz-Content-Sha256", valid_608006
  var valid_608007 = header.getOrDefault("X-Amz-Date")
  valid_608007 = validateParameter(valid_608007, JString, required = false,
                                 default = nil)
  if valid_608007 != nil:
    section.add "X-Amz-Date", valid_608007
  var valid_608008 = header.getOrDefault("X-Amz-Credential")
  valid_608008 = validateParameter(valid_608008, JString, required = false,
                                 default = nil)
  if valid_608008 != nil:
    section.add "X-Amz-Credential", valid_608008
  var valid_608009 = header.getOrDefault("X-Amz-Security-Token")
  valid_608009 = validateParameter(valid_608009, JString, required = false,
                                 default = nil)
  if valid_608009 != nil:
    section.add "X-Amz-Security-Token", valid_608009
  var valid_608010 = header.getOrDefault("X-Amz-Algorithm")
  valid_608010 = validateParameter(valid_608010, JString, required = false,
                                 default = nil)
  if valid_608010 != nil:
    section.add "X-Amz-Algorithm", valid_608010
  var valid_608011 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608011 = validateParameter(valid_608011, JString, required = false,
                                 default = nil)
  if valid_608011 != nil:
    section.add "X-Amz-SignedHeaders", valid_608011
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_608012 = formData.getOrDefault("OptionGroupName")
  valid_608012 = validateParameter(valid_608012, JString, required = true,
                                 default = nil)
  if valid_608012 != nil:
    section.add "OptionGroupName", valid_608012
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608013: Call_PostDeleteOptionGroup_608000; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_608013.validator(path, query, header, formData, body)
  let scheme = call_608013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608013.url(scheme.get, call_608013.host, call_608013.base,
                         call_608013.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608013, url, valid)

proc call*(call_608014: Call_PostDeleteOptionGroup_608000; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_608015 = newJObject()
  var formData_608016 = newJObject()
  add(query_608015, "Action", newJString(Action))
  add(formData_608016, "OptionGroupName", newJString(OptionGroupName))
  add(query_608015, "Version", newJString(Version))
  result = call_608014.call(nil, query_608015, nil, formData_608016, nil)

var postDeleteOptionGroup* = Call_PostDeleteOptionGroup_608000(
    name: "postDeleteOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_PostDeleteOptionGroup_608001, base: "/",
    url: url_PostDeleteOptionGroup_608002, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOptionGroup_607984 = ref object of OpenApiRestCall_605589
proc url_GetDeleteOptionGroup_607986(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteOptionGroup_607985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607987 = query.getOrDefault("Action")
  valid_607987 = validateParameter(valid_607987, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_607987 != nil:
    section.add "Action", valid_607987
  var valid_607988 = query.getOrDefault("OptionGroupName")
  valid_607988 = validateParameter(valid_607988, JString, required = true,
                                 default = nil)
  if valid_607988 != nil:
    section.add "OptionGroupName", valid_607988
  var valid_607989 = query.getOrDefault("Version")
  valid_607989 = validateParameter(valid_607989, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607989 != nil:
    section.add "Version", valid_607989
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607990 = header.getOrDefault("X-Amz-Signature")
  valid_607990 = validateParameter(valid_607990, JString, required = false,
                                 default = nil)
  if valid_607990 != nil:
    section.add "X-Amz-Signature", valid_607990
  var valid_607991 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607991 = validateParameter(valid_607991, JString, required = false,
                                 default = nil)
  if valid_607991 != nil:
    section.add "X-Amz-Content-Sha256", valid_607991
  var valid_607992 = header.getOrDefault("X-Amz-Date")
  valid_607992 = validateParameter(valid_607992, JString, required = false,
                                 default = nil)
  if valid_607992 != nil:
    section.add "X-Amz-Date", valid_607992
  var valid_607993 = header.getOrDefault("X-Amz-Credential")
  valid_607993 = validateParameter(valid_607993, JString, required = false,
                                 default = nil)
  if valid_607993 != nil:
    section.add "X-Amz-Credential", valid_607993
  var valid_607994 = header.getOrDefault("X-Amz-Security-Token")
  valid_607994 = validateParameter(valid_607994, JString, required = false,
                                 default = nil)
  if valid_607994 != nil:
    section.add "X-Amz-Security-Token", valid_607994
  var valid_607995 = header.getOrDefault("X-Amz-Algorithm")
  valid_607995 = validateParameter(valid_607995, JString, required = false,
                                 default = nil)
  if valid_607995 != nil:
    section.add "X-Amz-Algorithm", valid_607995
  var valid_607996 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607996 = validateParameter(valid_607996, JString, required = false,
                                 default = nil)
  if valid_607996 != nil:
    section.add "X-Amz-SignedHeaders", valid_607996
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607997: Call_GetDeleteOptionGroup_607984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_607997.validator(path, query, header, formData, body)
  let scheme = call_607997.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607997.url(scheme.get, call_607997.host, call_607997.base,
                         call_607997.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607997, url, valid)

proc call*(call_607998: Call_GetDeleteOptionGroup_607984; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_607999 = newJObject()
  add(query_607999, "Action", newJString(Action))
  add(query_607999, "OptionGroupName", newJString(OptionGroupName))
  add(query_607999, "Version", newJString(Version))
  result = call_607998.call(nil, query_607999, nil, nil, nil)

var getDeleteOptionGroup* = Call_GetDeleteOptionGroup_607984(
    name: "getDeleteOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_GetDeleteOptionGroup_607985, base: "/",
    url: url_GetDeleteOptionGroup_607986, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeregisterDBProxyTargets_608036 = ref object of OpenApiRestCall_605589
proc url_PostDeregisterDBProxyTargets_608038(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeregisterDBProxyTargets_608037(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608039 = query.getOrDefault("Action")
  valid_608039 = validateParameter(valid_608039, JString, required = true, default = newJString(
      "DeregisterDBProxyTargets"))
  if valid_608039 != nil:
    section.add "Action", valid_608039
  var valid_608040 = query.getOrDefault("Version")
  valid_608040 = validateParameter(valid_608040, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608040 != nil:
    section.add "Version", valid_608040
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608041 = header.getOrDefault("X-Amz-Signature")
  valid_608041 = validateParameter(valid_608041, JString, required = false,
                                 default = nil)
  if valid_608041 != nil:
    section.add "X-Amz-Signature", valid_608041
  var valid_608042 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608042 = validateParameter(valid_608042, JString, required = false,
                                 default = nil)
  if valid_608042 != nil:
    section.add "X-Amz-Content-Sha256", valid_608042
  var valid_608043 = header.getOrDefault("X-Amz-Date")
  valid_608043 = validateParameter(valid_608043, JString, required = false,
                                 default = nil)
  if valid_608043 != nil:
    section.add "X-Amz-Date", valid_608043
  var valid_608044 = header.getOrDefault("X-Amz-Credential")
  valid_608044 = validateParameter(valid_608044, JString, required = false,
                                 default = nil)
  if valid_608044 != nil:
    section.add "X-Amz-Credential", valid_608044
  var valid_608045 = header.getOrDefault("X-Amz-Security-Token")
  valid_608045 = validateParameter(valid_608045, JString, required = false,
                                 default = nil)
  if valid_608045 != nil:
    section.add "X-Amz-Security-Token", valid_608045
  var valid_608046 = header.getOrDefault("X-Amz-Algorithm")
  valid_608046 = validateParameter(valid_608046, JString, required = false,
                                 default = nil)
  if valid_608046 != nil:
    section.add "X-Amz-Algorithm", valid_608046
  var valid_608047 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608047 = validateParameter(valid_608047, JString, required = false,
                                 default = nil)
  if valid_608047 != nil:
    section.add "X-Amz-SignedHeaders", valid_608047
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_608048 = formData.getOrDefault("TargetGroupName")
  valid_608048 = validateParameter(valid_608048, JString, required = false,
                                 default = nil)
  if valid_608048 != nil:
    section.add "TargetGroupName", valid_608048
  var valid_608049 = formData.getOrDefault("DBInstanceIdentifiers")
  valid_608049 = validateParameter(valid_608049, JArray, required = false,
                                 default = nil)
  if valid_608049 != nil:
    section.add "DBInstanceIdentifiers", valid_608049
  var valid_608050 = formData.getOrDefault("DBClusterIdentifiers")
  valid_608050 = validateParameter(valid_608050, JArray, required = false,
                                 default = nil)
  if valid_608050 != nil:
    section.add "DBClusterIdentifiers", valid_608050
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_608051 = formData.getOrDefault("DBProxyName")
  valid_608051 = validateParameter(valid_608051, JString, required = true,
                                 default = nil)
  if valid_608051 != nil:
    section.add "DBProxyName", valid_608051
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608052: Call_PostDeregisterDBProxyTargets_608036; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_608052.validator(path, query, header, formData, body)
  let scheme = call_608052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608052.url(scheme.get, call_608052.host, call_608052.base,
                         call_608052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608052, url, valid)

proc call*(call_608053: Call_PostDeregisterDBProxyTargets_608036;
          DBProxyName: string; TargetGroupName: string = "";
          DBInstanceIdentifiers: JsonNode = nil;
          DBClusterIdentifiers: JsonNode = nil;
          Action: string = "DeregisterDBProxyTargets";
          Version: string = "2014-10-31"): Recallable =
  ## postDeregisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608054 = newJObject()
  var formData_608055 = newJObject()
  add(formData_608055, "TargetGroupName", newJString(TargetGroupName))
  if DBInstanceIdentifiers != nil:
    formData_608055.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  if DBClusterIdentifiers != nil:
    formData_608055.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(formData_608055, "DBProxyName", newJString(DBProxyName))
  add(query_608054, "Action", newJString(Action))
  add(query_608054, "Version", newJString(Version))
  result = call_608053.call(nil, query_608054, nil, formData_608055, nil)

var postDeregisterDBProxyTargets* = Call_PostDeregisterDBProxyTargets_608036(
    name: "postDeregisterDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeregisterDBProxyTargets",
    validator: validate_PostDeregisterDBProxyTargets_608037, base: "/",
    url: url_PostDeregisterDBProxyTargets_608038,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeregisterDBProxyTargets_608017 = ref object of OpenApiRestCall_605589
proc url_GetDeregisterDBProxyTargets_608019(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeregisterDBProxyTargets_608018(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_608020 = query.getOrDefault("DBClusterIdentifiers")
  valid_608020 = validateParameter(valid_608020, JArray, required = false,
                                 default = nil)
  if valid_608020 != nil:
    section.add "DBClusterIdentifiers", valid_608020
  var valid_608021 = query.getOrDefault("DBInstanceIdentifiers")
  valid_608021 = validateParameter(valid_608021, JArray, required = false,
                                 default = nil)
  if valid_608021 != nil:
    section.add "DBInstanceIdentifiers", valid_608021
  var valid_608022 = query.getOrDefault("TargetGroupName")
  valid_608022 = validateParameter(valid_608022, JString, required = false,
                                 default = nil)
  if valid_608022 != nil:
    section.add "TargetGroupName", valid_608022
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608023 = query.getOrDefault("Action")
  valid_608023 = validateParameter(valid_608023, JString, required = true, default = newJString(
      "DeregisterDBProxyTargets"))
  if valid_608023 != nil:
    section.add "Action", valid_608023
  var valid_608024 = query.getOrDefault("Version")
  valid_608024 = validateParameter(valid_608024, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608024 != nil:
    section.add "Version", valid_608024
  var valid_608025 = query.getOrDefault("DBProxyName")
  valid_608025 = validateParameter(valid_608025, JString, required = true,
                                 default = nil)
  if valid_608025 != nil:
    section.add "DBProxyName", valid_608025
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608026 = header.getOrDefault("X-Amz-Signature")
  valid_608026 = validateParameter(valid_608026, JString, required = false,
                                 default = nil)
  if valid_608026 != nil:
    section.add "X-Amz-Signature", valid_608026
  var valid_608027 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608027 = validateParameter(valid_608027, JString, required = false,
                                 default = nil)
  if valid_608027 != nil:
    section.add "X-Amz-Content-Sha256", valid_608027
  var valid_608028 = header.getOrDefault("X-Amz-Date")
  valid_608028 = validateParameter(valid_608028, JString, required = false,
                                 default = nil)
  if valid_608028 != nil:
    section.add "X-Amz-Date", valid_608028
  var valid_608029 = header.getOrDefault("X-Amz-Credential")
  valid_608029 = validateParameter(valid_608029, JString, required = false,
                                 default = nil)
  if valid_608029 != nil:
    section.add "X-Amz-Credential", valid_608029
  var valid_608030 = header.getOrDefault("X-Amz-Security-Token")
  valid_608030 = validateParameter(valid_608030, JString, required = false,
                                 default = nil)
  if valid_608030 != nil:
    section.add "X-Amz-Security-Token", valid_608030
  var valid_608031 = header.getOrDefault("X-Amz-Algorithm")
  valid_608031 = validateParameter(valid_608031, JString, required = false,
                                 default = nil)
  if valid_608031 != nil:
    section.add "X-Amz-Algorithm", valid_608031
  var valid_608032 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608032 = validateParameter(valid_608032, JString, required = false,
                                 default = nil)
  if valid_608032 != nil:
    section.add "X-Amz-SignedHeaders", valid_608032
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608033: Call_GetDeregisterDBProxyTargets_608017; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_608033.validator(path, query, header, formData, body)
  let scheme = call_608033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608033.url(scheme.get, call_608033.host, call_608033.base,
                         call_608033.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608033, url, valid)

proc call*(call_608034: Call_GetDeregisterDBProxyTargets_608017;
          DBProxyName: string; DBClusterIdentifiers: JsonNode = nil;
          DBInstanceIdentifiers: JsonNode = nil; TargetGroupName: string = "";
          Action: string = "DeregisterDBProxyTargets";
          Version: string = "2014-10-31"): Recallable =
  ## getDeregisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  var query_608035 = newJObject()
  if DBClusterIdentifiers != nil:
    query_608035.add "DBClusterIdentifiers", DBClusterIdentifiers
  if DBInstanceIdentifiers != nil:
    query_608035.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  add(query_608035, "TargetGroupName", newJString(TargetGroupName))
  add(query_608035, "Action", newJString(Action))
  add(query_608035, "Version", newJString(Version))
  add(query_608035, "DBProxyName", newJString(DBProxyName))
  result = call_608034.call(nil, query_608035, nil, nil, nil)

var getDeregisterDBProxyTargets* = Call_GetDeregisterDBProxyTargets_608017(
    name: "getDeregisterDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeregisterDBProxyTargets",
    validator: validate_GetDeregisterDBProxyTargets_608018, base: "/",
    url: url_GetDeregisterDBProxyTargets_608019,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountAttributes_608071 = ref object of OpenApiRestCall_605589
proc url_PostDescribeAccountAttributes_608073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAccountAttributes_608072(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608074 = query.getOrDefault("Action")
  valid_608074 = validateParameter(valid_608074, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_608074 != nil:
    section.add "Action", valid_608074
  var valid_608075 = query.getOrDefault("Version")
  valid_608075 = validateParameter(valid_608075, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608075 != nil:
    section.add "Version", valid_608075
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608076 = header.getOrDefault("X-Amz-Signature")
  valid_608076 = validateParameter(valid_608076, JString, required = false,
                                 default = nil)
  if valid_608076 != nil:
    section.add "X-Amz-Signature", valid_608076
  var valid_608077 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608077 = validateParameter(valid_608077, JString, required = false,
                                 default = nil)
  if valid_608077 != nil:
    section.add "X-Amz-Content-Sha256", valid_608077
  var valid_608078 = header.getOrDefault("X-Amz-Date")
  valid_608078 = validateParameter(valid_608078, JString, required = false,
                                 default = nil)
  if valid_608078 != nil:
    section.add "X-Amz-Date", valid_608078
  var valid_608079 = header.getOrDefault("X-Amz-Credential")
  valid_608079 = validateParameter(valid_608079, JString, required = false,
                                 default = nil)
  if valid_608079 != nil:
    section.add "X-Amz-Credential", valid_608079
  var valid_608080 = header.getOrDefault("X-Amz-Security-Token")
  valid_608080 = validateParameter(valid_608080, JString, required = false,
                                 default = nil)
  if valid_608080 != nil:
    section.add "X-Amz-Security-Token", valid_608080
  var valid_608081 = header.getOrDefault("X-Amz-Algorithm")
  valid_608081 = validateParameter(valid_608081, JString, required = false,
                                 default = nil)
  if valid_608081 != nil:
    section.add "X-Amz-Algorithm", valid_608081
  var valid_608082 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608082 = validateParameter(valid_608082, JString, required = false,
                                 default = nil)
  if valid_608082 != nil:
    section.add "X-Amz-SignedHeaders", valid_608082
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608083: Call_PostDescribeAccountAttributes_608071; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_608083.validator(path, query, header, formData, body)
  let scheme = call_608083.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608083.url(scheme.get, call_608083.host, call_608083.base,
                         call_608083.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608083, url, valid)

proc call*(call_608084: Call_PostDescribeAccountAttributes_608071;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608085 = newJObject()
  add(query_608085, "Action", newJString(Action))
  add(query_608085, "Version", newJString(Version))
  result = call_608084.call(nil, query_608085, nil, nil, nil)

var postDescribeAccountAttributes* = Call_PostDescribeAccountAttributes_608071(
    name: "postDescribeAccountAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_PostDescribeAccountAttributes_608072, base: "/",
    url: url_PostDescribeAccountAttributes_608073,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountAttributes_608056 = ref object of OpenApiRestCall_605589
proc url_GetDescribeAccountAttributes_608058(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAccountAttributes_608057(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608059 = query.getOrDefault("Action")
  valid_608059 = validateParameter(valid_608059, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_608059 != nil:
    section.add "Action", valid_608059
  var valid_608060 = query.getOrDefault("Version")
  valid_608060 = validateParameter(valid_608060, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608060 != nil:
    section.add "Version", valid_608060
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608061 = header.getOrDefault("X-Amz-Signature")
  valid_608061 = validateParameter(valid_608061, JString, required = false,
                                 default = nil)
  if valid_608061 != nil:
    section.add "X-Amz-Signature", valid_608061
  var valid_608062 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608062 = validateParameter(valid_608062, JString, required = false,
                                 default = nil)
  if valid_608062 != nil:
    section.add "X-Amz-Content-Sha256", valid_608062
  var valid_608063 = header.getOrDefault("X-Amz-Date")
  valid_608063 = validateParameter(valid_608063, JString, required = false,
                                 default = nil)
  if valid_608063 != nil:
    section.add "X-Amz-Date", valid_608063
  var valid_608064 = header.getOrDefault("X-Amz-Credential")
  valid_608064 = validateParameter(valid_608064, JString, required = false,
                                 default = nil)
  if valid_608064 != nil:
    section.add "X-Amz-Credential", valid_608064
  var valid_608065 = header.getOrDefault("X-Amz-Security-Token")
  valid_608065 = validateParameter(valid_608065, JString, required = false,
                                 default = nil)
  if valid_608065 != nil:
    section.add "X-Amz-Security-Token", valid_608065
  var valid_608066 = header.getOrDefault("X-Amz-Algorithm")
  valid_608066 = validateParameter(valid_608066, JString, required = false,
                                 default = nil)
  if valid_608066 != nil:
    section.add "X-Amz-Algorithm", valid_608066
  var valid_608067 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608067 = validateParameter(valid_608067, JString, required = false,
                                 default = nil)
  if valid_608067 != nil:
    section.add "X-Amz-SignedHeaders", valid_608067
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608068: Call_GetDescribeAccountAttributes_608056; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_608068.validator(path, query, header, formData, body)
  let scheme = call_608068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608068.url(scheme.get, call_608068.host, call_608068.base,
                         call_608068.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608068, url, valid)

proc call*(call_608069: Call_GetDescribeAccountAttributes_608056;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608070 = newJObject()
  add(query_608070, "Action", newJString(Action))
  add(query_608070, "Version", newJString(Version))
  result = call_608069.call(nil, query_608070, nil, nil, nil)

var getDescribeAccountAttributes* = Call_GetDescribeAccountAttributes_608056(
    name: "getDescribeAccountAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_GetDescribeAccountAttributes_608057, base: "/",
    url: url_GetDescribeAccountAttributes_608058,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCertificates_608105 = ref object of OpenApiRestCall_605589
proc url_PostDescribeCertificates_608107(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCertificates_608106(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608108 = query.getOrDefault("Action")
  valid_608108 = validateParameter(valid_608108, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_608108 != nil:
    section.add "Action", valid_608108
  var valid_608109 = query.getOrDefault("Version")
  valid_608109 = validateParameter(valid_608109, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608109 != nil:
    section.add "Version", valid_608109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608110 = header.getOrDefault("X-Amz-Signature")
  valid_608110 = validateParameter(valid_608110, JString, required = false,
                                 default = nil)
  if valid_608110 != nil:
    section.add "X-Amz-Signature", valid_608110
  var valid_608111 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608111 = validateParameter(valid_608111, JString, required = false,
                                 default = nil)
  if valid_608111 != nil:
    section.add "X-Amz-Content-Sha256", valid_608111
  var valid_608112 = header.getOrDefault("X-Amz-Date")
  valid_608112 = validateParameter(valid_608112, JString, required = false,
                                 default = nil)
  if valid_608112 != nil:
    section.add "X-Amz-Date", valid_608112
  var valid_608113 = header.getOrDefault("X-Amz-Credential")
  valid_608113 = validateParameter(valid_608113, JString, required = false,
                                 default = nil)
  if valid_608113 != nil:
    section.add "X-Amz-Credential", valid_608113
  var valid_608114 = header.getOrDefault("X-Amz-Security-Token")
  valid_608114 = validateParameter(valid_608114, JString, required = false,
                                 default = nil)
  if valid_608114 != nil:
    section.add "X-Amz-Security-Token", valid_608114
  var valid_608115 = header.getOrDefault("X-Amz-Algorithm")
  valid_608115 = validateParameter(valid_608115, JString, required = false,
                                 default = nil)
  if valid_608115 != nil:
    section.add "X-Amz-Algorithm", valid_608115
  var valid_608116 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608116 = validateParameter(valid_608116, JString, required = false,
                                 default = nil)
  if valid_608116 != nil:
    section.add "X-Amz-SignedHeaders", valid_608116
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_608117 = formData.getOrDefault("MaxRecords")
  valid_608117 = validateParameter(valid_608117, JInt, required = false, default = nil)
  if valid_608117 != nil:
    section.add "MaxRecords", valid_608117
  var valid_608118 = formData.getOrDefault("Marker")
  valid_608118 = validateParameter(valid_608118, JString, required = false,
                                 default = nil)
  if valid_608118 != nil:
    section.add "Marker", valid_608118
  var valid_608119 = formData.getOrDefault("CertificateIdentifier")
  valid_608119 = validateParameter(valid_608119, JString, required = false,
                                 default = nil)
  if valid_608119 != nil:
    section.add "CertificateIdentifier", valid_608119
  var valid_608120 = formData.getOrDefault("Filters")
  valid_608120 = validateParameter(valid_608120, JArray, required = false,
                                 default = nil)
  if valid_608120 != nil:
    section.add "Filters", valid_608120
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608121: Call_PostDescribeCertificates_608105; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_608121.validator(path, query, header, formData, body)
  let scheme = call_608121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608121.url(scheme.get, call_608121.host, call_608121.base,
                         call_608121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608121, url, valid)

proc call*(call_608122: Call_PostDescribeCertificates_608105; MaxRecords: int = 0;
          Marker: string = ""; CertificateIdentifier: string = "";
          Action: string = "DescribeCertificates"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_608123 = newJObject()
  var formData_608124 = newJObject()
  add(formData_608124, "MaxRecords", newJInt(MaxRecords))
  add(formData_608124, "Marker", newJString(Marker))
  add(formData_608124, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(query_608123, "Action", newJString(Action))
  if Filters != nil:
    formData_608124.add "Filters", Filters
  add(query_608123, "Version", newJString(Version))
  result = call_608122.call(nil, query_608123, nil, formData_608124, nil)

var postDescribeCertificates* = Call_PostDescribeCertificates_608105(
    name: "postDescribeCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_PostDescribeCertificates_608106, base: "/",
    url: url_PostDescribeCertificates_608107, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCertificates_608086 = ref object of OpenApiRestCall_605589
proc url_GetDescribeCertificates_608088(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCertificates_608087(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608089 = query.getOrDefault("Marker")
  valid_608089 = validateParameter(valid_608089, JString, required = false,
                                 default = nil)
  if valid_608089 != nil:
    section.add "Marker", valid_608089
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608090 = query.getOrDefault("Action")
  valid_608090 = validateParameter(valid_608090, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_608090 != nil:
    section.add "Action", valid_608090
  var valid_608091 = query.getOrDefault("Version")
  valid_608091 = validateParameter(valid_608091, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608091 != nil:
    section.add "Version", valid_608091
  var valid_608092 = query.getOrDefault("CertificateIdentifier")
  valid_608092 = validateParameter(valid_608092, JString, required = false,
                                 default = nil)
  if valid_608092 != nil:
    section.add "CertificateIdentifier", valid_608092
  var valid_608093 = query.getOrDefault("Filters")
  valid_608093 = validateParameter(valid_608093, JArray, required = false,
                                 default = nil)
  if valid_608093 != nil:
    section.add "Filters", valid_608093
  var valid_608094 = query.getOrDefault("MaxRecords")
  valid_608094 = validateParameter(valid_608094, JInt, required = false, default = nil)
  if valid_608094 != nil:
    section.add "MaxRecords", valid_608094
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608095 = header.getOrDefault("X-Amz-Signature")
  valid_608095 = validateParameter(valid_608095, JString, required = false,
                                 default = nil)
  if valid_608095 != nil:
    section.add "X-Amz-Signature", valid_608095
  var valid_608096 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608096 = validateParameter(valid_608096, JString, required = false,
                                 default = nil)
  if valid_608096 != nil:
    section.add "X-Amz-Content-Sha256", valid_608096
  var valid_608097 = header.getOrDefault("X-Amz-Date")
  valid_608097 = validateParameter(valid_608097, JString, required = false,
                                 default = nil)
  if valid_608097 != nil:
    section.add "X-Amz-Date", valid_608097
  var valid_608098 = header.getOrDefault("X-Amz-Credential")
  valid_608098 = validateParameter(valid_608098, JString, required = false,
                                 default = nil)
  if valid_608098 != nil:
    section.add "X-Amz-Credential", valid_608098
  var valid_608099 = header.getOrDefault("X-Amz-Security-Token")
  valid_608099 = validateParameter(valid_608099, JString, required = false,
                                 default = nil)
  if valid_608099 != nil:
    section.add "X-Amz-Security-Token", valid_608099
  var valid_608100 = header.getOrDefault("X-Amz-Algorithm")
  valid_608100 = validateParameter(valid_608100, JString, required = false,
                                 default = nil)
  if valid_608100 != nil:
    section.add "X-Amz-Algorithm", valid_608100
  var valid_608101 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608101 = validateParameter(valid_608101, JString, required = false,
                                 default = nil)
  if valid_608101 != nil:
    section.add "X-Amz-SignedHeaders", valid_608101
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608102: Call_GetDescribeCertificates_608086; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_608102.validator(path, query, header, formData, body)
  let scheme = call_608102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608102.url(scheme.get, call_608102.host, call_608102.base,
                         call_608102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608102, url, valid)

proc call*(call_608103: Call_GetDescribeCertificates_608086; Marker: string = "";
          Action: string = "DescribeCertificates"; Version: string = "2014-10-31";
          CertificateIdentifier: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0): Recallable =
  ## getDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608104 = newJObject()
  add(query_608104, "Marker", newJString(Marker))
  add(query_608104, "Action", newJString(Action))
  add(query_608104, "Version", newJString(Version))
  add(query_608104, "CertificateIdentifier", newJString(CertificateIdentifier))
  if Filters != nil:
    query_608104.add "Filters", Filters
  add(query_608104, "MaxRecords", newJInt(MaxRecords))
  result = call_608103.call(nil, query_608104, nil, nil, nil)

var getDescribeCertificates* = Call_GetDescribeCertificates_608086(
    name: "getDescribeCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_GetDescribeCertificates_608087, base: "/",
    url: url_GetDescribeCertificates_608088, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCustomAvailabilityZones_608144 = ref object of OpenApiRestCall_605589
proc url_PostDescribeCustomAvailabilityZones_608146(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCustomAvailabilityZones_608145(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608147 = query.getOrDefault("Action")
  valid_608147 = validateParameter(valid_608147, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_608147 != nil:
    section.add "Action", valid_608147
  var valid_608148 = query.getOrDefault("Version")
  valid_608148 = validateParameter(valid_608148, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608148 != nil:
    section.add "Version", valid_608148
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608149 = header.getOrDefault("X-Amz-Signature")
  valid_608149 = validateParameter(valid_608149, JString, required = false,
                                 default = nil)
  if valid_608149 != nil:
    section.add "X-Amz-Signature", valid_608149
  var valid_608150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608150 = validateParameter(valid_608150, JString, required = false,
                                 default = nil)
  if valid_608150 != nil:
    section.add "X-Amz-Content-Sha256", valid_608150
  var valid_608151 = header.getOrDefault("X-Amz-Date")
  valid_608151 = validateParameter(valid_608151, JString, required = false,
                                 default = nil)
  if valid_608151 != nil:
    section.add "X-Amz-Date", valid_608151
  var valid_608152 = header.getOrDefault("X-Amz-Credential")
  valid_608152 = validateParameter(valid_608152, JString, required = false,
                                 default = nil)
  if valid_608152 != nil:
    section.add "X-Amz-Credential", valid_608152
  var valid_608153 = header.getOrDefault("X-Amz-Security-Token")
  valid_608153 = validateParameter(valid_608153, JString, required = false,
                                 default = nil)
  if valid_608153 != nil:
    section.add "X-Amz-Security-Token", valid_608153
  var valid_608154 = header.getOrDefault("X-Amz-Algorithm")
  valid_608154 = validateParameter(valid_608154, JString, required = false,
                                 default = nil)
  if valid_608154 != nil:
    section.add "X-Amz-Algorithm", valid_608154
  var valid_608155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608155 = validateParameter(valid_608155, JString, required = false,
                                 default = nil)
  if valid_608155 != nil:
    section.add "X-Amz-SignedHeaders", valid_608155
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  section = newJObject()
  var valid_608156 = formData.getOrDefault("MaxRecords")
  valid_608156 = validateParameter(valid_608156, JInt, required = false, default = nil)
  if valid_608156 != nil:
    section.add "MaxRecords", valid_608156
  var valid_608157 = formData.getOrDefault("Marker")
  valid_608157 = validateParameter(valid_608157, JString, required = false,
                                 default = nil)
  if valid_608157 != nil:
    section.add "Marker", valid_608157
  var valid_608158 = formData.getOrDefault("Filters")
  valid_608158 = validateParameter(valid_608158, JArray, required = false,
                                 default = nil)
  if valid_608158 != nil:
    section.add "Filters", valid_608158
  var valid_608159 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_608159 = validateParameter(valid_608159, JString, required = false,
                                 default = nil)
  if valid_608159 != nil:
    section.add "CustomAvailabilityZoneId", valid_608159
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608160: Call_PostDescribeCustomAvailabilityZones_608144;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_608160.validator(path, query, header, formData, body)
  let scheme = call_608160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608160.url(scheme.get, call_608160.host, call_608160.base,
                         call_608160.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608160, url, valid)

proc call*(call_608161: Call_PostDescribeCustomAvailabilityZones_608144;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeCustomAvailabilityZones";
          Filters: JsonNode = nil; CustomAvailabilityZoneId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Version: string (required)
  var query_608162 = newJObject()
  var formData_608163 = newJObject()
  add(formData_608163, "MaxRecords", newJInt(MaxRecords))
  add(formData_608163, "Marker", newJString(Marker))
  add(query_608162, "Action", newJString(Action))
  if Filters != nil:
    formData_608163.add "Filters", Filters
  add(formData_608163, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_608162, "Version", newJString(Version))
  result = call_608161.call(nil, query_608162, nil, formData_608163, nil)

var postDescribeCustomAvailabilityZones* = Call_PostDescribeCustomAvailabilityZones_608144(
    name: "postDescribeCustomAvailabilityZones", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_PostDescribeCustomAvailabilityZones_608145, base: "/",
    url: url_PostDescribeCustomAvailabilityZones_608146,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCustomAvailabilityZones_608125 = ref object of OpenApiRestCall_605589
proc url_GetDescribeCustomAvailabilityZones_608127(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCustomAvailabilityZones_608126(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608128 = query.getOrDefault("Marker")
  valid_608128 = validateParameter(valid_608128, JString, required = false,
                                 default = nil)
  if valid_608128 != nil:
    section.add "Marker", valid_608128
  var valid_608129 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_608129 = validateParameter(valid_608129, JString, required = false,
                                 default = nil)
  if valid_608129 != nil:
    section.add "CustomAvailabilityZoneId", valid_608129
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608130 = query.getOrDefault("Action")
  valid_608130 = validateParameter(valid_608130, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_608130 != nil:
    section.add "Action", valid_608130
  var valid_608131 = query.getOrDefault("Version")
  valid_608131 = validateParameter(valid_608131, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608131 != nil:
    section.add "Version", valid_608131
  var valid_608132 = query.getOrDefault("Filters")
  valid_608132 = validateParameter(valid_608132, JArray, required = false,
                                 default = nil)
  if valid_608132 != nil:
    section.add "Filters", valid_608132
  var valid_608133 = query.getOrDefault("MaxRecords")
  valid_608133 = validateParameter(valid_608133, JInt, required = false, default = nil)
  if valid_608133 != nil:
    section.add "MaxRecords", valid_608133
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608134 = header.getOrDefault("X-Amz-Signature")
  valid_608134 = validateParameter(valid_608134, JString, required = false,
                                 default = nil)
  if valid_608134 != nil:
    section.add "X-Amz-Signature", valid_608134
  var valid_608135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608135 = validateParameter(valid_608135, JString, required = false,
                                 default = nil)
  if valid_608135 != nil:
    section.add "X-Amz-Content-Sha256", valid_608135
  var valid_608136 = header.getOrDefault("X-Amz-Date")
  valid_608136 = validateParameter(valid_608136, JString, required = false,
                                 default = nil)
  if valid_608136 != nil:
    section.add "X-Amz-Date", valid_608136
  var valid_608137 = header.getOrDefault("X-Amz-Credential")
  valid_608137 = validateParameter(valid_608137, JString, required = false,
                                 default = nil)
  if valid_608137 != nil:
    section.add "X-Amz-Credential", valid_608137
  var valid_608138 = header.getOrDefault("X-Amz-Security-Token")
  valid_608138 = validateParameter(valid_608138, JString, required = false,
                                 default = nil)
  if valid_608138 != nil:
    section.add "X-Amz-Security-Token", valid_608138
  var valid_608139 = header.getOrDefault("X-Amz-Algorithm")
  valid_608139 = validateParameter(valid_608139, JString, required = false,
                                 default = nil)
  if valid_608139 != nil:
    section.add "X-Amz-Algorithm", valid_608139
  var valid_608140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608140 = validateParameter(valid_608140, JString, required = false,
                                 default = nil)
  if valid_608140 != nil:
    section.add "X-Amz-SignedHeaders", valid_608140
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608141: Call_GetDescribeCustomAvailabilityZones_608125;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_608141.validator(path, query, header, formData, body)
  let scheme = call_608141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608141.url(scheme.get, call_608141.host, call_608141.base,
                         call_608141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608141, url, valid)

proc call*(call_608142: Call_GetDescribeCustomAvailabilityZones_608125;
          Marker: string = ""; CustomAvailabilityZoneId: string = "";
          Action: string = "DescribeCustomAvailabilityZones";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608143 = newJObject()
  add(query_608143, "Marker", newJString(Marker))
  add(query_608143, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_608143, "Action", newJString(Action))
  add(query_608143, "Version", newJString(Version))
  if Filters != nil:
    query_608143.add "Filters", Filters
  add(query_608143, "MaxRecords", newJInt(MaxRecords))
  result = call_608142.call(nil, query_608143, nil, nil, nil)

var getDescribeCustomAvailabilityZones* = Call_GetDescribeCustomAvailabilityZones_608125(
    name: "getDescribeCustomAvailabilityZones", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_GetDescribeCustomAvailabilityZones_608126, base: "/",
    url: url_GetDescribeCustomAvailabilityZones_608127,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterBacktracks_608184 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBClusterBacktracks_608186(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterBacktracks_608185(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608187 = query.getOrDefault("Action")
  valid_608187 = validateParameter(valid_608187, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_608187 != nil:
    section.add "Action", valid_608187
  var valid_608188 = query.getOrDefault("Version")
  valid_608188 = validateParameter(valid_608188, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608188 != nil:
    section.add "Version", valid_608188
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608189 = header.getOrDefault("X-Amz-Signature")
  valid_608189 = validateParameter(valid_608189, JString, required = false,
                                 default = nil)
  if valid_608189 != nil:
    section.add "X-Amz-Signature", valid_608189
  var valid_608190 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608190 = validateParameter(valid_608190, JString, required = false,
                                 default = nil)
  if valid_608190 != nil:
    section.add "X-Amz-Content-Sha256", valid_608190
  var valid_608191 = header.getOrDefault("X-Amz-Date")
  valid_608191 = validateParameter(valid_608191, JString, required = false,
                                 default = nil)
  if valid_608191 != nil:
    section.add "X-Amz-Date", valid_608191
  var valid_608192 = header.getOrDefault("X-Amz-Credential")
  valid_608192 = validateParameter(valid_608192, JString, required = false,
                                 default = nil)
  if valid_608192 != nil:
    section.add "X-Amz-Credential", valid_608192
  var valid_608193 = header.getOrDefault("X-Amz-Security-Token")
  valid_608193 = validateParameter(valid_608193, JString, required = false,
                                 default = nil)
  if valid_608193 != nil:
    section.add "X-Amz-Security-Token", valid_608193
  var valid_608194 = header.getOrDefault("X-Amz-Algorithm")
  valid_608194 = validateParameter(valid_608194, JString, required = false,
                                 default = nil)
  if valid_608194 != nil:
    section.add "X-Amz-Algorithm", valid_608194
  var valid_608195 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608195 = validateParameter(valid_608195, JString, required = false,
                                 default = nil)
  if valid_608195 != nil:
    section.add "X-Amz-SignedHeaders", valid_608195
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_608196 = formData.getOrDefault("MaxRecords")
  valid_608196 = validateParameter(valid_608196, JInt, required = false, default = nil)
  if valid_608196 != nil:
    section.add "MaxRecords", valid_608196
  var valid_608197 = formData.getOrDefault("Marker")
  valid_608197 = validateParameter(valid_608197, JString, required = false,
                                 default = nil)
  if valid_608197 != nil:
    section.add "Marker", valid_608197
  var valid_608198 = formData.getOrDefault("BacktrackIdentifier")
  valid_608198 = validateParameter(valid_608198, JString, required = false,
                                 default = nil)
  if valid_608198 != nil:
    section.add "BacktrackIdentifier", valid_608198
  var valid_608199 = formData.getOrDefault("Filters")
  valid_608199 = validateParameter(valid_608199, JArray, required = false,
                                 default = nil)
  if valid_608199 != nil:
    section.add "Filters", valid_608199
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608200 = formData.getOrDefault("DBClusterIdentifier")
  valid_608200 = validateParameter(valid_608200, JString, required = true,
                                 default = nil)
  if valid_608200 != nil:
    section.add "DBClusterIdentifier", valid_608200
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608201: Call_PostDescribeDBClusterBacktracks_608184;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608201.validator(path, query, header, formData, body)
  let scheme = call_608201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608201.url(scheme.get, call_608201.host, call_608201.base,
                         call_608201.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608201, url, valid)

proc call*(call_608202: Call_PostDescribeDBClusterBacktracks_608184;
          DBClusterIdentifier: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_608203 = newJObject()
  var formData_608204 = newJObject()
  add(formData_608204, "MaxRecords", newJInt(MaxRecords))
  add(formData_608204, "Marker", newJString(Marker))
  add(query_608203, "Action", newJString(Action))
  add(formData_608204, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  if Filters != nil:
    formData_608204.add "Filters", Filters
  add(query_608203, "Version", newJString(Version))
  add(formData_608204, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_608202.call(nil, query_608203, nil, formData_608204, nil)

var postDescribeDBClusterBacktracks* = Call_PostDescribeDBClusterBacktracks_608184(
    name: "postDescribeDBClusterBacktracks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_PostDescribeDBClusterBacktracks_608185, base: "/",
    url: url_PostDescribeDBClusterBacktracks_608186,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterBacktracks_608164 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBClusterBacktracks_608166(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterBacktracks_608165(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608167 = query.getOrDefault("Marker")
  valid_608167 = validateParameter(valid_608167, JString, required = false,
                                 default = nil)
  if valid_608167 != nil:
    section.add "Marker", valid_608167
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608168 = query.getOrDefault("DBClusterIdentifier")
  valid_608168 = validateParameter(valid_608168, JString, required = true,
                                 default = nil)
  if valid_608168 != nil:
    section.add "DBClusterIdentifier", valid_608168
  var valid_608169 = query.getOrDefault("BacktrackIdentifier")
  valid_608169 = validateParameter(valid_608169, JString, required = false,
                                 default = nil)
  if valid_608169 != nil:
    section.add "BacktrackIdentifier", valid_608169
  var valid_608170 = query.getOrDefault("Action")
  valid_608170 = validateParameter(valid_608170, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_608170 != nil:
    section.add "Action", valid_608170
  var valid_608171 = query.getOrDefault("Version")
  valid_608171 = validateParameter(valid_608171, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608171 != nil:
    section.add "Version", valid_608171
  var valid_608172 = query.getOrDefault("Filters")
  valid_608172 = validateParameter(valid_608172, JArray, required = false,
                                 default = nil)
  if valid_608172 != nil:
    section.add "Filters", valid_608172
  var valid_608173 = query.getOrDefault("MaxRecords")
  valid_608173 = validateParameter(valid_608173, JInt, required = false, default = nil)
  if valid_608173 != nil:
    section.add "MaxRecords", valid_608173
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608174 = header.getOrDefault("X-Amz-Signature")
  valid_608174 = validateParameter(valid_608174, JString, required = false,
                                 default = nil)
  if valid_608174 != nil:
    section.add "X-Amz-Signature", valid_608174
  var valid_608175 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608175 = validateParameter(valid_608175, JString, required = false,
                                 default = nil)
  if valid_608175 != nil:
    section.add "X-Amz-Content-Sha256", valid_608175
  var valid_608176 = header.getOrDefault("X-Amz-Date")
  valid_608176 = validateParameter(valid_608176, JString, required = false,
                                 default = nil)
  if valid_608176 != nil:
    section.add "X-Amz-Date", valid_608176
  var valid_608177 = header.getOrDefault("X-Amz-Credential")
  valid_608177 = validateParameter(valid_608177, JString, required = false,
                                 default = nil)
  if valid_608177 != nil:
    section.add "X-Amz-Credential", valid_608177
  var valid_608178 = header.getOrDefault("X-Amz-Security-Token")
  valid_608178 = validateParameter(valid_608178, JString, required = false,
                                 default = nil)
  if valid_608178 != nil:
    section.add "X-Amz-Security-Token", valid_608178
  var valid_608179 = header.getOrDefault("X-Amz-Algorithm")
  valid_608179 = validateParameter(valid_608179, JString, required = false,
                                 default = nil)
  if valid_608179 != nil:
    section.add "X-Amz-Algorithm", valid_608179
  var valid_608180 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608180 = validateParameter(valid_608180, JString, required = false,
                                 default = nil)
  if valid_608180 != nil:
    section.add "X-Amz-SignedHeaders", valid_608180
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608181: Call_GetDescribeDBClusterBacktracks_608164; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608181.validator(path, query, header, formData, body)
  let scheme = call_608181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608181.url(scheme.get, call_608181.host, call_608181.base,
                         call_608181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608181, url, valid)

proc call*(call_608182: Call_GetDescribeDBClusterBacktracks_608164;
          DBClusterIdentifier: string; Marker: string = "";
          BacktrackIdentifier: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608183 = newJObject()
  add(query_608183, "Marker", newJString(Marker))
  add(query_608183, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608183, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  add(query_608183, "Action", newJString(Action))
  add(query_608183, "Version", newJString(Version))
  if Filters != nil:
    query_608183.add "Filters", Filters
  add(query_608183, "MaxRecords", newJInt(MaxRecords))
  result = call_608182.call(nil, query_608183, nil, nil, nil)

var getDescribeDBClusterBacktracks* = Call_GetDescribeDBClusterBacktracks_608164(
    name: "getDescribeDBClusterBacktracks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_GetDescribeDBClusterBacktracks_608165, base: "/",
    url: url_GetDescribeDBClusterBacktracks_608166,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterEndpoints_608225 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBClusterEndpoints_608227(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterEndpoints_608226(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608228 = query.getOrDefault("Action")
  valid_608228 = validateParameter(valid_608228, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_608228 != nil:
    section.add "Action", valid_608228
  var valid_608229 = query.getOrDefault("Version")
  valid_608229 = validateParameter(valid_608229, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608229 != nil:
    section.add "Version", valid_608229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608230 = header.getOrDefault("X-Amz-Signature")
  valid_608230 = validateParameter(valid_608230, JString, required = false,
                                 default = nil)
  if valid_608230 != nil:
    section.add "X-Amz-Signature", valid_608230
  var valid_608231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608231 = validateParameter(valid_608231, JString, required = false,
                                 default = nil)
  if valid_608231 != nil:
    section.add "X-Amz-Content-Sha256", valid_608231
  var valid_608232 = header.getOrDefault("X-Amz-Date")
  valid_608232 = validateParameter(valid_608232, JString, required = false,
                                 default = nil)
  if valid_608232 != nil:
    section.add "X-Amz-Date", valid_608232
  var valid_608233 = header.getOrDefault("X-Amz-Credential")
  valid_608233 = validateParameter(valid_608233, JString, required = false,
                                 default = nil)
  if valid_608233 != nil:
    section.add "X-Amz-Credential", valid_608233
  var valid_608234 = header.getOrDefault("X-Amz-Security-Token")
  valid_608234 = validateParameter(valid_608234, JString, required = false,
                                 default = nil)
  if valid_608234 != nil:
    section.add "X-Amz-Security-Token", valid_608234
  var valid_608235 = header.getOrDefault("X-Amz-Algorithm")
  valid_608235 = validateParameter(valid_608235, JString, required = false,
                                 default = nil)
  if valid_608235 != nil:
    section.add "X-Amz-Algorithm", valid_608235
  var valid_608236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608236 = validateParameter(valid_608236, JString, required = false,
                                 default = nil)
  if valid_608236 != nil:
    section.add "X-Amz-SignedHeaders", valid_608236
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_608237 = formData.getOrDefault("MaxRecords")
  valid_608237 = validateParameter(valid_608237, JInt, required = false, default = nil)
  if valid_608237 != nil:
    section.add "MaxRecords", valid_608237
  var valid_608238 = formData.getOrDefault("Marker")
  valid_608238 = validateParameter(valid_608238, JString, required = false,
                                 default = nil)
  if valid_608238 != nil:
    section.add "Marker", valid_608238
  var valid_608239 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_608239 = validateParameter(valid_608239, JString, required = false,
                                 default = nil)
  if valid_608239 != nil:
    section.add "DBClusterEndpointIdentifier", valid_608239
  var valid_608240 = formData.getOrDefault("Filters")
  valid_608240 = validateParameter(valid_608240, JArray, required = false,
                                 default = nil)
  if valid_608240 != nil:
    section.add "Filters", valid_608240
  var valid_608241 = formData.getOrDefault("DBClusterIdentifier")
  valid_608241 = validateParameter(valid_608241, JString, required = false,
                                 default = nil)
  if valid_608241 != nil:
    section.add "DBClusterIdentifier", valid_608241
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608242: Call_PostDescribeDBClusterEndpoints_608225; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608242.validator(path, query, header, formData, body)
  let scheme = call_608242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608242.url(scheme.get, call_608242.host, call_608242.base,
                         call_608242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608242, url, valid)

proc call*(call_608243: Call_PostDescribeDBClusterEndpoints_608225;
          MaxRecords: int = 0; Marker: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_608244 = newJObject()
  var formData_608245 = newJObject()
  add(formData_608245, "MaxRecords", newJInt(MaxRecords))
  add(formData_608245, "Marker", newJString(Marker))
  add(formData_608245, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_608244, "Action", newJString(Action))
  if Filters != nil:
    formData_608245.add "Filters", Filters
  add(query_608244, "Version", newJString(Version))
  add(formData_608245, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_608243.call(nil, query_608244, nil, formData_608245, nil)

var postDescribeDBClusterEndpoints* = Call_PostDescribeDBClusterEndpoints_608225(
    name: "postDescribeDBClusterEndpoints", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_PostDescribeDBClusterEndpoints_608226, base: "/",
    url: url_PostDescribeDBClusterEndpoints_608227,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterEndpoints_608205 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBClusterEndpoints_608207(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterEndpoints_608206(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608208 = query.getOrDefault("Marker")
  valid_608208 = validateParameter(valid_608208, JString, required = false,
                                 default = nil)
  if valid_608208 != nil:
    section.add "Marker", valid_608208
  var valid_608209 = query.getOrDefault("DBClusterIdentifier")
  valid_608209 = validateParameter(valid_608209, JString, required = false,
                                 default = nil)
  if valid_608209 != nil:
    section.add "DBClusterIdentifier", valid_608209
  var valid_608210 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_608210 = validateParameter(valid_608210, JString, required = false,
                                 default = nil)
  if valid_608210 != nil:
    section.add "DBClusterEndpointIdentifier", valid_608210
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608211 = query.getOrDefault("Action")
  valid_608211 = validateParameter(valid_608211, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_608211 != nil:
    section.add "Action", valid_608211
  var valid_608212 = query.getOrDefault("Version")
  valid_608212 = validateParameter(valid_608212, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608212 != nil:
    section.add "Version", valid_608212
  var valid_608213 = query.getOrDefault("Filters")
  valid_608213 = validateParameter(valid_608213, JArray, required = false,
                                 default = nil)
  if valid_608213 != nil:
    section.add "Filters", valid_608213
  var valid_608214 = query.getOrDefault("MaxRecords")
  valid_608214 = validateParameter(valid_608214, JInt, required = false, default = nil)
  if valid_608214 != nil:
    section.add "MaxRecords", valid_608214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608215 = header.getOrDefault("X-Amz-Signature")
  valid_608215 = validateParameter(valid_608215, JString, required = false,
                                 default = nil)
  if valid_608215 != nil:
    section.add "X-Amz-Signature", valid_608215
  var valid_608216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608216 = validateParameter(valid_608216, JString, required = false,
                                 default = nil)
  if valid_608216 != nil:
    section.add "X-Amz-Content-Sha256", valid_608216
  var valid_608217 = header.getOrDefault("X-Amz-Date")
  valid_608217 = validateParameter(valid_608217, JString, required = false,
                                 default = nil)
  if valid_608217 != nil:
    section.add "X-Amz-Date", valid_608217
  var valid_608218 = header.getOrDefault("X-Amz-Credential")
  valid_608218 = validateParameter(valid_608218, JString, required = false,
                                 default = nil)
  if valid_608218 != nil:
    section.add "X-Amz-Credential", valid_608218
  var valid_608219 = header.getOrDefault("X-Amz-Security-Token")
  valid_608219 = validateParameter(valid_608219, JString, required = false,
                                 default = nil)
  if valid_608219 != nil:
    section.add "X-Amz-Security-Token", valid_608219
  var valid_608220 = header.getOrDefault("X-Amz-Algorithm")
  valid_608220 = validateParameter(valid_608220, JString, required = false,
                                 default = nil)
  if valid_608220 != nil:
    section.add "X-Amz-Algorithm", valid_608220
  var valid_608221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608221 = validateParameter(valid_608221, JString, required = false,
                                 default = nil)
  if valid_608221 != nil:
    section.add "X-Amz-SignedHeaders", valid_608221
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608222: Call_GetDescribeDBClusterEndpoints_608205; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608222.validator(path, query, header, formData, body)
  let scheme = call_608222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608222.url(scheme.get, call_608222.host, call_608222.base,
                         call_608222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608222, url, valid)

proc call*(call_608223: Call_GetDescribeDBClusterEndpoints_608205;
          Marker: string = ""; DBClusterIdentifier: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608224 = newJObject()
  add(query_608224, "Marker", newJString(Marker))
  add(query_608224, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608224, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_608224, "Action", newJString(Action))
  add(query_608224, "Version", newJString(Version))
  if Filters != nil:
    query_608224.add "Filters", Filters
  add(query_608224, "MaxRecords", newJInt(MaxRecords))
  result = call_608223.call(nil, query_608224, nil, nil, nil)

var getDescribeDBClusterEndpoints* = Call_GetDescribeDBClusterEndpoints_608205(
    name: "getDescribeDBClusterEndpoints", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_GetDescribeDBClusterEndpoints_608206, base: "/",
    url: url_GetDescribeDBClusterEndpoints_608207,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_608265 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBClusterParameterGroups_608267(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_608266(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608268 = query.getOrDefault("Action")
  valid_608268 = validateParameter(valid_608268, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_608268 != nil:
    section.add "Action", valid_608268
  var valid_608269 = query.getOrDefault("Version")
  valid_608269 = validateParameter(valid_608269, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608269 != nil:
    section.add "Version", valid_608269
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608270 = header.getOrDefault("X-Amz-Signature")
  valid_608270 = validateParameter(valid_608270, JString, required = false,
                                 default = nil)
  if valid_608270 != nil:
    section.add "X-Amz-Signature", valid_608270
  var valid_608271 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608271 = validateParameter(valid_608271, JString, required = false,
                                 default = nil)
  if valid_608271 != nil:
    section.add "X-Amz-Content-Sha256", valid_608271
  var valid_608272 = header.getOrDefault("X-Amz-Date")
  valid_608272 = validateParameter(valid_608272, JString, required = false,
                                 default = nil)
  if valid_608272 != nil:
    section.add "X-Amz-Date", valid_608272
  var valid_608273 = header.getOrDefault("X-Amz-Credential")
  valid_608273 = validateParameter(valid_608273, JString, required = false,
                                 default = nil)
  if valid_608273 != nil:
    section.add "X-Amz-Credential", valid_608273
  var valid_608274 = header.getOrDefault("X-Amz-Security-Token")
  valid_608274 = validateParameter(valid_608274, JString, required = false,
                                 default = nil)
  if valid_608274 != nil:
    section.add "X-Amz-Security-Token", valid_608274
  var valid_608275 = header.getOrDefault("X-Amz-Algorithm")
  valid_608275 = validateParameter(valid_608275, JString, required = false,
                                 default = nil)
  if valid_608275 != nil:
    section.add "X-Amz-Algorithm", valid_608275
  var valid_608276 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608276 = validateParameter(valid_608276, JString, required = false,
                                 default = nil)
  if valid_608276 != nil:
    section.add "X-Amz-SignedHeaders", valid_608276
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_608277 = formData.getOrDefault("MaxRecords")
  valid_608277 = validateParameter(valid_608277, JInt, required = false, default = nil)
  if valid_608277 != nil:
    section.add "MaxRecords", valid_608277
  var valid_608278 = formData.getOrDefault("Marker")
  valid_608278 = validateParameter(valid_608278, JString, required = false,
                                 default = nil)
  if valid_608278 != nil:
    section.add "Marker", valid_608278
  var valid_608279 = formData.getOrDefault("Filters")
  valid_608279 = validateParameter(valid_608279, JArray, required = false,
                                 default = nil)
  if valid_608279 != nil:
    section.add "Filters", valid_608279
  var valid_608280 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_608280 = validateParameter(valid_608280, JString, required = false,
                                 default = nil)
  if valid_608280 != nil:
    section.add "DBClusterParameterGroupName", valid_608280
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608281: Call_PostDescribeDBClusterParameterGroups_608265;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608281.validator(path, query, header, formData, body)
  let scheme = call_608281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608281.url(scheme.get, call_608281.host, call_608281.base,
                         call_608281.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608281, url, valid)

proc call*(call_608282: Call_PostDescribeDBClusterParameterGroups_608265;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Filters: JsonNode = nil; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_608283 = newJObject()
  var formData_608284 = newJObject()
  add(formData_608284, "MaxRecords", newJInt(MaxRecords))
  add(formData_608284, "Marker", newJString(Marker))
  add(query_608283, "Action", newJString(Action))
  if Filters != nil:
    formData_608284.add "Filters", Filters
  add(formData_608284, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608283, "Version", newJString(Version))
  result = call_608282.call(nil, query_608283, nil, formData_608284, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_608265(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_608266, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_608267,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_608246 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBClusterParameterGroups_608248(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_608247(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608249 = query.getOrDefault("Marker")
  valid_608249 = validateParameter(valid_608249, JString, required = false,
                                 default = nil)
  if valid_608249 != nil:
    section.add "Marker", valid_608249
  var valid_608250 = query.getOrDefault("DBClusterParameterGroupName")
  valid_608250 = validateParameter(valid_608250, JString, required = false,
                                 default = nil)
  if valid_608250 != nil:
    section.add "DBClusterParameterGroupName", valid_608250
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608251 = query.getOrDefault("Action")
  valid_608251 = validateParameter(valid_608251, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_608251 != nil:
    section.add "Action", valid_608251
  var valid_608252 = query.getOrDefault("Version")
  valid_608252 = validateParameter(valid_608252, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608252 != nil:
    section.add "Version", valid_608252
  var valid_608253 = query.getOrDefault("Filters")
  valid_608253 = validateParameter(valid_608253, JArray, required = false,
                                 default = nil)
  if valid_608253 != nil:
    section.add "Filters", valid_608253
  var valid_608254 = query.getOrDefault("MaxRecords")
  valid_608254 = validateParameter(valid_608254, JInt, required = false, default = nil)
  if valid_608254 != nil:
    section.add "MaxRecords", valid_608254
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608255 = header.getOrDefault("X-Amz-Signature")
  valid_608255 = validateParameter(valid_608255, JString, required = false,
                                 default = nil)
  if valid_608255 != nil:
    section.add "X-Amz-Signature", valid_608255
  var valid_608256 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608256 = validateParameter(valid_608256, JString, required = false,
                                 default = nil)
  if valid_608256 != nil:
    section.add "X-Amz-Content-Sha256", valid_608256
  var valid_608257 = header.getOrDefault("X-Amz-Date")
  valid_608257 = validateParameter(valid_608257, JString, required = false,
                                 default = nil)
  if valid_608257 != nil:
    section.add "X-Amz-Date", valid_608257
  var valid_608258 = header.getOrDefault("X-Amz-Credential")
  valid_608258 = validateParameter(valid_608258, JString, required = false,
                                 default = nil)
  if valid_608258 != nil:
    section.add "X-Amz-Credential", valid_608258
  var valid_608259 = header.getOrDefault("X-Amz-Security-Token")
  valid_608259 = validateParameter(valid_608259, JString, required = false,
                                 default = nil)
  if valid_608259 != nil:
    section.add "X-Amz-Security-Token", valid_608259
  var valid_608260 = header.getOrDefault("X-Amz-Algorithm")
  valid_608260 = validateParameter(valid_608260, JString, required = false,
                                 default = nil)
  if valid_608260 != nil:
    section.add "X-Amz-Algorithm", valid_608260
  var valid_608261 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608261 = validateParameter(valid_608261, JString, required = false,
                                 default = nil)
  if valid_608261 != nil:
    section.add "X-Amz-SignedHeaders", valid_608261
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608262: Call_GetDescribeDBClusterParameterGroups_608246;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608262.validator(path, query, header, formData, body)
  let scheme = call_608262.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608262.url(scheme.get, call_608262.host, call_608262.base,
                         call_608262.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608262, url, valid)

proc call*(call_608263: Call_GetDescribeDBClusterParameterGroups_608246;
          Marker: string = ""; DBClusterParameterGroupName: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608264 = newJObject()
  add(query_608264, "Marker", newJString(Marker))
  add(query_608264, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608264, "Action", newJString(Action))
  add(query_608264, "Version", newJString(Version))
  if Filters != nil:
    query_608264.add "Filters", Filters
  add(query_608264, "MaxRecords", newJInt(MaxRecords))
  result = call_608263.call(nil, query_608264, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_608246(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_608247, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_608248,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_608305 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBClusterParameters_608307(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameters_608306(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608308 = query.getOrDefault("Action")
  valid_608308 = validateParameter(valid_608308, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_608308 != nil:
    section.add "Action", valid_608308
  var valid_608309 = query.getOrDefault("Version")
  valid_608309 = validateParameter(valid_608309, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608309 != nil:
    section.add "Version", valid_608309
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608310 = header.getOrDefault("X-Amz-Signature")
  valid_608310 = validateParameter(valid_608310, JString, required = false,
                                 default = nil)
  if valid_608310 != nil:
    section.add "X-Amz-Signature", valid_608310
  var valid_608311 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608311 = validateParameter(valid_608311, JString, required = false,
                                 default = nil)
  if valid_608311 != nil:
    section.add "X-Amz-Content-Sha256", valid_608311
  var valid_608312 = header.getOrDefault("X-Amz-Date")
  valid_608312 = validateParameter(valid_608312, JString, required = false,
                                 default = nil)
  if valid_608312 != nil:
    section.add "X-Amz-Date", valid_608312
  var valid_608313 = header.getOrDefault("X-Amz-Credential")
  valid_608313 = validateParameter(valid_608313, JString, required = false,
                                 default = nil)
  if valid_608313 != nil:
    section.add "X-Amz-Credential", valid_608313
  var valid_608314 = header.getOrDefault("X-Amz-Security-Token")
  valid_608314 = validateParameter(valid_608314, JString, required = false,
                                 default = nil)
  if valid_608314 != nil:
    section.add "X-Amz-Security-Token", valid_608314
  var valid_608315 = header.getOrDefault("X-Amz-Algorithm")
  valid_608315 = validateParameter(valid_608315, JString, required = false,
                                 default = nil)
  if valid_608315 != nil:
    section.add "X-Amz-Algorithm", valid_608315
  var valid_608316 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608316 = validateParameter(valid_608316, JString, required = false,
                                 default = nil)
  if valid_608316 != nil:
    section.add "X-Amz-SignedHeaders", valid_608316
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_608317 = formData.getOrDefault("Source")
  valid_608317 = validateParameter(valid_608317, JString, required = false,
                                 default = nil)
  if valid_608317 != nil:
    section.add "Source", valid_608317
  var valid_608318 = formData.getOrDefault("MaxRecords")
  valid_608318 = validateParameter(valid_608318, JInt, required = false, default = nil)
  if valid_608318 != nil:
    section.add "MaxRecords", valid_608318
  var valid_608319 = formData.getOrDefault("Marker")
  valid_608319 = validateParameter(valid_608319, JString, required = false,
                                 default = nil)
  if valid_608319 != nil:
    section.add "Marker", valid_608319
  var valid_608320 = formData.getOrDefault("Filters")
  valid_608320 = validateParameter(valid_608320, JArray, required = false,
                                 default = nil)
  if valid_608320 != nil:
    section.add "Filters", valid_608320
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_608321 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_608321 = validateParameter(valid_608321, JString, required = true,
                                 default = nil)
  if valid_608321 != nil:
    section.add "DBClusterParameterGroupName", valid_608321
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608322: Call_PostDescribeDBClusterParameters_608305;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608322.validator(path, query, header, formData, body)
  let scheme = call_608322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608322.url(scheme.get, call_608322.host, call_608322.base,
                         call_608322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608322, url, valid)

proc call*(call_608323: Call_PostDescribeDBClusterParameters_608305;
          DBClusterParameterGroupName: string; Source: string = "";
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_608324 = newJObject()
  var formData_608325 = newJObject()
  add(formData_608325, "Source", newJString(Source))
  add(formData_608325, "MaxRecords", newJInt(MaxRecords))
  add(formData_608325, "Marker", newJString(Marker))
  add(query_608324, "Action", newJString(Action))
  if Filters != nil:
    formData_608325.add "Filters", Filters
  add(formData_608325, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608324, "Version", newJString(Version))
  result = call_608323.call(nil, query_608324, nil, formData_608325, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_608305(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_608306, base: "/",
    url: url_PostDescribeDBClusterParameters_608307,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_608285 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBClusterParameters_608287(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameters_608286(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608288 = query.getOrDefault("Marker")
  valid_608288 = validateParameter(valid_608288, JString, required = false,
                                 default = nil)
  if valid_608288 != nil:
    section.add "Marker", valid_608288
  var valid_608289 = query.getOrDefault("Source")
  valid_608289 = validateParameter(valid_608289, JString, required = false,
                                 default = nil)
  if valid_608289 != nil:
    section.add "Source", valid_608289
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_608290 = query.getOrDefault("DBClusterParameterGroupName")
  valid_608290 = validateParameter(valid_608290, JString, required = true,
                                 default = nil)
  if valid_608290 != nil:
    section.add "DBClusterParameterGroupName", valid_608290
  var valid_608291 = query.getOrDefault("Action")
  valid_608291 = validateParameter(valid_608291, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_608291 != nil:
    section.add "Action", valid_608291
  var valid_608292 = query.getOrDefault("Version")
  valid_608292 = validateParameter(valid_608292, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608292 != nil:
    section.add "Version", valid_608292
  var valid_608293 = query.getOrDefault("Filters")
  valid_608293 = validateParameter(valid_608293, JArray, required = false,
                                 default = nil)
  if valid_608293 != nil:
    section.add "Filters", valid_608293
  var valid_608294 = query.getOrDefault("MaxRecords")
  valid_608294 = validateParameter(valid_608294, JInt, required = false, default = nil)
  if valid_608294 != nil:
    section.add "MaxRecords", valid_608294
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608295 = header.getOrDefault("X-Amz-Signature")
  valid_608295 = validateParameter(valid_608295, JString, required = false,
                                 default = nil)
  if valid_608295 != nil:
    section.add "X-Amz-Signature", valid_608295
  var valid_608296 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608296 = validateParameter(valid_608296, JString, required = false,
                                 default = nil)
  if valid_608296 != nil:
    section.add "X-Amz-Content-Sha256", valid_608296
  var valid_608297 = header.getOrDefault("X-Amz-Date")
  valid_608297 = validateParameter(valid_608297, JString, required = false,
                                 default = nil)
  if valid_608297 != nil:
    section.add "X-Amz-Date", valid_608297
  var valid_608298 = header.getOrDefault("X-Amz-Credential")
  valid_608298 = validateParameter(valid_608298, JString, required = false,
                                 default = nil)
  if valid_608298 != nil:
    section.add "X-Amz-Credential", valid_608298
  var valid_608299 = header.getOrDefault("X-Amz-Security-Token")
  valid_608299 = validateParameter(valid_608299, JString, required = false,
                                 default = nil)
  if valid_608299 != nil:
    section.add "X-Amz-Security-Token", valid_608299
  var valid_608300 = header.getOrDefault("X-Amz-Algorithm")
  valid_608300 = validateParameter(valid_608300, JString, required = false,
                                 default = nil)
  if valid_608300 != nil:
    section.add "X-Amz-Algorithm", valid_608300
  var valid_608301 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608301 = validateParameter(valid_608301, JString, required = false,
                                 default = nil)
  if valid_608301 != nil:
    section.add "X-Amz-SignedHeaders", valid_608301
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608302: Call_GetDescribeDBClusterParameters_608285; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608302.validator(path, query, header, formData, body)
  let scheme = call_608302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608302.url(scheme.get, call_608302.host, call_608302.base,
                         call_608302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608302, url, valid)

proc call*(call_608303: Call_GetDescribeDBClusterParameters_608285;
          DBClusterParameterGroupName: string; Marker: string = "";
          Source: string = ""; Action: string = "DescribeDBClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608304 = newJObject()
  add(query_608304, "Marker", newJString(Marker))
  add(query_608304, "Source", newJString(Source))
  add(query_608304, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608304, "Action", newJString(Action))
  add(query_608304, "Version", newJString(Version))
  if Filters != nil:
    query_608304.add "Filters", Filters
  add(query_608304, "MaxRecords", newJInt(MaxRecords))
  result = call_608303.call(nil, query_608304, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_608285(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_608286, base: "/",
    url: url_GetDescribeDBClusterParameters_608287,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_608342 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBClusterSnapshotAttributes_608344(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_608343(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608345 = query.getOrDefault("Action")
  valid_608345 = validateParameter(valid_608345, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_608345 != nil:
    section.add "Action", valid_608345
  var valid_608346 = query.getOrDefault("Version")
  valid_608346 = validateParameter(valid_608346, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608346 != nil:
    section.add "Version", valid_608346
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608347 = header.getOrDefault("X-Amz-Signature")
  valid_608347 = validateParameter(valid_608347, JString, required = false,
                                 default = nil)
  if valid_608347 != nil:
    section.add "X-Amz-Signature", valid_608347
  var valid_608348 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608348 = validateParameter(valid_608348, JString, required = false,
                                 default = nil)
  if valid_608348 != nil:
    section.add "X-Amz-Content-Sha256", valid_608348
  var valid_608349 = header.getOrDefault("X-Amz-Date")
  valid_608349 = validateParameter(valid_608349, JString, required = false,
                                 default = nil)
  if valid_608349 != nil:
    section.add "X-Amz-Date", valid_608349
  var valid_608350 = header.getOrDefault("X-Amz-Credential")
  valid_608350 = validateParameter(valid_608350, JString, required = false,
                                 default = nil)
  if valid_608350 != nil:
    section.add "X-Amz-Credential", valid_608350
  var valid_608351 = header.getOrDefault("X-Amz-Security-Token")
  valid_608351 = validateParameter(valid_608351, JString, required = false,
                                 default = nil)
  if valid_608351 != nil:
    section.add "X-Amz-Security-Token", valid_608351
  var valid_608352 = header.getOrDefault("X-Amz-Algorithm")
  valid_608352 = validateParameter(valid_608352, JString, required = false,
                                 default = nil)
  if valid_608352 != nil:
    section.add "X-Amz-Algorithm", valid_608352
  var valid_608353 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608353 = validateParameter(valid_608353, JString, required = false,
                                 default = nil)
  if valid_608353 != nil:
    section.add "X-Amz-SignedHeaders", valid_608353
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_608354 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_608354 = validateParameter(valid_608354, JString, required = true,
                                 default = nil)
  if valid_608354 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_608354
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608355: Call_PostDescribeDBClusterSnapshotAttributes_608342;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608355.validator(path, query, header, formData, body)
  let scheme = call_608355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608355.url(scheme.get, call_608355.host, call_608355.base,
                         call_608355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608355, url, valid)

proc call*(call_608356: Call_PostDescribeDBClusterSnapshotAttributes_608342;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608357 = newJObject()
  var formData_608358 = newJObject()
  add(formData_608358, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_608357, "Action", newJString(Action))
  add(query_608357, "Version", newJString(Version))
  result = call_608356.call(nil, query_608357, nil, formData_608358, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_608342(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_608343, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_608344,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_608326 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBClusterSnapshotAttributes_608328(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_608327(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_608329 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_608329 = validateParameter(valid_608329, JString, required = true,
                                 default = nil)
  if valid_608329 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_608329
  var valid_608330 = query.getOrDefault("Action")
  valid_608330 = validateParameter(valid_608330, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_608330 != nil:
    section.add "Action", valid_608330
  var valid_608331 = query.getOrDefault("Version")
  valid_608331 = validateParameter(valid_608331, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608331 != nil:
    section.add "Version", valid_608331
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608332 = header.getOrDefault("X-Amz-Signature")
  valid_608332 = validateParameter(valid_608332, JString, required = false,
                                 default = nil)
  if valid_608332 != nil:
    section.add "X-Amz-Signature", valid_608332
  var valid_608333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608333 = validateParameter(valid_608333, JString, required = false,
                                 default = nil)
  if valid_608333 != nil:
    section.add "X-Amz-Content-Sha256", valid_608333
  var valid_608334 = header.getOrDefault("X-Amz-Date")
  valid_608334 = validateParameter(valid_608334, JString, required = false,
                                 default = nil)
  if valid_608334 != nil:
    section.add "X-Amz-Date", valid_608334
  var valid_608335 = header.getOrDefault("X-Amz-Credential")
  valid_608335 = validateParameter(valid_608335, JString, required = false,
                                 default = nil)
  if valid_608335 != nil:
    section.add "X-Amz-Credential", valid_608335
  var valid_608336 = header.getOrDefault("X-Amz-Security-Token")
  valid_608336 = validateParameter(valid_608336, JString, required = false,
                                 default = nil)
  if valid_608336 != nil:
    section.add "X-Amz-Security-Token", valid_608336
  var valid_608337 = header.getOrDefault("X-Amz-Algorithm")
  valid_608337 = validateParameter(valid_608337, JString, required = false,
                                 default = nil)
  if valid_608337 != nil:
    section.add "X-Amz-Algorithm", valid_608337
  var valid_608338 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608338 = validateParameter(valid_608338, JString, required = false,
                                 default = nil)
  if valid_608338 != nil:
    section.add "X-Amz-SignedHeaders", valid_608338
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608339: Call_GetDescribeDBClusterSnapshotAttributes_608326;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608339.validator(path, query, header, formData, body)
  let scheme = call_608339.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608339.url(scheme.get, call_608339.host, call_608339.base,
                         call_608339.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608339, url, valid)

proc call*(call_608340: Call_GetDescribeDBClusterSnapshotAttributes_608326;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608341 = newJObject()
  add(query_608341, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_608341, "Action", newJString(Action))
  add(query_608341, "Version", newJString(Version))
  result = call_608340.call(nil, query_608341, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_608326(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_608327, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_608328,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_608382 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBClusterSnapshots_608384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_608383(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608385 = query.getOrDefault("Action")
  valid_608385 = validateParameter(valid_608385, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_608385 != nil:
    section.add "Action", valid_608385
  var valid_608386 = query.getOrDefault("Version")
  valid_608386 = validateParameter(valid_608386, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608386 != nil:
    section.add "Version", valid_608386
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608387 = header.getOrDefault("X-Amz-Signature")
  valid_608387 = validateParameter(valid_608387, JString, required = false,
                                 default = nil)
  if valid_608387 != nil:
    section.add "X-Amz-Signature", valid_608387
  var valid_608388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608388 = validateParameter(valid_608388, JString, required = false,
                                 default = nil)
  if valid_608388 != nil:
    section.add "X-Amz-Content-Sha256", valid_608388
  var valid_608389 = header.getOrDefault("X-Amz-Date")
  valid_608389 = validateParameter(valid_608389, JString, required = false,
                                 default = nil)
  if valid_608389 != nil:
    section.add "X-Amz-Date", valid_608389
  var valid_608390 = header.getOrDefault("X-Amz-Credential")
  valid_608390 = validateParameter(valid_608390, JString, required = false,
                                 default = nil)
  if valid_608390 != nil:
    section.add "X-Amz-Credential", valid_608390
  var valid_608391 = header.getOrDefault("X-Amz-Security-Token")
  valid_608391 = validateParameter(valid_608391, JString, required = false,
                                 default = nil)
  if valid_608391 != nil:
    section.add "X-Amz-Security-Token", valid_608391
  var valid_608392 = header.getOrDefault("X-Amz-Algorithm")
  valid_608392 = validateParameter(valid_608392, JString, required = false,
                                 default = nil)
  if valid_608392 != nil:
    section.add "X-Amz-Algorithm", valid_608392
  var valid_608393 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608393 = validateParameter(valid_608393, JString, required = false,
                                 default = nil)
  if valid_608393 != nil:
    section.add "X-Amz-SignedHeaders", valid_608393
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_608394 = formData.getOrDefault("SnapshotType")
  valid_608394 = validateParameter(valid_608394, JString, required = false,
                                 default = nil)
  if valid_608394 != nil:
    section.add "SnapshotType", valid_608394
  var valid_608395 = formData.getOrDefault("MaxRecords")
  valid_608395 = validateParameter(valid_608395, JInt, required = false, default = nil)
  if valid_608395 != nil:
    section.add "MaxRecords", valid_608395
  var valid_608396 = formData.getOrDefault("IncludePublic")
  valid_608396 = validateParameter(valid_608396, JBool, required = false, default = nil)
  if valid_608396 != nil:
    section.add "IncludePublic", valid_608396
  var valid_608397 = formData.getOrDefault("Marker")
  valid_608397 = validateParameter(valid_608397, JString, required = false,
                                 default = nil)
  if valid_608397 != nil:
    section.add "Marker", valid_608397
  var valid_608398 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_608398 = validateParameter(valid_608398, JString, required = false,
                                 default = nil)
  if valid_608398 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_608398
  var valid_608399 = formData.getOrDefault("IncludeShared")
  valid_608399 = validateParameter(valid_608399, JBool, required = false, default = nil)
  if valid_608399 != nil:
    section.add "IncludeShared", valid_608399
  var valid_608400 = formData.getOrDefault("Filters")
  valid_608400 = validateParameter(valid_608400, JArray, required = false,
                                 default = nil)
  if valid_608400 != nil:
    section.add "Filters", valid_608400
  var valid_608401 = formData.getOrDefault("DBClusterIdentifier")
  valid_608401 = validateParameter(valid_608401, JString, required = false,
                                 default = nil)
  if valid_608401 != nil:
    section.add "DBClusterIdentifier", valid_608401
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608402: Call_PostDescribeDBClusterSnapshots_608382; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608402.validator(path, query, header, formData, body)
  let scheme = call_608402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608402.url(scheme.get, call_608402.host, call_608402.base,
                         call_608402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608402, url, valid)

proc call*(call_608403: Call_PostDescribeDBClusterSnapshots_608382;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_608404 = newJObject()
  var formData_608405 = newJObject()
  add(formData_608405, "SnapshotType", newJString(SnapshotType))
  add(formData_608405, "MaxRecords", newJInt(MaxRecords))
  add(formData_608405, "IncludePublic", newJBool(IncludePublic))
  add(formData_608405, "Marker", newJString(Marker))
  add(formData_608405, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_608405, "IncludeShared", newJBool(IncludeShared))
  add(query_608404, "Action", newJString(Action))
  if Filters != nil:
    formData_608405.add "Filters", Filters
  add(query_608404, "Version", newJString(Version))
  add(formData_608405, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_608403.call(nil, query_608404, nil, formData_608405, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_608382(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_608383, base: "/",
    url: url_PostDescribeDBClusterSnapshots_608384,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_608359 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBClusterSnapshots_608361(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_608360(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608362 = query.getOrDefault("Marker")
  valid_608362 = validateParameter(valid_608362, JString, required = false,
                                 default = nil)
  if valid_608362 != nil:
    section.add "Marker", valid_608362
  var valid_608363 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_608363 = validateParameter(valid_608363, JString, required = false,
                                 default = nil)
  if valid_608363 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_608363
  var valid_608364 = query.getOrDefault("DBClusterIdentifier")
  valid_608364 = validateParameter(valid_608364, JString, required = false,
                                 default = nil)
  if valid_608364 != nil:
    section.add "DBClusterIdentifier", valid_608364
  var valid_608365 = query.getOrDefault("SnapshotType")
  valid_608365 = validateParameter(valid_608365, JString, required = false,
                                 default = nil)
  if valid_608365 != nil:
    section.add "SnapshotType", valid_608365
  var valid_608366 = query.getOrDefault("IncludePublic")
  valid_608366 = validateParameter(valid_608366, JBool, required = false, default = nil)
  if valid_608366 != nil:
    section.add "IncludePublic", valid_608366
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608367 = query.getOrDefault("Action")
  valid_608367 = validateParameter(valid_608367, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_608367 != nil:
    section.add "Action", valid_608367
  var valid_608368 = query.getOrDefault("IncludeShared")
  valid_608368 = validateParameter(valid_608368, JBool, required = false, default = nil)
  if valid_608368 != nil:
    section.add "IncludeShared", valid_608368
  var valid_608369 = query.getOrDefault("Version")
  valid_608369 = validateParameter(valid_608369, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608369 != nil:
    section.add "Version", valid_608369
  var valid_608370 = query.getOrDefault("Filters")
  valid_608370 = validateParameter(valid_608370, JArray, required = false,
                                 default = nil)
  if valid_608370 != nil:
    section.add "Filters", valid_608370
  var valid_608371 = query.getOrDefault("MaxRecords")
  valid_608371 = validateParameter(valid_608371, JInt, required = false, default = nil)
  if valid_608371 != nil:
    section.add "MaxRecords", valid_608371
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608372 = header.getOrDefault("X-Amz-Signature")
  valid_608372 = validateParameter(valid_608372, JString, required = false,
                                 default = nil)
  if valid_608372 != nil:
    section.add "X-Amz-Signature", valid_608372
  var valid_608373 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608373 = validateParameter(valid_608373, JString, required = false,
                                 default = nil)
  if valid_608373 != nil:
    section.add "X-Amz-Content-Sha256", valid_608373
  var valid_608374 = header.getOrDefault("X-Amz-Date")
  valid_608374 = validateParameter(valid_608374, JString, required = false,
                                 default = nil)
  if valid_608374 != nil:
    section.add "X-Amz-Date", valid_608374
  var valid_608375 = header.getOrDefault("X-Amz-Credential")
  valid_608375 = validateParameter(valid_608375, JString, required = false,
                                 default = nil)
  if valid_608375 != nil:
    section.add "X-Amz-Credential", valid_608375
  var valid_608376 = header.getOrDefault("X-Amz-Security-Token")
  valid_608376 = validateParameter(valid_608376, JString, required = false,
                                 default = nil)
  if valid_608376 != nil:
    section.add "X-Amz-Security-Token", valid_608376
  var valid_608377 = header.getOrDefault("X-Amz-Algorithm")
  valid_608377 = validateParameter(valid_608377, JString, required = false,
                                 default = nil)
  if valid_608377 != nil:
    section.add "X-Amz-Algorithm", valid_608377
  var valid_608378 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608378 = validateParameter(valid_608378, JString, required = false,
                                 default = nil)
  if valid_608378 != nil:
    section.add "X-Amz-SignedHeaders", valid_608378
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608379: Call_GetDescribeDBClusterSnapshots_608359; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608379.validator(path, query, header, formData, body)
  let scheme = call_608379.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608379.url(scheme.get, call_608379.host, call_608379.base,
                         call_608379.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608379, url, valid)

proc call*(call_608380: Call_GetDescribeDBClusterSnapshots_608359;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          DBClusterIdentifier: string = ""; SnapshotType: string = "";
          IncludePublic: bool = false;
          Action: string = "DescribeDBClusterSnapshots";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608381 = newJObject()
  add(query_608381, "Marker", newJString(Marker))
  add(query_608381, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_608381, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608381, "SnapshotType", newJString(SnapshotType))
  add(query_608381, "IncludePublic", newJBool(IncludePublic))
  add(query_608381, "Action", newJString(Action))
  add(query_608381, "IncludeShared", newJBool(IncludeShared))
  add(query_608381, "Version", newJString(Version))
  if Filters != nil:
    query_608381.add "Filters", Filters
  add(query_608381, "MaxRecords", newJInt(MaxRecords))
  result = call_608380.call(nil, query_608381, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_608359(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_608360, base: "/",
    url: url_GetDescribeDBClusterSnapshots_608361,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_608426 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBClusters_608428(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusters_608427(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608429 = query.getOrDefault("Action")
  valid_608429 = validateParameter(valid_608429, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_608429 != nil:
    section.add "Action", valid_608429
  var valid_608430 = query.getOrDefault("Version")
  valid_608430 = validateParameter(valid_608430, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608430 != nil:
    section.add "Version", valid_608430
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608431 = header.getOrDefault("X-Amz-Signature")
  valid_608431 = validateParameter(valid_608431, JString, required = false,
                                 default = nil)
  if valid_608431 != nil:
    section.add "X-Amz-Signature", valid_608431
  var valid_608432 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608432 = validateParameter(valid_608432, JString, required = false,
                                 default = nil)
  if valid_608432 != nil:
    section.add "X-Amz-Content-Sha256", valid_608432
  var valid_608433 = header.getOrDefault("X-Amz-Date")
  valid_608433 = validateParameter(valid_608433, JString, required = false,
                                 default = nil)
  if valid_608433 != nil:
    section.add "X-Amz-Date", valid_608433
  var valid_608434 = header.getOrDefault("X-Amz-Credential")
  valid_608434 = validateParameter(valid_608434, JString, required = false,
                                 default = nil)
  if valid_608434 != nil:
    section.add "X-Amz-Credential", valid_608434
  var valid_608435 = header.getOrDefault("X-Amz-Security-Token")
  valid_608435 = validateParameter(valid_608435, JString, required = false,
                                 default = nil)
  if valid_608435 != nil:
    section.add "X-Amz-Security-Token", valid_608435
  var valid_608436 = header.getOrDefault("X-Amz-Algorithm")
  valid_608436 = validateParameter(valid_608436, JString, required = false,
                                 default = nil)
  if valid_608436 != nil:
    section.add "X-Amz-Algorithm", valid_608436
  var valid_608437 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608437 = validateParameter(valid_608437, JString, required = false,
                                 default = nil)
  if valid_608437 != nil:
    section.add "X-Amz-SignedHeaders", valid_608437
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_608438 = formData.getOrDefault("MaxRecords")
  valid_608438 = validateParameter(valid_608438, JInt, required = false, default = nil)
  if valid_608438 != nil:
    section.add "MaxRecords", valid_608438
  var valid_608439 = formData.getOrDefault("Marker")
  valid_608439 = validateParameter(valid_608439, JString, required = false,
                                 default = nil)
  if valid_608439 != nil:
    section.add "Marker", valid_608439
  var valid_608440 = formData.getOrDefault("IncludeShared")
  valid_608440 = validateParameter(valid_608440, JBool, required = false, default = nil)
  if valid_608440 != nil:
    section.add "IncludeShared", valid_608440
  var valid_608441 = formData.getOrDefault("Filters")
  valid_608441 = validateParameter(valid_608441, JArray, required = false,
                                 default = nil)
  if valid_608441 != nil:
    section.add "Filters", valid_608441
  var valid_608442 = formData.getOrDefault("DBClusterIdentifier")
  valid_608442 = validateParameter(valid_608442, JString, required = false,
                                 default = nil)
  if valid_608442 != nil:
    section.add "DBClusterIdentifier", valid_608442
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608443: Call_PostDescribeDBClusters_608426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_608443.validator(path, query, header, formData, body)
  let scheme = call_608443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608443.url(scheme.get, call_608443.host, call_608443.base,
                         call_608443.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608443, url, valid)

proc call*(call_608444: Call_PostDescribeDBClusters_608426; MaxRecords: int = 0;
          Marker: string = ""; IncludeShared: bool = false;
          Action: string = "DescribeDBClusters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_608445 = newJObject()
  var formData_608446 = newJObject()
  add(formData_608446, "MaxRecords", newJInt(MaxRecords))
  add(formData_608446, "Marker", newJString(Marker))
  add(formData_608446, "IncludeShared", newJBool(IncludeShared))
  add(query_608445, "Action", newJString(Action))
  if Filters != nil:
    formData_608446.add "Filters", Filters
  add(query_608445, "Version", newJString(Version))
  add(formData_608446, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_608444.call(nil, query_608445, nil, formData_608446, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_608426(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_608427, base: "/",
    url: url_PostDescribeDBClusters_608428, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_608406 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBClusters_608408(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusters_608407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608409 = query.getOrDefault("Marker")
  valid_608409 = validateParameter(valid_608409, JString, required = false,
                                 default = nil)
  if valid_608409 != nil:
    section.add "Marker", valid_608409
  var valid_608410 = query.getOrDefault("DBClusterIdentifier")
  valid_608410 = validateParameter(valid_608410, JString, required = false,
                                 default = nil)
  if valid_608410 != nil:
    section.add "DBClusterIdentifier", valid_608410
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608411 = query.getOrDefault("Action")
  valid_608411 = validateParameter(valid_608411, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_608411 != nil:
    section.add "Action", valid_608411
  var valid_608412 = query.getOrDefault("IncludeShared")
  valid_608412 = validateParameter(valid_608412, JBool, required = false, default = nil)
  if valid_608412 != nil:
    section.add "IncludeShared", valid_608412
  var valid_608413 = query.getOrDefault("Version")
  valid_608413 = validateParameter(valid_608413, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608413 != nil:
    section.add "Version", valid_608413
  var valid_608414 = query.getOrDefault("Filters")
  valid_608414 = validateParameter(valid_608414, JArray, required = false,
                                 default = nil)
  if valid_608414 != nil:
    section.add "Filters", valid_608414
  var valid_608415 = query.getOrDefault("MaxRecords")
  valid_608415 = validateParameter(valid_608415, JInt, required = false, default = nil)
  if valid_608415 != nil:
    section.add "MaxRecords", valid_608415
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608416 = header.getOrDefault("X-Amz-Signature")
  valid_608416 = validateParameter(valid_608416, JString, required = false,
                                 default = nil)
  if valid_608416 != nil:
    section.add "X-Amz-Signature", valid_608416
  var valid_608417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608417 = validateParameter(valid_608417, JString, required = false,
                                 default = nil)
  if valid_608417 != nil:
    section.add "X-Amz-Content-Sha256", valid_608417
  var valid_608418 = header.getOrDefault("X-Amz-Date")
  valid_608418 = validateParameter(valid_608418, JString, required = false,
                                 default = nil)
  if valid_608418 != nil:
    section.add "X-Amz-Date", valid_608418
  var valid_608419 = header.getOrDefault("X-Amz-Credential")
  valid_608419 = validateParameter(valid_608419, JString, required = false,
                                 default = nil)
  if valid_608419 != nil:
    section.add "X-Amz-Credential", valid_608419
  var valid_608420 = header.getOrDefault("X-Amz-Security-Token")
  valid_608420 = validateParameter(valid_608420, JString, required = false,
                                 default = nil)
  if valid_608420 != nil:
    section.add "X-Amz-Security-Token", valid_608420
  var valid_608421 = header.getOrDefault("X-Amz-Algorithm")
  valid_608421 = validateParameter(valid_608421, JString, required = false,
                                 default = nil)
  if valid_608421 != nil:
    section.add "X-Amz-Algorithm", valid_608421
  var valid_608422 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608422 = validateParameter(valid_608422, JString, required = false,
                                 default = nil)
  if valid_608422 != nil:
    section.add "X-Amz-SignedHeaders", valid_608422
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608423: Call_GetDescribeDBClusters_608406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_608423.validator(path, query, header, formData, body)
  let scheme = call_608423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608423.url(scheme.get, call_608423.host, call_608423.base,
                         call_608423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608423, url, valid)

proc call*(call_608424: Call_GetDescribeDBClusters_608406; Marker: string = "";
          DBClusterIdentifier: string = ""; Action: string = "DescribeDBClusters";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608425 = newJObject()
  add(query_608425, "Marker", newJString(Marker))
  add(query_608425, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608425, "Action", newJString(Action))
  add(query_608425, "IncludeShared", newJBool(IncludeShared))
  add(query_608425, "Version", newJString(Version))
  if Filters != nil:
    query_608425.add "Filters", Filters
  add(query_608425, "MaxRecords", newJInt(MaxRecords))
  result = call_608424.call(nil, query_608425, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_608406(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_608407, base: "/",
    url: url_GetDescribeDBClusters_608408, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_608472 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBEngineVersions_608474(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBEngineVersions_608473(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608475 = query.getOrDefault("Action")
  valid_608475 = validateParameter(valid_608475, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_608475 != nil:
    section.add "Action", valid_608475
  var valid_608476 = query.getOrDefault("Version")
  valid_608476 = validateParameter(valid_608476, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608476 != nil:
    section.add "Version", valid_608476
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608477 = header.getOrDefault("X-Amz-Signature")
  valid_608477 = validateParameter(valid_608477, JString, required = false,
                                 default = nil)
  if valid_608477 != nil:
    section.add "X-Amz-Signature", valid_608477
  var valid_608478 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608478 = validateParameter(valid_608478, JString, required = false,
                                 default = nil)
  if valid_608478 != nil:
    section.add "X-Amz-Content-Sha256", valid_608478
  var valid_608479 = header.getOrDefault("X-Amz-Date")
  valid_608479 = validateParameter(valid_608479, JString, required = false,
                                 default = nil)
  if valid_608479 != nil:
    section.add "X-Amz-Date", valid_608479
  var valid_608480 = header.getOrDefault("X-Amz-Credential")
  valid_608480 = validateParameter(valid_608480, JString, required = false,
                                 default = nil)
  if valid_608480 != nil:
    section.add "X-Amz-Credential", valid_608480
  var valid_608481 = header.getOrDefault("X-Amz-Security-Token")
  valid_608481 = validateParameter(valid_608481, JString, required = false,
                                 default = nil)
  if valid_608481 != nil:
    section.add "X-Amz-Security-Token", valid_608481
  var valid_608482 = header.getOrDefault("X-Amz-Algorithm")
  valid_608482 = validateParameter(valid_608482, JString, required = false,
                                 default = nil)
  if valid_608482 != nil:
    section.add "X-Amz-Algorithm", valid_608482
  var valid_608483 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608483 = validateParameter(valid_608483, JString, required = false,
                                 default = nil)
  if valid_608483 != nil:
    section.add "X-Amz-SignedHeaders", valid_608483
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  section = newJObject()
  var valid_608484 = formData.getOrDefault("DefaultOnly")
  valid_608484 = validateParameter(valid_608484, JBool, required = false, default = nil)
  if valid_608484 != nil:
    section.add "DefaultOnly", valid_608484
  var valid_608485 = formData.getOrDefault("MaxRecords")
  valid_608485 = validateParameter(valid_608485, JInt, required = false, default = nil)
  if valid_608485 != nil:
    section.add "MaxRecords", valid_608485
  var valid_608486 = formData.getOrDefault("EngineVersion")
  valid_608486 = validateParameter(valid_608486, JString, required = false,
                                 default = nil)
  if valid_608486 != nil:
    section.add "EngineVersion", valid_608486
  var valid_608487 = formData.getOrDefault("Marker")
  valid_608487 = validateParameter(valid_608487, JString, required = false,
                                 default = nil)
  if valid_608487 != nil:
    section.add "Marker", valid_608487
  var valid_608488 = formData.getOrDefault("IncludeAll")
  valid_608488 = validateParameter(valid_608488, JBool, required = false, default = nil)
  if valid_608488 != nil:
    section.add "IncludeAll", valid_608488
  var valid_608489 = formData.getOrDefault("Engine")
  valid_608489 = validateParameter(valid_608489, JString, required = false,
                                 default = nil)
  if valid_608489 != nil:
    section.add "Engine", valid_608489
  var valid_608490 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_608490 = validateParameter(valid_608490, JBool, required = false, default = nil)
  if valid_608490 != nil:
    section.add "ListSupportedCharacterSets", valid_608490
  var valid_608491 = formData.getOrDefault("ListSupportedTimezones")
  valid_608491 = validateParameter(valid_608491, JBool, required = false, default = nil)
  if valid_608491 != nil:
    section.add "ListSupportedTimezones", valid_608491
  var valid_608492 = formData.getOrDefault("Filters")
  valid_608492 = validateParameter(valid_608492, JArray, required = false,
                                 default = nil)
  if valid_608492 != nil:
    section.add "Filters", valid_608492
  var valid_608493 = formData.getOrDefault("DBParameterGroupFamily")
  valid_608493 = validateParameter(valid_608493, JString, required = false,
                                 default = nil)
  if valid_608493 != nil:
    section.add "DBParameterGroupFamily", valid_608493
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608494: Call_PostDescribeDBEngineVersions_608472; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_608494.validator(path, query, header, formData, body)
  let scheme = call_608494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608494.url(scheme.get, call_608494.host, call_608494.base,
                         call_608494.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608494, url, valid)

proc call*(call_608495: Call_PostDescribeDBEngineVersions_608472;
          DefaultOnly: bool = false; MaxRecords: int = 0; EngineVersion: string = "";
          Marker: string = ""; IncludeAll: bool = false; Engine: string = "";
          ListSupportedCharacterSets: bool = false;
          Action: string = "DescribeDBEngineVersions";
          ListSupportedTimezones: bool = false; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBParameterGroupFamily: string = ""): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Action: string (required)
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  var query_608496 = newJObject()
  var formData_608497 = newJObject()
  add(formData_608497, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_608497, "MaxRecords", newJInt(MaxRecords))
  add(formData_608497, "EngineVersion", newJString(EngineVersion))
  add(formData_608497, "Marker", newJString(Marker))
  add(formData_608497, "IncludeAll", newJBool(IncludeAll))
  add(formData_608497, "Engine", newJString(Engine))
  add(formData_608497, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_608496, "Action", newJString(Action))
  add(formData_608497, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  if Filters != nil:
    formData_608497.add "Filters", Filters
  add(query_608496, "Version", newJString(Version))
  add(formData_608497, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_608495.call(nil, query_608496, nil, formData_608497, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_608472(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_608473, base: "/",
    url: url_PostDescribeDBEngineVersions_608474,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_608447 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBEngineVersions_608449(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBEngineVersions_608448(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: JString (required)
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_608450 = query.getOrDefault("Marker")
  valid_608450 = validateParameter(valid_608450, JString, required = false,
                                 default = nil)
  if valid_608450 != nil:
    section.add "Marker", valid_608450
  var valid_608451 = query.getOrDefault("ListSupportedTimezones")
  valid_608451 = validateParameter(valid_608451, JBool, required = false, default = nil)
  if valid_608451 != nil:
    section.add "ListSupportedTimezones", valid_608451
  var valid_608452 = query.getOrDefault("DBParameterGroupFamily")
  valid_608452 = validateParameter(valid_608452, JString, required = false,
                                 default = nil)
  if valid_608452 != nil:
    section.add "DBParameterGroupFamily", valid_608452
  var valid_608453 = query.getOrDefault("Engine")
  valid_608453 = validateParameter(valid_608453, JString, required = false,
                                 default = nil)
  if valid_608453 != nil:
    section.add "Engine", valid_608453
  var valid_608454 = query.getOrDefault("IncludeAll")
  valid_608454 = validateParameter(valid_608454, JBool, required = false, default = nil)
  if valid_608454 != nil:
    section.add "IncludeAll", valid_608454
  var valid_608455 = query.getOrDefault("EngineVersion")
  valid_608455 = validateParameter(valid_608455, JString, required = false,
                                 default = nil)
  if valid_608455 != nil:
    section.add "EngineVersion", valid_608455
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608456 = query.getOrDefault("Action")
  valid_608456 = validateParameter(valid_608456, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_608456 != nil:
    section.add "Action", valid_608456
  var valid_608457 = query.getOrDefault("ListSupportedCharacterSets")
  valid_608457 = validateParameter(valid_608457, JBool, required = false, default = nil)
  if valid_608457 != nil:
    section.add "ListSupportedCharacterSets", valid_608457
  var valid_608458 = query.getOrDefault("Version")
  valid_608458 = validateParameter(valid_608458, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608458 != nil:
    section.add "Version", valid_608458
  var valid_608459 = query.getOrDefault("Filters")
  valid_608459 = validateParameter(valid_608459, JArray, required = false,
                                 default = nil)
  if valid_608459 != nil:
    section.add "Filters", valid_608459
  var valid_608460 = query.getOrDefault("MaxRecords")
  valid_608460 = validateParameter(valid_608460, JInt, required = false, default = nil)
  if valid_608460 != nil:
    section.add "MaxRecords", valid_608460
  var valid_608461 = query.getOrDefault("DefaultOnly")
  valid_608461 = validateParameter(valid_608461, JBool, required = false, default = nil)
  if valid_608461 != nil:
    section.add "DefaultOnly", valid_608461
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608462 = header.getOrDefault("X-Amz-Signature")
  valid_608462 = validateParameter(valid_608462, JString, required = false,
                                 default = nil)
  if valid_608462 != nil:
    section.add "X-Amz-Signature", valid_608462
  var valid_608463 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608463 = validateParameter(valid_608463, JString, required = false,
                                 default = nil)
  if valid_608463 != nil:
    section.add "X-Amz-Content-Sha256", valid_608463
  var valid_608464 = header.getOrDefault("X-Amz-Date")
  valid_608464 = validateParameter(valid_608464, JString, required = false,
                                 default = nil)
  if valid_608464 != nil:
    section.add "X-Amz-Date", valid_608464
  var valid_608465 = header.getOrDefault("X-Amz-Credential")
  valid_608465 = validateParameter(valid_608465, JString, required = false,
                                 default = nil)
  if valid_608465 != nil:
    section.add "X-Amz-Credential", valid_608465
  var valid_608466 = header.getOrDefault("X-Amz-Security-Token")
  valid_608466 = validateParameter(valid_608466, JString, required = false,
                                 default = nil)
  if valid_608466 != nil:
    section.add "X-Amz-Security-Token", valid_608466
  var valid_608467 = header.getOrDefault("X-Amz-Algorithm")
  valid_608467 = validateParameter(valid_608467, JString, required = false,
                                 default = nil)
  if valid_608467 != nil:
    section.add "X-Amz-Algorithm", valid_608467
  var valid_608468 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608468 = validateParameter(valid_608468, JString, required = false,
                                 default = nil)
  if valid_608468 != nil:
    section.add "X-Amz-SignedHeaders", valid_608468
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608469: Call_GetDescribeDBEngineVersions_608447; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_608469.validator(path, query, header, formData, body)
  let scheme = call_608469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608469.url(scheme.get, call_608469.host, call_608469.base,
                         call_608469.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608469, url, valid)

proc call*(call_608470: Call_GetDescribeDBEngineVersions_608447;
          Marker: string = ""; ListSupportedTimezones: bool = false;
          DBParameterGroupFamily: string = ""; Engine: string = "";
          IncludeAll: bool = false; EngineVersion: string = "";
          Action: string = "DescribeDBEngineVersions";
          ListSupportedCharacterSets: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: string
  ##         : The database engine to return.
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: string (required)
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  var query_608471 = newJObject()
  add(query_608471, "Marker", newJString(Marker))
  add(query_608471, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_608471, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_608471, "Engine", newJString(Engine))
  add(query_608471, "IncludeAll", newJBool(IncludeAll))
  add(query_608471, "EngineVersion", newJString(EngineVersion))
  add(query_608471, "Action", newJString(Action))
  add(query_608471, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_608471, "Version", newJString(Version))
  if Filters != nil:
    query_608471.add "Filters", Filters
  add(query_608471, "MaxRecords", newJInt(MaxRecords))
  add(query_608471, "DefaultOnly", newJBool(DefaultOnly))
  result = call_608470.call(nil, query_608471, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_608447(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_608448, base: "/",
    url: url_GetDescribeDBEngineVersions_608449,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstanceAutomatedBackups_608518 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBInstanceAutomatedBackups_608520(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstanceAutomatedBackups_608519(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608521 = query.getOrDefault("Action")
  valid_608521 = validateParameter(valid_608521, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_608521 != nil:
    section.add "Action", valid_608521
  var valid_608522 = query.getOrDefault("Version")
  valid_608522 = validateParameter(valid_608522, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608522 != nil:
    section.add "Version", valid_608522
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608523 = header.getOrDefault("X-Amz-Signature")
  valid_608523 = validateParameter(valid_608523, JString, required = false,
                                 default = nil)
  if valid_608523 != nil:
    section.add "X-Amz-Signature", valid_608523
  var valid_608524 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608524 = validateParameter(valid_608524, JString, required = false,
                                 default = nil)
  if valid_608524 != nil:
    section.add "X-Amz-Content-Sha256", valid_608524
  var valid_608525 = header.getOrDefault("X-Amz-Date")
  valid_608525 = validateParameter(valid_608525, JString, required = false,
                                 default = nil)
  if valid_608525 != nil:
    section.add "X-Amz-Date", valid_608525
  var valid_608526 = header.getOrDefault("X-Amz-Credential")
  valid_608526 = validateParameter(valid_608526, JString, required = false,
                                 default = nil)
  if valid_608526 != nil:
    section.add "X-Amz-Credential", valid_608526
  var valid_608527 = header.getOrDefault("X-Amz-Security-Token")
  valid_608527 = validateParameter(valid_608527, JString, required = false,
                                 default = nil)
  if valid_608527 != nil:
    section.add "X-Amz-Security-Token", valid_608527
  var valid_608528 = header.getOrDefault("X-Amz-Algorithm")
  valid_608528 = validateParameter(valid_608528, JString, required = false,
                                 default = nil)
  if valid_608528 != nil:
    section.add "X-Amz-Algorithm", valid_608528
  var valid_608529 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608529 = validateParameter(valid_608529, JString, required = false,
                                 default = nil)
  if valid_608529 != nil:
    section.add "X-Amz-SignedHeaders", valid_608529
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  section = newJObject()
  var valid_608530 = formData.getOrDefault("MaxRecords")
  valid_608530 = validateParameter(valid_608530, JInt, required = false, default = nil)
  if valid_608530 != nil:
    section.add "MaxRecords", valid_608530
  var valid_608531 = formData.getOrDefault("Marker")
  valid_608531 = validateParameter(valid_608531, JString, required = false,
                                 default = nil)
  if valid_608531 != nil:
    section.add "Marker", valid_608531
  var valid_608532 = formData.getOrDefault("DbiResourceId")
  valid_608532 = validateParameter(valid_608532, JString, required = false,
                                 default = nil)
  if valid_608532 != nil:
    section.add "DbiResourceId", valid_608532
  var valid_608533 = formData.getOrDefault("DBInstanceIdentifier")
  valid_608533 = validateParameter(valid_608533, JString, required = false,
                                 default = nil)
  if valid_608533 != nil:
    section.add "DBInstanceIdentifier", valid_608533
  var valid_608534 = formData.getOrDefault("Filters")
  valid_608534 = validateParameter(valid_608534, JArray, required = false,
                                 default = nil)
  if valid_608534 != nil:
    section.add "Filters", valid_608534
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608535: Call_PostDescribeDBInstanceAutomatedBackups_608518;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_608535.validator(path, query, header, formData, body)
  let scheme = call_608535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608535.url(scheme.get, call_608535.host, call_608535.base,
                         call_608535.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608535, url, valid)

proc call*(call_608536: Call_PostDescribeDBInstanceAutomatedBackups_608518;
          MaxRecords: int = 0; Marker: string = ""; DbiResourceId: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   Version: string (required)
  var query_608537 = newJObject()
  var formData_608538 = newJObject()
  add(formData_608538, "MaxRecords", newJInt(MaxRecords))
  add(formData_608538, "Marker", newJString(Marker))
  add(formData_608538, "DbiResourceId", newJString(DbiResourceId))
  add(formData_608538, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608537, "Action", newJString(Action))
  if Filters != nil:
    formData_608538.add "Filters", Filters
  add(query_608537, "Version", newJString(Version))
  result = call_608536.call(nil, query_608537, nil, formData_608538, nil)

var postDescribeDBInstanceAutomatedBackups* = Call_PostDescribeDBInstanceAutomatedBackups_608518(
    name: "postDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_PostDescribeDBInstanceAutomatedBackups_608519, base: "/",
    url: url_PostDescribeDBInstanceAutomatedBackups_608520,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstanceAutomatedBackups_608498 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBInstanceAutomatedBackups_608500(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstanceAutomatedBackups_608499(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  section = newJObject()
  var valid_608501 = query.getOrDefault("DbiResourceId")
  valid_608501 = validateParameter(valid_608501, JString, required = false,
                                 default = nil)
  if valid_608501 != nil:
    section.add "DbiResourceId", valid_608501
  var valid_608502 = query.getOrDefault("Marker")
  valid_608502 = validateParameter(valid_608502, JString, required = false,
                                 default = nil)
  if valid_608502 != nil:
    section.add "Marker", valid_608502
  var valid_608503 = query.getOrDefault("DBInstanceIdentifier")
  valid_608503 = validateParameter(valid_608503, JString, required = false,
                                 default = nil)
  if valid_608503 != nil:
    section.add "DBInstanceIdentifier", valid_608503
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608504 = query.getOrDefault("Action")
  valid_608504 = validateParameter(valid_608504, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_608504 != nil:
    section.add "Action", valid_608504
  var valid_608505 = query.getOrDefault("Version")
  valid_608505 = validateParameter(valid_608505, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608505 != nil:
    section.add "Version", valid_608505
  var valid_608506 = query.getOrDefault("Filters")
  valid_608506 = validateParameter(valid_608506, JArray, required = false,
                                 default = nil)
  if valid_608506 != nil:
    section.add "Filters", valid_608506
  var valid_608507 = query.getOrDefault("MaxRecords")
  valid_608507 = validateParameter(valid_608507, JInt, required = false, default = nil)
  if valid_608507 != nil:
    section.add "MaxRecords", valid_608507
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608508 = header.getOrDefault("X-Amz-Signature")
  valid_608508 = validateParameter(valid_608508, JString, required = false,
                                 default = nil)
  if valid_608508 != nil:
    section.add "X-Amz-Signature", valid_608508
  var valid_608509 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608509 = validateParameter(valid_608509, JString, required = false,
                                 default = nil)
  if valid_608509 != nil:
    section.add "X-Amz-Content-Sha256", valid_608509
  var valid_608510 = header.getOrDefault("X-Amz-Date")
  valid_608510 = validateParameter(valid_608510, JString, required = false,
                                 default = nil)
  if valid_608510 != nil:
    section.add "X-Amz-Date", valid_608510
  var valid_608511 = header.getOrDefault("X-Amz-Credential")
  valid_608511 = validateParameter(valid_608511, JString, required = false,
                                 default = nil)
  if valid_608511 != nil:
    section.add "X-Amz-Credential", valid_608511
  var valid_608512 = header.getOrDefault("X-Amz-Security-Token")
  valid_608512 = validateParameter(valid_608512, JString, required = false,
                                 default = nil)
  if valid_608512 != nil:
    section.add "X-Amz-Security-Token", valid_608512
  var valid_608513 = header.getOrDefault("X-Amz-Algorithm")
  valid_608513 = validateParameter(valid_608513, JString, required = false,
                                 default = nil)
  if valid_608513 != nil:
    section.add "X-Amz-Algorithm", valid_608513
  var valid_608514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608514 = validateParameter(valid_608514, JString, required = false,
                                 default = nil)
  if valid_608514 != nil:
    section.add "X-Amz-SignedHeaders", valid_608514
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608515: Call_GetDescribeDBInstanceAutomatedBackups_608498;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_608515.validator(path, query, header, formData, body)
  let scheme = call_608515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608515.url(scheme.get, call_608515.host, call_608515.base,
                         call_608515.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608515, url, valid)

proc call*(call_608516: Call_GetDescribeDBInstanceAutomatedBackups_608498;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  var query_608517 = newJObject()
  add(query_608517, "DbiResourceId", newJString(DbiResourceId))
  add(query_608517, "Marker", newJString(Marker))
  add(query_608517, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608517, "Action", newJString(Action))
  add(query_608517, "Version", newJString(Version))
  if Filters != nil:
    query_608517.add "Filters", Filters
  add(query_608517, "MaxRecords", newJInt(MaxRecords))
  result = call_608516.call(nil, query_608517, nil, nil, nil)

var getDescribeDBInstanceAutomatedBackups* = Call_GetDescribeDBInstanceAutomatedBackups_608498(
    name: "getDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_GetDescribeDBInstanceAutomatedBackups_608499, base: "/",
    url: url_GetDescribeDBInstanceAutomatedBackups_608500,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_608558 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBInstances_608560(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstances_608559(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608561 = query.getOrDefault("Action")
  valid_608561 = validateParameter(valid_608561, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_608561 != nil:
    section.add "Action", valid_608561
  var valid_608562 = query.getOrDefault("Version")
  valid_608562 = validateParameter(valid_608562, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608562 != nil:
    section.add "Version", valid_608562
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608563 = header.getOrDefault("X-Amz-Signature")
  valid_608563 = validateParameter(valid_608563, JString, required = false,
                                 default = nil)
  if valid_608563 != nil:
    section.add "X-Amz-Signature", valid_608563
  var valid_608564 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608564 = validateParameter(valid_608564, JString, required = false,
                                 default = nil)
  if valid_608564 != nil:
    section.add "X-Amz-Content-Sha256", valid_608564
  var valid_608565 = header.getOrDefault("X-Amz-Date")
  valid_608565 = validateParameter(valid_608565, JString, required = false,
                                 default = nil)
  if valid_608565 != nil:
    section.add "X-Amz-Date", valid_608565
  var valid_608566 = header.getOrDefault("X-Amz-Credential")
  valid_608566 = validateParameter(valid_608566, JString, required = false,
                                 default = nil)
  if valid_608566 != nil:
    section.add "X-Amz-Credential", valid_608566
  var valid_608567 = header.getOrDefault("X-Amz-Security-Token")
  valid_608567 = validateParameter(valid_608567, JString, required = false,
                                 default = nil)
  if valid_608567 != nil:
    section.add "X-Amz-Security-Token", valid_608567
  var valid_608568 = header.getOrDefault("X-Amz-Algorithm")
  valid_608568 = validateParameter(valid_608568, JString, required = false,
                                 default = nil)
  if valid_608568 != nil:
    section.add "X-Amz-Algorithm", valid_608568
  var valid_608569 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608569 = validateParameter(valid_608569, JString, required = false,
                                 default = nil)
  if valid_608569 != nil:
    section.add "X-Amz-SignedHeaders", valid_608569
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  section = newJObject()
  var valid_608570 = formData.getOrDefault("MaxRecords")
  valid_608570 = validateParameter(valid_608570, JInt, required = false, default = nil)
  if valid_608570 != nil:
    section.add "MaxRecords", valid_608570
  var valid_608571 = formData.getOrDefault("Marker")
  valid_608571 = validateParameter(valid_608571, JString, required = false,
                                 default = nil)
  if valid_608571 != nil:
    section.add "Marker", valid_608571
  var valid_608572 = formData.getOrDefault("DBInstanceIdentifier")
  valid_608572 = validateParameter(valid_608572, JString, required = false,
                                 default = nil)
  if valid_608572 != nil:
    section.add "DBInstanceIdentifier", valid_608572
  var valid_608573 = formData.getOrDefault("Filters")
  valid_608573 = validateParameter(valid_608573, JArray, required = false,
                                 default = nil)
  if valid_608573 != nil:
    section.add "Filters", valid_608573
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608574: Call_PostDescribeDBInstances_608558; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_608574.validator(path, query, header, formData, body)
  let scheme = call_608574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608574.url(scheme.get, call_608574.host, call_608574.base,
                         call_608574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608574, url, valid)

proc call*(call_608575: Call_PostDescribeDBInstances_608558; MaxRecords: int = 0;
          Marker: string = ""; DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_608576 = newJObject()
  var formData_608577 = newJObject()
  add(formData_608577, "MaxRecords", newJInt(MaxRecords))
  add(formData_608577, "Marker", newJString(Marker))
  add(formData_608577, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608576, "Action", newJString(Action))
  if Filters != nil:
    formData_608577.add "Filters", Filters
  add(query_608576, "Version", newJString(Version))
  result = call_608575.call(nil, query_608576, nil, formData_608577, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_608558(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_608559, base: "/",
    url: url_PostDescribeDBInstances_608560, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_608539 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBInstances_608541(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstances_608540(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608542 = query.getOrDefault("Marker")
  valid_608542 = validateParameter(valid_608542, JString, required = false,
                                 default = nil)
  if valid_608542 != nil:
    section.add "Marker", valid_608542
  var valid_608543 = query.getOrDefault("DBInstanceIdentifier")
  valid_608543 = validateParameter(valid_608543, JString, required = false,
                                 default = nil)
  if valid_608543 != nil:
    section.add "DBInstanceIdentifier", valid_608543
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608544 = query.getOrDefault("Action")
  valid_608544 = validateParameter(valid_608544, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_608544 != nil:
    section.add "Action", valid_608544
  var valid_608545 = query.getOrDefault("Version")
  valid_608545 = validateParameter(valid_608545, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608545 != nil:
    section.add "Version", valid_608545
  var valid_608546 = query.getOrDefault("Filters")
  valid_608546 = validateParameter(valid_608546, JArray, required = false,
                                 default = nil)
  if valid_608546 != nil:
    section.add "Filters", valid_608546
  var valid_608547 = query.getOrDefault("MaxRecords")
  valid_608547 = validateParameter(valid_608547, JInt, required = false, default = nil)
  if valid_608547 != nil:
    section.add "MaxRecords", valid_608547
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608548 = header.getOrDefault("X-Amz-Signature")
  valid_608548 = validateParameter(valid_608548, JString, required = false,
                                 default = nil)
  if valid_608548 != nil:
    section.add "X-Amz-Signature", valid_608548
  var valid_608549 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608549 = validateParameter(valid_608549, JString, required = false,
                                 default = nil)
  if valid_608549 != nil:
    section.add "X-Amz-Content-Sha256", valid_608549
  var valid_608550 = header.getOrDefault("X-Amz-Date")
  valid_608550 = validateParameter(valid_608550, JString, required = false,
                                 default = nil)
  if valid_608550 != nil:
    section.add "X-Amz-Date", valid_608550
  var valid_608551 = header.getOrDefault("X-Amz-Credential")
  valid_608551 = validateParameter(valid_608551, JString, required = false,
                                 default = nil)
  if valid_608551 != nil:
    section.add "X-Amz-Credential", valid_608551
  var valid_608552 = header.getOrDefault("X-Amz-Security-Token")
  valid_608552 = validateParameter(valid_608552, JString, required = false,
                                 default = nil)
  if valid_608552 != nil:
    section.add "X-Amz-Security-Token", valid_608552
  var valid_608553 = header.getOrDefault("X-Amz-Algorithm")
  valid_608553 = validateParameter(valid_608553, JString, required = false,
                                 default = nil)
  if valid_608553 != nil:
    section.add "X-Amz-Algorithm", valid_608553
  var valid_608554 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608554 = validateParameter(valid_608554, JString, required = false,
                                 default = nil)
  if valid_608554 != nil:
    section.add "X-Amz-SignedHeaders", valid_608554
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608555: Call_GetDescribeDBInstances_608539; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_608555.validator(path, query, header, formData, body)
  let scheme = call_608555.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608555.url(scheme.get, call_608555.host, call_608555.base,
                         call_608555.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608555, url, valid)

proc call*(call_608556: Call_GetDescribeDBInstances_608539; Marker: string = "";
          DBInstanceIdentifier: string = ""; Action: string = "DescribeDBInstances";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstances
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608557 = newJObject()
  add(query_608557, "Marker", newJString(Marker))
  add(query_608557, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608557, "Action", newJString(Action))
  add(query_608557, "Version", newJString(Version))
  if Filters != nil:
    query_608557.add "Filters", Filters
  add(query_608557, "MaxRecords", newJInt(MaxRecords))
  result = call_608556.call(nil, query_608557, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_608539(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_608540, base: "/",
    url: url_GetDescribeDBInstances_608541, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBLogFiles_608600 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBLogFiles_608602(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBLogFiles_608601(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608603 = query.getOrDefault("Action")
  valid_608603 = validateParameter(valid_608603, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_608603 != nil:
    section.add "Action", valid_608603
  var valid_608604 = query.getOrDefault("Version")
  valid_608604 = validateParameter(valid_608604, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608604 != nil:
    section.add "Version", valid_608604
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608605 = header.getOrDefault("X-Amz-Signature")
  valid_608605 = validateParameter(valid_608605, JString, required = false,
                                 default = nil)
  if valid_608605 != nil:
    section.add "X-Amz-Signature", valid_608605
  var valid_608606 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608606 = validateParameter(valid_608606, JString, required = false,
                                 default = nil)
  if valid_608606 != nil:
    section.add "X-Amz-Content-Sha256", valid_608606
  var valid_608607 = header.getOrDefault("X-Amz-Date")
  valid_608607 = validateParameter(valid_608607, JString, required = false,
                                 default = nil)
  if valid_608607 != nil:
    section.add "X-Amz-Date", valid_608607
  var valid_608608 = header.getOrDefault("X-Amz-Credential")
  valid_608608 = validateParameter(valid_608608, JString, required = false,
                                 default = nil)
  if valid_608608 != nil:
    section.add "X-Amz-Credential", valid_608608
  var valid_608609 = header.getOrDefault("X-Amz-Security-Token")
  valid_608609 = validateParameter(valid_608609, JString, required = false,
                                 default = nil)
  if valid_608609 != nil:
    section.add "X-Amz-Security-Token", valid_608609
  var valid_608610 = header.getOrDefault("X-Amz-Algorithm")
  valid_608610 = validateParameter(valid_608610, JString, required = false,
                                 default = nil)
  if valid_608610 != nil:
    section.add "X-Amz-Algorithm", valid_608610
  var valid_608611 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608611 = validateParameter(valid_608611, JString, required = false,
                                 default = nil)
  if valid_608611 != nil:
    section.add "X-Amz-SignedHeaders", valid_608611
  result.add "header", section
  ## parameters in `formData` object:
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  section = newJObject()
  var valid_608612 = formData.getOrDefault("FileSize")
  valid_608612 = validateParameter(valid_608612, JInt, required = false, default = nil)
  if valid_608612 != nil:
    section.add "FileSize", valid_608612
  var valid_608613 = formData.getOrDefault("MaxRecords")
  valid_608613 = validateParameter(valid_608613, JInt, required = false, default = nil)
  if valid_608613 != nil:
    section.add "MaxRecords", valid_608613
  var valid_608614 = formData.getOrDefault("Marker")
  valid_608614 = validateParameter(valid_608614, JString, required = false,
                                 default = nil)
  if valid_608614 != nil:
    section.add "Marker", valid_608614
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_608615 = formData.getOrDefault("DBInstanceIdentifier")
  valid_608615 = validateParameter(valid_608615, JString, required = true,
                                 default = nil)
  if valid_608615 != nil:
    section.add "DBInstanceIdentifier", valid_608615
  var valid_608616 = formData.getOrDefault("FilenameContains")
  valid_608616 = validateParameter(valid_608616, JString, required = false,
                                 default = nil)
  if valid_608616 != nil:
    section.add "FilenameContains", valid_608616
  var valid_608617 = formData.getOrDefault("Filters")
  valid_608617 = validateParameter(valid_608617, JArray, required = false,
                                 default = nil)
  if valid_608617 != nil:
    section.add "Filters", valid_608617
  var valid_608618 = formData.getOrDefault("FileLastWritten")
  valid_608618 = validateParameter(valid_608618, JInt, required = false, default = nil)
  if valid_608618 != nil:
    section.add "FileLastWritten", valid_608618
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608619: Call_PostDescribeDBLogFiles_608600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_608619.validator(path, query, header, formData, body)
  let scheme = call_608619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608619.url(scheme.get, call_608619.host, call_608619.base,
                         call_608619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608619, url, valid)

proc call*(call_608620: Call_PostDescribeDBLogFiles_608600;
          DBInstanceIdentifier: string; FileSize: int = 0; MaxRecords: int = 0;
          Marker: string = ""; FilenameContains: string = "";
          Action: string = "DescribeDBLogFiles"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; FileLastWritten: int = 0): Recallable =
  ## postDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  var query_608621 = newJObject()
  var formData_608622 = newJObject()
  add(formData_608622, "FileSize", newJInt(FileSize))
  add(formData_608622, "MaxRecords", newJInt(MaxRecords))
  add(formData_608622, "Marker", newJString(Marker))
  add(formData_608622, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_608622, "FilenameContains", newJString(FilenameContains))
  add(query_608621, "Action", newJString(Action))
  if Filters != nil:
    formData_608622.add "Filters", Filters
  add(query_608621, "Version", newJString(Version))
  add(formData_608622, "FileLastWritten", newJInt(FileLastWritten))
  result = call_608620.call(nil, query_608621, nil, formData_608622, nil)

var postDescribeDBLogFiles* = Call_PostDescribeDBLogFiles_608600(
    name: "postDescribeDBLogFiles", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_PostDescribeDBLogFiles_608601, base: "/",
    url: url_PostDescribeDBLogFiles_608602, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBLogFiles_608578 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBLogFiles_608580(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBLogFiles_608579(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: JString (required)
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  section = newJObject()
  var valid_608581 = query.getOrDefault("Marker")
  valid_608581 = validateParameter(valid_608581, JString, required = false,
                                 default = nil)
  if valid_608581 != nil:
    section.add "Marker", valid_608581
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_608582 = query.getOrDefault("DBInstanceIdentifier")
  valid_608582 = validateParameter(valid_608582, JString, required = true,
                                 default = nil)
  if valid_608582 != nil:
    section.add "DBInstanceIdentifier", valid_608582
  var valid_608583 = query.getOrDefault("FileLastWritten")
  valid_608583 = validateParameter(valid_608583, JInt, required = false, default = nil)
  if valid_608583 != nil:
    section.add "FileLastWritten", valid_608583
  var valid_608584 = query.getOrDefault("Action")
  valid_608584 = validateParameter(valid_608584, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_608584 != nil:
    section.add "Action", valid_608584
  var valid_608585 = query.getOrDefault("FilenameContains")
  valid_608585 = validateParameter(valid_608585, JString, required = false,
                                 default = nil)
  if valid_608585 != nil:
    section.add "FilenameContains", valid_608585
  var valid_608586 = query.getOrDefault("Version")
  valid_608586 = validateParameter(valid_608586, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608586 != nil:
    section.add "Version", valid_608586
  var valid_608587 = query.getOrDefault("Filters")
  valid_608587 = validateParameter(valid_608587, JArray, required = false,
                                 default = nil)
  if valid_608587 != nil:
    section.add "Filters", valid_608587
  var valid_608588 = query.getOrDefault("MaxRecords")
  valid_608588 = validateParameter(valid_608588, JInt, required = false, default = nil)
  if valid_608588 != nil:
    section.add "MaxRecords", valid_608588
  var valid_608589 = query.getOrDefault("FileSize")
  valid_608589 = validateParameter(valid_608589, JInt, required = false, default = nil)
  if valid_608589 != nil:
    section.add "FileSize", valid_608589
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608590 = header.getOrDefault("X-Amz-Signature")
  valid_608590 = validateParameter(valid_608590, JString, required = false,
                                 default = nil)
  if valid_608590 != nil:
    section.add "X-Amz-Signature", valid_608590
  var valid_608591 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608591 = validateParameter(valid_608591, JString, required = false,
                                 default = nil)
  if valid_608591 != nil:
    section.add "X-Amz-Content-Sha256", valid_608591
  var valid_608592 = header.getOrDefault("X-Amz-Date")
  valid_608592 = validateParameter(valid_608592, JString, required = false,
                                 default = nil)
  if valid_608592 != nil:
    section.add "X-Amz-Date", valid_608592
  var valid_608593 = header.getOrDefault("X-Amz-Credential")
  valid_608593 = validateParameter(valid_608593, JString, required = false,
                                 default = nil)
  if valid_608593 != nil:
    section.add "X-Amz-Credential", valid_608593
  var valid_608594 = header.getOrDefault("X-Amz-Security-Token")
  valid_608594 = validateParameter(valid_608594, JString, required = false,
                                 default = nil)
  if valid_608594 != nil:
    section.add "X-Amz-Security-Token", valid_608594
  var valid_608595 = header.getOrDefault("X-Amz-Algorithm")
  valid_608595 = validateParameter(valid_608595, JString, required = false,
                                 default = nil)
  if valid_608595 != nil:
    section.add "X-Amz-Algorithm", valid_608595
  var valid_608596 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608596 = validateParameter(valid_608596, JString, required = false,
                                 default = nil)
  if valid_608596 != nil:
    section.add "X-Amz-SignedHeaders", valid_608596
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608597: Call_GetDescribeDBLogFiles_608578; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_608597.validator(path, query, header, formData, body)
  let scheme = call_608597.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608597.url(scheme.get, call_608597.host, call_608597.base,
                         call_608597.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608597, url, valid)

proc call*(call_608598: Call_GetDescribeDBLogFiles_608578;
          DBInstanceIdentifier: string; Marker: string = ""; FileLastWritten: int = 0;
          Action: string = "DescribeDBLogFiles"; FilenameContains: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          FileSize: int = 0): Recallable =
  ## getDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: string (required)
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  var query_608599 = newJObject()
  add(query_608599, "Marker", newJString(Marker))
  add(query_608599, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608599, "FileLastWritten", newJInt(FileLastWritten))
  add(query_608599, "Action", newJString(Action))
  add(query_608599, "FilenameContains", newJString(FilenameContains))
  add(query_608599, "Version", newJString(Version))
  if Filters != nil:
    query_608599.add "Filters", Filters
  add(query_608599, "MaxRecords", newJInt(MaxRecords))
  add(query_608599, "FileSize", newJInt(FileSize))
  result = call_608598.call(nil, query_608599, nil, nil, nil)

var getDescribeDBLogFiles* = Call_GetDescribeDBLogFiles_608578(
    name: "getDescribeDBLogFiles", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_GetDescribeDBLogFiles_608579, base: "/",
    url: url_GetDescribeDBLogFiles_608580, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_608642 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBParameterGroups_608644(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameterGroups_608643(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608645 = query.getOrDefault("Action")
  valid_608645 = validateParameter(valid_608645, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_608645 != nil:
    section.add "Action", valid_608645
  var valid_608646 = query.getOrDefault("Version")
  valid_608646 = validateParameter(valid_608646, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608646 != nil:
    section.add "Version", valid_608646
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608647 = header.getOrDefault("X-Amz-Signature")
  valid_608647 = validateParameter(valid_608647, JString, required = false,
                                 default = nil)
  if valid_608647 != nil:
    section.add "X-Amz-Signature", valid_608647
  var valid_608648 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608648 = validateParameter(valid_608648, JString, required = false,
                                 default = nil)
  if valid_608648 != nil:
    section.add "X-Amz-Content-Sha256", valid_608648
  var valid_608649 = header.getOrDefault("X-Amz-Date")
  valid_608649 = validateParameter(valid_608649, JString, required = false,
                                 default = nil)
  if valid_608649 != nil:
    section.add "X-Amz-Date", valid_608649
  var valid_608650 = header.getOrDefault("X-Amz-Credential")
  valid_608650 = validateParameter(valid_608650, JString, required = false,
                                 default = nil)
  if valid_608650 != nil:
    section.add "X-Amz-Credential", valid_608650
  var valid_608651 = header.getOrDefault("X-Amz-Security-Token")
  valid_608651 = validateParameter(valid_608651, JString, required = false,
                                 default = nil)
  if valid_608651 != nil:
    section.add "X-Amz-Security-Token", valid_608651
  var valid_608652 = header.getOrDefault("X-Amz-Algorithm")
  valid_608652 = validateParameter(valid_608652, JString, required = false,
                                 default = nil)
  if valid_608652 != nil:
    section.add "X-Amz-Algorithm", valid_608652
  var valid_608653 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608653 = validateParameter(valid_608653, JString, required = false,
                                 default = nil)
  if valid_608653 != nil:
    section.add "X-Amz-SignedHeaders", valid_608653
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_608654 = formData.getOrDefault("MaxRecords")
  valid_608654 = validateParameter(valid_608654, JInt, required = false, default = nil)
  if valid_608654 != nil:
    section.add "MaxRecords", valid_608654
  var valid_608655 = formData.getOrDefault("DBParameterGroupName")
  valid_608655 = validateParameter(valid_608655, JString, required = false,
                                 default = nil)
  if valid_608655 != nil:
    section.add "DBParameterGroupName", valid_608655
  var valid_608656 = formData.getOrDefault("Marker")
  valid_608656 = validateParameter(valid_608656, JString, required = false,
                                 default = nil)
  if valid_608656 != nil:
    section.add "Marker", valid_608656
  var valid_608657 = formData.getOrDefault("Filters")
  valid_608657 = validateParameter(valid_608657, JArray, required = false,
                                 default = nil)
  if valid_608657 != nil:
    section.add "Filters", valid_608657
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608658: Call_PostDescribeDBParameterGroups_608642; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_608658.validator(path, query, header, formData, body)
  let scheme = call_608658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608658.url(scheme.get, call_608658.host, call_608658.base,
                         call_608658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608658, url, valid)

proc call*(call_608659: Call_PostDescribeDBParameterGroups_608642;
          MaxRecords: int = 0; DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_608660 = newJObject()
  var formData_608661 = newJObject()
  add(formData_608661, "MaxRecords", newJInt(MaxRecords))
  add(formData_608661, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_608661, "Marker", newJString(Marker))
  add(query_608660, "Action", newJString(Action))
  if Filters != nil:
    formData_608661.add "Filters", Filters
  add(query_608660, "Version", newJString(Version))
  result = call_608659.call(nil, query_608660, nil, formData_608661, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_608642(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_608643, base: "/",
    url: url_PostDescribeDBParameterGroups_608644,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_608623 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBParameterGroups_608625(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameterGroups_608624(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608626 = query.getOrDefault("Marker")
  valid_608626 = validateParameter(valid_608626, JString, required = false,
                                 default = nil)
  if valid_608626 != nil:
    section.add "Marker", valid_608626
  var valid_608627 = query.getOrDefault("DBParameterGroupName")
  valid_608627 = validateParameter(valid_608627, JString, required = false,
                                 default = nil)
  if valid_608627 != nil:
    section.add "DBParameterGroupName", valid_608627
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608628 = query.getOrDefault("Action")
  valid_608628 = validateParameter(valid_608628, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_608628 != nil:
    section.add "Action", valid_608628
  var valid_608629 = query.getOrDefault("Version")
  valid_608629 = validateParameter(valid_608629, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608629 != nil:
    section.add "Version", valid_608629
  var valid_608630 = query.getOrDefault("Filters")
  valid_608630 = validateParameter(valid_608630, JArray, required = false,
                                 default = nil)
  if valid_608630 != nil:
    section.add "Filters", valid_608630
  var valid_608631 = query.getOrDefault("MaxRecords")
  valid_608631 = validateParameter(valid_608631, JInt, required = false, default = nil)
  if valid_608631 != nil:
    section.add "MaxRecords", valid_608631
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608632 = header.getOrDefault("X-Amz-Signature")
  valid_608632 = validateParameter(valid_608632, JString, required = false,
                                 default = nil)
  if valid_608632 != nil:
    section.add "X-Amz-Signature", valid_608632
  var valid_608633 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608633 = validateParameter(valid_608633, JString, required = false,
                                 default = nil)
  if valid_608633 != nil:
    section.add "X-Amz-Content-Sha256", valid_608633
  var valid_608634 = header.getOrDefault("X-Amz-Date")
  valid_608634 = validateParameter(valid_608634, JString, required = false,
                                 default = nil)
  if valid_608634 != nil:
    section.add "X-Amz-Date", valid_608634
  var valid_608635 = header.getOrDefault("X-Amz-Credential")
  valid_608635 = validateParameter(valid_608635, JString, required = false,
                                 default = nil)
  if valid_608635 != nil:
    section.add "X-Amz-Credential", valid_608635
  var valid_608636 = header.getOrDefault("X-Amz-Security-Token")
  valid_608636 = validateParameter(valid_608636, JString, required = false,
                                 default = nil)
  if valid_608636 != nil:
    section.add "X-Amz-Security-Token", valid_608636
  var valid_608637 = header.getOrDefault("X-Amz-Algorithm")
  valid_608637 = validateParameter(valid_608637, JString, required = false,
                                 default = nil)
  if valid_608637 != nil:
    section.add "X-Amz-Algorithm", valid_608637
  var valid_608638 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608638 = validateParameter(valid_608638, JString, required = false,
                                 default = nil)
  if valid_608638 != nil:
    section.add "X-Amz-SignedHeaders", valid_608638
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608639: Call_GetDescribeDBParameterGroups_608623; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_608639.validator(path, query, header, formData, body)
  let scheme = call_608639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608639.url(scheme.get, call_608639.host, call_608639.base,
                         call_608639.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608639, url, valid)

proc call*(call_608640: Call_GetDescribeDBParameterGroups_608623;
          Marker: string = ""; DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608641 = newJObject()
  add(query_608641, "Marker", newJString(Marker))
  add(query_608641, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_608641, "Action", newJString(Action))
  add(query_608641, "Version", newJString(Version))
  if Filters != nil:
    query_608641.add "Filters", Filters
  add(query_608641, "MaxRecords", newJInt(MaxRecords))
  result = call_608640.call(nil, query_608641, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_608623(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_608624, base: "/",
    url: url_GetDescribeDBParameterGroups_608625,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_608682 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBParameters_608684(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameters_608683(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608685 = query.getOrDefault("Action")
  valid_608685 = validateParameter(valid_608685, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_608685 != nil:
    section.add "Action", valid_608685
  var valid_608686 = query.getOrDefault("Version")
  valid_608686 = validateParameter(valid_608686, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608686 != nil:
    section.add "Version", valid_608686
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608687 = header.getOrDefault("X-Amz-Signature")
  valid_608687 = validateParameter(valid_608687, JString, required = false,
                                 default = nil)
  if valid_608687 != nil:
    section.add "X-Amz-Signature", valid_608687
  var valid_608688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608688 = validateParameter(valid_608688, JString, required = false,
                                 default = nil)
  if valid_608688 != nil:
    section.add "X-Amz-Content-Sha256", valid_608688
  var valid_608689 = header.getOrDefault("X-Amz-Date")
  valid_608689 = validateParameter(valid_608689, JString, required = false,
                                 default = nil)
  if valid_608689 != nil:
    section.add "X-Amz-Date", valid_608689
  var valid_608690 = header.getOrDefault("X-Amz-Credential")
  valid_608690 = validateParameter(valid_608690, JString, required = false,
                                 default = nil)
  if valid_608690 != nil:
    section.add "X-Amz-Credential", valid_608690
  var valid_608691 = header.getOrDefault("X-Amz-Security-Token")
  valid_608691 = validateParameter(valid_608691, JString, required = false,
                                 default = nil)
  if valid_608691 != nil:
    section.add "X-Amz-Security-Token", valid_608691
  var valid_608692 = header.getOrDefault("X-Amz-Algorithm")
  valid_608692 = validateParameter(valid_608692, JString, required = false,
                                 default = nil)
  if valid_608692 != nil:
    section.add "X-Amz-Algorithm", valid_608692
  var valid_608693 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608693 = validateParameter(valid_608693, JString, required = false,
                                 default = nil)
  if valid_608693 != nil:
    section.add "X-Amz-SignedHeaders", valid_608693
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_608694 = formData.getOrDefault("Source")
  valid_608694 = validateParameter(valid_608694, JString, required = false,
                                 default = nil)
  if valid_608694 != nil:
    section.add "Source", valid_608694
  var valid_608695 = formData.getOrDefault("MaxRecords")
  valid_608695 = validateParameter(valid_608695, JInt, required = false, default = nil)
  if valid_608695 != nil:
    section.add "MaxRecords", valid_608695
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_608696 = formData.getOrDefault("DBParameterGroupName")
  valid_608696 = validateParameter(valid_608696, JString, required = true,
                                 default = nil)
  if valid_608696 != nil:
    section.add "DBParameterGroupName", valid_608696
  var valid_608697 = formData.getOrDefault("Marker")
  valid_608697 = validateParameter(valid_608697, JString, required = false,
                                 default = nil)
  if valid_608697 != nil:
    section.add "Marker", valid_608697
  var valid_608698 = formData.getOrDefault("Filters")
  valid_608698 = validateParameter(valid_608698, JArray, required = false,
                                 default = nil)
  if valid_608698 != nil:
    section.add "Filters", valid_608698
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608699: Call_PostDescribeDBParameters_608682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_608699.validator(path, query, header, formData, body)
  let scheme = call_608699.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608699.url(scheme.get, call_608699.host, call_608699.base,
                         call_608699.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608699, url, valid)

proc call*(call_608700: Call_PostDescribeDBParameters_608682;
          DBParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_608701 = newJObject()
  var formData_608702 = newJObject()
  add(formData_608702, "Source", newJString(Source))
  add(formData_608702, "MaxRecords", newJInt(MaxRecords))
  add(formData_608702, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_608702, "Marker", newJString(Marker))
  add(query_608701, "Action", newJString(Action))
  if Filters != nil:
    formData_608702.add "Filters", Filters
  add(query_608701, "Version", newJString(Version))
  result = call_608700.call(nil, query_608701, nil, formData_608702, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_608682(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_608683, base: "/",
    url: url_PostDescribeDBParameters_608684, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_608662 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBParameters_608664(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameters_608663(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608665 = query.getOrDefault("Marker")
  valid_608665 = validateParameter(valid_608665, JString, required = false,
                                 default = nil)
  if valid_608665 != nil:
    section.add "Marker", valid_608665
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_608666 = query.getOrDefault("DBParameterGroupName")
  valid_608666 = validateParameter(valid_608666, JString, required = true,
                                 default = nil)
  if valid_608666 != nil:
    section.add "DBParameterGroupName", valid_608666
  var valid_608667 = query.getOrDefault("Source")
  valid_608667 = validateParameter(valid_608667, JString, required = false,
                                 default = nil)
  if valid_608667 != nil:
    section.add "Source", valid_608667
  var valid_608668 = query.getOrDefault("Action")
  valid_608668 = validateParameter(valid_608668, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_608668 != nil:
    section.add "Action", valid_608668
  var valid_608669 = query.getOrDefault("Version")
  valid_608669 = validateParameter(valid_608669, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608669 != nil:
    section.add "Version", valid_608669
  var valid_608670 = query.getOrDefault("Filters")
  valid_608670 = validateParameter(valid_608670, JArray, required = false,
                                 default = nil)
  if valid_608670 != nil:
    section.add "Filters", valid_608670
  var valid_608671 = query.getOrDefault("MaxRecords")
  valid_608671 = validateParameter(valid_608671, JInt, required = false, default = nil)
  if valid_608671 != nil:
    section.add "MaxRecords", valid_608671
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608672 = header.getOrDefault("X-Amz-Signature")
  valid_608672 = validateParameter(valid_608672, JString, required = false,
                                 default = nil)
  if valid_608672 != nil:
    section.add "X-Amz-Signature", valid_608672
  var valid_608673 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608673 = validateParameter(valid_608673, JString, required = false,
                                 default = nil)
  if valid_608673 != nil:
    section.add "X-Amz-Content-Sha256", valid_608673
  var valid_608674 = header.getOrDefault("X-Amz-Date")
  valid_608674 = validateParameter(valid_608674, JString, required = false,
                                 default = nil)
  if valid_608674 != nil:
    section.add "X-Amz-Date", valid_608674
  var valid_608675 = header.getOrDefault("X-Amz-Credential")
  valid_608675 = validateParameter(valid_608675, JString, required = false,
                                 default = nil)
  if valid_608675 != nil:
    section.add "X-Amz-Credential", valid_608675
  var valid_608676 = header.getOrDefault("X-Amz-Security-Token")
  valid_608676 = validateParameter(valid_608676, JString, required = false,
                                 default = nil)
  if valid_608676 != nil:
    section.add "X-Amz-Security-Token", valid_608676
  var valid_608677 = header.getOrDefault("X-Amz-Algorithm")
  valid_608677 = validateParameter(valid_608677, JString, required = false,
                                 default = nil)
  if valid_608677 != nil:
    section.add "X-Amz-Algorithm", valid_608677
  var valid_608678 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608678 = validateParameter(valid_608678, JString, required = false,
                                 default = nil)
  if valid_608678 != nil:
    section.add "X-Amz-SignedHeaders", valid_608678
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608679: Call_GetDescribeDBParameters_608662; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_608679.validator(path, query, header, formData, body)
  let scheme = call_608679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608679.url(scheme.get, call_608679.host, call_608679.base,
                         call_608679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608679, url, valid)

proc call*(call_608680: Call_GetDescribeDBParameters_608662;
          DBParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeDBParameters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608681 = newJObject()
  add(query_608681, "Marker", newJString(Marker))
  add(query_608681, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_608681, "Source", newJString(Source))
  add(query_608681, "Action", newJString(Action))
  add(query_608681, "Version", newJString(Version))
  if Filters != nil:
    query_608681.add "Filters", Filters
  add(query_608681, "MaxRecords", newJInt(MaxRecords))
  result = call_608680.call(nil, query_608681, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_608662(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_608663, base: "/",
    url: url_GetDescribeDBParameters_608664, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxies_608722 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBProxies_608724(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxies_608723(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608725 = query.getOrDefault("Action")
  valid_608725 = validateParameter(valid_608725, JString, required = true,
                                 default = newJString("DescribeDBProxies"))
  if valid_608725 != nil:
    section.add "Action", valid_608725
  var valid_608726 = query.getOrDefault("Version")
  valid_608726 = validateParameter(valid_608726, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608726 != nil:
    section.add "Version", valid_608726
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608727 = header.getOrDefault("X-Amz-Signature")
  valid_608727 = validateParameter(valid_608727, JString, required = false,
                                 default = nil)
  if valid_608727 != nil:
    section.add "X-Amz-Signature", valid_608727
  var valid_608728 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608728 = validateParameter(valid_608728, JString, required = false,
                                 default = nil)
  if valid_608728 != nil:
    section.add "X-Amz-Content-Sha256", valid_608728
  var valid_608729 = header.getOrDefault("X-Amz-Date")
  valid_608729 = validateParameter(valid_608729, JString, required = false,
                                 default = nil)
  if valid_608729 != nil:
    section.add "X-Amz-Date", valid_608729
  var valid_608730 = header.getOrDefault("X-Amz-Credential")
  valid_608730 = validateParameter(valid_608730, JString, required = false,
                                 default = nil)
  if valid_608730 != nil:
    section.add "X-Amz-Credential", valid_608730
  var valid_608731 = header.getOrDefault("X-Amz-Security-Token")
  valid_608731 = validateParameter(valid_608731, JString, required = false,
                                 default = nil)
  if valid_608731 != nil:
    section.add "X-Amz-Security-Token", valid_608731
  var valid_608732 = header.getOrDefault("X-Amz-Algorithm")
  valid_608732 = validateParameter(valid_608732, JString, required = false,
                                 default = nil)
  if valid_608732 != nil:
    section.add "X-Amz-Algorithm", valid_608732
  var valid_608733 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608733 = validateParameter(valid_608733, JString, required = false,
                                 default = nil)
  if valid_608733 != nil:
    section.add "X-Amz-SignedHeaders", valid_608733
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_608734 = formData.getOrDefault("MaxRecords")
  valid_608734 = validateParameter(valid_608734, JInt, required = false, default = nil)
  if valid_608734 != nil:
    section.add "MaxRecords", valid_608734
  var valid_608735 = formData.getOrDefault("Marker")
  valid_608735 = validateParameter(valid_608735, JString, required = false,
                                 default = nil)
  if valid_608735 != nil:
    section.add "Marker", valid_608735
  var valid_608736 = formData.getOrDefault("DBProxyName")
  valid_608736 = validateParameter(valid_608736, JString, required = false,
                                 default = nil)
  if valid_608736 != nil:
    section.add "DBProxyName", valid_608736
  var valid_608737 = formData.getOrDefault("Filters")
  valid_608737 = validateParameter(valid_608737, JArray, required = false,
                                 default = nil)
  if valid_608737 != nil:
    section.add "Filters", valid_608737
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608738: Call_PostDescribeDBProxies_608722; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  let valid = call_608738.validator(path, query, header, formData, body)
  let scheme = call_608738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608738.url(scheme.get, call_608738.host, call_608738.base,
                         call_608738.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608738, url, valid)

proc call*(call_608739: Call_PostDescribeDBProxies_608722; MaxRecords: int = 0;
          Marker: string = ""; DBProxyName: string = "";
          Action: string = "DescribeDBProxies"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxies
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string
  ##              : The name of the DB proxy.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_608740 = newJObject()
  var formData_608741 = newJObject()
  add(formData_608741, "MaxRecords", newJInt(MaxRecords))
  add(formData_608741, "Marker", newJString(Marker))
  add(formData_608741, "DBProxyName", newJString(DBProxyName))
  add(query_608740, "Action", newJString(Action))
  if Filters != nil:
    formData_608741.add "Filters", Filters
  add(query_608740, "Version", newJString(Version))
  result = call_608739.call(nil, query_608740, nil, formData_608741, nil)

var postDescribeDBProxies* = Call_PostDescribeDBProxies_608722(
    name: "postDescribeDBProxies", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxies",
    validator: validate_PostDescribeDBProxies_608723, base: "/",
    url: url_PostDescribeDBProxies_608724, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxies_608703 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBProxies_608705(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxies_608704(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608706 = query.getOrDefault("Marker")
  valid_608706 = validateParameter(valid_608706, JString, required = false,
                                 default = nil)
  if valid_608706 != nil:
    section.add "Marker", valid_608706
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608707 = query.getOrDefault("Action")
  valid_608707 = validateParameter(valid_608707, JString, required = true,
                                 default = newJString("DescribeDBProxies"))
  if valid_608707 != nil:
    section.add "Action", valid_608707
  var valid_608708 = query.getOrDefault("Version")
  valid_608708 = validateParameter(valid_608708, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608708 != nil:
    section.add "Version", valid_608708
  var valid_608709 = query.getOrDefault("DBProxyName")
  valid_608709 = validateParameter(valid_608709, JString, required = false,
                                 default = nil)
  if valid_608709 != nil:
    section.add "DBProxyName", valid_608709
  var valid_608710 = query.getOrDefault("Filters")
  valid_608710 = validateParameter(valid_608710, JArray, required = false,
                                 default = nil)
  if valid_608710 != nil:
    section.add "Filters", valid_608710
  var valid_608711 = query.getOrDefault("MaxRecords")
  valid_608711 = validateParameter(valid_608711, JInt, required = false, default = nil)
  if valid_608711 != nil:
    section.add "MaxRecords", valid_608711
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608712 = header.getOrDefault("X-Amz-Signature")
  valid_608712 = validateParameter(valid_608712, JString, required = false,
                                 default = nil)
  if valid_608712 != nil:
    section.add "X-Amz-Signature", valid_608712
  var valid_608713 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608713 = validateParameter(valid_608713, JString, required = false,
                                 default = nil)
  if valid_608713 != nil:
    section.add "X-Amz-Content-Sha256", valid_608713
  var valid_608714 = header.getOrDefault("X-Amz-Date")
  valid_608714 = validateParameter(valid_608714, JString, required = false,
                                 default = nil)
  if valid_608714 != nil:
    section.add "X-Amz-Date", valid_608714
  var valid_608715 = header.getOrDefault("X-Amz-Credential")
  valid_608715 = validateParameter(valid_608715, JString, required = false,
                                 default = nil)
  if valid_608715 != nil:
    section.add "X-Amz-Credential", valid_608715
  var valid_608716 = header.getOrDefault("X-Amz-Security-Token")
  valid_608716 = validateParameter(valid_608716, JString, required = false,
                                 default = nil)
  if valid_608716 != nil:
    section.add "X-Amz-Security-Token", valid_608716
  var valid_608717 = header.getOrDefault("X-Amz-Algorithm")
  valid_608717 = validateParameter(valid_608717, JString, required = false,
                                 default = nil)
  if valid_608717 != nil:
    section.add "X-Amz-Algorithm", valid_608717
  var valid_608718 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608718 = validateParameter(valid_608718, JString, required = false,
                                 default = nil)
  if valid_608718 != nil:
    section.add "X-Amz-SignedHeaders", valid_608718
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608719: Call_GetDescribeDBProxies_608703; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  let valid = call_608719.validator(path, query, header, formData, body)
  let scheme = call_608719.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608719.url(scheme.get, call_608719.host, call_608719.base,
                         call_608719.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608719, url, valid)

proc call*(call_608720: Call_GetDescribeDBProxies_608703; Marker: string = "";
          Action: string = "DescribeDBProxies"; Version: string = "2014-10-31";
          DBProxyName: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxies
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608721 = newJObject()
  add(query_608721, "Marker", newJString(Marker))
  add(query_608721, "Action", newJString(Action))
  add(query_608721, "Version", newJString(Version))
  add(query_608721, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_608721.add "Filters", Filters
  add(query_608721, "MaxRecords", newJInt(MaxRecords))
  result = call_608720.call(nil, query_608721, nil, nil, nil)

var getDescribeDBProxies* = Call_GetDescribeDBProxies_608703(
    name: "getDescribeDBProxies", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxies",
    validator: validate_GetDescribeDBProxies_608704, base: "/",
    url: url_GetDescribeDBProxies_608705, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxyTargetGroups_608762 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBProxyTargetGroups_608764(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxyTargetGroups_608763(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608765 = query.getOrDefault("Action")
  valid_608765 = validateParameter(valid_608765, JString, required = true, default = newJString(
      "DescribeDBProxyTargetGroups"))
  if valid_608765 != nil:
    section.add "Action", valid_608765
  var valid_608766 = query.getOrDefault("Version")
  valid_608766 = validateParameter(valid_608766, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608766 != nil:
    section.add "Version", valid_608766
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608767 = header.getOrDefault("X-Amz-Signature")
  valid_608767 = validateParameter(valid_608767, JString, required = false,
                                 default = nil)
  if valid_608767 != nil:
    section.add "X-Amz-Signature", valid_608767
  var valid_608768 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608768 = validateParameter(valid_608768, JString, required = false,
                                 default = nil)
  if valid_608768 != nil:
    section.add "X-Amz-Content-Sha256", valid_608768
  var valid_608769 = header.getOrDefault("X-Amz-Date")
  valid_608769 = validateParameter(valid_608769, JString, required = false,
                                 default = nil)
  if valid_608769 != nil:
    section.add "X-Amz-Date", valid_608769
  var valid_608770 = header.getOrDefault("X-Amz-Credential")
  valid_608770 = validateParameter(valid_608770, JString, required = false,
                                 default = nil)
  if valid_608770 != nil:
    section.add "X-Amz-Credential", valid_608770
  var valid_608771 = header.getOrDefault("X-Amz-Security-Token")
  valid_608771 = validateParameter(valid_608771, JString, required = false,
                                 default = nil)
  if valid_608771 != nil:
    section.add "X-Amz-Security-Token", valid_608771
  var valid_608772 = header.getOrDefault("X-Amz-Algorithm")
  valid_608772 = validateParameter(valid_608772, JString, required = false,
                                 default = nil)
  if valid_608772 != nil:
    section.add "X-Amz-Algorithm", valid_608772
  var valid_608773 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608773 = validateParameter(valid_608773, JString, required = false,
                                 default = nil)
  if valid_608773 != nil:
    section.add "X-Amz-SignedHeaders", valid_608773
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_608774 = formData.getOrDefault("MaxRecords")
  valid_608774 = validateParameter(valid_608774, JInt, required = false, default = nil)
  if valid_608774 != nil:
    section.add "MaxRecords", valid_608774
  var valid_608775 = formData.getOrDefault("TargetGroupName")
  valid_608775 = validateParameter(valid_608775, JString, required = false,
                                 default = nil)
  if valid_608775 != nil:
    section.add "TargetGroupName", valid_608775
  var valid_608776 = formData.getOrDefault("Marker")
  valid_608776 = validateParameter(valid_608776, JString, required = false,
                                 default = nil)
  if valid_608776 != nil:
    section.add "Marker", valid_608776
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_608777 = formData.getOrDefault("DBProxyName")
  valid_608777 = validateParameter(valid_608777, JString, required = true,
                                 default = nil)
  if valid_608777 != nil:
    section.add "DBProxyName", valid_608777
  var valid_608778 = formData.getOrDefault("Filters")
  valid_608778 = validateParameter(valid_608778, JArray, required = false,
                                 default = nil)
  if valid_608778 != nil:
    section.add "Filters", valid_608778
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608779: Call_PostDescribeDBProxyTargetGroups_608762;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  let valid = call_608779.validator(path, query, header, formData, body)
  let scheme = call_608779.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608779.url(scheme.get, call_608779.host, call_608779.base,
                         call_608779.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608779, url, valid)

proc call*(call_608780: Call_PostDescribeDBProxyTargetGroups_608762;
          DBProxyName: string; MaxRecords: int = 0; TargetGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeDBProxyTargetGroups";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxyTargetGroups
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_608781 = newJObject()
  var formData_608782 = newJObject()
  add(formData_608782, "MaxRecords", newJInt(MaxRecords))
  add(formData_608782, "TargetGroupName", newJString(TargetGroupName))
  add(formData_608782, "Marker", newJString(Marker))
  add(formData_608782, "DBProxyName", newJString(DBProxyName))
  add(query_608781, "Action", newJString(Action))
  if Filters != nil:
    formData_608782.add "Filters", Filters
  add(query_608781, "Version", newJString(Version))
  result = call_608780.call(nil, query_608781, nil, formData_608782, nil)

var postDescribeDBProxyTargetGroups* = Call_PostDescribeDBProxyTargetGroups_608762(
    name: "postDescribeDBProxyTargetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargetGroups",
    validator: validate_PostDescribeDBProxyTargetGroups_608763, base: "/",
    url: url_PostDescribeDBProxyTargetGroups_608764,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxyTargetGroups_608742 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBProxyTargetGroups_608744(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxyTargetGroups_608743(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608745 = query.getOrDefault("Marker")
  valid_608745 = validateParameter(valid_608745, JString, required = false,
                                 default = nil)
  if valid_608745 != nil:
    section.add "Marker", valid_608745
  var valid_608746 = query.getOrDefault("TargetGroupName")
  valid_608746 = validateParameter(valid_608746, JString, required = false,
                                 default = nil)
  if valid_608746 != nil:
    section.add "TargetGroupName", valid_608746
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608747 = query.getOrDefault("Action")
  valid_608747 = validateParameter(valid_608747, JString, required = true, default = newJString(
      "DescribeDBProxyTargetGroups"))
  if valid_608747 != nil:
    section.add "Action", valid_608747
  var valid_608748 = query.getOrDefault("Version")
  valid_608748 = validateParameter(valid_608748, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608748 != nil:
    section.add "Version", valid_608748
  var valid_608749 = query.getOrDefault("DBProxyName")
  valid_608749 = validateParameter(valid_608749, JString, required = true,
                                 default = nil)
  if valid_608749 != nil:
    section.add "DBProxyName", valid_608749
  var valid_608750 = query.getOrDefault("Filters")
  valid_608750 = validateParameter(valid_608750, JArray, required = false,
                                 default = nil)
  if valid_608750 != nil:
    section.add "Filters", valid_608750
  var valid_608751 = query.getOrDefault("MaxRecords")
  valid_608751 = validateParameter(valid_608751, JInt, required = false, default = nil)
  if valid_608751 != nil:
    section.add "MaxRecords", valid_608751
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608752 = header.getOrDefault("X-Amz-Signature")
  valid_608752 = validateParameter(valid_608752, JString, required = false,
                                 default = nil)
  if valid_608752 != nil:
    section.add "X-Amz-Signature", valid_608752
  var valid_608753 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608753 = validateParameter(valid_608753, JString, required = false,
                                 default = nil)
  if valid_608753 != nil:
    section.add "X-Amz-Content-Sha256", valid_608753
  var valid_608754 = header.getOrDefault("X-Amz-Date")
  valid_608754 = validateParameter(valid_608754, JString, required = false,
                                 default = nil)
  if valid_608754 != nil:
    section.add "X-Amz-Date", valid_608754
  var valid_608755 = header.getOrDefault("X-Amz-Credential")
  valid_608755 = validateParameter(valid_608755, JString, required = false,
                                 default = nil)
  if valid_608755 != nil:
    section.add "X-Amz-Credential", valid_608755
  var valid_608756 = header.getOrDefault("X-Amz-Security-Token")
  valid_608756 = validateParameter(valid_608756, JString, required = false,
                                 default = nil)
  if valid_608756 != nil:
    section.add "X-Amz-Security-Token", valid_608756
  var valid_608757 = header.getOrDefault("X-Amz-Algorithm")
  valid_608757 = validateParameter(valid_608757, JString, required = false,
                                 default = nil)
  if valid_608757 != nil:
    section.add "X-Amz-Algorithm", valid_608757
  var valid_608758 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608758 = validateParameter(valid_608758, JString, required = false,
                                 default = nil)
  if valid_608758 != nil:
    section.add "X-Amz-SignedHeaders", valid_608758
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608759: Call_GetDescribeDBProxyTargetGroups_608742; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  let valid = call_608759.validator(path, query, header, formData, body)
  let scheme = call_608759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608759.url(scheme.get, call_608759.host, call_608759.base,
                         call_608759.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608759, url, valid)

proc call*(call_608760: Call_GetDescribeDBProxyTargetGroups_608742;
          DBProxyName: string; Marker: string = ""; TargetGroupName: string = "";
          Action: string = "DescribeDBProxyTargetGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxyTargetGroups
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608761 = newJObject()
  add(query_608761, "Marker", newJString(Marker))
  add(query_608761, "TargetGroupName", newJString(TargetGroupName))
  add(query_608761, "Action", newJString(Action))
  add(query_608761, "Version", newJString(Version))
  add(query_608761, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_608761.add "Filters", Filters
  add(query_608761, "MaxRecords", newJInt(MaxRecords))
  result = call_608760.call(nil, query_608761, nil, nil, nil)

var getDescribeDBProxyTargetGroups* = Call_GetDescribeDBProxyTargetGroups_608742(
    name: "getDescribeDBProxyTargetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargetGroups",
    validator: validate_GetDescribeDBProxyTargetGroups_608743, base: "/",
    url: url_GetDescribeDBProxyTargetGroups_608744,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxyTargets_608803 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBProxyTargets_608805(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxyTargets_608804(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608806 = query.getOrDefault("Action")
  valid_608806 = validateParameter(valid_608806, JString, required = true,
                                 default = newJString("DescribeDBProxyTargets"))
  if valid_608806 != nil:
    section.add "Action", valid_608806
  var valid_608807 = query.getOrDefault("Version")
  valid_608807 = validateParameter(valid_608807, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608807 != nil:
    section.add "Version", valid_608807
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608808 = header.getOrDefault("X-Amz-Signature")
  valid_608808 = validateParameter(valid_608808, JString, required = false,
                                 default = nil)
  if valid_608808 != nil:
    section.add "X-Amz-Signature", valid_608808
  var valid_608809 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608809 = validateParameter(valid_608809, JString, required = false,
                                 default = nil)
  if valid_608809 != nil:
    section.add "X-Amz-Content-Sha256", valid_608809
  var valid_608810 = header.getOrDefault("X-Amz-Date")
  valid_608810 = validateParameter(valid_608810, JString, required = false,
                                 default = nil)
  if valid_608810 != nil:
    section.add "X-Amz-Date", valid_608810
  var valid_608811 = header.getOrDefault("X-Amz-Credential")
  valid_608811 = validateParameter(valid_608811, JString, required = false,
                                 default = nil)
  if valid_608811 != nil:
    section.add "X-Amz-Credential", valid_608811
  var valid_608812 = header.getOrDefault("X-Amz-Security-Token")
  valid_608812 = validateParameter(valid_608812, JString, required = false,
                                 default = nil)
  if valid_608812 != nil:
    section.add "X-Amz-Security-Token", valid_608812
  var valid_608813 = header.getOrDefault("X-Amz-Algorithm")
  valid_608813 = validateParameter(valid_608813, JString, required = false,
                                 default = nil)
  if valid_608813 != nil:
    section.add "X-Amz-Algorithm", valid_608813
  var valid_608814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608814 = validateParameter(valid_608814, JString, required = false,
                                 default = nil)
  if valid_608814 != nil:
    section.add "X-Amz-SignedHeaders", valid_608814
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_608815 = formData.getOrDefault("MaxRecords")
  valid_608815 = validateParameter(valid_608815, JInt, required = false, default = nil)
  if valid_608815 != nil:
    section.add "MaxRecords", valid_608815
  var valid_608816 = formData.getOrDefault("TargetGroupName")
  valid_608816 = validateParameter(valid_608816, JString, required = false,
                                 default = nil)
  if valid_608816 != nil:
    section.add "TargetGroupName", valid_608816
  var valid_608817 = formData.getOrDefault("Marker")
  valid_608817 = validateParameter(valid_608817, JString, required = false,
                                 default = nil)
  if valid_608817 != nil:
    section.add "Marker", valid_608817
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_608818 = formData.getOrDefault("DBProxyName")
  valid_608818 = validateParameter(valid_608818, JString, required = true,
                                 default = nil)
  if valid_608818 != nil:
    section.add "DBProxyName", valid_608818
  var valid_608819 = formData.getOrDefault("Filters")
  valid_608819 = validateParameter(valid_608819, JArray, required = false,
                                 default = nil)
  if valid_608819 != nil:
    section.add "Filters", valid_608819
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608820: Call_PostDescribeDBProxyTargets_608803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  let valid = call_608820.validator(path, query, header, formData, body)
  let scheme = call_608820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608820.url(scheme.get, call_608820.host, call_608820.base,
                         call_608820.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608820, url, valid)

proc call*(call_608821: Call_PostDescribeDBProxyTargets_608803;
          DBProxyName: string; MaxRecords: int = 0; TargetGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeDBProxyTargets";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_608822 = newJObject()
  var formData_608823 = newJObject()
  add(formData_608823, "MaxRecords", newJInt(MaxRecords))
  add(formData_608823, "TargetGroupName", newJString(TargetGroupName))
  add(formData_608823, "Marker", newJString(Marker))
  add(formData_608823, "DBProxyName", newJString(DBProxyName))
  add(query_608822, "Action", newJString(Action))
  if Filters != nil:
    formData_608823.add "Filters", Filters
  add(query_608822, "Version", newJString(Version))
  result = call_608821.call(nil, query_608822, nil, formData_608823, nil)

var postDescribeDBProxyTargets* = Call_PostDescribeDBProxyTargets_608803(
    name: "postDescribeDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargets",
    validator: validate_PostDescribeDBProxyTargets_608804, base: "/",
    url: url_PostDescribeDBProxyTargets_608805,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxyTargets_608783 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBProxyTargets_608785(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxyTargets_608784(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608786 = query.getOrDefault("Marker")
  valid_608786 = validateParameter(valid_608786, JString, required = false,
                                 default = nil)
  if valid_608786 != nil:
    section.add "Marker", valid_608786
  var valid_608787 = query.getOrDefault("TargetGroupName")
  valid_608787 = validateParameter(valid_608787, JString, required = false,
                                 default = nil)
  if valid_608787 != nil:
    section.add "TargetGroupName", valid_608787
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608788 = query.getOrDefault("Action")
  valid_608788 = validateParameter(valid_608788, JString, required = true,
                                 default = newJString("DescribeDBProxyTargets"))
  if valid_608788 != nil:
    section.add "Action", valid_608788
  var valid_608789 = query.getOrDefault("Version")
  valid_608789 = validateParameter(valid_608789, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608789 != nil:
    section.add "Version", valid_608789
  var valid_608790 = query.getOrDefault("DBProxyName")
  valid_608790 = validateParameter(valid_608790, JString, required = true,
                                 default = nil)
  if valid_608790 != nil:
    section.add "DBProxyName", valid_608790
  var valid_608791 = query.getOrDefault("Filters")
  valid_608791 = validateParameter(valid_608791, JArray, required = false,
                                 default = nil)
  if valid_608791 != nil:
    section.add "Filters", valid_608791
  var valid_608792 = query.getOrDefault("MaxRecords")
  valid_608792 = validateParameter(valid_608792, JInt, required = false, default = nil)
  if valid_608792 != nil:
    section.add "MaxRecords", valid_608792
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608793 = header.getOrDefault("X-Amz-Signature")
  valid_608793 = validateParameter(valid_608793, JString, required = false,
                                 default = nil)
  if valid_608793 != nil:
    section.add "X-Amz-Signature", valid_608793
  var valid_608794 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608794 = validateParameter(valid_608794, JString, required = false,
                                 default = nil)
  if valid_608794 != nil:
    section.add "X-Amz-Content-Sha256", valid_608794
  var valid_608795 = header.getOrDefault("X-Amz-Date")
  valid_608795 = validateParameter(valid_608795, JString, required = false,
                                 default = nil)
  if valid_608795 != nil:
    section.add "X-Amz-Date", valid_608795
  var valid_608796 = header.getOrDefault("X-Amz-Credential")
  valid_608796 = validateParameter(valid_608796, JString, required = false,
                                 default = nil)
  if valid_608796 != nil:
    section.add "X-Amz-Credential", valid_608796
  var valid_608797 = header.getOrDefault("X-Amz-Security-Token")
  valid_608797 = validateParameter(valid_608797, JString, required = false,
                                 default = nil)
  if valid_608797 != nil:
    section.add "X-Amz-Security-Token", valid_608797
  var valid_608798 = header.getOrDefault("X-Amz-Algorithm")
  valid_608798 = validateParameter(valid_608798, JString, required = false,
                                 default = nil)
  if valid_608798 != nil:
    section.add "X-Amz-Algorithm", valid_608798
  var valid_608799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608799 = validateParameter(valid_608799, JString, required = false,
                                 default = nil)
  if valid_608799 != nil:
    section.add "X-Amz-SignedHeaders", valid_608799
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608800: Call_GetDescribeDBProxyTargets_608783; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  let valid = call_608800.validator(path, query, header, formData, body)
  let scheme = call_608800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608800.url(scheme.get, call_608800.host, call_608800.base,
                         call_608800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608800, url, valid)

proc call*(call_608801: Call_GetDescribeDBProxyTargets_608783; DBProxyName: string;
          Marker: string = ""; TargetGroupName: string = "";
          Action: string = "DescribeDBProxyTargets"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608802 = newJObject()
  add(query_608802, "Marker", newJString(Marker))
  add(query_608802, "TargetGroupName", newJString(TargetGroupName))
  add(query_608802, "Action", newJString(Action))
  add(query_608802, "Version", newJString(Version))
  add(query_608802, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_608802.add "Filters", Filters
  add(query_608802, "MaxRecords", newJInt(MaxRecords))
  result = call_608801.call(nil, query_608802, nil, nil, nil)

var getDescribeDBProxyTargets* = Call_GetDescribeDBProxyTargets_608783(
    name: "getDescribeDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargets",
    validator: validate_GetDescribeDBProxyTargets_608784, base: "/",
    url: url_GetDescribeDBProxyTargets_608785,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSecurityGroups_608843 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBSecurityGroups_608845(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSecurityGroups_608844(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608846 = query.getOrDefault("Action")
  valid_608846 = validateParameter(valid_608846, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_608846 != nil:
    section.add "Action", valid_608846
  var valid_608847 = query.getOrDefault("Version")
  valid_608847 = validateParameter(valid_608847, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608847 != nil:
    section.add "Version", valid_608847
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608848 = header.getOrDefault("X-Amz-Signature")
  valid_608848 = validateParameter(valid_608848, JString, required = false,
                                 default = nil)
  if valid_608848 != nil:
    section.add "X-Amz-Signature", valid_608848
  var valid_608849 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608849 = validateParameter(valid_608849, JString, required = false,
                                 default = nil)
  if valid_608849 != nil:
    section.add "X-Amz-Content-Sha256", valid_608849
  var valid_608850 = header.getOrDefault("X-Amz-Date")
  valid_608850 = validateParameter(valid_608850, JString, required = false,
                                 default = nil)
  if valid_608850 != nil:
    section.add "X-Amz-Date", valid_608850
  var valid_608851 = header.getOrDefault("X-Amz-Credential")
  valid_608851 = validateParameter(valid_608851, JString, required = false,
                                 default = nil)
  if valid_608851 != nil:
    section.add "X-Amz-Credential", valid_608851
  var valid_608852 = header.getOrDefault("X-Amz-Security-Token")
  valid_608852 = validateParameter(valid_608852, JString, required = false,
                                 default = nil)
  if valid_608852 != nil:
    section.add "X-Amz-Security-Token", valid_608852
  var valid_608853 = header.getOrDefault("X-Amz-Algorithm")
  valid_608853 = validateParameter(valid_608853, JString, required = false,
                                 default = nil)
  if valid_608853 != nil:
    section.add "X-Amz-Algorithm", valid_608853
  var valid_608854 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608854 = validateParameter(valid_608854, JString, required = false,
                                 default = nil)
  if valid_608854 != nil:
    section.add "X-Amz-SignedHeaders", valid_608854
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_608855 = formData.getOrDefault("DBSecurityGroupName")
  valid_608855 = validateParameter(valid_608855, JString, required = false,
                                 default = nil)
  if valid_608855 != nil:
    section.add "DBSecurityGroupName", valid_608855
  var valid_608856 = formData.getOrDefault("MaxRecords")
  valid_608856 = validateParameter(valid_608856, JInt, required = false, default = nil)
  if valid_608856 != nil:
    section.add "MaxRecords", valid_608856
  var valid_608857 = formData.getOrDefault("Marker")
  valid_608857 = validateParameter(valid_608857, JString, required = false,
                                 default = nil)
  if valid_608857 != nil:
    section.add "Marker", valid_608857
  var valid_608858 = formData.getOrDefault("Filters")
  valid_608858 = validateParameter(valid_608858, JArray, required = false,
                                 default = nil)
  if valid_608858 != nil:
    section.add "Filters", valid_608858
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608859: Call_PostDescribeDBSecurityGroups_608843; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_608859.validator(path, query, header, formData, body)
  let scheme = call_608859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608859.url(scheme.get, call_608859.host, call_608859.base,
                         call_608859.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608859, url, valid)

proc call*(call_608860: Call_PostDescribeDBSecurityGroups_608843;
          DBSecurityGroupName: string = ""; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSecurityGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_608861 = newJObject()
  var formData_608862 = newJObject()
  add(formData_608862, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_608862, "MaxRecords", newJInt(MaxRecords))
  add(formData_608862, "Marker", newJString(Marker))
  add(query_608861, "Action", newJString(Action))
  if Filters != nil:
    formData_608862.add "Filters", Filters
  add(query_608861, "Version", newJString(Version))
  result = call_608860.call(nil, query_608861, nil, formData_608862, nil)

var postDescribeDBSecurityGroups* = Call_PostDescribeDBSecurityGroups_608843(
    name: "postDescribeDBSecurityGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_PostDescribeDBSecurityGroups_608844, base: "/",
    url: url_PostDescribeDBSecurityGroups_608845,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSecurityGroups_608824 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBSecurityGroups_608826(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSecurityGroups_608825(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608827 = query.getOrDefault("Marker")
  valid_608827 = validateParameter(valid_608827, JString, required = false,
                                 default = nil)
  if valid_608827 != nil:
    section.add "Marker", valid_608827
  var valid_608828 = query.getOrDefault("DBSecurityGroupName")
  valid_608828 = validateParameter(valid_608828, JString, required = false,
                                 default = nil)
  if valid_608828 != nil:
    section.add "DBSecurityGroupName", valid_608828
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608829 = query.getOrDefault("Action")
  valid_608829 = validateParameter(valid_608829, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_608829 != nil:
    section.add "Action", valid_608829
  var valid_608830 = query.getOrDefault("Version")
  valid_608830 = validateParameter(valid_608830, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608830 != nil:
    section.add "Version", valid_608830
  var valid_608831 = query.getOrDefault("Filters")
  valid_608831 = validateParameter(valid_608831, JArray, required = false,
                                 default = nil)
  if valid_608831 != nil:
    section.add "Filters", valid_608831
  var valid_608832 = query.getOrDefault("MaxRecords")
  valid_608832 = validateParameter(valid_608832, JInt, required = false, default = nil)
  if valid_608832 != nil:
    section.add "MaxRecords", valid_608832
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608833 = header.getOrDefault("X-Amz-Signature")
  valid_608833 = validateParameter(valid_608833, JString, required = false,
                                 default = nil)
  if valid_608833 != nil:
    section.add "X-Amz-Signature", valid_608833
  var valid_608834 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608834 = validateParameter(valid_608834, JString, required = false,
                                 default = nil)
  if valid_608834 != nil:
    section.add "X-Amz-Content-Sha256", valid_608834
  var valid_608835 = header.getOrDefault("X-Amz-Date")
  valid_608835 = validateParameter(valid_608835, JString, required = false,
                                 default = nil)
  if valid_608835 != nil:
    section.add "X-Amz-Date", valid_608835
  var valid_608836 = header.getOrDefault("X-Amz-Credential")
  valid_608836 = validateParameter(valid_608836, JString, required = false,
                                 default = nil)
  if valid_608836 != nil:
    section.add "X-Amz-Credential", valid_608836
  var valid_608837 = header.getOrDefault("X-Amz-Security-Token")
  valid_608837 = validateParameter(valid_608837, JString, required = false,
                                 default = nil)
  if valid_608837 != nil:
    section.add "X-Amz-Security-Token", valid_608837
  var valid_608838 = header.getOrDefault("X-Amz-Algorithm")
  valid_608838 = validateParameter(valid_608838, JString, required = false,
                                 default = nil)
  if valid_608838 != nil:
    section.add "X-Amz-Algorithm", valid_608838
  var valid_608839 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608839 = validateParameter(valid_608839, JString, required = false,
                                 default = nil)
  if valid_608839 != nil:
    section.add "X-Amz-SignedHeaders", valid_608839
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608840: Call_GetDescribeDBSecurityGroups_608824; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_608840.validator(path, query, header, formData, body)
  let scheme = call_608840.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608840.url(scheme.get, call_608840.host, call_608840.base,
                         call_608840.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608840, url, valid)

proc call*(call_608841: Call_GetDescribeDBSecurityGroups_608824;
          Marker: string = ""; DBSecurityGroupName: string = "";
          Action: string = "DescribeDBSecurityGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608842 = newJObject()
  add(query_608842, "Marker", newJString(Marker))
  add(query_608842, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_608842, "Action", newJString(Action))
  add(query_608842, "Version", newJString(Version))
  if Filters != nil:
    query_608842.add "Filters", Filters
  add(query_608842, "MaxRecords", newJInt(MaxRecords))
  result = call_608841.call(nil, query_608842, nil, nil, nil)

var getDescribeDBSecurityGroups* = Call_GetDescribeDBSecurityGroups_608824(
    name: "getDescribeDBSecurityGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_GetDescribeDBSecurityGroups_608825, base: "/",
    url: url_GetDescribeDBSecurityGroups_608826,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshotAttributes_608879 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBSnapshotAttributes_608881(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSnapshotAttributes_608880(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608882 = query.getOrDefault("Action")
  valid_608882 = validateParameter(valid_608882, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_608882 != nil:
    section.add "Action", valid_608882
  var valid_608883 = query.getOrDefault("Version")
  valid_608883 = validateParameter(valid_608883, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608883 != nil:
    section.add "Version", valid_608883
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608884 = header.getOrDefault("X-Amz-Signature")
  valid_608884 = validateParameter(valid_608884, JString, required = false,
                                 default = nil)
  if valid_608884 != nil:
    section.add "X-Amz-Signature", valid_608884
  var valid_608885 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608885 = validateParameter(valid_608885, JString, required = false,
                                 default = nil)
  if valid_608885 != nil:
    section.add "X-Amz-Content-Sha256", valid_608885
  var valid_608886 = header.getOrDefault("X-Amz-Date")
  valid_608886 = validateParameter(valid_608886, JString, required = false,
                                 default = nil)
  if valid_608886 != nil:
    section.add "X-Amz-Date", valid_608886
  var valid_608887 = header.getOrDefault("X-Amz-Credential")
  valid_608887 = validateParameter(valid_608887, JString, required = false,
                                 default = nil)
  if valid_608887 != nil:
    section.add "X-Amz-Credential", valid_608887
  var valid_608888 = header.getOrDefault("X-Amz-Security-Token")
  valid_608888 = validateParameter(valid_608888, JString, required = false,
                                 default = nil)
  if valid_608888 != nil:
    section.add "X-Amz-Security-Token", valid_608888
  var valid_608889 = header.getOrDefault("X-Amz-Algorithm")
  valid_608889 = validateParameter(valid_608889, JString, required = false,
                                 default = nil)
  if valid_608889 != nil:
    section.add "X-Amz-Algorithm", valid_608889
  var valid_608890 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608890 = validateParameter(valid_608890, JString, required = false,
                                 default = nil)
  if valid_608890 != nil:
    section.add "X-Amz-SignedHeaders", valid_608890
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_608891 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_608891 = validateParameter(valid_608891, JString, required = true,
                                 default = nil)
  if valid_608891 != nil:
    section.add "DBSnapshotIdentifier", valid_608891
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608892: Call_PostDescribeDBSnapshotAttributes_608879;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_608892.validator(path, query, header, formData, body)
  let scheme = call_608892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608892.url(scheme.get, call_608892.host, call_608892.base,
                         call_608892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608892, url, valid)

proc call*(call_608893: Call_PostDescribeDBSnapshotAttributes_608879;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608894 = newJObject()
  var formData_608895 = newJObject()
  add(formData_608895, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_608894, "Action", newJString(Action))
  add(query_608894, "Version", newJString(Version))
  result = call_608893.call(nil, query_608894, nil, formData_608895, nil)

var postDescribeDBSnapshotAttributes* = Call_PostDescribeDBSnapshotAttributes_608879(
    name: "postDescribeDBSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_PostDescribeDBSnapshotAttributes_608880, base: "/",
    url: url_PostDescribeDBSnapshotAttributes_608881,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshotAttributes_608863 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBSnapshotAttributes_608865(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSnapshotAttributes_608864(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_608866 = query.getOrDefault("DBSnapshotIdentifier")
  valid_608866 = validateParameter(valid_608866, JString, required = true,
                                 default = nil)
  if valid_608866 != nil:
    section.add "DBSnapshotIdentifier", valid_608866
  var valid_608867 = query.getOrDefault("Action")
  valid_608867 = validateParameter(valid_608867, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_608867 != nil:
    section.add "Action", valid_608867
  var valid_608868 = query.getOrDefault("Version")
  valid_608868 = validateParameter(valid_608868, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608868 != nil:
    section.add "Version", valid_608868
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608869 = header.getOrDefault("X-Amz-Signature")
  valid_608869 = validateParameter(valid_608869, JString, required = false,
                                 default = nil)
  if valid_608869 != nil:
    section.add "X-Amz-Signature", valid_608869
  var valid_608870 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608870 = validateParameter(valid_608870, JString, required = false,
                                 default = nil)
  if valid_608870 != nil:
    section.add "X-Amz-Content-Sha256", valid_608870
  var valid_608871 = header.getOrDefault("X-Amz-Date")
  valid_608871 = validateParameter(valid_608871, JString, required = false,
                                 default = nil)
  if valid_608871 != nil:
    section.add "X-Amz-Date", valid_608871
  var valid_608872 = header.getOrDefault("X-Amz-Credential")
  valid_608872 = validateParameter(valid_608872, JString, required = false,
                                 default = nil)
  if valid_608872 != nil:
    section.add "X-Amz-Credential", valid_608872
  var valid_608873 = header.getOrDefault("X-Amz-Security-Token")
  valid_608873 = validateParameter(valid_608873, JString, required = false,
                                 default = nil)
  if valid_608873 != nil:
    section.add "X-Amz-Security-Token", valid_608873
  var valid_608874 = header.getOrDefault("X-Amz-Algorithm")
  valid_608874 = validateParameter(valid_608874, JString, required = false,
                                 default = nil)
  if valid_608874 != nil:
    section.add "X-Amz-Algorithm", valid_608874
  var valid_608875 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608875 = validateParameter(valid_608875, JString, required = false,
                                 default = nil)
  if valid_608875 != nil:
    section.add "X-Amz-SignedHeaders", valid_608875
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608876: Call_GetDescribeDBSnapshotAttributes_608863;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_608876.validator(path, query, header, formData, body)
  let scheme = call_608876.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608876.url(scheme.get, call_608876.host, call_608876.base,
                         call_608876.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608876, url, valid)

proc call*(call_608877: Call_GetDescribeDBSnapshotAttributes_608863;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608878 = newJObject()
  add(query_608878, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_608878, "Action", newJString(Action))
  add(query_608878, "Version", newJString(Version))
  result = call_608877.call(nil, query_608878, nil, nil, nil)

var getDescribeDBSnapshotAttributes* = Call_GetDescribeDBSnapshotAttributes_608863(
    name: "getDescribeDBSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_GetDescribeDBSnapshotAttributes_608864, base: "/",
    url: url_GetDescribeDBSnapshotAttributes_608865,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshots_608920 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBSnapshots_608922(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSnapshots_608921(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608923 = query.getOrDefault("Action")
  valid_608923 = validateParameter(valid_608923, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_608923 != nil:
    section.add "Action", valid_608923
  var valid_608924 = query.getOrDefault("Version")
  valid_608924 = validateParameter(valid_608924, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608924 != nil:
    section.add "Version", valid_608924
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608925 = header.getOrDefault("X-Amz-Signature")
  valid_608925 = validateParameter(valid_608925, JString, required = false,
                                 default = nil)
  if valid_608925 != nil:
    section.add "X-Amz-Signature", valid_608925
  var valid_608926 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608926 = validateParameter(valid_608926, JString, required = false,
                                 default = nil)
  if valid_608926 != nil:
    section.add "X-Amz-Content-Sha256", valid_608926
  var valid_608927 = header.getOrDefault("X-Amz-Date")
  valid_608927 = validateParameter(valid_608927, JString, required = false,
                                 default = nil)
  if valid_608927 != nil:
    section.add "X-Amz-Date", valid_608927
  var valid_608928 = header.getOrDefault("X-Amz-Credential")
  valid_608928 = validateParameter(valid_608928, JString, required = false,
                                 default = nil)
  if valid_608928 != nil:
    section.add "X-Amz-Credential", valid_608928
  var valid_608929 = header.getOrDefault("X-Amz-Security-Token")
  valid_608929 = validateParameter(valid_608929, JString, required = false,
                                 default = nil)
  if valid_608929 != nil:
    section.add "X-Amz-Security-Token", valid_608929
  var valid_608930 = header.getOrDefault("X-Amz-Algorithm")
  valid_608930 = validateParameter(valid_608930, JString, required = false,
                                 default = nil)
  if valid_608930 != nil:
    section.add "X-Amz-Algorithm", valid_608930
  var valid_608931 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608931 = validateParameter(valid_608931, JString, required = false,
                                 default = nil)
  if valid_608931 != nil:
    section.add "X-Amz-SignedHeaders", valid_608931
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  section = newJObject()
  var valid_608932 = formData.getOrDefault("SnapshotType")
  valid_608932 = validateParameter(valid_608932, JString, required = false,
                                 default = nil)
  if valid_608932 != nil:
    section.add "SnapshotType", valid_608932
  var valid_608933 = formData.getOrDefault("MaxRecords")
  valid_608933 = validateParameter(valid_608933, JInt, required = false, default = nil)
  if valid_608933 != nil:
    section.add "MaxRecords", valid_608933
  var valid_608934 = formData.getOrDefault("IncludePublic")
  valid_608934 = validateParameter(valid_608934, JBool, required = false, default = nil)
  if valid_608934 != nil:
    section.add "IncludePublic", valid_608934
  var valid_608935 = formData.getOrDefault("Marker")
  valid_608935 = validateParameter(valid_608935, JString, required = false,
                                 default = nil)
  if valid_608935 != nil:
    section.add "Marker", valid_608935
  var valid_608936 = formData.getOrDefault("DbiResourceId")
  valid_608936 = validateParameter(valid_608936, JString, required = false,
                                 default = nil)
  if valid_608936 != nil:
    section.add "DbiResourceId", valid_608936
  var valid_608937 = formData.getOrDefault("IncludeShared")
  valid_608937 = validateParameter(valid_608937, JBool, required = false, default = nil)
  if valid_608937 != nil:
    section.add "IncludeShared", valid_608937
  var valid_608938 = formData.getOrDefault("DBInstanceIdentifier")
  valid_608938 = validateParameter(valid_608938, JString, required = false,
                                 default = nil)
  if valid_608938 != nil:
    section.add "DBInstanceIdentifier", valid_608938
  var valid_608939 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_608939 = validateParameter(valid_608939, JString, required = false,
                                 default = nil)
  if valid_608939 != nil:
    section.add "DBSnapshotIdentifier", valid_608939
  var valid_608940 = formData.getOrDefault("Filters")
  valid_608940 = validateParameter(valid_608940, JArray, required = false,
                                 default = nil)
  if valid_608940 != nil:
    section.add "Filters", valid_608940
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608941: Call_PostDescribeDBSnapshots_608920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_608941.validator(path, query, header, formData, body)
  let scheme = call_608941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608941.url(scheme.get, call_608941.host, call_608941.base,
                         call_608941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608941, url, valid)

proc call*(call_608942: Call_PostDescribeDBSnapshots_608920;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DbiResourceId: string = ""; IncludeShared: bool = false;
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          Action: string = "DescribeDBSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_608943 = newJObject()
  var formData_608944 = newJObject()
  add(formData_608944, "SnapshotType", newJString(SnapshotType))
  add(formData_608944, "MaxRecords", newJInt(MaxRecords))
  add(formData_608944, "IncludePublic", newJBool(IncludePublic))
  add(formData_608944, "Marker", newJString(Marker))
  add(formData_608944, "DbiResourceId", newJString(DbiResourceId))
  add(formData_608944, "IncludeShared", newJBool(IncludeShared))
  add(formData_608944, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_608944, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_608943, "Action", newJString(Action))
  if Filters != nil:
    formData_608944.add "Filters", Filters
  add(query_608943, "Version", newJString(Version))
  result = call_608942.call(nil, query_608943, nil, formData_608944, nil)

var postDescribeDBSnapshots* = Call_PostDescribeDBSnapshots_608920(
    name: "postDescribeDBSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_PostDescribeDBSnapshots_608921, base: "/",
    url: url_PostDescribeDBSnapshots_608922, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshots_608896 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBSnapshots_608898(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSnapshots_608897(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608899 = query.getOrDefault("DbiResourceId")
  valid_608899 = validateParameter(valid_608899, JString, required = false,
                                 default = nil)
  if valid_608899 != nil:
    section.add "DbiResourceId", valid_608899
  var valid_608900 = query.getOrDefault("Marker")
  valid_608900 = validateParameter(valid_608900, JString, required = false,
                                 default = nil)
  if valid_608900 != nil:
    section.add "Marker", valid_608900
  var valid_608901 = query.getOrDefault("DBInstanceIdentifier")
  valid_608901 = validateParameter(valid_608901, JString, required = false,
                                 default = nil)
  if valid_608901 != nil:
    section.add "DBInstanceIdentifier", valid_608901
  var valid_608902 = query.getOrDefault("DBSnapshotIdentifier")
  valid_608902 = validateParameter(valid_608902, JString, required = false,
                                 default = nil)
  if valid_608902 != nil:
    section.add "DBSnapshotIdentifier", valid_608902
  var valid_608903 = query.getOrDefault("SnapshotType")
  valid_608903 = validateParameter(valid_608903, JString, required = false,
                                 default = nil)
  if valid_608903 != nil:
    section.add "SnapshotType", valid_608903
  var valid_608904 = query.getOrDefault("IncludePublic")
  valid_608904 = validateParameter(valid_608904, JBool, required = false, default = nil)
  if valid_608904 != nil:
    section.add "IncludePublic", valid_608904
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608905 = query.getOrDefault("Action")
  valid_608905 = validateParameter(valid_608905, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_608905 != nil:
    section.add "Action", valid_608905
  var valid_608906 = query.getOrDefault("IncludeShared")
  valid_608906 = validateParameter(valid_608906, JBool, required = false, default = nil)
  if valid_608906 != nil:
    section.add "IncludeShared", valid_608906
  var valid_608907 = query.getOrDefault("Version")
  valid_608907 = validateParameter(valid_608907, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608907 != nil:
    section.add "Version", valid_608907
  var valid_608908 = query.getOrDefault("Filters")
  valid_608908 = validateParameter(valid_608908, JArray, required = false,
                                 default = nil)
  if valid_608908 != nil:
    section.add "Filters", valid_608908
  var valid_608909 = query.getOrDefault("MaxRecords")
  valid_608909 = validateParameter(valid_608909, JInt, required = false, default = nil)
  if valid_608909 != nil:
    section.add "MaxRecords", valid_608909
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608910 = header.getOrDefault("X-Amz-Signature")
  valid_608910 = validateParameter(valid_608910, JString, required = false,
                                 default = nil)
  if valid_608910 != nil:
    section.add "X-Amz-Signature", valid_608910
  var valid_608911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608911 = validateParameter(valid_608911, JString, required = false,
                                 default = nil)
  if valid_608911 != nil:
    section.add "X-Amz-Content-Sha256", valid_608911
  var valid_608912 = header.getOrDefault("X-Amz-Date")
  valid_608912 = validateParameter(valid_608912, JString, required = false,
                                 default = nil)
  if valid_608912 != nil:
    section.add "X-Amz-Date", valid_608912
  var valid_608913 = header.getOrDefault("X-Amz-Credential")
  valid_608913 = validateParameter(valid_608913, JString, required = false,
                                 default = nil)
  if valid_608913 != nil:
    section.add "X-Amz-Credential", valid_608913
  var valid_608914 = header.getOrDefault("X-Amz-Security-Token")
  valid_608914 = validateParameter(valid_608914, JString, required = false,
                                 default = nil)
  if valid_608914 != nil:
    section.add "X-Amz-Security-Token", valid_608914
  var valid_608915 = header.getOrDefault("X-Amz-Algorithm")
  valid_608915 = validateParameter(valid_608915, JString, required = false,
                                 default = nil)
  if valid_608915 != nil:
    section.add "X-Amz-Algorithm", valid_608915
  var valid_608916 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608916 = validateParameter(valid_608916, JString, required = false,
                                 default = nil)
  if valid_608916 != nil:
    section.add "X-Amz-SignedHeaders", valid_608916
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608917: Call_GetDescribeDBSnapshots_608896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_608917.validator(path, query, header, formData, body)
  let scheme = call_608917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608917.url(scheme.get, call_608917.host, call_608917.base,
                         call_608917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608917, url, valid)

proc call*(call_608918: Call_GetDescribeDBSnapshots_608896;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          SnapshotType: string = ""; IncludePublic: bool = false;
          Action: string = "DescribeDBSnapshots"; IncludeShared: bool = false;
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608919 = newJObject()
  add(query_608919, "DbiResourceId", newJString(DbiResourceId))
  add(query_608919, "Marker", newJString(Marker))
  add(query_608919, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608919, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_608919, "SnapshotType", newJString(SnapshotType))
  add(query_608919, "IncludePublic", newJBool(IncludePublic))
  add(query_608919, "Action", newJString(Action))
  add(query_608919, "IncludeShared", newJBool(IncludeShared))
  add(query_608919, "Version", newJString(Version))
  if Filters != nil:
    query_608919.add "Filters", Filters
  add(query_608919, "MaxRecords", newJInt(MaxRecords))
  result = call_608918.call(nil, query_608919, nil, nil, nil)

var getDescribeDBSnapshots* = Call_GetDescribeDBSnapshots_608896(
    name: "getDescribeDBSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_GetDescribeDBSnapshots_608897, base: "/",
    url: url_GetDescribeDBSnapshots_608898, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_608964 = ref object of OpenApiRestCall_605589
proc url_PostDescribeDBSubnetGroups_608966(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSubnetGroups_608965(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608967 = query.getOrDefault("Action")
  valid_608967 = validateParameter(valid_608967, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_608967 != nil:
    section.add "Action", valid_608967
  var valid_608968 = query.getOrDefault("Version")
  valid_608968 = validateParameter(valid_608968, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608968 != nil:
    section.add "Version", valid_608968
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608969 = header.getOrDefault("X-Amz-Signature")
  valid_608969 = validateParameter(valid_608969, JString, required = false,
                                 default = nil)
  if valid_608969 != nil:
    section.add "X-Amz-Signature", valid_608969
  var valid_608970 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608970 = validateParameter(valid_608970, JString, required = false,
                                 default = nil)
  if valid_608970 != nil:
    section.add "X-Amz-Content-Sha256", valid_608970
  var valid_608971 = header.getOrDefault("X-Amz-Date")
  valid_608971 = validateParameter(valid_608971, JString, required = false,
                                 default = nil)
  if valid_608971 != nil:
    section.add "X-Amz-Date", valid_608971
  var valid_608972 = header.getOrDefault("X-Amz-Credential")
  valid_608972 = validateParameter(valid_608972, JString, required = false,
                                 default = nil)
  if valid_608972 != nil:
    section.add "X-Amz-Credential", valid_608972
  var valid_608973 = header.getOrDefault("X-Amz-Security-Token")
  valid_608973 = validateParameter(valid_608973, JString, required = false,
                                 default = nil)
  if valid_608973 != nil:
    section.add "X-Amz-Security-Token", valid_608973
  var valid_608974 = header.getOrDefault("X-Amz-Algorithm")
  valid_608974 = validateParameter(valid_608974, JString, required = false,
                                 default = nil)
  if valid_608974 != nil:
    section.add "X-Amz-Algorithm", valid_608974
  var valid_608975 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608975 = validateParameter(valid_608975, JString, required = false,
                                 default = nil)
  if valid_608975 != nil:
    section.add "X-Amz-SignedHeaders", valid_608975
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_608976 = formData.getOrDefault("MaxRecords")
  valid_608976 = validateParameter(valid_608976, JInt, required = false, default = nil)
  if valid_608976 != nil:
    section.add "MaxRecords", valid_608976
  var valid_608977 = formData.getOrDefault("Marker")
  valid_608977 = validateParameter(valid_608977, JString, required = false,
                                 default = nil)
  if valid_608977 != nil:
    section.add "Marker", valid_608977
  var valid_608978 = formData.getOrDefault("DBSubnetGroupName")
  valid_608978 = validateParameter(valid_608978, JString, required = false,
                                 default = nil)
  if valid_608978 != nil:
    section.add "DBSubnetGroupName", valid_608978
  var valid_608979 = formData.getOrDefault("Filters")
  valid_608979 = validateParameter(valid_608979, JArray, required = false,
                                 default = nil)
  if valid_608979 != nil:
    section.add "Filters", valid_608979
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608980: Call_PostDescribeDBSubnetGroups_608964; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_608980.validator(path, query, header, formData, body)
  let scheme = call_608980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608980.url(scheme.get, call_608980.host, call_608980.base,
                         call_608980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608980, url, valid)

proc call*(call_608981: Call_PostDescribeDBSubnetGroups_608964;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_608982 = newJObject()
  var formData_608983 = newJObject()
  add(formData_608983, "MaxRecords", newJInt(MaxRecords))
  add(formData_608983, "Marker", newJString(Marker))
  add(query_608982, "Action", newJString(Action))
  add(formData_608983, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if Filters != nil:
    formData_608983.add "Filters", Filters
  add(query_608982, "Version", newJString(Version))
  result = call_608981.call(nil, query_608982, nil, formData_608983, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_608964(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_608965, base: "/",
    url: url_PostDescribeDBSubnetGroups_608966,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_608945 = ref object of OpenApiRestCall_605589
proc url_GetDescribeDBSubnetGroups_608947(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSubnetGroups_608946(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608948 = query.getOrDefault("Marker")
  valid_608948 = validateParameter(valid_608948, JString, required = false,
                                 default = nil)
  if valid_608948 != nil:
    section.add "Marker", valid_608948
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608949 = query.getOrDefault("Action")
  valid_608949 = validateParameter(valid_608949, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_608949 != nil:
    section.add "Action", valid_608949
  var valid_608950 = query.getOrDefault("DBSubnetGroupName")
  valid_608950 = validateParameter(valid_608950, JString, required = false,
                                 default = nil)
  if valid_608950 != nil:
    section.add "DBSubnetGroupName", valid_608950
  var valid_608951 = query.getOrDefault("Version")
  valid_608951 = validateParameter(valid_608951, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608951 != nil:
    section.add "Version", valid_608951
  var valid_608952 = query.getOrDefault("Filters")
  valid_608952 = validateParameter(valid_608952, JArray, required = false,
                                 default = nil)
  if valid_608952 != nil:
    section.add "Filters", valid_608952
  var valid_608953 = query.getOrDefault("MaxRecords")
  valid_608953 = validateParameter(valid_608953, JInt, required = false, default = nil)
  if valid_608953 != nil:
    section.add "MaxRecords", valid_608953
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608954 = header.getOrDefault("X-Amz-Signature")
  valid_608954 = validateParameter(valid_608954, JString, required = false,
                                 default = nil)
  if valid_608954 != nil:
    section.add "X-Amz-Signature", valid_608954
  var valid_608955 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608955 = validateParameter(valid_608955, JString, required = false,
                                 default = nil)
  if valid_608955 != nil:
    section.add "X-Amz-Content-Sha256", valid_608955
  var valid_608956 = header.getOrDefault("X-Amz-Date")
  valid_608956 = validateParameter(valid_608956, JString, required = false,
                                 default = nil)
  if valid_608956 != nil:
    section.add "X-Amz-Date", valid_608956
  var valid_608957 = header.getOrDefault("X-Amz-Credential")
  valid_608957 = validateParameter(valid_608957, JString, required = false,
                                 default = nil)
  if valid_608957 != nil:
    section.add "X-Amz-Credential", valid_608957
  var valid_608958 = header.getOrDefault("X-Amz-Security-Token")
  valid_608958 = validateParameter(valid_608958, JString, required = false,
                                 default = nil)
  if valid_608958 != nil:
    section.add "X-Amz-Security-Token", valid_608958
  var valid_608959 = header.getOrDefault("X-Amz-Algorithm")
  valid_608959 = validateParameter(valid_608959, JString, required = false,
                                 default = nil)
  if valid_608959 != nil:
    section.add "X-Amz-Algorithm", valid_608959
  var valid_608960 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608960 = validateParameter(valid_608960, JString, required = false,
                                 default = nil)
  if valid_608960 != nil:
    section.add "X-Amz-SignedHeaders", valid_608960
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608961: Call_GetDescribeDBSubnetGroups_608945; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_608961.validator(path, query, header, formData, body)
  let scheme = call_608961.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608961.url(scheme.get, call_608961.host, call_608961.base,
                         call_608961.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608961, url, valid)

proc call*(call_608962: Call_GetDescribeDBSubnetGroups_608945; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608963 = newJObject()
  add(query_608963, "Marker", newJString(Marker))
  add(query_608963, "Action", newJString(Action))
  add(query_608963, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_608963, "Version", newJString(Version))
  if Filters != nil:
    query_608963.add "Filters", Filters
  add(query_608963, "MaxRecords", newJInt(MaxRecords))
  result = call_608962.call(nil, query_608963, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_608945(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_608946, base: "/",
    url: url_GetDescribeDBSubnetGroups_608947,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_609003 = ref object of OpenApiRestCall_605589
proc url_PostDescribeEngineDefaultClusterParameters_609005(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_609004(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609006 = query.getOrDefault("Action")
  valid_609006 = validateParameter(valid_609006, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_609006 != nil:
    section.add "Action", valid_609006
  var valid_609007 = query.getOrDefault("Version")
  valid_609007 = validateParameter(valid_609007, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609007 != nil:
    section.add "Version", valid_609007
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609008 = header.getOrDefault("X-Amz-Signature")
  valid_609008 = validateParameter(valid_609008, JString, required = false,
                                 default = nil)
  if valid_609008 != nil:
    section.add "X-Amz-Signature", valid_609008
  var valid_609009 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609009 = validateParameter(valid_609009, JString, required = false,
                                 default = nil)
  if valid_609009 != nil:
    section.add "X-Amz-Content-Sha256", valid_609009
  var valid_609010 = header.getOrDefault("X-Amz-Date")
  valid_609010 = validateParameter(valid_609010, JString, required = false,
                                 default = nil)
  if valid_609010 != nil:
    section.add "X-Amz-Date", valid_609010
  var valid_609011 = header.getOrDefault("X-Amz-Credential")
  valid_609011 = validateParameter(valid_609011, JString, required = false,
                                 default = nil)
  if valid_609011 != nil:
    section.add "X-Amz-Credential", valid_609011
  var valid_609012 = header.getOrDefault("X-Amz-Security-Token")
  valid_609012 = validateParameter(valid_609012, JString, required = false,
                                 default = nil)
  if valid_609012 != nil:
    section.add "X-Amz-Security-Token", valid_609012
  var valid_609013 = header.getOrDefault("X-Amz-Algorithm")
  valid_609013 = validateParameter(valid_609013, JString, required = false,
                                 default = nil)
  if valid_609013 != nil:
    section.add "X-Amz-Algorithm", valid_609013
  var valid_609014 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609014 = validateParameter(valid_609014, JString, required = false,
                                 default = nil)
  if valid_609014 != nil:
    section.add "X-Amz-SignedHeaders", valid_609014
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  section = newJObject()
  var valid_609015 = formData.getOrDefault("MaxRecords")
  valid_609015 = validateParameter(valid_609015, JInt, required = false, default = nil)
  if valid_609015 != nil:
    section.add "MaxRecords", valid_609015
  var valid_609016 = formData.getOrDefault("Marker")
  valid_609016 = validateParameter(valid_609016, JString, required = false,
                                 default = nil)
  if valid_609016 != nil:
    section.add "Marker", valid_609016
  var valid_609017 = formData.getOrDefault("Filters")
  valid_609017 = validateParameter(valid_609017, JArray, required = false,
                                 default = nil)
  if valid_609017 != nil:
    section.add "Filters", valid_609017
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_609018 = formData.getOrDefault("DBParameterGroupFamily")
  valid_609018 = validateParameter(valid_609018, JString, required = true,
                                 default = nil)
  if valid_609018 != nil:
    section.add "DBParameterGroupFamily", valid_609018
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609019: Call_PostDescribeEngineDefaultClusterParameters_609003;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_609019.validator(path, query, header, formData, body)
  let scheme = call_609019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609019.url(scheme.get, call_609019.host, call_609019.base,
                         call_609019.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609019, url, valid)

proc call*(call_609020: Call_PostDescribeEngineDefaultClusterParameters_609003;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  var query_609021 = newJObject()
  var formData_609022 = newJObject()
  add(formData_609022, "MaxRecords", newJInt(MaxRecords))
  add(formData_609022, "Marker", newJString(Marker))
  add(query_609021, "Action", newJString(Action))
  if Filters != nil:
    formData_609022.add "Filters", Filters
  add(query_609021, "Version", newJString(Version))
  add(formData_609022, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_609020.call(nil, query_609021, nil, formData_609022, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_609003(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_609004,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_609005,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_608984 = ref object of OpenApiRestCall_605589
proc url_GetDescribeEngineDefaultClusterParameters_608986(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_608985(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608987 = query.getOrDefault("Marker")
  valid_608987 = validateParameter(valid_608987, JString, required = false,
                                 default = nil)
  if valid_608987 != nil:
    section.add "Marker", valid_608987
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_608988 = query.getOrDefault("DBParameterGroupFamily")
  valid_608988 = validateParameter(valid_608988, JString, required = true,
                                 default = nil)
  if valid_608988 != nil:
    section.add "DBParameterGroupFamily", valid_608988
  var valid_608989 = query.getOrDefault("Action")
  valid_608989 = validateParameter(valid_608989, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_608989 != nil:
    section.add "Action", valid_608989
  var valid_608990 = query.getOrDefault("Version")
  valid_608990 = validateParameter(valid_608990, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608990 != nil:
    section.add "Version", valid_608990
  var valid_608991 = query.getOrDefault("Filters")
  valid_608991 = validateParameter(valid_608991, JArray, required = false,
                                 default = nil)
  if valid_608991 != nil:
    section.add "Filters", valid_608991
  var valid_608992 = query.getOrDefault("MaxRecords")
  valid_608992 = validateParameter(valid_608992, JInt, required = false, default = nil)
  if valid_608992 != nil:
    section.add "MaxRecords", valid_608992
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608993 = header.getOrDefault("X-Amz-Signature")
  valid_608993 = validateParameter(valid_608993, JString, required = false,
                                 default = nil)
  if valid_608993 != nil:
    section.add "X-Amz-Signature", valid_608993
  var valid_608994 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608994 = validateParameter(valid_608994, JString, required = false,
                                 default = nil)
  if valid_608994 != nil:
    section.add "X-Amz-Content-Sha256", valid_608994
  var valid_608995 = header.getOrDefault("X-Amz-Date")
  valid_608995 = validateParameter(valid_608995, JString, required = false,
                                 default = nil)
  if valid_608995 != nil:
    section.add "X-Amz-Date", valid_608995
  var valid_608996 = header.getOrDefault("X-Amz-Credential")
  valid_608996 = validateParameter(valid_608996, JString, required = false,
                                 default = nil)
  if valid_608996 != nil:
    section.add "X-Amz-Credential", valid_608996
  var valid_608997 = header.getOrDefault("X-Amz-Security-Token")
  valid_608997 = validateParameter(valid_608997, JString, required = false,
                                 default = nil)
  if valid_608997 != nil:
    section.add "X-Amz-Security-Token", valid_608997
  var valid_608998 = header.getOrDefault("X-Amz-Algorithm")
  valid_608998 = validateParameter(valid_608998, JString, required = false,
                                 default = nil)
  if valid_608998 != nil:
    section.add "X-Amz-Algorithm", valid_608998
  var valid_608999 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608999 = validateParameter(valid_608999, JString, required = false,
                                 default = nil)
  if valid_608999 != nil:
    section.add "X-Amz-SignedHeaders", valid_608999
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609000: Call_GetDescribeEngineDefaultClusterParameters_608984;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_609000.validator(path, query, header, formData, body)
  let scheme = call_609000.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609000.url(scheme.get, call_609000.host, call_609000.base,
                         call_609000.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609000, url, valid)

proc call*(call_609001: Call_GetDescribeEngineDefaultClusterParameters_608984;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_609002 = newJObject()
  add(query_609002, "Marker", newJString(Marker))
  add(query_609002, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_609002, "Action", newJString(Action))
  add(query_609002, "Version", newJString(Version))
  if Filters != nil:
    query_609002.add "Filters", Filters
  add(query_609002, "MaxRecords", newJInt(MaxRecords))
  result = call_609001.call(nil, query_609002, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_608984(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_608985,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_608986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_609042 = ref object of OpenApiRestCall_605589
proc url_PostDescribeEngineDefaultParameters_609044(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_609043(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609045 = query.getOrDefault("Action")
  valid_609045 = validateParameter(valid_609045, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_609045 != nil:
    section.add "Action", valid_609045
  var valid_609046 = query.getOrDefault("Version")
  valid_609046 = validateParameter(valid_609046, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609046 != nil:
    section.add "Version", valid_609046
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609047 = header.getOrDefault("X-Amz-Signature")
  valid_609047 = validateParameter(valid_609047, JString, required = false,
                                 default = nil)
  if valid_609047 != nil:
    section.add "X-Amz-Signature", valid_609047
  var valid_609048 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609048 = validateParameter(valid_609048, JString, required = false,
                                 default = nil)
  if valid_609048 != nil:
    section.add "X-Amz-Content-Sha256", valid_609048
  var valid_609049 = header.getOrDefault("X-Amz-Date")
  valid_609049 = validateParameter(valid_609049, JString, required = false,
                                 default = nil)
  if valid_609049 != nil:
    section.add "X-Amz-Date", valid_609049
  var valid_609050 = header.getOrDefault("X-Amz-Credential")
  valid_609050 = validateParameter(valid_609050, JString, required = false,
                                 default = nil)
  if valid_609050 != nil:
    section.add "X-Amz-Credential", valid_609050
  var valid_609051 = header.getOrDefault("X-Amz-Security-Token")
  valid_609051 = validateParameter(valid_609051, JString, required = false,
                                 default = nil)
  if valid_609051 != nil:
    section.add "X-Amz-Security-Token", valid_609051
  var valid_609052 = header.getOrDefault("X-Amz-Algorithm")
  valid_609052 = validateParameter(valid_609052, JString, required = false,
                                 default = nil)
  if valid_609052 != nil:
    section.add "X-Amz-Algorithm", valid_609052
  var valid_609053 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609053 = validateParameter(valid_609053, JString, required = false,
                                 default = nil)
  if valid_609053 != nil:
    section.add "X-Amz-SignedHeaders", valid_609053
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  section = newJObject()
  var valid_609054 = formData.getOrDefault("MaxRecords")
  valid_609054 = validateParameter(valid_609054, JInt, required = false, default = nil)
  if valid_609054 != nil:
    section.add "MaxRecords", valid_609054
  var valid_609055 = formData.getOrDefault("Marker")
  valid_609055 = validateParameter(valid_609055, JString, required = false,
                                 default = nil)
  if valid_609055 != nil:
    section.add "Marker", valid_609055
  var valid_609056 = formData.getOrDefault("Filters")
  valid_609056 = validateParameter(valid_609056, JArray, required = false,
                                 default = nil)
  if valid_609056 != nil:
    section.add "Filters", valid_609056
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_609057 = formData.getOrDefault("DBParameterGroupFamily")
  valid_609057 = validateParameter(valid_609057, JString, required = true,
                                 default = nil)
  if valid_609057 != nil:
    section.add "DBParameterGroupFamily", valid_609057
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609058: Call_PostDescribeEngineDefaultParameters_609042;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_609058.validator(path, query, header, formData, body)
  let scheme = call_609058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609058.url(scheme.get, call_609058.host, call_609058.base,
                         call_609058.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609058, url, valid)

proc call*(call_609059: Call_PostDescribeEngineDefaultParameters_609042;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  var query_609060 = newJObject()
  var formData_609061 = newJObject()
  add(formData_609061, "MaxRecords", newJInt(MaxRecords))
  add(formData_609061, "Marker", newJString(Marker))
  add(query_609060, "Action", newJString(Action))
  if Filters != nil:
    formData_609061.add "Filters", Filters
  add(query_609060, "Version", newJString(Version))
  add(formData_609061, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_609059.call(nil, query_609060, nil, formData_609061, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_609042(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_609043, base: "/",
    url: url_PostDescribeEngineDefaultParameters_609044,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_609023 = ref object of OpenApiRestCall_605589
proc url_GetDescribeEngineDefaultParameters_609025(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_609024(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_609026 = query.getOrDefault("Marker")
  valid_609026 = validateParameter(valid_609026, JString, required = false,
                                 default = nil)
  if valid_609026 != nil:
    section.add "Marker", valid_609026
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_609027 = query.getOrDefault("DBParameterGroupFamily")
  valid_609027 = validateParameter(valid_609027, JString, required = true,
                                 default = nil)
  if valid_609027 != nil:
    section.add "DBParameterGroupFamily", valid_609027
  var valid_609028 = query.getOrDefault("Action")
  valid_609028 = validateParameter(valid_609028, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_609028 != nil:
    section.add "Action", valid_609028
  var valid_609029 = query.getOrDefault("Version")
  valid_609029 = validateParameter(valid_609029, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609029 != nil:
    section.add "Version", valid_609029
  var valid_609030 = query.getOrDefault("Filters")
  valid_609030 = validateParameter(valid_609030, JArray, required = false,
                                 default = nil)
  if valid_609030 != nil:
    section.add "Filters", valid_609030
  var valid_609031 = query.getOrDefault("MaxRecords")
  valid_609031 = validateParameter(valid_609031, JInt, required = false, default = nil)
  if valid_609031 != nil:
    section.add "MaxRecords", valid_609031
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609032 = header.getOrDefault("X-Amz-Signature")
  valid_609032 = validateParameter(valid_609032, JString, required = false,
                                 default = nil)
  if valid_609032 != nil:
    section.add "X-Amz-Signature", valid_609032
  var valid_609033 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609033 = validateParameter(valid_609033, JString, required = false,
                                 default = nil)
  if valid_609033 != nil:
    section.add "X-Amz-Content-Sha256", valid_609033
  var valid_609034 = header.getOrDefault("X-Amz-Date")
  valid_609034 = validateParameter(valid_609034, JString, required = false,
                                 default = nil)
  if valid_609034 != nil:
    section.add "X-Amz-Date", valid_609034
  var valid_609035 = header.getOrDefault("X-Amz-Credential")
  valid_609035 = validateParameter(valid_609035, JString, required = false,
                                 default = nil)
  if valid_609035 != nil:
    section.add "X-Amz-Credential", valid_609035
  var valid_609036 = header.getOrDefault("X-Amz-Security-Token")
  valid_609036 = validateParameter(valid_609036, JString, required = false,
                                 default = nil)
  if valid_609036 != nil:
    section.add "X-Amz-Security-Token", valid_609036
  var valid_609037 = header.getOrDefault("X-Amz-Algorithm")
  valid_609037 = validateParameter(valid_609037, JString, required = false,
                                 default = nil)
  if valid_609037 != nil:
    section.add "X-Amz-Algorithm", valid_609037
  var valid_609038 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609038 = validateParameter(valid_609038, JString, required = false,
                                 default = nil)
  if valid_609038 != nil:
    section.add "X-Amz-SignedHeaders", valid_609038
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609039: Call_GetDescribeEngineDefaultParameters_609023;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_609039.validator(path, query, header, formData, body)
  let scheme = call_609039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609039.url(scheme.get, call_609039.host, call_609039.base,
                         call_609039.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609039, url, valid)

proc call*(call_609040: Call_GetDescribeEngineDefaultParameters_609023;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_609041 = newJObject()
  add(query_609041, "Marker", newJString(Marker))
  add(query_609041, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_609041, "Action", newJString(Action))
  add(query_609041, "Version", newJString(Version))
  if Filters != nil:
    query_609041.add "Filters", Filters
  add(query_609041, "MaxRecords", newJInt(MaxRecords))
  result = call_609040.call(nil, query_609041, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_609023(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_609024, base: "/",
    url: url_GetDescribeEngineDefaultParameters_609025,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_609079 = ref object of OpenApiRestCall_605589
proc url_PostDescribeEventCategories_609081(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventCategories_609080(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609082 = query.getOrDefault("Action")
  valid_609082 = validateParameter(valid_609082, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_609082 != nil:
    section.add "Action", valid_609082
  var valid_609083 = query.getOrDefault("Version")
  valid_609083 = validateParameter(valid_609083, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609083 != nil:
    section.add "Version", valid_609083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609084 = header.getOrDefault("X-Amz-Signature")
  valid_609084 = validateParameter(valid_609084, JString, required = false,
                                 default = nil)
  if valid_609084 != nil:
    section.add "X-Amz-Signature", valid_609084
  var valid_609085 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609085 = validateParameter(valid_609085, JString, required = false,
                                 default = nil)
  if valid_609085 != nil:
    section.add "X-Amz-Content-Sha256", valid_609085
  var valid_609086 = header.getOrDefault("X-Amz-Date")
  valid_609086 = validateParameter(valid_609086, JString, required = false,
                                 default = nil)
  if valid_609086 != nil:
    section.add "X-Amz-Date", valid_609086
  var valid_609087 = header.getOrDefault("X-Amz-Credential")
  valid_609087 = validateParameter(valid_609087, JString, required = false,
                                 default = nil)
  if valid_609087 != nil:
    section.add "X-Amz-Credential", valid_609087
  var valid_609088 = header.getOrDefault("X-Amz-Security-Token")
  valid_609088 = validateParameter(valid_609088, JString, required = false,
                                 default = nil)
  if valid_609088 != nil:
    section.add "X-Amz-Security-Token", valid_609088
  var valid_609089 = header.getOrDefault("X-Amz-Algorithm")
  valid_609089 = validateParameter(valid_609089, JString, required = false,
                                 default = nil)
  if valid_609089 != nil:
    section.add "X-Amz-Algorithm", valid_609089
  var valid_609090 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609090 = validateParameter(valid_609090, JString, required = false,
                                 default = nil)
  if valid_609090 != nil:
    section.add "X-Amz-SignedHeaders", valid_609090
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_609091 = formData.getOrDefault("SourceType")
  valid_609091 = validateParameter(valid_609091, JString, required = false,
                                 default = nil)
  if valid_609091 != nil:
    section.add "SourceType", valid_609091
  var valid_609092 = formData.getOrDefault("Filters")
  valid_609092 = validateParameter(valid_609092, JArray, required = false,
                                 default = nil)
  if valid_609092 != nil:
    section.add "Filters", valid_609092
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609093: Call_PostDescribeEventCategories_609079; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_609093.validator(path, query, header, formData, body)
  let scheme = call_609093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609093.url(scheme.get, call_609093.host, call_609093.base,
                         call_609093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609093, url, valid)

proc call*(call_609094: Call_PostDescribeEventCategories_609079;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_609095 = newJObject()
  var formData_609096 = newJObject()
  add(formData_609096, "SourceType", newJString(SourceType))
  add(query_609095, "Action", newJString(Action))
  if Filters != nil:
    formData_609096.add "Filters", Filters
  add(query_609095, "Version", newJString(Version))
  result = call_609094.call(nil, query_609095, nil, formData_609096, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_609079(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_609080, base: "/",
    url: url_PostDescribeEventCategories_609081,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_609062 = ref object of OpenApiRestCall_605589
proc url_GetDescribeEventCategories_609064(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventCategories_609063(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_609065 = query.getOrDefault("SourceType")
  valid_609065 = validateParameter(valid_609065, JString, required = false,
                                 default = nil)
  if valid_609065 != nil:
    section.add "SourceType", valid_609065
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609066 = query.getOrDefault("Action")
  valid_609066 = validateParameter(valid_609066, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_609066 != nil:
    section.add "Action", valid_609066
  var valid_609067 = query.getOrDefault("Version")
  valid_609067 = validateParameter(valid_609067, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609067 != nil:
    section.add "Version", valid_609067
  var valid_609068 = query.getOrDefault("Filters")
  valid_609068 = validateParameter(valid_609068, JArray, required = false,
                                 default = nil)
  if valid_609068 != nil:
    section.add "Filters", valid_609068
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609069 = header.getOrDefault("X-Amz-Signature")
  valid_609069 = validateParameter(valid_609069, JString, required = false,
                                 default = nil)
  if valid_609069 != nil:
    section.add "X-Amz-Signature", valid_609069
  var valid_609070 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609070 = validateParameter(valid_609070, JString, required = false,
                                 default = nil)
  if valid_609070 != nil:
    section.add "X-Amz-Content-Sha256", valid_609070
  var valid_609071 = header.getOrDefault("X-Amz-Date")
  valid_609071 = validateParameter(valid_609071, JString, required = false,
                                 default = nil)
  if valid_609071 != nil:
    section.add "X-Amz-Date", valid_609071
  var valid_609072 = header.getOrDefault("X-Amz-Credential")
  valid_609072 = validateParameter(valid_609072, JString, required = false,
                                 default = nil)
  if valid_609072 != nil:
    section.add "X-Amz-Credential", valid_609072
  var valid_609073 = header.getOrDefault("X-Amz-Security-Token")
  valid_609073 = validateParameter(valid_609073, JString, required = false,
                                 default = nil)
  if valid_609073 != nil:
    section.add "X-Amz-Security-Token", valid_609073
  var valid_609074 = header.getOrDefault("X-Amz-Algorithm")
  valid_609074 = validateParameter(valid_609074, JString, required = false,
                                 default = nil)
  if valid_609074 != nil:
    section.add "X-Amz-Algorithm", valid_609074
  var valid_609075 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609075 = validateParameter(valid_609075, JString, required = false,
                                 default = nil)
  if valid_609075 != nil:
    section.add "X-Amz-SignedHeaders", valid_609075
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609076: Call_GetDescribeEventCategories_609062; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_609076.validator(path, query, header, formData, body)
  let scheme = call_609076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609076.url(scheme.get, call_609076.host, call_609076.base,
                         call_609076.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609076, url, valid)

proc call*(call_609077: Call_GetDescribeEventCategories_609062;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Version: string = "2014-10-31"; Filters: JsonNode = nil): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  var query_609078 = newJObject()
  add(query_609078, "SourceType", newJString(SourceType))
  add(query_609078, "Action", newJString(Action))
  add(query_609078, "Version", newJString(Version))
  if Filters != nil:
    query_609078.add "Filters", Filters
  result = call_609077.call(nil, query_609078, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_609062(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_609063, base: "/",
    url: url_GetDescribeEventCategories_609064,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_609116 = ref object of OpenApiRestCall_605589
proc url_PostDescribeEventSubscriptions_609118(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventSubscriptions_609117(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609119 = query.getOrDefault("Action")
  valid_609119 = validateParameter(valid_609119, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_609119 != nil:
    section.add "Action", valid_609119
  var valid_609120 = query.getOrDefault("Version")
  valid_609120 = validateParameter(valid_609120, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609120 != nil:
    section.add "Version", valid_609120
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609121 = header.getOrDefault("X-Amz-Signature")
  valid_609121 = validateParameter(valid_609121, JString, required = false,
                                 default = nil)
  if valid_609121 != nil:
    section.add "X-Amz-Signature", valid_609121
  var valid_609122 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609122 = validateParameter(valid_609122, JString, required = false,
                                 default = nil)
  if valid_609122 != nil:
    section.add "X-Amz-Content-Sha256", valid_609122
  var valid_609123 = header.getOrDefault("X-Amz-Date")
  valid_609123 = validateParameter(valid_609123, JString, required = false,
                                 default = nil)
  if valid_609123 != nil:
    section.add "X-Amz-Date", valid_609123
  var valid_609124 = header.getOrDefault("X-Amz-Credential")
  valid_609124 = validateParameter(valid_609124, JString, required = false,
                                 default = nil)
  if valid_609124 != nil:
    section.add "X-Amz-Credential", valid_609124
  var valid_609125 = header.getOrDefault("X-Amz-Security-Token")
  valid_609125 = validateParameter(valid_609125, JString, required = false,
                                 default = nil)
  if valid_609125 != nil:
    section.add "X-Amz-Security-Token", valid_609125
  var valid_609126 = header.getOrDefault("X-Amz-Algorithm")
  valid_609126 = validateParameter(valid_609126, JString, required = false,
                                 default = nil)
  if valid_609126 != nil:
    section.add "X-Amz-Algorithm", valid_609126
  var valid_609127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609127 = validateParameter(valid_609127, JString, required = false,
                                 default = nil)
  if valid_609127 != nil:
    section.add "X-Amz-SignedHeaders", valid_609127
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_609128 = formData.getOrDefault("MaxRecords")
  valid_609128 = validateParameter(valid_609128, JInt, required = false, default = nil)
  if valid_609128 != nil:
    section.add "MaxRecords", valid_609128
  var valid_609129 = formData.getOrDefault("Marker")
  valid_609129 = validateParameter(valid_609129, JString, required = false,
                                 default = nil)
  if valid_609129 != nil:
    section.add "Marker", valid_609129
  var valid_609130 = formData.getOrDefault("SubscriptionName")
  valid_609130 = validateParameter(valid_609130, JString, required = false,
                                 default = nil)
  if valid_609130 != nil:
    section.add "SubscriptionName", valid_609130
  var valid_609131 = formData.getOrDefault("Filters")
  valid_609131 = validateParameter(valid_609131, JArray, required = false,
                                 default = nil)
  if valid_609131 != nil:
    section.add "Filters", valid_609131
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609132: Call_PostDescribeEventSubscriptions_609116; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_609132.validator(path, query, header, formData, body)
  let scheme = call_609132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609132.url(scheme.get, call_609132.host, call_609132.base,
                         call_609132.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609132, url, valid)

proc call*(call_609133: Call_PostDescribeEventSubscriptions_609116;
          MaxRecords: int = 0; Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_609134 = newJObject()
  var formData_609135 = newJObject()
  add(formData_609135, "MaxRecords", newJInt(MaxRecords))
  add(formData_609135, "Marker", newJString(Marker))
  add(formData_609135, "SubscriptionName", newJString(SubscriptionName))
  add(query_609134, "Action", newJString(Action))
  if Filters != nil:
    formData_609135.add "Filters", Filters
  add(query_609134, "Version", newJString(Version))
  result = call_609133.call(nil, query_609134, nil, formData_609135, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_609116(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_609117, base: "/",
    url: url_PostDescribeEventSubscriptions_609118,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_609097 = ref object of OpenApiRestCall_605589
proc url_GetDescribeEventSubscriptions_609099(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventSubscriptions_609098(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_609100 = query.getOrDefault("Marker")
  valid_609100 = validateParameter(valid_609100, JString, required = false,
                                 default = nil)
  if valid_609100 != nil:
    section.add "Marker", valid_609100
  var valid_609101 = query.getOrDefault("SubscriptionName")
  valid_609101 = validateParameter(valid_609101, JString, required = false,
                                 default = nil)
  if valid_609101 != nil:
    section.add "SubscriptionName", valid_609101
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609102 = query.getOrDefault("Action")
  valid_609102 = validateParameter(valid_609102, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_609102 != nil:
    section.add "Action", valid_609102
  var valid_609103 = query.getOrDefault("Version")
  valid_609103 = validateParameter(valid_609103, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609103 != nil:
    section.add "Version", valid_609103
  var valid_609104 = query.getOrDefault("Filters")
  valid_609104 = validateParameter(valid_609104, JArray, required = false,
                                 default = nil)
  if valid_609104 != nil:
    section.add "Filters", valid_609104
  var valid_609105 = query.getOrDefault("MaxRecords")
  valid_609105 = validateParameter(valid_609105, JInt, required = false, default = nil)
  if valid_609105 != nil:
    section.add "MaxRecords", valid_609105
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609106 = header.getOrDefault("X-Amz-Signature")
  valid_609106 = validateParameter(valid_609106, JString, required = false,
                                 default = nil)
  if valid_609106 != nil:
    section.add "X-Amz-Signature", valid_609106
  var valid_609107 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609107 = validateParameter(valid_609107, JString, required = false,
                                 default = nil)
  if valid_609107 != nil:
    section.add "X-Amz-Content-Sha256", valid_609107
  var valid_609108 = header.getOrDefault("X-Amz-Date")
  valid_609108 = validateParameter(valid_609108, JString, required = false,
                                 default = nil)
  if valid_609108 != nil:
    section.add "X-Amz-Date", valid_609108
  var valid_609109 = header.getOrDefault("X-Amz-Credential")
  valid_609109 = validateParameter(valid_609109, JString, required = false,
                                 default = nil)
  if valid_609109 != nil:
    section.add "X-Amz-Credential", valid_609109
  var valid_609110 = header.getOrDefault("X-Amz-Security-Token")
  valid_609110 = validateParameter(valid_609110, JString, required = false,
                                 default = nil)
  if valid_609110 != nil:
    section.add "X-Amz-Security-Token", valid_609110
  var valid_609111 = header.getOrDefault("X-Amz-Algorithm")
  valid_609111 = validateParameter(valid_609111, JString, required = false,
                                 default = nil)
  if valid_609111 != nil:
    section.add "X-Amz-Algorithm", valid_609111
  var valid_609112 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609112 = validateParameter(valid_609112, JString, required = false,
                                 default = nil)
  if valid_609112 != nil:
    section.add "X-Amz-SignedHeaders", valid_609112
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609113: Call_GetDescribeEventSubscriptions_609097; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_609113.validator(path, query, header, formData, body)
  let scheme = call_609113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609113.url(scheme.get, call_609113.host, call_609113.base,
                         call_609113.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609113, url, valid)

proc call*(call_609114: Call_GetDescribeEventSubscriptions_609097;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_609115 = newJObject()
  add(query_609115, "Marker", newJString(Marker))
  add(query_609115, "SubscriptionName", newJString(SubscriptionName))
  add(query_609115, "Action", newJString(Action))
  add(query_609115, "Version", newJString(Version))
  if Filters != nil:
    query_609115.add "Filters", Filters
  add(query_609115, "MaxRecords", newJInt(MaxRecords))
  result = call_609114.call(nil, query_609115, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_609097(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_609098, base: "/",
    url: url_GetDescribeEventSubscriptions_609099,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_609160 = ref object of OpenApiRestCall_605589
proc url_PostDescribeEvents_609162(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_609161(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609163 = query.getOrDefault("Action")
  valid_609163 = validateParameter(valid_609163, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_609163 != nil:
    section.add "Action", valid_609163
  var valid_609164 = query.getOrDefault("Version")
  valid_609164 = validateParameter(valid_609164, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609164 != nil:
    section.add "Version", valid_609164
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609165 = header.getOrDefault("X-Amz-Signature")
  valid_609165 = validateParameter(valid_609165, JString, required = false,
                                 default = nil)
  if valid_609165 != nil:
    section.add "X-Amz-Signature", valid_609165
  var valid_609166 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609166 = validateParameter(valid_609166, JString, required = false,
                                 default = nil)
  if valid_609166 != nil:
    section.add "X-Amz-Content-Sha256", valid_609166
  var valid_609167 = header.getOrDefault("X-Amz-Date")
  valid_609167 = validateParameter(valid_609167, JString, required = false,
                                 default = nil)
  if valid_609167 != nil:
    section.add "X-Amz-Date", valid_609167
  var valid_609168 = header.getOrDefault("X-Amz-Credential")
  valid_609168 = validateParameter(valid_609168, JString, required = false,
                                 default = nil)
  if valid_609168 != nil:
    section.add "X-Amz-Credential", valid_609168
  var valid_609169 = header.getOrDefault("X-Amz-Security-Token")
  valid_609169 = validateParameter(valid_609169, JString, required = false,
                                 default = nil)
  if valid_609169 != nil:
    section.add "X-Amz-Security-Token", valid_609169
  var valid_609170 = header.getOrDefault("X-Amz-Algorithm")
  valid_609170 = validateParameter(valid_609170, JString, required = false,
                                 default = nil)
  if valid_609170 != nil:
    section.add "X-Amz-Algorithm", valid_609170
  var valid_609171 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609171 = validateParameter(valid_609171, JString, required = false,
                                 default = nil)
  if valid_609171 != nil:
    section.add "X-Amz-SignedHeaders", valid_609171
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_609172 = formData.getOrDefault("MaxRecords")
  valid_609172 = validateParameter(valid_609172, JInt, required = false, default = nil)
  if valid_609172 != nil:
    section.add "MaxRecords", valid_609172
  var valid_609173 = formData.getOrDefault("Marker")
  valid_609173 = validateParameter(valid_609173, JString, required = false,
                                 default = nil)
  if valid_609173 != nil:
    section.add "Marker", valid_609173
  var valid_609174 = formData.getOrDefault("SourceIdentifier")
  valid_609174 = validateParameter(valid_609174, JString, required = false,
                                 default = nil)
  if valid_609174 != nil:
    section.add "SourceIdentifier", valid_609174
  var valid_609175 = formData.getOrDefault("SourceType")
  valid_609175 = validateParameter(valid_609175, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_609175 != nil:
    section.add "SourceType", valid_609175
  var valid_609176 = formData.getOrDefault("Duration")
  valid_609176 = validateParameter(valid_609176, JInt, required = false, default = nil)
  if valid_609176 != nil:
    section.add "Duration", valid_609176
  var valid_609177 = formData.getOrDefault("EndTime")
  valid_609177 = validateParameter(valid_609177, JString, required = false,
                                 default = nil)
  if valid_609177 != nil:
    section.add "EndTime", valid_609177
  var valid_609178 = formData.getOrDefault("StartTime")
  valid_609178 = validateParameter(valid_609178, JString, required = false,
                                 default = nil)
  if valid_609178 != nil:
    section.add "StartTime", valid_609178
  var valid_609179 = formData.getOrDefault("EventCategories")
  valid_609179 = validateParameter(valid_609179, JArray, required = false,
                                 default = nil)
  if valid_609179 != nil:
    section.add "EventCategories", valid_609179
  var valid_609180 = formData.getOrDefault("Filters")
  valid_609180 = validateParameter(valid_609180, JArray, required = false,
                                 default = nil)
  if valid_609180 != nil:
    section.add "Filters", valid_609180
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609181: Call_PostDescribeEvents_609160; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_609181.validator(path, query, header, formData, body)
  let scheme = call_609181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609181.url(scheme.get, call_609181.host, call_609181.base,
                         call_609181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609181, url, valid)

proc call*(call_609182: Call_PostDescribeEvents_609160; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "db-instance"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; EventCategories: JsonNode = nil;
          Action: string = "DescribeEvents"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_609183 = newJObject()
  var formData_609184 = newJObject()
  add(formData_609184, "MaxRecords", newJInt(MaxRecords))
  add(formData_609184, "Marker", newJString(Marker))
  add(formData_609184, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_609184, "SourceType", newJString(SourceType))
  add(formData_609184, "Duration", newJInt(Duration))
  add(formData_609184, "EndTime", newJString(EndTime))
  add(formData_609184, "StartTime", newJString(StartTime))
  if EventCategories != nil:
    formData_609184.add "EventCategories", EventCategories
  add(query_609183, "Action", newJString(Action))
  if Filters != nil:
    formData_609184.add "Filters", Filters
  add(query_609183, "Version", newJString(Version))
  result = call_609182.call(nil, query_609183, nil, formData_609184, nil)

var postDescribeEvents* = Call_PostDescribeEvents_609160(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_609161, base: "/",
    url: url_PostDescribeEvents_609162, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_609136 = ref object of OpenApiRestCall_605589
proc url_GetDescribeEvents_609138(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_609137(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_609139 = query.getOrDefault("Marker")
  valid_609139 = validateParameter(valid_609139, JString, required = false,
                                 default = nil)
  if valid_609139 != nil:
    section.add "Marker", valid_609139
  var valid_609140 = query.getOrDefault("SourceType")
  valid_609140 = validateParameter(valid_609140, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_609140 != nil:
    section.add "SourceType", valid_609140
  var valid_609141 = query.getOrDefault("SourceIdentifier")
  valid_609141 = validateParameter(valid_609141, JString, required = false,
                                 default = nil)
  if valid_609141 != nil:
    section.add "SourceIdentifier", valid_609141
  var valid_609142 = query.getOrDefault("EventCategories")
  valid_609142 = validateParameter(valid_609142, JArray, required = false,
                                 default = nil)
  if valid_609142 != nil:
    section.add "EventCategories", valid_609142
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609143 = query.getOrDefault("Action")
  valid_609143 = validateParameter(valid_609143, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_609143 != nil:
    section.add "Action", valid_609143
  var valid_609144 = query.getOrDefault("StartTime")
  valid_609144 = validateParameter(valid_609144, JString, required = false,
                                 default = nil)
  if valid_609144 != nil:
    section.add "StartTime", valid_609144
  var valid_609145 = query.getOrDefault("Duration")
  valid_609145 = validateParameter(valid_609145, JInt, required = false, default = nil)
  if valid_609145 != nil:
    section.add "Duration", valid_609145
  var valid_609146 = query.getOrDefault("EndTime")
  valid_609146 = validateParameter(valid_609146, JString, required = false,
                                 default = nil)
  if valid_609146 != nil:
    section.add "EndTime", valid_609146
  var valid_609147 = query.getOrDefault("Version")
  valid_609147 = validateParameter(valid_609147, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609147 != nil:
    section.add "Version", valid_609147
  var valid_609148 = query.getOrDefault("Filters")
  valid_609148 = validateParameter(valid_609148, JArray, required = false,
                                 default = nil)
  if valid_609148 != nil:
    section.add "Filters", valid_609148
  var valid_609149 = query.getOrDefault("MaxRecords")
  valid_609149 = validateParameter(valid_609149, JInt, required = false, default = nil)
  if valid_609149 != nil:
    section.add "MaxRecords", valid_609149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609150 = header.getOrDefault("X-Amz-Signature")
  valid_609150 = validateParameter(valid_609150, JString, required = false,
                                 default = nil)
  if valid_609150 != nil:
    section.add "X-Amz-Signature", valid_609150
  var valid_609151 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609151 = validateParameter(valid_609151, JString, required = false,
                                 default = nil)
  if valid_609151 != nil:
    section.add "X-Amz-Content-Sha256", valid_609151
  var valid_609152 = header.getOrDefault("X-Amz-Date")
  valid_609152 = validateParameter(valid_609152, JString, required = false,
                                 default = nil)
  if valid_609152 != nil:
    section.add "X-Amz-Date", valid_609152
  var valid_609153 = header.getOrDefault("X-Amz-Credential")
  valid_609153 = validateParameter(valid_609153, JString, required = false,
                                 default = nil)
  if valid_609153 != nil:
    section.add "X-Amz-Credential", valid_609153
  var valid_609154 = header.getOrDefault("X-Amz-Security-Token")
  valid_609154 = validateParameter(valid_609154, JString, required = false,
                                 default = nil)
  if valid_609154 != nil:
    section.add "X-Amz-Security-Token", valid_609154
  var valid_609155 = header.getOrDefault("X-Amz-Algorithm")
  valid_609155 = validateParameter(valid_609155, JString, required = false,
                                 default = nil)
  if valid_609155 != nil:
    section.add "X-Amz-Algorithm", valid_609155
  var valid_609156 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609156 = validateParameter(valid_609156, JString, required = false,
                                 default = nil)
  if valid_609156 != nil:
    section.add "X-Amz-SignedHeaders", valid_609156
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609157: Call_GetDescribeEvents_609136; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_609157.validator(path, query, header, formData, body)
  let scheme = call_609157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609157.url(scheme.get, call_609157.host, call_609157.base,
                         call_609157.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609157, url, valid)

proc call*(call_609158: Call_GetDescribeEvents_609136; Marker: string = "";
          SourceType: string = "db-instance"; SourceIdentifier: string = "";
          EventCategories: JsonNode = nil; Action: string = "DescribeEvents";
          StartTime: string = ""; Duration: int = 0; EndTime: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_609159 = newJObject()
  add(query_609159, "Marker", newJString(Marker))
  add(query_609159, "SourceType", newJString(SourceType))
  add(query_609159, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    query_609159.add "EventCategories", EventCategories
  add(query_609159, "Action", newJString(Action))
  add(query_609159, "StartTime", newJString(StartTime))
  add(query_609159, "Duration", newJInt(Duration))
  add(query_609159, "EndTime", newJString(EndTime))
  add(query_609159, "Version", newJString(Version))
  if Filters != nil:
    query_609159.add "Filters", Filters
  add(query_609159, "MaxRecords", newJInt(MaxRecords))
  result = call_609158.call(nil, query_609159, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_609136(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_609137,
    base: "/", url: url_GetDescribeEvents_609138,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeGlobalClusters_609204 = ref object of OpenApiRestCall_605589
proc url_PostDescribeGlobalClusters_609206(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeGlobalClusters_609205(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609207 = query.getOrDefault("Action")
  valid_609207 = validateParameter(valid_609207, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_609207 != nil:
    section.add "Action", valid_609207
  var valid_609208 = query.getOrDefault("Version")
  valid_609208 = validateParameter(valid_609208, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609208 != nil:
    section.add "Version", valid_609208
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609209 = header.getOrDefault("X-Amz-Signature")
  valid_609209 = validateParameter(valid_609209, JString, required = false,
                                 default = nil)
  if valid_609209 != nil:
    section.add "X-Amz-Signature", valid_609209
  var valid_609210 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609210 = validateParameter(valid_609210, JString, required = false,
                                 default = nil)
  if valid_609210 != nil:
    section.add "X-Amz-Content-Sha256", valid_609210
  var valid_609211 = header.getOrDefault("X-Amz-Date")
  valid_609211 = validateParameter(valid_609211, JString, required = false,
                                 default = nil)
  if valid_609211 != nil:
    section.add "X-Amz-Date", valid_609211
  var valid_609212 = header.getOrDefault("X-Amz-Credential")
  valid_609212 = validateParameter(valid_609212, JString, required = false,
                                 default = nil)
  if valid_609212 != nil:
    section.add "X-Amz-Credential", valid_609212
  var valid_609213 = header.getOrDefault("X-Amz-Security-Token")
  valid_609213 = validateParameter(valid_609213, JString, required = false,
                                 default = nil)
  if valid_609213 != nil:
    section.add "X-Amz-Security-Token", valid_609213
  var valid_609214 = header.getOrDefault("X-Amz-Algorithm")
  valid_609214 = validateParameter(valid_609214, JString, required = false,
                                 default = nil)
  if valid_609214 != nil:
    section.add "X-Amz-Algorithm", valid_609214
  var valid_609215 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609215 = validateParameter(valid_609215, JString, required = false,
                                 default = nil)
  if valid_609215 != nil:
    section.add "X-Amz-SignedHeaders", valid_609215
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_609216 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_609216 = validateParameter(valid_609216, JString, required = false,
                                 default = nil)
  if valid_609216 != nil:
    section.add "GlobalClusterIdentifier", valid_609216
  var valid_609217 = formData.getOrDefault("MaxRecords")
  valid_609217 = validateParameter(valid_609217, JInt, required = false, default = nil)
  if valid_609217 != nil:
    section.add "MaxRecords", valid_609217
  var valid_609218 = formData.getOrDefault("Marker")
  valid_609218 = validateParameter(valid_609218, JString, required = false,
                                 default = nil)
  if valid_609218 != nil:
    section.add "Marker", valid_609218
  var valid_609219 = formData.getOrDefault("Filters")
  valid_609219 = validateParameter(valid_609219, JArray, required = false,
                                 default = nil)
  if valid_609219 != nil:
    section.add "Filters", valid_609219
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609220: Call_PostDescribeGlobalClusters_609204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609220.validator(path, query, header, formData, body)
  let scheme = call_609220.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609220.url(scheme.get, call_609220.host, call_609220.base,
                         call_609220.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609220, url, valid)

proc call*(call_609221: Call_PostDescribeGlobalClusters_609204;
          GlobalClusterIdentifier: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeGlobalClusters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_609222 = newJObject()
  var formData_609223 = newJObject()
  add(formData_609223, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_609223, "MaxRecords", newJInt(MaxRecords))
  add(formData_609223, "Marker", newJString(Marker))
  add(query_609222, "Action", newJString(Action))
  if Filters != nil:
    formData_609223.add "Filters", Filters
  add(query_609222, "Version", newJString(Version))
  result = call_609221.call(nil, query_609222, nil, formData_609223, nil)

var postDescribeGlobalClusters* = Call_PostDescribeGlobalClusters_609204(
    name: "postDescribeGlobalClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_PostDescribeGlobalClusters_609205, base: "/",
    url: url_PostDescribeGlobalClusters_609206,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeGlobalClusters_609185 = ref object of OpenApiRestCall_605589
proc url_GetDescribeGlobalClusters_609187(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeGlobalClusters_609186(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_609188 = query.getOrDefault("Marker")
  valid_609188 = validateParameter(valid_609188, JString, required = false,
                                 default = nil)
  if valid_609188 != nil:
    section.add "Marker", valid_609188
  var valid_609189 = query.getOrDefault("GlobalClusterIdentifier")
  valid_609189 = validateParameter(valid_609189, JString, required = false,
                                 default = nil)
  if valid_609189 != nil:
    section.add "GlobalClusterIdentifier", valid_609189
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609190 = query.getOrDefault("Action")
  valid_609190 = validateParameter(valid_609190, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_609190 != nil:
    section.add "Action", valid_609190
  var valid_609191 = query.getOrDefault("Version")
  valid_609191 = validateParameter(valid_609191, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609191 != nil:
    section.add "Version", valid_609191
  var valid_609192 = query.getOrDefault("Filters")
  valid_609192 = validateParameter(valid_609192, JArray, required = false,
                                 default = nil)
  if valid_609192 != nil:
    section.add "Filters", valid_609192
  var valid_609193 = query.getOrDefault("MaxRecords")
  valid_609193 = validateParameter(valid_609193, JInt, required = false, default = nil)
  if valid_609193 != nil:
    section.add "MaxRecords", valid_609193
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609194 = header.getOrDefault("X-Amz-Signature")
  valid_609194 = validateParameter(valid_609194, JString, required = false,
                                 default = nil)
  if valid_609194 != nil:
    section.add "X-Amz-Signature", valid_609194
  var valid_609195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609195 = validateParameter(valid_609195, JString, required = false,
                                 default = nil)
  if valid_609195 != nil:
    section.add "X-Amz-Content-Sha256", valid_609195
  var valid_609196 = header.getOrDefault("X-Amz-Date")
  valid_609196 = validateParameter(valid_609196, JString, required = false,
                                 default = nil)
  if valid_609196 != nil:
    section.add "X-Amz-Date", valid_609196
  var valid_609197 = header.getOrDefault("X-Amz-Credential")
  valid_609197 = validateParameter(valid_609197, JString, required = false,
                                 default = nil)
  if valid_609197 != nil:
    section.add "X-Amz-Credential", valid_609197
  var valid_609198 = header.getOrDefault("X-Amz-Security-Token")
  valid_609198 = validateParameter(valid_609198, JString, required = false,
                                 default = nil)
  if valid_609198 != nil:
    section.add "X-Amz-Security-Token", valid_609198
  var valid_609199 = header.getOrDefault("X-Amz-Algorithm")
  valid_609199 = validateParameter(valid_609199, JString, required = false,
                                 default = nil)
  if valid_609199 != nil:
    section.add "X-Amz-Algorithm", valid_609199
  var valid_609200 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609200 = validateParameter(valid_609200, JString, required = false,
                                 default = nil)
  if valid_609200 != nil:
    section.add "X-Amz-SignedHeaders", valid_609200
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609201: Call_GetDescribeGlobalClusters_609185; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609201.validator(path, query, header, formData, body)
  let scheme = call_609201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609201.url(scheme.get, call_609201.host, call_609201.base,
                         call_609201.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609201, url, valid)

proc call*(call_609202: Call_GetDescribeGlobalClusters_609185; Marker: string = "";
          GlobalClusterIdentifier: string = "";
          Action: string = "DescribeGlobalClusters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_609203 = newJObject()
  add(query_609203, "Marker", newJString(Marker))
  add(query_609203, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_609203, "Action", newJString(Action))
  add(query_609203, "Version", newJString(Version))
  if Filters != nil:
    query_609203.add "Filters", Filters
  add(query_609203, "MaxRecords", newJInt(MaxRecords))
  result = call_609202.call(nil, query_609203, nil, nil, nil)

var getDescribeGlobalClusters* = Call_GetDescribeGlobalClusters_609185(
    name: "getDescribeGlobalClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_GetDescribeGlobalClusters_609186, base: "/",
    url: url_GetDescribeGlobalClusters_609187,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeInstallationMedia_609243 = ref object of OpenApiRestCall_605589
proc url_PostDescribeInstallationMedia_609245(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeInstallationMedia_609244(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609246 = query.getOrDefault("Action")
  valid_609246 = validateParameter(valid_609246, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_609246 != nil:
    section.add "Action", valid_609246
  var valid_609247 = query.getOrDefault("Version")
  valid_609247 = validateParameter(valid_609247, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609247 != nil:
    section.add "Version", valid_609247
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609248 = header.getOrDefault("X-Amz-Signature")
  valid_609248 = validateParameter(valid_609248, JString, required = false,
                                 default = nil)
  if valid_609248 != nil:
    section.add "X-Amz-Signature", valid_609248
  var valid_609249 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609249 = validateParameter(valid_609249, JString, required = false,
                                 default = nil)
  if valid_609249 != nil:
    section.add "X-Amz-Content-Sha256", valid_609249
  var valid_609250 = header.getOrDefault("X-Amz-Date")
  valid_609250 = validateParameter(valid_609250, JString, required = false,
                                 default = nil)
  if valid_609250 != nil:
    section.add "X-Amz-Date", valid_609250
  var valid_609251 = header.getOrDefault("X-Amz-Credential")
  valid_609251 = validateParameter(valid_609251, JString, required = false,
                                 default = nil)
  if valid_609251 != nil:
    section.add "X-Amz-Credential", valid_609251
  var valid_609252 = header.getOrDefault("X-Amz-Security-Token")
  valid_609252 = validateParameter(valid_609252, JString, required = false,
                                 default = nil)
  if valid_609252 != nil:
    section.add "X-Amz-Security-Token", valid_609252
  var valid_609253 = header.getOrDefault("X-Amz-Algorithm")
  valid_609253 = validateParameter(valid_609253, JString, required = false,
                                 default = nil)
  if valid_609253 != nil:
    section.add "X-Amz-Algorithm", valid_609253
  var valid_609254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609254 = validateParameter(valid_609254, JString, required = false,
                                 default = nil)
  if valid_609254 != nil:
    section.add "X-Amz-SignedHeaders", valid_609254
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: JString
  ##                      : The installation medium ID.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  section = newJObject()
  var valid_609255 = formData.getOrDefault("MaxRecords")
  valid_609255 = validateParameter(valid_609255, JInt, required = false, default = nil)
  if valid_609255 != nil:
    section.add "MaxRecords", valid_609255
  var valid_609256 = formData.getOrDefault("Marker")
  valid_609256 = validateParameter(valid_609256, JString, required = false,
                                 default = nil)
  if valid_609256 != nil:
    section.add "Marker", valid_609256
  var valid_609257 = formData.getOrDefault("InstallationMediaId")
  valid_609257 = validateParameter(valid_609257, JString, required = false,
                                 default = nil)
  if valid_609257 != nil:
    section.add "InstallationMediaId", valid_609257
  var valid_609258 = formData.getOrDefault("Filters")
  valid_609258 = validateParameter(valid_609258, JArray, required = false,
                                 default = nil)
  if valid_609258 != nil:
    section.add "Filters", valid_609258
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609259: Call_PostDescribeInstallationMedia_609243; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_609259.validator(path, query, header, formData, body)
  let scheme = call_609259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609259.url(scheme.get, call_609259.host, call_609259.base,
                         call_609259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609259, url, valid)

proc call*(call_609260: Call_PostDescribeInstallationMedia_609243;
          MaxRecords: int = 0; Marker: string = ""; InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeInstallationMedia
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: string
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   Version: string (required)
  var query_609261 = newJObject()
  var formData_609262 = newJObject()
  add(formData_609262, "MaxRecords", newJInt(MaxRecords))
  add(formData_609262, "Marker", newJString(Marker))
  add(formData_609262, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_609261, "Action", newJString(Action))
  if Filters != nil:
    formData_609262.add "Filters", Filters
  add(query_609261, "Version", newJString(Version))
  result = call_609260.call(nil, query_609261, nil, formData_609262, nil)

var postDescribeInstallationMedia* = Call_PostDescribeInstallationMedia_609243(
    name: "postDescribeInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_PostDescribeInstallationMedia_609244, base: "/",
    url: url_PostDescribeInstallationMedia_609245,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeInstallationMedia_609224 = ref object of OpenApiRestCall_605589
proc url_GetDescribeInstallationMedia_609226(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeInstallationMedia_609225(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: JString
  ##                      : The installation medium ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_609227 = query.getOrDefault("Marker")
  valid_609227 = validateParameter(valid_609227, JString, required = false,
                                 default = nil)
  if valid_609227 != nil:
    section.add "Marker", valid_609227
  var valid_609228 = query.getOrDefault("InstallationMediaId")
  valid_609228 = validateParameter(valid_609228, JString, required = false,
                                 default = nil)
  if valid_609228 != nil:
    section.add "InstallationMediaId", valid_609228
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609229 = query.getOrDefault("Action")
  valid_609229 = validateParameter(valid_609229, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_609229 != nil:
    section.add "Action", valid_609229
  var valid_609230 = query.getOrDefault("Version")
  valid_609230 = validateParameter(valid_609230, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609230 != nil:
    section.add "Version", valid_609230
  var valid_609231 = query.getOrDefault("Filters")
  valid_609231 = validateParameter(valid_609231, JArray, required = false,
                                 default = nil)
  if valid_609231 != nil:
    section.add "Filters", valid_609231
  var valid_609232 = query.getOrDefault("MaxRecords")
  valid_609232 = validateParameter(valid_609232, JInt, required = false, default = nil)
  if valid_609232 != nil:
    section.add "MaxRecords", valid_609232
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609233 = header.getOrDefault("X-Amz-Signature")
  valid_609233 = validateParameter(valid_609233, JString, required = false,
                                 default = nil)
  if valid_609233 != nil:
    section.add "X-Amz-Signature", valid_609233
  var valid_609234 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609234 = validateParameter(valid_609234, JString, required = false,
                                 default = nil)
  if valid_609234 != nil:
    section.add "X-Amz-Content-Sha256", valid_609234
  var valid_609235 = header.getOrDefault("X-Amz-Date")
  valid_609235 = validateParameter(valid_609235, JString, required = false,
                                 default = nil)
  if valid_609235 != nil:
    section.add "X-Amz-Date", valid_609235
  var valid_609236 = header.getOrDefault("X-Amz-Credential")
  valid_609236 = validateParameter(valid_609236, JString, required = false,
                                 default = nil)
  if valid_609236 != nil:
    section.add "X-Amz-Credential", valid_609236
  var valid_609237 = header.getOrDefault("X-Amz-Security-Token")
  valid_609237 = validateParameter(valid_609237, JString, required = false,
                                 default = nil)
  if valid_609237 != nil:
    section.add "X-Amz-Security-Token", valid_609237
  var valid_609238 = header.getOrDefault("X-Amz-Algorithm")
  valid_609238 = validateParameter(valid_609238, JString, required = false,
                                 default = nil)
  if valid_609238 != nil:
    section.add "X-Amz-Algorithm", valid_609238
  var valid_609239 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609239 = validateParameter(valid_609239, JString, required = false,
                                 default = nil)
  if valid_609239 != nil:
    section.add "X-Amz-SignedHeaders", valid_609239
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609240: Call_GetDescribeInstallationMedia_609224; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_609240.validator(path, query, header, formData, body)
  let scheme = call_609240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609240.url(scheme.get, call_609240.host, call_609240.base,
                         call_609240.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609240, url, valid)

proc call*(call_609241: Call_GetDescribeInstallationMedia_609224;
          Marker: string = ""; InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeInstallationMedia
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: string
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  var query_609242 = newJObject()
  add(query_609242, "Marker", newJString(Marker))
  add(query_609242, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_609242, "Action", newJString(Action))
  add(query_609242, "Version", newJString(Version))
  if Filters != nil:
    query_609242.add "Filters", Filters
  add(query_609242, "MaxRecords", newJInt(MaxRecords))
  result = call_609241.call(nil, query_609242, nil, nil, nil)

var getDescribeInstallationMedia* = Call_GetDescribeInstallationMedia_609224(
    name: "getDescribeInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_GetDescribeInstallationMedia_609225, base: "/",
    url: url_GetDescribeInstallationMedia_609226,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroupOptions_609283 = ref object of OpenApiRestCall_605589
proc url_PostDescribeOptionGroupOptions_609285(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOptionGroupOptions_609284(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609286 = query.getOrDefault("Action")
  valid_609286 = validateParameter(valid_609286, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_609286 != nil:
    section.add "Action", valid_609286
  var valid_609287 = query.getOrDefault("Version")
  valid_609287 = validateParameter(valid_609287, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609287 != nil:
    section.add "Version", valid_609287
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609288 = header.getOrDefault("X-Amz-Signature")
  valid_609288 = validateParameter(valid_609288, JString, required = false,
                                 default = nil)
  if valid_609288 != nil:
    section.add "X-Amz-Signature", valid_609288
  var valid_609289 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609289 = validateParameter(valid_609289, JString, required = false,
                                 default = nil)
  if valid_609289 != nil:
    section.add "X-Amz-Content-Sha256", valid_609289
  var valid_609290 = header.getOrDefault("X-Amz-Date")
  valid_609290 = validateParameter(valid_609290, JString, required = false,
                                 default = nil)
  if valid_609290 != nil:
    section.add "X-Amz-Date", valid_609290
  var valid_609291 = header.getOrDefault("X-Amz-Credential")
  valid_609291 = validateParameter(valid_609291, JString, required = false,
                                 default = nil)
  if valid_609291 != nil:
    section.add "X-Amz-Credential", valid_609291
  var valid_609292 = header.getOrDefault("X-Amz-Security-Token")
  valid_609292 = validateParameter(valid_609292, JString, required = false,
                                 default = nil)
  if valid_609292 != nil:
    section.add "X-Amz-Security-Token", valid_609292
  var valid_609293 = header.getOrDefault("X-Amz-Algorithm")
  valid_609293 = validateParameter(valid_609293, JString, required = false,
                                 default = nil)
  if valid_609293 != nil:
    section.add "X-Amz-Algorithm", valid_609293
  var valid_609294 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609294 = validateParameter(valid_609294, JString, required = false,
                                 default = nil)
  if valid_609294 != nil:
    section.add "X-Amz-SignedHeaders", valid_609294
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_609295 = formData.getOrDefault("MaxRecords")
  valid_609295 = validateParameter(valid_609295, JInt, required = false, default = nil)
  if valid_609295 != nil:
    section.add "MaxRecords", valid_609295
  var valid_609296 = formData.getOrDefault("Marker")
  valid_609296 = validateParameter(valid_609296, JString, required = false,
                                 default = nil)
  if valid_609296 != nil:
    section.add "Marker", valid_609296
  assert formData != nil,
        "formData argument is necessary due to required `EngineName` field"
  var valid_609297 = formData.getOrDefault("EngineName")
  valid_609297 = validateParameter(valid_609297, JString, required = true,
                                 default = nil)
  if valid_609297 != nil:
    section.add "EngineName", valid_609297
  var valid_609298 = formData.getOrDefault("MajorEngineVersion")
  valid_609298 = validateParameter(valid_609298, JString, required = false,
                                 default = nil)
  if valid_609298 != nil:
    section.add "MajorEngineVersion", valid_609298
  var valid_609299 = formData.getOrDefault("Filters")
  valid_609299 = validateParameter(valid_609299, JArray, required = false,
                                 default = nil)
  if valid_609299 != nil:
    section.add "Filters", valid_609299
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609300: Call_PostDescribeOptionGroupOptions_609283; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_609300.validator(path, query, header, formData, body)
  let scheme = call_609300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609300.url(scheme.get, call_609300.host, call_609300.base,
                         call_609300.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609300, url, valid)

proc call*(call_609301: Call_PostDescribeOptionGroupOptions_609283;
          EngineName: string; MaxRecords: int = 0; Marker: string = "";
          MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroupOptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_609302 = newJObject()
  var formData_609303 = newJObject()
  add(formData_609303, "MaxRecords", newJInt(MaxRecords))
  add(formData_609303, "Marker", newJString(Marker))
  add(formData_609303, "EngineName", newJString(EngineName))
  add(formData_609303, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_609302, "Action", newJString(Action))
  if Filters != nil:
    formData_609303.add "Filters", Filters
  add(query_609302, "Version", newJString(Version))
  result = call_609301.call(nil, query_609302, nil, formData_609303, nil)

var postDescribeOptionGroupOptions* = Call_PostDescribeOptionGroupOptions_609283(
    name: "postDescribeOptionGroupOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_PostDescribeOptionGroupOptions_609284, base: "/",
    url: url_PostDescribeOptionGroupOptions_609285,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroupOptions_609263 = ref object of OpenApiRestCall_605589
proc url_GetDescribeOptionGroupOptions_609265(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOptionGroupOptions_609264(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_609266 = query.getOrDefault("EngineName")
  valid_609266 = validateParameter(valid_609266, JString, required = true,
                                 default = nil)
  if valid_609266 != nil:
    section.add "EngineName", valid_609266
  var valid_609267 = query.getOrDefault("Marker")
  valid_609267 = validateParameter(valid_609267, JString, required = false,
                                 default = nil)
  if valid_609267 != nil:
    section.add "Marker", valid_609267
  var valid_609268 = query.getOrDefault("Action")
  valid_609268 = validateParameter(valid_609268, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_609268 != nil:
    section.add "Action", valid_609268
  var valid_609269 = query.getOrDefault("Version")
  valid_609269 = validateParameter(valid_609269, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609269 != nil:
    section.add "Version", valid_609269
  var valid_609270 = query.getOrDefault("Filters")
  valid_609270 = validateParameter(valid_609270, JArray, required = false,
                                 default = nil)
  if valid_609270 != nil:
    section.add "Filters", valid_609270
  var valid_609271 = query.getOrDefault("MaxRecords")
  valid_609271 = validateParameter(valid_609271, JInt, required = false, default = nil)
  if valid_609271 != nil:
    section.add "MaxRecords", valid_609271
  var valid_609272 = query.getOrDefault("MajorEngineVersion")
  valid_609272 = validateParameter(valid_609272, JString, required = false,
                                 default = nil)
  if valid_609272 != nil:
    section.add "MajorEngineVersion", valid_609272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609273 = header.getOrDefault("X-Amz-Signature")
  valid_609273 = validateParameter(valid_609273, JString, required = false,
                                 default = nil)
  if valid_609273 != nil:
    section.add "X-Amz-Signature", valid_609273
  var valid_609274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609274 = validateParameter(valid_609274, JString, required = false,
                                 default = nil)
  if valid_609274 != nil:
    section.add "X-Amz-Content-Sha256", valid_609274
  var valid_609275 = header.getOrDefault("X-Amz-Date")
  valid_609275 = validateParameter(valid_609275, JString, required = false,
                                 default = nil)
  if valid_609275 != nil:
    section.add "X-Amz-Date", valid_609275
  var valid_609276 = header.getOrDefault("X-Amz-Credential")
  valid_609276 = validateParameter(valid_609276, JString, required = false,
                                 default = nil)
  if valid_609276 != nil:
    section.add "X-Amz-Credential", valid_609276
  var valid_609277 = header.getOrDefault("X-Amz-Security-Token")
  valid_609277 = validateParameter(valid_609277, JString, required = false,
                                 default = nil)
  if valid_609277 != nil:
    section.add "X-Amz-Security-Token", valid_609277
  var valid_609278 = header.getOrDefault("X-Amz-Algorithm")
  valid_609278 = validateParameter(valid_609278, JString, required = false,
                                 default = nil)
  if valid_609278 != nil:
    section.add "X-Amz-Algorithm", valid_609278
  var valid_609279 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609279 = validateParameter(valid_609279, JString, required = false,
                                 default = nil)
  if valid_609279 != nil:
    section.add "X-Amz-SignedHeaders", valid_609279
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609280: Call_GetDescribeOptionGroupOptions_609263; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_609280.validator(path, query, header, formData, body)
  let scheme = call_609280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609280.url(scheme.get, call_609280.host, call_609280.base,
                         call_609280.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609280, url, valid)

proc call*(call_609281: Call_GetDescribeOptionGroupOptions_609263;
          EngineName: string; Marker: string = "";
          Action: string = "DescribeOptionGroupOptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroupOptions
  ## Describes all available options.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  var query_609282 = newJObject()
  add(query_609282, "EngineName", newJString(EngineName))
  add(query_609282, "Marker", newJString(Marker))
  add(query_609282, "Action", newJString(Action))
  add(query_609282, "Version", newJString(Version))
  if Filters != nil:
    query_609282.add "Filters", Filters
  add(query_609282, "MaxRecords", newJInt(MaxRecords))
  add(query_609282, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_609281.call(nil, query_609282, nil, nil, nil)

var getDescribeOptionGroupOptions* = Call_GetDescribeOptionGroupOptions_609263(
    name: "getDescribeOptionGroupOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_GetDescribeOptionGroupOptions_609264, base: "/",
    url: url_GetDescribeOptionGroupOptions_609265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroups_609325 = ref object of OpenApiRestCall_605589
proc url_PostDescribeOptionGroups_609327(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOptionGroups_609326(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609328 = query.getOrDefault("Action")
  valid_609328 = validateParameter(valid_609328, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_609328 != nil:
    section.add "Action", valid_609328
  var valid_609329 = query.getOrDefault("Version")
  valid_609329 = validateParameter(valid_609329, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609329 != nil:
    section.add "Version", valid_609329
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609330 = header.getOrDefault("X-Amz-Signature")
  valid_609330 = validateParameter(valid_609330, JString, required = false,
                                 default = nil)
  if valid_609330 != nil:
    section.add "X-Amz-Signature", valid_609330
  var valid_609331 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609331 = validateParameter(valid_609331, JString, required = false,
                                 default = nil)
  if valid_609331 != nil:
    section.add "X-Amz-Content-Sha256", valid_609331
  var valid_609332 = header.getOrDefault("X-Amz-Date")
  valid_609332 = validateParameter(valid_609332, JString, required = false,
                                 default = nil)
  if valid_609332 != nil:
    section.add "X-Amz-Date", valid_609332
  var valid_609333 = header.getOrDefault("X-Amz-Credential")
  valid_609333 = validateParameter(valid_609333, JString, required = false,
                                 default = nil)
  if valid_609333 != nil:
    section.add "X-Amz-Credential", valid_609333
  var valid_609334 = header.getOrDefault("X-Amz-Security-Token")
  valid_609334 = validateParameter(valid_609334, JString, required = false,
                                 default = nil)
  if valid_609334 != nil:
    section.add "X-Amz-Security-Token", valid_609334
  var valid_609335 = header.getOrDefault("X-Amz-Algorithm")
  valid_609335 = validateParameter(valid_609335, JString, required = false,
                                 default = nil)
  if valid_609335 != nil:
    section.add "X-Amz-Algorithm", valid_609335
  var valid_609336 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609336 = validateParameter(valid_609336, JString, required = false,
                                 default = nil)
  if valid_609336 != nil:
    section.add "X-Amz-SignedHeaders", valid_609336
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_609337 = formData.getOrDefault("MaxRecords")
  valid_609337 = validateParameter(valid_609337, JInt, required = false, default = nil)
  if valid_609337 != nil:
    section.add "MaxRecords", valid_609337
  var valid_609338 = formData.getOrDefault("Marker")
  valid_609338 = validateParameter(valid_609338, JString, required = false,
                                 default = nil)
  if valid_609338 != nil:
    section.add "Marker", valid_609338
  var valid_609339 = formData.getOrDefault("EngineName")
  valid_609339 = validateParameter(valid_609339, JString, required = false,
                                 default = nil)
  if valid_609339 != nil:
    section.add "EngineName", valid_609339
  var valid_609340 = formData.getOrDefault("MajorEngineVersion")
  valid_609340 = validateParameter(valid_609340, JString, required = false,
                                 default = nil)
  if valid_609340 != nil:
    section.add "MajorEngineVersion", valid_609340
  var valid_609341 = formData.getOrDefault("OptionGroupName")
  valid_609341 = validateParameter(valid_609341, JString, required = false,
                                 default = nil)
  if valid_609341 != nil:
    section.add "OptionGroupName", valid_609341
  var valid_609342 = formData.getOrDefault("Filters")
  valid_609342 = validateParameter(valid_609342, JArray, required = false,
                                 default = nil)
  if valid_609342 != nil:
    section.add "Filters", valid_609342
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609343: Call_PostDescribeOptionGroups_609325; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_609343.validator(path, query, header, formData, body)
  let scheme = call_609343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609343.url(scheme.get, call_609343.host, call_609343.base,
                         call_609343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609343, url, valid)

proc call*(call_609344: Call_PostDescribeOptionGroups_609325; MaxRecords: int = 0;
          Marker: string = ""; EngineName: string = ""; MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroups
  ## Describes the available option groups.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_609345 = newJObject()
  var formData_609346 = newJObject()
  add(formData_609346, "MaxRecords", newJInt(MaxRecords))
  add(formData_609346, "Marker", newJString(Marker))
  add(formData_609346, "EngineName", newJString(EngineName))
  add(formData_609346, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_609345, "Action", newJString(Action))
  add(formData_609346, "OptionGroupName", newJString(OptionGroupName))
  if Filters != nil:
    formData_609346.add "Filters", Filters
  add(query_609345, "Version", newJString(Version))
  result = call_609344.call(nil, query_609345, nil, formData_609346, nil)

var postDescribeOptionGroups* = Call_PostDescribeOptionGroups_609325(
    name: "postDescribeOptionGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_PostDescribeOptionGroups_609326, base: "/",
    url: url_PostDescribeOptionGroups_609327, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroups_609304 = ref object of OpenApiRestCall_605589
proc url_GetDescribeOptionGroups_609306(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOptionGroups_609305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  section = newJObject()
  var valid_609307 = query.getOrDefault("EngineName")
  valid_609307 = validateParameter(valid_609307, JString, required = false,
                                 default = nil)
  if valid_609307 != nil:
    section.add "EngineName", valid_609307
  var valid_609308 = query.getOrDefault("Marker")
  valid_609308 = validateParameter(valid_609308, JString, required = false,
                                 default = nil)
  if valid_609308 != nil:
    section.add "Marker", valid_609308
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609309 = query.getOrDefault("Action")
  valid_609309 = validateParameter(valid_609309, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_609309 != nil:
    section.add "Action", valid_609309
  var valid_609310 = query.getOrDefault("OptionGroupName")
  valid_609310 = validateParameter(valid_609310, JString, required = false,
                                 default = nil)
  if valid_609310 != nil:
    section.add "OptionGroupName", valid_609310
  var valid_609311 = query.getOrDefault("Version")
  valid_609311 = validateParameter(valid_609311, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609311 != nil:
    section.add "Version", valid_609311
  var valid_609312 = query.getOrDefault("Filters")
  valid_609312 = validateParameter(valid_609312, JArray, required = false,
                                 default = nil)
  if valid_609312 != nil:
    section.add "Filters", valid_609312
  var valid_609313 = query.getOrDefault("MaxRecords")
  valid_609313 = validateParameter(valid_609313, JInt, required = false, default = nil)
  if valid_609313 != nil:
    section.add "MaxRecords", valid_609313
  var valid_609314 = query.getOrDefault("MajorEngineVersion")
  valid_609314 = validateParameter(valid_609314, JString, required = false,
                                 default = nil)
  if valid_609314 != nil:
    section.add "MajorEngineVersion", valid_609314
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609315 = header.getOrDefault("X-Amz-Signature")
  valid_609315 = validateParameter(valid_609315, JString, required = false,
                                 default = nil)
  if valid_609315 != nil:
    section.add "X-Amz-Signature", valid_609315
  var valid_609316 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609316 = validateParameter(valid_609316, JString, required = false,
                                 default = nil)
  if valid_609316 != nil:
    section.add "X-Amz-Content-Sha256", valid_609316
  var valid_609317 = header.getOrDefault("X-Amz-Date")
  valid_609317 = validateParameter(valid_609317, JString, required = false,
                                 default = nil)
  if valid_609317 != nil:
    section.add "X-Amz-Date", valid_609317
  var valid_609318 = header.getOrDefault("X-Amz-Credential")
  valid_609318 = validateParameter(valid_609318, JString, required = false,
                                 default = nil)
  if valid_609318 != nil:
    section.add "X-Amz-Credential", valid_609318
  var valid_609319 = header.getOrDefault("X-Amz-Security-Token")
  valid_609319 = validateParameter(valid_609319, JString, required = false,
                                 default = nil)
  if valid_609319 != nil:
    section.add "X-Amz-Security-Token", valid_609319
  var valid_609320 = header.getOrDefault("X-Amz-Algorithm")
  valid_609320 = validateParameter(valid_609320, JString, required = false,
                                 default = nil)
  if valid_609320 != nil:
    section.add "X-Amz-Algorithm", valid_609320
  var valid_609321 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609321 = validateParameter(valid_609321, JString, required = false,
                                 default = nil)
  if valid_609321 != nil:
    section.add "X-Amz-SignedHeaders", valid_609321
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609322: Call_GetDescribeOptionGroups_609304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_609322.validator(path, query, header, formData, body)
  let scheme = call_609322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609322.url(scheme.get, call_609322.host, call_609322.base,
                         call_609322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609322, url, valid)

proc call*(call_609323: Call_GetDescribeOptionGroups_609304;
          EngineName: string = ""; Marker: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroups
  ## Describes the available option groups.
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  var query_609324 = newJObject()
  add(query_609324, "EngineName", newJString(EngineName))
  add(query_609324, "Marker", newJString(Marker))
  add(query_609324, "Action", newJString(Action))
  add(query_609324, "OptionGroupName", newJString(OptionGroupName))
  add(query_609324, "Version", newJString(Version))
  if Filters != nil:
    query_609324.add "Filters", Filters
  add(query_609324, "MaxRecords", newJInt(MaxRecords))
  add(query_609324, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_609323.call(nil, query_609324, nil, nil, nil)

var getDescribeOptionGroups* = Call_GetDescribeOptionGroups_609304(
    name: "getDescribeOptionGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_GetDescribeOptionGroups_609305, base: "/",
    url: url_GetDescribeOptionGroups_609306, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_609370 = ref object of OpenApiRestCall_605589
proc url_PostDescribeOrderableDBInstanceOptions_609372(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_609371(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609373 = query.getOrDefault("Action")
  valid_609373 = validateParameter(valid_609373, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_609373 != nil:
    section.add "Action", valid_609373
  var valid_609374 = query.getOrDefault("Version")
  valid_609374 = validateParameter(valid_609374, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609374 != nil:
    section.add "Version", valid_609374
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609375 = header.getOrDefault("X-Amz-Signature")
  valid_609375 = validateParameter(valid_609375, JString, required = false,
                                 default = nil)
  if valid_609375 != nil:
    section.add "X-Amz-Signature", valid_609375
  var valid_609376 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609376 = validateParameter(valid_609376, JString, required = false,
                                 default = nil)
  if valid_609376 != nil:
    section.add "X-Amz-Content-Sha256", valid_609376
  var valid_609377 = header.getOrDefault("X-Amz-Date")
  valid_609377 = validateParameter(valid_609377, JString, required = false,
                                 default = nil)
  if valid_609377 != nil:
    section.add "X-Amz-Date", valid_609377
  var valid_609378 = header.getOrDefault("X-Amz-Credential")
  valid_609378 = validateParameter(valid_609378, JString, required = false,
                                 default = nil)
  if valid_609378 != nil:
    section.add "X-Amz-Credential", valid_609378
  var valid_609379 = header.getOrDefault("X-Amz-Security-Token")
  valid_609379 = validateParameter(valid_609379, JString, required = false,
                                 default = nil)
  if valid_609379 != nil:
    section.add "X-Amz-Security-Token", valid_609379
  var valid_609380 = header.getOrDefault("X-Amz-Algorithm")
  valid_609380 = validateParameter(valid_609380, JString, required = false,
                                 default = nil)
  if valid_609380 != nil:
    section.add "X-Amz-Algorithm", valid_609380
  var valid_609381 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609381 = validateParameter(valid_609381, JString, required = false,
                                 default = nil)
  if valid_609381 != nil:
    section.add "X-Amz-SignedHeaders", valid_609381
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_609382 = formData.getOrDefault("DBInstanceClass")
  valid_609382 = validateParameter(valid_609382, JString, required = false,
                                 default = nil)
  if valid_609382 != nil:
    section.add "DBInstanceClass", valid_609382
  var valid_609383 = formData.getOrDefault("MaxRecords")
  valid_609383 = validateParameter(valid_609383, JInt, required = false, default = nil)
  if valid_609383 != nil:
    section.add "MaxRecords", valid_609383
  var valid_609384 = formData.getOrDefault("EngineVersion")
  valid_609384 = validateParameter(valid_609384, JString, required = false,
                                 default = nil)
  if valid_609384 != nil:
    section.add "EngineVersion", valid_609384
  var valid_609385 = formData.getOrDefault("Marker")
  valid_609385 = validateParameter(valid_609385, JString, required = false,
                                 default = nil)
  if valid_609385 != nil:
    section.add "Marker", valid_609385
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_609386 = formData.getOrDefault("Engine")
  valid_609386 = validateParameter(valid_609386, JString, required = true,
                                 default = nil)
  if valid_609386 != nil:
    section.add "Engine", valid_609386
  var valid_609387 = formData.getOrDefault("Vpc")
  valid_609387 = validateParameter(valid_609387, JBool, required = false, default = nil)
  if valid_609387 != nil:
    section.add "Vpc", valid_609387
  var valid_609388 = formData.getOrDefault("LicenseModel")
  valid_609388 = validateParameter(valid_609388, JString, required = false,
                                 default = nil)
  if valid_609388 != nil:
    section.add "LicenseModel", valid_609388
  var valid_609389 = formData.getOrDefault("Filters")
  valid_609389 = validateParameter(valid_609389, JArray, required = false,
                                 default = nil)
  if valid_609389 != nil:
    section.add "Filters", valid_609389
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609390: Call_PostDescribeOrderableDBInstanceOptions_609370;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_609390.validator(path, query, header, formData, body)
  let scheme = call_609390.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609390.url(scheme.get, call_609390.host, call_609390.base,
                         call_609390.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609390, url, valid)

proc call*(call_609391: Call_PostDescribeOrderableDBInstanceOptions_609370;
          Engine: string; DBInstanceClass: string = ""; MaxRecords: int = 0;
          EngineVersion: string = ""; Marker: string = ""; Vpc: bool = false;
          Action: string = "DescribeOrderableDBInstanceOptions";
          LicenseModel: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_609392 = newJObject()
  var formData_609393 = newJObject()
  add(formData_609393, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_609393, "MaxRecords", newJInt(MaxRecords))
  add(formData_609393, "EngineVersion", newJString(EngineVersion))
  add(formData_609393, "Marker", newJString(Marker))
  add(formData_609393, "Engine", newJString(Engine))
  add(formData_609393, "Vpc", newJBool(Vpc))
  add(query_609392, "Action", newJString(Action))
  add(formData_609393, "LicenseModel", newJString(LicenseModel))
  if Filters != nil:
    formData_609393.add "Filters", Filters
  add(query_609392, "Version", newJString(Version))
  result = call_609391.call(nil, query_609392, nil, formData_609393, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_609370(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_609371, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_609372,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_609347 = ref object of OpenApiRestCall_605589
proc url_GetDescribeOrderableDBInstanceOptions_609349(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_609348(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_609350 = query.getOrDefault("Marker")
  valid_609350 = validateParameter(valid_609350, JString, required = false,
                                 default = nil)
  if valid_609350 != nil:
    section.add "Marker", valid_609350
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_609351 = query.getOrDefault("Engine")
  valid_609351 = validateParameter(valid_609351, JString, required = true,
                                 default = nil)
  if valid_609351 != nil:
    section.add "Engine", valid_609351
  var valid_609352 = query.getOrDefault("LicenseModel")
  valid_609352 = validateParameter(valid_609352, JString, required = false,
                                 default = nil)
  if valid_609352 != nil:
    section.add "LicenseModel", valid_609352
  var valid_609353 = query.getOrDefault("Vpc")
  valid_609353 = validateParameter(valid_609353, JBool, required = false, default = nil)
  if valid_609353 != nil:
    section.add "Vpc", valid_609353
  var valid_609354 = query.getOrDefault("EngineVersion")
  valid_609354 = validateParameter(valid_609354, JString, required = false,
                                 default = nil)
  if valid_609354 != nil:
    section.add "EngineVersion", valid_609354
  var valid_609355 = query.getOrDefault("Action")
  valid_609355 = validateParameter(valid_609355, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_609355 != nil:
    section.add "Action", valid_609355
  var valid_609356 = query.getOrDefault("Version")
  valid_609356 = validateParameter(valid_609356, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609356 != nil:
    section.add "Version", valid_609356
  var valid_609357 = query.getOrDefault("DBInstanceClass")
  valid_609357 = validateParameter(valid_609357, JString, required = false,
                                 default = nil)
  if valid_609357 != nil:
    section.add "DBInstanceClass", valid_609357
  var valid_609358 = query.getOrDefault("Filters")
  valid_609358 = validateParameter(valid_609358, JArray, required = false,
                                 default = nil)
  if valid_609358 != nil:
    section.add "Filters", valid_609358
  var valid_609359 = query.getOrDefault("MaxRecords")
  valid_609359 = validateParameter(valid_609359, JInt, required = false, default = nil)
  if valid_609359 != nil:
    section.add "MaxRecords", valid_609359
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609360 = header.getOrDefault("X-Amz-Signature")
  valid_609360 = validateParameter(valid_609360, JString, required = false,
                                 default = nil)
  if valid_609360 != nil:
    section.add "X-Amz-Signature", valid_609360
  var valid_609361 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609361 = validateParameter(valid_609361, JString, required = false,
                                 default = nil)
  if valid_609361 != nil:
    section.add "X-Amz-Content-Sha256", valid_609361
  var valid_609362 = header.getOrDefault("X-Amz-Date")
  valid_609362 = validateParameter(valid_609362, JString, required = false,
                                 default = nil)
  if valid_609362 != nil:
    section.add "X-Amz-Date", valid_609362
  var valid_609363 = header.getOrDefault("X-Amz-Credential")
  valid_609363 = validateParameter(valid_609363, JString, required = false,
                                 default = nil)
  if valid_609363 != nil:
    section.add "X-Amz-Credential", valid_609363
  var valid_609364 = header.getOrDefault("X-Amz-Security-Token")
  valid_609364 = validateParameter(valid_609364, JString, required = false,
                                 default = nil)
  if valid_609364 != nil:
    section.add "X-Amz-Security-Token", valid_609364
  var valid_609365 = header.getOrDefault("X-Amz-Algorithm")
  valid_609365 = validateParameter(valid_609365, JString, required = false,
                                 default = nil)
  if valid_609365 != nil:
    section.add "X-Amz-Algorithm", valid_609365
  var valid_609366 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609366 = validateParameter(valid_609366, JString, required = false,
                                 default = nil)
  if valid_609366 != nil:
    section.add "X-Amz-SignedHeaders", valid_609366
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609367: Call_GetDescribeOrderableDBInstanceOptions_609347;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_609367.validator(path, query, header, formData, body)
  let scheme = call_609367.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609367.url(scheme.get, call_609367.host, call_609367.base,
                         call_609367.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609367, url, valid)

proc call*(call_609368: Call_GetDescribeOrderableDBInstanceOptions_609347;
          Engine: string; Marker: string = ""; LicenseModel: string = "";
          Vpc: bool = false; EngineVersion: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_609369 = newJObject()
  add(query_609369, "Marker", newJString(Marker))
  add(query_609369, "Engine", newJString(Engine))
  add(query_609369, "LicenseModel", newJString(LicenseModel))
  add(query_609369, "Vpc", newJBool(Vpc))
  add(query_609369, "EngineVersion", newJString(EngineVersion))
  add(query_609369, "Action", newJString(Action))
  add(query_609369, "Version", newJString(Version))
  add(query_609369, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_609369.add "Filters", Filters
  add(query_609369, "MaxRecords", newJInt(MaxRecords))
  result = call_609368.call(nil, query_609369, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_609347(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_609348, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_609349,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_609413 = ref object of OpenApiRestCall_605589
proc url_PostDescribePendingMaintenanceActions_609415(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_609414(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609416 = query.getOrDefault("Action")
  valid_609416 = validateParameter(valid_609416, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_609416 != nil:
    section.add "Action", valid_609416
  var valid_609417 = query.getOrDefault("Version")
  valid_609417 = validateParameter(valid_609417, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609417 != nil:
    section.add "Version", valid_609417
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609418 = header.getOrDefault("X-Amz-Signature")
  valid_609418 = validateParameter(valid_609418, JString, required = false,
                                 default = nil)
  if valid_609418 != nil:
    section.add "X-Amz-Signature", valid_609418
  var valid_609419 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609419 = validateParameter(valid_609419, JString, required = false,
                                 default = nil)
  if valid_609419 != nil:
    section.add "X-Amz-Content-Sha256", valid_609419
  var valid_609420 = header.getOrDefault("X-Amz-Date")
  valid_609420 = validateParameter(valid_609420, JString, required = false,
                                 default = nil)
  if valid_609420 != nil:
    section.add "X-Amz-Date", valid_609420
  var valid_609421 = header.getOrDefault("X-Amz-Credential")
  valid_609421 = validateParameter(valid_609421, JString, required = false,
                                 default = nil)
  if valid_609421 != nil:
    section.add "X-Amz-Credential", valid_609421
  var valid_609422 = header.getOrDefault("X-Amz-Security-Token")
  valid_609422 = validateParameter(valid_609422, JString, required = false,
                                 default = nil)
  if valid_609422 != nil:
    section.add "X-Amz-Security-Token", valid_609422
  var valid_609423 = header.getOrDefault("X-Amz-Algorithm")
  valid_609423 = validateParameter(valid_609423, JString, required = false,
                                 default = nil)
  if valid_609423 != nil:
    section.add "X-Amz-Algorithm", valid_609423
  var valid_609424 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609424 = validateParameter(valid_609424, JString, required = false,
                                 default = nil)
  if valid_609424 != nil:
    section.add "X-Amz-SignedHeaders", valid_609424
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_609425 = formData.getOrDefault("MaxRecords")
  valid_609425 = validateParameter(valid_609425, JInt, required = false, default = nil)
  if valid_609425 != nil:
    section.add "MaxRecords", valid_609425
  var valid_609426 = formData.getOrDefault("Marker")
  valid_609426 = validateParameter(valid_609426, JString, required = false,
                                 default = nil)
  if valid_609426 != nil:
    section.add "Marker", valid_609426
  var valid_609427 = formData.getOrDefault("ResourceIdentifier")
  valid_609427 = validateParameter(valid_609427, JString, required = false,
                                 default = nil)
  if valid_609427 != nil:
    section.add "ResourceIdentifier", valid_609427
  var valid_609428 = formData.getOrDefault("Filters")
  valid_609428 = validateParameter(valid_609428, JArray, required = false,
                                 default = nil)
  if valid_609428 != nil:
    section.add "Filters", valid_609428
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609429: Call_PostDescribePendingMaintenanceActions_609413;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_609429.validator(path, query, header, formData, body)
  let scheme = call_609429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609429.url(scheme.get, call_609429.host, call_609429.base,
                         call_609429.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609429, url, valid)

proc call*(call_609430: Call_PostDescribePendingMaintenanceActions_609413;
          MaxRecords: int = 0; Marker: string = ""; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_609431 = newJObject()
  var formData_609432 = newJObject()
  add(formData_609432, "MaxRecords", newJInt(MaxRecords))
  add(formData_609432, "Marker", newJString(Marker))
  add(formData_609432, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_609431, "Action", newJString(Action))
  if Filters != nil:
    formData_609432.add "Filters", Filters
  add(query_609431, "Version", newJString(Version))
  result = call_609430.call(nil, query_609431, nil, formData_609432, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_609413(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_609414, base: "/",
    url: url_PostDescribePendingMaintenanceActions_609415,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_609394 = ref object of OpenApiRestCall_605589
proc url_GetDescribePendingMaintenanceActions_609396(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_609395(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_609397 = query.getOrDefault("ResourceIdentifier")
  valid_609397 = validateParameter(valid_609397, JString, required = false,
                                 default = nil)
  if valid_609397 != nil:
    section.add "ResourceIdentifier", valid_609397
  var valid_609398 = query.getOrDefault("Marker")
  valid_609398 = validateParameter(valid_609398, JString, required = false,
                                 default = nil)
  if valid_609398 != nil:
    section.add "Marker", valid_609398
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609399 = query.getOrDefault("Action")
  valid_609399 = validateParameter(valid_609399, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_609399 != nil:
    section.add "Action", valid_609399
  var valid_609400 = query.getOrDefault("Version")
  valid_609400 = validateParameter(valid_609400, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609400 != nil:
    section.add "Version", valid_609400
  var valid_609401 = query.getOrDefault("Filters")
  valid_609401 = validateParameter(valid_609401, JArray, required = false,
                                 default = nil)
  if valid_609401 != nil:
    section.add "Filters", valid_609401
  var valid_609402 = query.getOrDefault("MaxRecords")
  valid_609402 = validateParameter(valid_609402, JInt, required = false, default = nil)
  if valid_609402 != nil:
    section.add "MaxRecords", valid_609402
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609403 = header.getOrDefault("X-Amz-Signature")
  valid_609403 = validateParameter(valid_609403, JString, required = false,
                                 default = nil)
  if valid_609403 != nil:
    section.add "X-Amz-Signature", valid_609403
  var valid_609404 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609404 = validateParameter(valid_609404, JString, required = false,
                                 default = nil)
  if valid_609404 != nil:
    section.add "X-Amz-Content-Sha256", valid_609404
  var valid_609405 = header.getOrDefault("X-Amz-Date")
  valid_609405 = validateParameter(valid_609405, JString, required = false,
                                 default = nil)
  if valid_609405 != nil:
    section.add "X-Amz-Date", valid_609405
  var valid_609406 = header.getOrDefault("X-Amz-Credential")
  valid_609406 = validateParameter(valid_609406, JString, required = false,
                                 default = nil)
  if valid_609406 != nil:
    section.add "X-Amz-Credential", valid_609406
  var valid_609407 = header.getOrDefault("X-Amz-Security-Token")
  valid_609407 = validateParameter(valid_609407, JString, required = false,
                                 default = nil)
  if valid_609407 != nil:
    section.add "X-Amz-Security-Token", valid_609407
  var valid_609408 = header.getOrDefault("X-Amz-Algorithm")
  valid_609408 = validateParameter(valid_609408, JString, required = false,
                                 default = nil)
  if valid_609408 != nil:
    section.add "X-Amz-Algorithm", valid_609408
  var valid_609409 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609409 = validateParameter(valid_609409, JString, required = false,
                                 default = nil)
  if valid_609409 != nil:
    section.add "X-Amz-SignedHeaders", valid_609409
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609410: Call_GetDescribePendingMaintenanceActions_609394;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_609410.validator(path, query, header, formData, body)
  let scheme = call_609410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609410.url(scheme.get, call_609410.host, call_609410.base,
                         call_609410.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609410, url, valid)

proc call*(call_609411: Call_GetDescribePendingMaintenanceActions_609394;
          ResourceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_609412 = newJObject()
  add(query_609412, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_609412, "Marker", newJString(Marker))
  add(query_609412, "Action", newJString(Action))
  add(query_609412, "Version", newJString(Version))
  if Filters != nil:
    query_609412.add "Filters", Filters
  add(query_609412, "MaxRecords", newJInt(MaxRecords))
  result = call_609411.call(nil, query_609412, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_609394(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_609395, base: "/",
    url: url_GetDescribePendingMaintenanceActions_609396,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstances_609459 = ref object of OpenApiRestCall_605589
proc url_PostDescribeReservedDBInstances_609461(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedDBInstances_609460(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609462 = query.getOrDefault("Action")
  valid_609462 = validateParameter(valid_609462, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_609462 != nil:
    section.add "Action", valid_609462
  var valid_609463 = query.getOrDefault("Version")
  valid_609463 = validateParameter(valid_609463, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609463 != nil:
    section.add "Version", valid_609463
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609464 = header.getOrDefault("X-Amz-Signature")
  valid_609464 = validateParameter(valid_609464, JString, required = false,
                                 default = nil)
  if valid_609464 != nil:
    section.add "X-Amz-Signature", valid_609464
  var valid_609465 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609465 = validateParameter(valid_609465, JString, required = false,
                                 default = nil)
  if valid_609465 != nil:
    section.add "X-Amz-Content-Sha256", valid_609465
  var valid_609466 = header.getOrDefault("X-Amz-Date")
  valid_609466 = validateParameter(valid_609466, JString, required = false,
                                 default = nil)
  if valid_609466 != nil:
    section.add "X-Amz-Date", valid_609466
  var valid_609467 = header.getOrDefault("X-Amz-Credential")
  valid_609467 = validateParameter(valid_609467, JString, required = false,
                                 default = nil)
  if valid_609467 != nil:
    section.add "X-Amz-Credential", valid_609467
  var valid_609468 = header.getOrDefault("X-Amz-Security-Token")
  valid_609468 = validateParameter(valid_609468, JString, required = false,
                                 default = nil)
  if valid_609468 != nil:
    section.add "X-Amz-Security-Token", valid_609468
  var valid_609469 = header.getOrDefault("X-Amz-Algorithm")
  valid_609469 = validateParameter(valid_609469, JString, required = false,
                                 default = nil)
  if valid_609469 != nil:
    section.add "X-Amz-Algorithm", valid_609469
  var valid_609470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609470 = validateParameter(valid_609470, JString, required = false,
                                 default = nil)
  if valid_609470 != nil:
    section.add "X-Amz-SignedHeaders", valid_609470
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_609471 = formData.getOrDefault("DBInstanceClass")
  valid_609471 = validateParameter(valid_609471, JString, required = false,
                                 default = nil)
  if valid_609471 != nil:
    section.add "DBInstanceClass", valid_609471
  var valid_609472 = formData.getOrDefault("MultiAZ")
  valid_609472 = validateParameter(valid_609472, JBool, required = false, default = nil)
  if valid_609472 != nil:
    section.add "MultiAZ", valid_609472
  var valid_609473 = formData.getOrDefault("MaxRecords")
  valid_609473 = validateParameter(valid_609473, JInt, required = false, default = nil)
  if valid_609473 != nil:
    section.add "MaxRecords", valid_609473
  var valid_609474 = formData.getOrDefault("LeaseId")
  valid_609474 = validateParameter(valid_609474, JString, required = false,
                                 default = nil)
  if valid_609474 != nil:
    section.add "LeaseId", valid_609474
  var valid_609475 = formData.getOrDefault("ReservedDBInstanceId")
  valid_609475 = validateParameter(valid_609475, JString, required = false,
                                 default = nil)
  if valid_609475 != nil:
    section.add "ReservedDBInstanceId", valid_609475
  var valid_609476 = formData.getOrDefault("Marker")
  valid_609476 = validateParameter(valid_609476, JString, required = false,
                                 default = nil)
  if valid_609476 != nil:
    section.add "Marker", valid_609476
  var valid_609477 = formData.getOrDefault("Duration")
  valid_609477 = validateParameter(valid_609477, JString, required = false,
                                 default = nil)
  if valid_609477 != nil:
    section.add "Duration", valid_609477
  var valid_609478 = formData.getOrDefault("OfferingType")
  valid_609478 = validateParameter(valid_609478, JString, required = false,
                                 default = nil)
  if valid_609478 != nil:
    section.add "OfferingType", valid_609478
  var valid_609479 = formData.getOrDefault("ProductDescription")
  valid_609479 = validateParameter(valid_609479, JString, required = false,
                                 default = nil)
  if valid_609479 != nil:
    section.add "ProductDescription", valid_609479
  var valid_609480 = formData.getOrDefault("Filters")
  valid_609480 = validateParameter(valid_609480, JArray, required = false,
                                 default = nil)
  if valid_609480 != nil:
    section.add "Filters", valid_609480
  var valid_609481 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_609481 = validateParameter(valid_609481, JString, required = false,
                                 default = nil)
  if valid_609481 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_609481
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609482: Call_PostDescribeReservedDBInstances_609459;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_609482.validator(path, query, header, formData, body)
  let scheme = call_609482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609482.url(scheme.get, call_609482.host, call_609482.base,
                         call_609482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609482, url, valid)

proc call*(call_609483: Call_PostDescribeReservedDBInstances_609459;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          LeaseId: string = ""; ReservedDBInstanceId: string = ""; Marker: string = "";
          Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstances"; Filters: JsonNode = nil;
          ReservedDBInstancesOfferingId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  var query_609484 = newJObject()
  var formData_609485 = newJObject()
  add(formData_609485, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_609485, "MultiAZ", newJBool(MultiAZ))
  add(formData_609485, "MaxRecords", newJInt(MaxRecords))
  add(formData_609485, "LeaseId", newJString(LeaseId))
  add(formData_609485, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(formData_609485, "Marker", newJString(Marker))
  add(formData_609485, "Duration", newJString(Duration))
  add(formData_609485, "OfferingType", newJString(OfferingType))
  add(formData_609485, "ProductDescription", newJString(ProductDescription))
  add(query_609484, "Action", newJString(Action))
  if Filters != nil:
    formData_609485.add "Filters", Filters
  add(formData_609485, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_609484, "Version", newJString(Version))
  result = call_609483.call(nil, query_609484, nil, formData_609485, nil)

var postDescribeReservedDBInstances* = Call_PostDescribeReservedDBInstances_609459(
    name: "postDescribeReservedDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_PostDescribeReservedDBInstances_609460, base: "/",
    url: url_PostDescribeReservedDBInstances_609461,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstances_609433 = ref object of OpenApiRestCall_605589
proc url_GetDescribeReservedDBInstances_609435(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedDBInstances_609434(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_609436 = query.getOrDefault("Marker")
  valid_609436 = validateParameter(valid_609436, JString, required = false,
                                 default = nil)
  if valid_609436 != nil:
    section.add "Marker", valid_609436
  var valid_609437 = query.getOrDefault("ProductDescription")
  valid_609437 = validateParameter(valid_609437, JString, required = false,
                                 default = nil)
  if valid_609437 != nil:
    section.add "ProductDescription", valid_609437
  var valid_609438 = query.getOrDefault("OfferingType")
  valid_609438 = validateParameter(valid_609438, JString, required = false,
                                 default = nil)
  if valid_609438 != nil:
    section.add "OfferingType", valid_609438
  var valid_609439 = query.getOrDefault("ReservedDBInstanceId")
  valid_609439 = validateParameter(valid_609439, JString, required = false,
                                 default = nil)
  if valid_609439 != nil:
    section.add "ReservedDBInstanceId", valid_609439
  var valid_609440 = query.getOrDefault("LeaseId")
  valid_609440 = validateParameter(valid_609440, JString, required = false,
                                 default = nil)
  if valid_609440 != nil:
    section.add "LeaseId", valid_609440
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609441 = query.getOrDefault("Action")
  valid_609441 = validateParameter(valid_609441, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_609441 != nil:
    section.add "Action", valid_609441
  var valid_609442 = query.getOrDefault("MultiAZ")
  valid_609442 = validateParameter(valid_609442, JBool, required = false, default = nil)
  if valid_609442 != nil:
    section.add "MultiAZ", valid_609442
  var valid_609443 = query.getOrDefault("Duration")
  valid_609443 = validateParameter(valid_609443, JString, required = false,
                                 default = nil)
  if valid_609443 != nil:
    section.add "Duration", valid_609443
  var valid_609444 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_609444 = validateParameter(valid_609444, JString, required = false,
                                 default = nil)
  if valid_609444 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_609444
  var valid_609445 = query.getOrDefault("Version")
  valid_609445 = validateParameter(valid_609445, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609445 != nil:
    section.add "Version", valid_609445
  var valid_609446 = query.getOrDefault("DBInstanceClass")
  valid_609446 = validateParameter(valid_609446, JString, required = false,
                                 default = nil)
  if valid_609446 != nil:
    section.add "DBInstanceClass", valid_609446
  var valid_609447 = query.getOrDefault("Filters")
  valid_609447 = validateParameter(valid_609447, JArray, required = false,
                                 default = nil)
  if valid_609447 != nil:
    section.add "Filters", valid_609447
  var valid_609448 = query.getOrDefault("MaxRecords")
  valid_609448 = validateParameter(valid_609448, JInt, required = false, default = nil)
  if valid_609448 != nil:
    section.add "MaxRecords", valid_609448
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609449 = header.getOrDefault("X-Amz-Signature")
  valid_609449 = validateParameter(valid_609449, JString, required = false,
                                 default = nil)
  if valid_609449 != nil:
    section.add "X-Amz-Signature", valid_609449
  var valid_609450 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609450 = validateParameter(valid_609450, JString, required = false,
                                 default = nil)
  if valid_609450 != nil:
    section.add "X-Amz-Content-Sha256", valid_609450
  var valid_609451 = header.getOrDefault("X-Amz-Date")
  valid_609451 = validateParameter(valid_609451, JString, required = false,
                                 default = nil)
  if valid_609451 != nil:
    section.add "X-Amz-Date", valid_609451
  var valid_609452 = header.getOrDefault("X-Amz-Credential")
  valid_609452 = validateParameter(valid_609452, JString, required = false,
                                 default = nil)
  if valid_609452 != nil:
    section.add "X-Amz-Credential", valid_609452
  var valid_609453 = header.getOrDefault("X-Amz-Security-Token")
  valid_609453 = validateParameter(valid_609453, JString, required = false,
                                 default = nil)
  if valid_609453 != nil:
    section.add "X-Amz-Security-Token", valid_609453
  var valid_609454 = header.getOrDefault("X-Amz-Algorithm")
  valid_609454 = validateParameter(valid_609454, JString, required = false,
                                 default = nil)
  if valid_609454 != nil:
    section.add "X-Amz-Algorithm", valid_609454
  var valid_609455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609455 = validateParameter(valid_609455, JString, required = false,
                                 default = nil)
  if valid_609455 != nil:
    section.add "X-Amz-SignedHeaders", valid_609455
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609456: Call_GetDescribeReservedDBInstances_609433; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_609456.validator(path, query, header, formData, body)
  let scheme = call_609456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609456.url(scheme.get, call_609456.host, call_609456.base,
                         call_609456.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609456, url, valid)

proc call*(call_609457: Call_GetDescribeReservedDBInstances_609433;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; ReservedDBInstanceId: string = "";
          LeaseId: string = ""; Action: string = "DescribeReservedDBInstances";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_609458 = newJObject()
  add(query_609458, "Marker", newJString(Marker))
  add(query_609458, "ProductDescription", newJString(ProductDescription))
  add(query_609458, "OfferingType", newJString(OfferingType))
  add(query_609458, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_609458, "LeaseId", newJString(LeaseId))
  add(query_609458, "Action", newJString(Action))
  add(query_609458, "MultiAZ", newJBool(MultiAZ))
  add(query_609458, "Duration", newJString(Duration))
  add(query_609458, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_609458, "Version", newJString(Version))
  add(query_609458, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_609458.add "Filters", Filters
  add(query_609458, "MaxRecords", newJInt(MaxRecords))
  result = call_609457.call(nil, query_609458, nil, nil, nil)

var getDescribeReservedDBInstances* = Call_GetDescribeReservedDBInstances_609433(
    name: "getDescribeReservedDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_GetDescribeReservedDBInstances_609434, base: "/",
    url: url_GetDescribeReservedDBInstances_609435,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstancesOfferings_609510 = ref object of OpenApiRestCall_605589
proc url_PostDescribeReservedDBInstancesOfferings_609512(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedDBInstancesOfferings_609511(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609513 = query.getOrDefault("Action")
  valid_609513 = validateParameter(valid_609513, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_609513 != nil:
    section.add "Action", valid_609513
  var valid_609514 = query.getOrDefault("Version")
  valid_609514 = validateParameter(valid_609514, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609514 != nil:
    section.add "Version", valid_609514
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609515 = header.getOrDefault("X-Amz-Signature")
  valid_609515 = validateParameter(valid_609515, JString, required = false,
                                 default = nil)
  if valid_609515 != nil:
    section.add "X-Amz-Signature", valid_609515
  var valid_609516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609516 = validateParameter(valid_609516, JString, required = false,
                                 default = nil)
  if valid_609516 != nil:
    section.add "X-Amz-Content-Sha256", valid_609516
  var valid_609517 = header.getOrDefault("X-Amz-Date")
  valid_609517 = validateParameter(valid_609517, JString, required = false,
                                 default = nil)
  if valid_609517 != nil:
    section.add "X-Amz-Date", valid_609517
  var valid_609518 = header.getOrDefault("X-Amz-Credential")
  valid_609518 = validateParameter(valid_609518, JString, required = false,
                                 default = nil)
  if valid_609518 != nil:
    section.add "X-Amz-Credential", valid_609518
  var valid_609519 = header.getOrDefault("X-Amz-Security-Token")
  valid_609519 = validateParameter(valid_609519, JString, required = false,
                                 default = nil)
  if valid_609519 != nil:
    section.add "X-Amz-Security-Token", valid_609519
  var valid_609520 = header.getOrDefault("X-Amz-Algorithm")
  valid_609520 = validateParameter(valid_609520, JString, required = false,
                                 default = nil)
  if valid_609520 != nil:
    section.add "X-Amz-Algorithm", valid_609520
  var valid_609521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609521 = validateParameter(valid_609521, JString, required = false,
                                 default = nil)
  if valid_609521 != nil:
    section.add "X-Amz-SignedHeaders", valid_609521
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_609522 = formData.getOrDefault("DBInstanceClass")
  valid_609522 = validateParameter(valid_609522, JString, required = false,
                                 default = nil)
  if valid_609522 != nil:
    section.add "DBInstanceClass", valid_609522
  var valid_609523 = formData.getOrDefault("MultiAZ")
  valid_609523 = validateParameter(valid_609523, JBool, required = false, default = nil)
  if valid_609523 != nil:
    section.add "MultiAZ", valid_609523
  var valid_609524 = formData.getOrDefault("MaxRecords")
  valid_609524 = validateParameter(valid_609524, JInt, required = false, default = nil)
  if valid_609524 != nil:
    section.add "MaxRecords", valid_609524
  var valid_609525 = formData.getOrDefault("Marker")
  valid_609525 = validateParameter(valid_609525, JString, required = false,
                                 default = nil)
  if valid_609525 != nil:
    section.add "Marker", valid_609525
  var valid_609526 = formData.getOrDefault("Duration")
  valid_609526 = validateParameter(valid_609526, JString, required = false,
                                 default = nil)
  if valid_609526 != nil:
    section.add "Duration", valid_609526
  var valid_609527 = formData.getOrDefault("OfferingType")
  valid_609527 = validateParameter(valid_609527, JString, required = false,
                                 default = nil)
  if valid_609527 != nil:
    section.add "OfferingType", valid_609527
  var valid_609528 = formData.getOrDefault("ProductDescription")
  valid_609528 = validateParameter(valid_609528, JString, required = false,
                                 default = nil)
  if valid_609528 != nil:
    section.add "ProductDescription", valid_609528
  var valid_609529 = formData.getOrDefault("Filters")
  valid_609529 = validateParameter(valid_609529, JArray, required = false,
                                 default = nil)
  if valid_609529 != nil:
    section.add "Filters", valid_609529
  var valid_609530 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_609530 = validateParameter(valid_609530, JString, required = false,
                                 default = nil)
  if valid_609530 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_609530
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609531: Call_PostDescribeReservedDBInstancesOfferings_609510;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_609531.validator(path, query, header, formData, body)
  let scheme = call_609531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609531.url(scheme.get, call_609531.host, call_609531.base,
                         call_609531.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609531, url, valid)

proc call*(call_609532: Call_PostDescribeReservedDBInstancesOfferings_609510;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          Marker: string = ""; Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          Filters: JsonNode = nil; ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_609533 = newJObject()
  var formData_609534 = newJObject()
  add(formData_609534, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_609534, "MultiAZ", newJBool(MultiAZ))
  add(formData_609534, "MaxRecords", newJInt(MaxRecords))
  add(formData_609534, "Marker", newJString(Marker))
  add(formData_609534, "Duration", newJString(Duration))
  add(formData_609534, "OfferingType", newJString(OfferingType))
  add(formData_609534, "ProductDescription", newJString(ProductDescription))
  add(query_609533, "Action", newJString(Action))
  if Filters != nil:
    formData_609534.add "Filters", Filters
  add(formData_609534, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_609533, "Version", newJString(Version))
  result = call_609532.call(nil, query_609533, nil, formData_609534, nil)

var postDescribeReservedDBInstancesOfferings* = Call_PostDescribeReservedDBInstancesOfferings_609510(
    name: "postDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_PostDescribeReservedDBInstancesOfferings_609511,
    base: "/", url: url_PostDescribeReservedDBInstancesOfferings_609512,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstancesOfferings_609486 = ref object of OpenApiRestCall_605589
proc url_GetDescribeReservedDBInstancesOfferings_609488(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedDBInstancesOfferings_609487(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_609489 = query.getOrDefault("Marker")
  valid_609489 = validateParameter(valid_609489, JString, required = false,
                                 default = nil)
  if valid_609489 != nil:
    section.add "Marker", valid_609489
  var valid_609490 = query.getOrDefault("ProductDescription")
  valid_609490 = validateParameter(valid_609490, JString, required = false,
                                 default = nil)
  if valid_609490 != nil:
    section.add "ProductDescription", valid_609490
  var valid_609491 = query.getOrDefault("OfferingType")
  valid_609491 = validateParameter(valid_609491, JString, required = false,
                                 default = nil)
  if valid_609491 != nil:
    section.add "OfferingType", valid_609491
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609492 = query.getOrDefault("Action")
  valid_609492 = validateParameter(valid_609492, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_609492 != nil:
    section.add "Action", valid_609492
  var valid_609493 = query.getOrDefault("MultiAZ")
  valid_609493 = validateParameter(valid_609493, JBool, required = false, default = nil)
  if valid_609493 != nil:
    section.add "MultiAZ", valid_609493
  var valid_609494 = query.getOrDefault("Duration")
  valid_609494 = validateParameter(valid_609494, JString, required = false,
                                 default = nil)
  if valid_609494 != nil:
    section.add "Duration", valid_609494
  var valid_609495 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_609495 = validateParameter(valid_609495, JString, required = false,
                                 default = nil)
  if valid_609495 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_609495
  var valid_609496 = query.getOrDefault("Version")
  valid_609496 = validateParameter(valid_609496, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609496 != nil:
    section.add "Version", valid_609496
  var valid_609497 = query.getOrDefault("DBInstanceClass")
  valid_609497 = validateParameter(valid_609497, JString, required = false,
                                 default = nil)
  if valid_609497 != nil:
    section.add "DBInstanceClass", valid_609497
  var valid_609498 = query.getOrDefault("Filters")
  valid_609498 = validateParameter(valid_609498, JArray, required = false,
                                 default = nil)
  if valid_609498 != nil:
    section.add "Filters", valid_609498
  var valid_609499 = query.getOrDefault("MaxRecords")
  valid_609499 = validateParameter(valid_609499, JInt, required = false, default = nil)
  if valid_609499 != nil:
    section.add "MaxRecords", valid_609499
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609500 = header.getOrDefault("X-Amz-Signature")
  valid_609500 = validateParameter(valid_609500, JString, required = false,
                                 default = nil)
  if valid_609500 != nil:
    section.add "X-Amz-Signature", valid_609500
  var valid_609501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609501 = validateParameter(valid_609501, JString, required = false,
                                 default = nil)
  if valid_609501 != nil:
    section.add "X-Amz-Content-Sha256", valid_609501
  var valid_609502 = header.getOrDefault("X-Amz-Date")
  valid_609502 = validateParameter(valid_609502, JString, required = false,
                                 default = nil)
  if valid_609502 != nil:
    section.add "X-Amz-Date", valid_609502
  var valid_609503 = header.getOrDefault("X-Amz-Credential")
  valid_609503 = validateParameter(valid_609503, JString, required = false,
                                 default = nil)
  if valid_609503 != nil:
    section.add "X-Amz-Credential", valid_609503
  var valid_609504 = header.getOrDefault("X-Amz-Security-Token")
  valid_609504 = validateParameter(valid_609504, JString, required = false,
                                 default = nil)
  if valid_609504 != nil:
    section.add "X-Amz-Security-Token", valid_609504
  var valid_609505 = header.getOrDefault("X-Amz-Algorithm")
  valid_609505 = validateParameter(valid_609505, JString, required = false,
                                 default = nil)
  if valid_609505 != nil:
    section.add "X-Amz-Algorithm", valid_609505
  var valid_609506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609506 = validateParameter(valid_609506, JString, required = false,
                                 default = nil)
  if valid_609506 != nil:
    section.add "X-Amz-SignedHeaders", valid_609506
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609507: Call_GetDescribeReservedDBInstancesOfferings_609486;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_609507.validator(path, query, header, formData, body)
  let scheme = call_609507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609507.url(scheme.get, call_609507.host, call_609507.base,
                         call_609507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609507, url, valid)

proc call*(call_609508: Call_GetDescribeReservedDBInstancesOfferings_609486;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_609509 = newJObject()
  add(query_609509, "Marker", newJString(Marker))
  add(query_609509, "ProductDescription", newJString(ProductDescription))
  add(query_609509, "OfferingType", newJString(OfferingType))
  add(query_609509, "Action", newJString(Action))
  add(query_609509, "MultiAZ", newJBool(MultiAZ))
  add(query_609509, "Duration", newJString(Duration))
  add(query_609509, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_609509, "Version", newJString(Version))
  add(query_609509, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_609509.add "Filters", Filters
  add(query_609509, "MaxRecords", newJInt(MaxRecords))
  result = call_609508.call(nil, query_609509, nil, nil, nil)

var getDescribeReservedDBInstancesOfferings* = Call_GetDescribeReservedDBInstancesOfferings_609486(
    name: "getDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_GetDescribeReservedDBInstancesOfferings_609487, base: "/",
    url: url_GetDescribeReservedDBInstancesOfferings_609488,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSourceRegions_609554 = ref object of OpenApiRestCall_605589
proc url_PostDescribeSourceRegions_609556(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeSourceRegions_609555(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609557 = query.getOrDefault("Action")
  valid_609557 = validateParameter(valid_609557, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_609557 != nil:
    section.add "Action", valid_609557
  var valid_609558 = query.getOrDefault("Version")
  valid_609558 = validateParameter(valid_609558, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609558 != nil:
    section.add "Version", valid_609558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609559 = header.getOrDefault("X-Amz-Signature")
  valid_609559 = validateParameter(valid_609559, JString, required = false,
                                 default = nil)
  if valid_609559 != nil:
    section.add "X-Amz-Signature", valid_609559
  var valid_609560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609560 = validateParameter(valid_609560, JString, required = false,
                                 default = nil)
  if valid_609560 != nil:
    section.add "X-Amz-Content-Sha256", valid_609560
  var valid_609561 = header.getOrDefault("X-Amz-Date")
  valid_609561 = validateParameter(valid_609561, JString, required = false,
                                 default = nil)
  if valid_609561 != nil:
    section.add "X-Amz-Date", valid_609561
  var valid_609562 = header.getOrDefault("X-Amz-Credential")
  valid_609562 = validateParameter(valid_609562, JString, required = false,
                                 default = nil)
  if valid_609562 != nil:
    section.add "X-Amz-Credential", valid_609562
  var valid_609563 = header.getOrDefault("X-Amz-Security-Token")
  valid_609563 = validateParameter(valid_609563, JString, required = false,
                                 default = nil)
  if valid_609563 != nil:
    section.add "X-Amz-Security-Token", valid_609563
  var valid_609564 = header.getOrDefault("X-Amz-Algorithm")
  valid_609564 = validateParameter(valid_609564, JString, required = false,
                                 default = nil)
  if valid_609564 != nil:
    section.add "X-Amz-Algorithm", valid_609564
  var valid_609565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609565 = validateParameter(valid_609565, JString, required = false,
                                 default = nil)
  if valid_609565 != nil:
    section.add "X-Amz-SignedHeaders", valid_609565
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  section = newJObject()
  var valid_609566 = formData.getOrDefault("MaxRecords")
  valid_609566 = validateParameter(valid_609566, JInt, required = false, default = nil)
  if valid_609566 != nil:
    section.add "MaxRecords", valid_609566
  var valid_609567 = formData.getOrDefault("Marker")
  valid_609567 = validateParameter(valid_609567, JString, required = false,
                                 default = nil)
  if valid_609567 != nil:
    section.add "Marker", valid_609567
  var valid_609568 = formData.getOrDefault("Filters")
  valid_609568 = validateParameter(valid_609568, JArray, required = false,
                                 default = nil)
  if valid_609568 != nil:
    section.add "Filters", valid_609568
  var valid_609569 = formData.getOrDefault("RegionName")
  valid_609569 = validateParameter(valid_609569, JString, required = false,
                                 default = nil)
  if valid_609569 != nil:
    section.add "RegionName", valid_609569
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609570: Call_PostDescribeSourceRegions_609554; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_609570.validator(path, query, header, formData, body)
  let scheme = call_609570.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609570.url(scheme.get, call_609570.host, call_609570.base,
                         call_609570.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609570, url, valid)

proc call*(call_609571: Call_PostDescribeSourceRegions_609554; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeSourceRegions";
          Filters: JsonNode = nil; Version: string = "2014-10-31";
          RegionName: string = ""): Recallable =
  ## postDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  var query_609572 = newJObject()
  var formData_609573 = newJObject()
  add(formData_609573, "MaxRecords", newJInt(MaxRecords))
  add(formData_609573, "Marker", newJString(Marker))
  add(query_609572, "Action", newJString(Action))
  if Filters != nil:
    formData_609573.add "Filters", Filters
  add(query_609572, "Version", newJString(Version))
  add(formData_609573, "RegionName", newJString(RegionName))
  result = call_609571.call(nil, query_609572, nil, formData_609573, nil)

var postDescribeSourceRegions* = Call_PostDescribeSourceRegions_609554(
    name: "postDescribeSourceRegions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_PostDescribeSourceRegions_609555, base: "/",
    url: url_PostDescribeSourceRegions_609556,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSourceRegions_609535 = ref object of OpenApiRestCall_605589
proc url_GetDescribeSourceRegions_609537(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeSourceRegions_609536(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_609538 = query.getOrDefault("Marker")
  valid_609538 = validateParameter(valid_609538, JString, required = false,
                                 default = nil)
  if valid_609538 != nil:
    section.add "Marker", valid_609538
  var valid_609539 = query.getOrDefault("RegionName")
  valid_609539 = validateParameter(valid_609539, JString, required = false,
                                 default = nil)
  if valid_609539 != nil:
    section.add "RegionName", valid_609539
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609540 = query.getOrDefault("Action")
  valid_609540 = validateParameter(valid_609540, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_609540 != nil:
    section.add "Action", valid_609540
  var valid_609541 = query.getOrDefault("Version")
  valid_609541 = validateParameter(valid_609541, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609541 != nil:
    section.add "Version", valid_609541
  var valid_609542 = query.getOrDefault("Filters")
  valid_609542 = validateParameter(valid_609542, JArray, required = false,
                                 default = nil)
  if valid_609542 != nil:
    section.add "Filters", valid_609542
  var valid_609543 = query.getOrDefault("MaxRecords")
  valid_609543 = validateParameter(valid_609543, JInt, required = false, default = nil)
  if valid_609543 != nil:
    section.add "MaxRecords", valid_609543
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609544 = header.getOrDefault("X-Amz-Signature")
  valid_609544 = validateParameter(valid_609544, JString, required = false,
                                 default = nil)
  if valid_609544 != nil:
    section.add "X-Amz-Signature", valid_609544
  var valid_609545 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609545 = validateParameter(valid_609545, JString, required = false,
                                 default = nil)
  if valid_609545 != nil:
    section.add "X-Amz-Content-Sha256", valid_609545
  var valid_609546 = header.getOrDefault("X-Amz-Date")
  valid_609546 = validateParameter(valid_609546, JString, required = false,
                                 default = nil)
  if valid_609546 != nil:
    section.add "X-Amz-Date", valid_609546
  var valid_609547 = header.getOrDefault("X-Amz-Credential")
  valid_609547 = validateParameter(valid_609547, JString, required = false,
                                 default = nil)
  if valid_609547 != nil:
    section.add "X-Amz-Credential", valid_609547
  var valid_609548 = header.getOrDefault("X-Amz-Security-Token")
  valid_609548 = validateParameter(valid_609548, JString, required = false,
                                 default = nil)
  if valid_609548 != nil:
    section.add "X-Amz-Security-Token", valid_609548
  var valid_609549 = header.getOrDefault("X-Amz-Algorithm")
  valid_609549 = validateParameter(valid_609549, JString, required = false,
                                 default = nil)
  if valid_609549 != nil:
    section.add "X-Amz-Algorithm", valid_609549
  var valid_609550 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609550 = validateParameter(valid_609550, JString, required = false,
                                 default = nil)
  if valid_609550 != nil:
    section.add "X-Amz-SignedHeaders", valid_609550
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609551: Call_GetDescribeSourceRegions_609535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_609551.validator(path, query, header, formData, body)
  let scheme = call_609551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609551.url(scheme.get, call_609551.host, call_609551.base,
                         call_609551.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609551, url, valid)

proc call*(call_609552: Call_GetDescribeSourceRegions_609535; Marker: string = "";
          RegionName: string = ""; Action: string = "DescribeSourceRegions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_609553 = newJObject()
  add(query_609553, "Marker", newJString(Marker))
  add(query_609553, "RegionName", newJString(RegionName))
  add(query_609553, "Action", newJString(Action))
  add(query_609553, "Version", newJString(Version))
  if Filters != nil:
    query_609553.add "Filters", Filters
  add(query_609553, "MaxRecords", newJInt(MaxRecords))
  result = call_609552.call(nil, query_609553, nil, nil, nil)

var getDescribeSourceRegions* = Call_GetDescribeSourceRegions_609535(
    name: "getDescribeSourceRegions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_GetDescribeSourceRegions_609536, base: "/",
    url: url_GetDescribeSourceRegions_609537, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_609590 = ref object of OpenApiRestCall_605589
proc url_PostDescribeValidDBInstanceModifications_609592(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_609591(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609593 = query.getOrDefault("Action")
  valid_609593 = validateParameter(valid_609593, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_609593 != nil:
    section.add "Action", valid_609593
  var valid_609594 = query.getOrDefault("Version")
  valid_609594 = validateParameter(valid_609594, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609594 != nil:
    section.add "Version", valid_609594
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609595 = header.getOrDefault("X-Amz-Signature")
  valid_609595 = validateParameter(valid_609595, JString, required = false,
                                 default = nil)
  if valid_609595 != nil:
    section.add "X-Amz-Signature", valid_609595
  var valid_609596 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609596 = validateParameter(valid_609596, JString, required = false,
                                 default = nil)
  if valid_609596 != nil:
    section.add "X-Amz-Content-Sha256", valid_609596
  var valid_609597 = header.getOrDefault("X-Amz-Date")
  valid_609597 = validateParameter(valid_609597, JString, required = false,
                                 default = nil)
  if valid_609597 != nil:
    section.add "X-Amz-Date", valid_609597
  var valid_609598 = header.getOrDefault("X-Amz-Credential")
  valid_609598 = validateParameter(valid_609598, JString, required = false,
                                 default = nil)
  if valid_609598 != nil:
    section.add "X-Amz-Credential", valid_609598
  var valid_609599 = header.getOrDefault("X-Amz-Security-Token")
  valid_609599 = validateParameter(valid_609599, JString, required = false,
                                 default = nil)
  if valid_609599 != nil:
    section.add "X-Amz-Security-Token", valid_609599
  var valid_609600 = header.getOrDefault("X-Amz-Algorithm")
  valid_609600 = validateParameter(valid_609600, JString, required = false,
                                 default = nil)
  if valid_609600 != nil:
    section.add "X-Amz-Algorithm", valid_609600
  var valid_609601 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609601 = validateParameter(valid_609601, JString, required = false,
                                 default = nil)
  if valid_609601 != nil:
    section.add "X-Amz-SignedHeaders", valid_609601
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_609602 = formData.getOrDefault("DBInstanceIdentifier")
  valid_609602 = validateParameter(valid_609602, JString, required = true,
                                 default = nil)
  if valid_609602 != nil:
    section.add "DBInstanceIdentifier", valid_609602
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609603: Call_PostDescribeValidDBInstanceModifications_609590;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_609603.validator(path, query, header, formData, body)
  let scheme = call_609603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609603.url(scheme.get, call_609603.host, call_609603.base,
                         call_609603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609603, url, valid)

proc call*(call_609604: Call_PostDescribeValidDBInstanceModifications_609590;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609605 = newJObject()
  var formData_609606 = newJObject()
  add(formData_609606, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_609605, "Action", newJString(Action))
  add(query_609605, "Version", newJString(Version))
  result = call_609604.call(nil, query_609605, nil, formData_609606, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_609590(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_609591,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_609592,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_609574 = ref object of OpenApiRestCall_605589
proc url_GetDescribeValidDBInstanceModifications_609576(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_609575(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_609577 = query.getOrDefault("DBInstanceIdentifier")
  valid_609577 = validateParameter(valid_609577, JString, required = true,
                                 default = nil)
  if valid_609577 != nil:
    section.add "DBInstanceIdentifier", valid_609577
  var valid_609578 = query.getOrDefault("Action")
  valid_609578 = validateParameter(valid_609578, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_609578 != nil:
    section.add "Action", valid_609578
  var valid_609579 = query.getOrDefault("Version")
  valid_609579 = validateParameter(valid_609579, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609579 != nil:
    section.add "Version", valid_609579
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609580 = header.getOrDefault("X-Amz-Signature")
  valid_609580 = validateParameter(valid_609580, JString, required = false,
                                 default = nil)
  if valid_609580 != nil:
    section.add "X-Amz-Signature", valid_609580
  var valid_609581 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609581 = validateParameter(valid_609581, JString, required = false,
                                 default = nil)
  if valid_609581 != nil:
    section.add "X-Amz-Content-Sha256", valid_609581
  var valid_609582 = header.getOrDefault("X-Amz-Date")
  valid_609582 = validateParameter(valid_609582, JString, required = false,
                                 default = nil)
  if valid_609582 != nil:
    section.add "X-Amz-Date", valid_609582
  var valid_609583 = header.getOrDefault("X-Amz-Credential")
  valid_609583 = validateParameter(valid_609583, JString, required = false,
                                 default = nil)
  if valid_609583 != nil:
    section.add "X-Amz-Credential", valid_609583
  var valid_609584 = header.getOrDefault("X-Amz-Security-Token")
  valid_609584 = validateParameter(valid_609584, JString, required = false,
                                 default = nil)
  if valid_609584 != nil:
    section.add "X-Amz-Security-Token", valid_609584
  var valid_609585 = header.getOrDefault("X-Amz-Algorithm")
  valid_609585 = validateParameter(valid_609585, JString, required = false,
                                 default = nil)
  if valid_609585 != nil:
    section.add "X-Amz-Algorithm", valid_609585
  var valid_609586 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609586 = validateParameter(valid_609586, JString, required = false,
                                 default = nil)
  if valid_609586 != nil:
    section.add "X-Amz-SignedHeaders", valid_609586
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609587: Call_GetDescribeValidDBInstanceModifications_609574;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_609587.validator(path, query, header, formData, body)
  let scheme = call_609587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609587.url(scheme.get, call_609587.host, call_609587.base,
                         call_609587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609587, url, valid)

proc call*(call_609588: Call_GetDescribeValidDBInstanceModifications_609574;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609589 = newJObject()
  add(query_609589, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_609589, "Action", newJString(Action))
  add(query_609589, "Version", newJString(Version))
  result = call_609588.call(nil, query_609589, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_609574(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_609575, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_609576,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDownloadDBLogFilePortion_609626 = ref object of OpenApiRestCall_605589
proc url_PostDownloadDBLogFilePortion_609628(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDownloadDBLogFilePortion_609627(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609629 = query.getOrDefault("Action")
  valid_609629 = validateParameter(valid_609629, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_609629 != nil:
    section.add "Action", valid_609629
  var valid_609630 = query.getOrDefault("Version")
  valid_609630 = validateParameter(valid_609630, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609630 != nil:
    section.add "Version", valid_609630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609631 = header.getOrDefault("X-Amz-Signature")
  valid_609631 = validateParameter(valid_609631, JString, required = false,
                                 default = nil)
  if valid_609631 != nil:
    section.add "X-Amz-Signature", valid_609631
  var valid_609632 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609632 = validateParameter(valid_609632, JString, required = false,
                                 default = nil)
  if valid_609632 != nil:
    section.add "X-Amz-Content-Sha256", valid_609632
  var valid_609633 = header.getOrDefault("X-Amz-Date")
  valid_609633 = validateParameter(valid_609633, JString, required = false,
                                 default = nil)
  if valid_609633 != nil:
    section.add "X-Amz-Date", valid_609633
  var valid_609634 = header.getOrDefault("X-Amz-Credential")
  valid_609634 = validateParameter(valid_609634, JString, required = false,
                                 default = nil)
  if valid_609634 != nil:
    section.add "X-Amz-Credential", valid_609634
  var valid_609635 = header.getOrDefault("X-Amz-Security-Token")
  valid_609635 = validateParameter(valid_609635, JString, required = false,
                                 default = nil)
  if valid_609635 != nil:
    section.add "X-Amz-Security-Token", valid_609635
  var valid_609636 = header.getOrDefault("X-Amz-Algorithm")
  valid_609636 = validateParameter(valid_609636, JString, required = false,
                                 default = nil)
  if valid_609636 != nil:
    section.add "X-Amz-Algorithm", valid_609636
  var valid_609637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609637 = validateParameter(valid_609637, JString, required = false,
                                 default = nil)
  if valid_609637 != nil:
    section.add "X-Amz-SignedHeaders", valid_609637
  result.add "header", section
  ## parameters in `formData` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_609638 = formData.getOrDefault("NumberOfLines")
  valid_609638 = validateParameter(valid_609638, JInt, required = false, default = nil)
  if valid_609638 != nil:
    section.add "NumberOfLines", valid_609638
  var valid_609639 = formData.getOrDefault("Marker")
  valid_609639 = validateParameter(valid_609639, JString, required = false,
                                 default = nil)
  if valid_609639 != nil:
    section.add "Marker", valid_609639
  assert formData != nil,
        "formData argument is necessary due to required `LogFileName` field"
  var valid_609640 = formData.getOrDefault("LogFileName")
  valid_609640 = validateParameter(valid_609640, JString, required = true,
                                 default = nil)
  if valid_609640 != nil:
    section.add "LogFileName", valid_609640
  var valid_609641 = formData.getOrDefault("DBInstanceIdentifier")
  valid_609641 = validateParameter(valid_609641, JString, required = true,
                                 default = nil)
  if valid_609641 != nil:
    section.add "DBInstanceIdentifier", valid_609641
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609642: Call_PostDownloadDBLogFilePortion_609626; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_609642.validator(path, query, header, formData, body)
  let scheme = call_609642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609642.url(scheme.get, call_609642.host, call_609642.base,
                         call_609642.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609642, url, valid)

proc call*(call_609643: Call_PostDownloadDBLogFilePortion_609626;
          LogFileName: string; DBInstanceIdentifier: string; NumberOfLines: int = 0;
          Marker: string = ""; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## postDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609644 = newJObject()
  var formData_609645 = newJObject()
  add(formData_609645, "NumberOfLines", newJInt(NumberOfLines))
  add(formData_609645, "Marker", newJString(Marker))
  add(formData_609645, "LogFileName", newJString(LogFileName))
  add(formData_609645, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_609644, "Action", newJString(Action))
  add(query_609644, "Version", newJString(Version))
  result = call_609643.call(nil, query_609644, nil, formData_609645, nil)

var postDownloadDBLogFilePortion* = Call_PostDownloadDBLogFilePortion_609626(
    name: "postDownloadDBLogFilePortion", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_PostDownloadDBLogFilePortion_609627, base: "/",
    url: url_PostDownloadDBLogFilePortion_609628,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDownloadDBLogFilePortion_609607 = ref object of OpenApiRestCall_605589
proc url_GetDownloadDBLogFilePortion_609609(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDownloadDBLogFilePortion_609608(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: JString (required)
  section = newJObject()
  var valid_609610 = query.getOrDefault("Marker")
  valid_609610 = validateParameter(valid_609610, JString, required = false,
                                 default = nil)
  if valid_609610 != nil:
    section.add "Marker", valid_609610
  var valid_609611 = query.getOrDefault("NumberOfLines")
  valid_609611 = validateParameter(valid_609611, JInt, required = false, default = nil)
  if valid_609611 != nil:
    section.add "NumberOfLines", valid_609611
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_609612 = query.getOrDefault("DBInstanceIdentifier")
  valid_609612 = validateParameter(valid_609612, JString, required = true,
                                 default = nil)
  if valid_609612 != nil:
    section.add "DBInstanceIdentifier", valid_609612
  var valid_609613 = query.getOrDefault("Action")
  valid_609613 = validateParameter(valid_609613, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_609613 != nil:
    section.add "Action", valid_609613
  var valid_609614 = query.getOrDefault("LogFileName")
  valid_609614 = validateParameter(valid_609614, JString, required = true,
                                 default = nil)
  if valid_609614 != nil:
    section.add "LogFileName", valid_609614
  var valid_609615 = query.getOrDefault("Version")
  valid_609615 = validateParameter(valid_609615, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609615 != nil:
    section.add "Version", valid_609615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609616 = header.getOrDefault("X-Amz-Signature")
  valid_609616 = validateParameter(valid_609616, JString, required = false,
                                 default = nil)
  if valid_609616 != nil:
    section.add "X-Amz-Signature", valid_609616
  var valid_609617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609617 = validateParameter(valid_609617, JString, required = false,
                                 default = nil)
  if valid_609617 != nil:
    section.add "X-Amz-Content-Sha256", valid_609617
  var valid_609618 = header.getOrDefault("X-Amz-Date")
  valid_609618 = validateParameter(valid_609618, JString, required = false,
                                 default = nil)
  if valid_609618 != nil:
    section.add "X-Amz-Date", valid_609618
  var valid_609619 = header.getOrDefault("X-Amz-Credential")
  valid_609619 = validateParameter(valid_609619, JString, required = false,
                                 default = nil)
  if valid_609619 != nil:
    section.add "X-Amz-Credential", valid_609619
  var valid_609620 = header.getOrDefault("X-Amz-Security-Token")
  valid_609620 = validateParameter(valid_609620, JString, required = false,
                                 default = nil)
  if valid_609620 != nil:
    section.add "X-Amz-Security-Token", valid_609620
  var valid_609621 = header.getOrDefault("X-Amz-Algorithm")
  valid_609621 = validateParameter(valid_609621, JString, required = false,
                                 default = nil)
  if valid_609621 != nil:
    section.add "X-Amz-Algorithm", valid_609621
  var valid_609622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609622 = validateParameter(valid_609622, JString, required = false,
                                 default = nil)
  if valid_609622 != nil:
    section.add "X-Amz-SignedHeaders", valid_609622
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609623: Call_GetDownloadDBLogFilePortion_609607; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_609623.validator(path, query, header, formData, body)
  let scheme = call_609623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609623.url(scheme.get, call_609623.host, call_609623.base,
                         call_609623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609623, url, valid)

proc call*(call_609624: Call_GetDownloadDBLogFilePortion_609607;
          DBInstanceIdentifier: string; LogFileName: string; Marker: string = "";
          NumberOfLines: int = 0; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## getDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: string (required)
  var query_609625 = newJObject()
  add(query_609625, "Marker", newJString(Marker))
  add(query_609625, "NumberOfLines", newJInt(NumberOfLines))
  add(query_609625, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_609625, "Action", newJString(Action))
  add(query_609625, "LogFileName", newJString(LogFileName))
  add(query_609625, "Version", newJString(Version))
  result = call_609624.call(nil, query_609625, nil, nil, nil)

var getDownloadDBLogFilePortion* = Call_GetDownloadDBLogFilePortion_609607(
    name: "getDownloadDBLogFilePortion", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_GetDownloadDBLogFilePortion_609608, base: "/",
    url: url_GetDownloadDBLogFilePortion_609609,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_609663 = ref object of OpenApiRestCall_605589
proc url_PostFailoverDBCluster_609665(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostFailoverDBCluster_609664(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609666 = query.getOrDefault("Action")
  valid_609666 = validateParameter(valid_609666, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_609666 != nil:
    section.add "Action", valid_609666
  var valid_609667 = query.getOrDefault("Version")
  valid_609667 = validateParameter(valid_609667, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609667 != nil:
    section.add "Version", valid_609667
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609668 = header.getOrDefault("X-Amz-Signature")
  valid_609668 = validateParameter(valid_609668, JString, required = false,
                                 default = nil)
  if valid_609668 != nil:
    section.add "X-Amz-Signature", valid_609668
  var valid_609669 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609669 = validateParameter(valid_609669, JString, required = false,
                                 default = nil)
  if valid_609669 != nil:
    section.add "X-Amz-Content-Sha256", valid_609669
  var valid_609670 = header.getOrDefault("X-Amz-Date")
  valid_609670 = validateParameter(valid_609670, JString, required = false,
                                 default = nil)
  if valid_609670 != nil:
    section.add "X-Amz-Date", valid_609670
  var valid_609671 = header.getOrDefault("X-Amz-Credential")
  valid_609671 = validateParameter(valid_609671, JString, required = false,
                                 default = nil)
  if valid_609671 != nil:
    section.add "X-Amz-Credential", valid_609671
  var valid_609672 = header.getOrDefault("X-Amz-Security-Token")
  valid_609672 = validateParameter(valid_609672, JString, required = false,
                                 default = nil)
  if valid_609672 != nil:
    section.add "X-Amz-Security-Token", valid_609672
  var valid_609673 = header.getOrDefault("X-Amz-Algorithm")
  valid_609673 = validateParameter(valid_609673, JString, required = false,
                                 default = nil)
  if valid_609673 != nil:
    section.add "X-Amz-Algorithm", valid_609673
  var valid_609674 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609674 = validateParameter(valid_609674, JString, required = false,
                                 default = nil)
  if valid_609674 != nil:
    section.add "X-Amz-SignedHeaders", valid_609674
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_609675 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_609675 = validateParameter(valid_609675, JString, required = false,
                                 default = nil)
  if valid_609675 != nil:
    section.add "TargetDBInstanceIdentifier", valid_609675
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_609676 = formData.getOrDefault("DBClusterIdentifier")
  valid_609676 = validateParameter(valid_609676, JString, required = true,
                                 default = nil)
  if valid_609676 != nil:
    section.add "DBClusterIdentifier", valid_609676
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609677: Call_PostFailoverDBCluster_609663; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609677.validator(path, query, header, formData, body)
  let scheme = call_609677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609677.url(scheme.get, call_609677.host, call_609677.base,
                         call_609677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609677, url, valid)

proc call*(call_609678: Call_PostFailoverDBCluster_609663;
          DBClusterIdentifier: string; Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_609679 = newJObject()
  var formData_609680 = newJObject()
  add(query_609679, "Action", newJString(Action))
  add(formData_609680, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_609679, "Version", newJString(Version))
  add(formData_609680, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_609678.call(nil, query_609679, nil, formData_609680, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_609663(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_609664, base: "/",
    url: url_PostFailoverDBCluster_609665, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_609646 = ref object of OpenApiRestCall_605589
proc url_GetFailoverDBCluster_609648(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetFailoverDBCluster_609647(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_609649 = query.getOrDefault("DBClusterIdentifier")
  valid_609649 = validateParameter(valid_609649, JString, required = true,
                                 default = nil)
  if valid_609649 != nil:
    section.add "DBClusterIdentifier", valid_609649
  var valid_609650 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_609650 = validateParameter(valid_609650, JString, required = false,
                                 default = nil)
  if valid_609650 != nil:
    section.add "TargetDBInstanceIdentifier", valid_609650
  var valid_609651 = query.getOrDefault("Action")
  valid_609651 = validateParameter(valid_609651, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_609651 != nil:
    section.add "Action", valid_609651
  var valid_609652 = query.getOrDefault("Version")
  valid_609652 = validateParameter(valid_609652, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609652 != nil:
    section.add "Version", valid_609652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609653 = header.getOrDefault("X-Amz-Signature")
  valid_609653 = validateParameter(valid_609653, JString, required = false,
                                 default = nil)
  if valid_609653 != nil:
    section.add "X-Amz-Signature", valid_609653
  var valid_609654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609654 = validateParameter(valid_609654, JString, required = false,
                                 default = nil)
  if valid_609654 != nil:
    section.add "X-Amz-Content-Sha256", valid_609654
  var valid_609655 = header.getOrDefault("X-Amz-Date")
  valid_609655 = validateParameter(valid_609655, JString, required = false,
                                 default = nil)
  if valid_609655 != nil:
    section.add "X-Amz-Date", valid_609655
  var valid_609656 = header.getOrDefault("X-Amz-Credential")
  valid_609656 = validateParameter(valid_609656, JString, required = false,
                                 default = nil)
  if valid_609656 != nil:
    section.add "X-Amz-Credential", valid_609656
  var valid_609657 = header.getOrDefault("X-Amz-Security-Token")
  valid_609657 = validateParameter(valid_609657, JString, required = false,
                                 default = nil)
  if valid_609657 != nil:
    section.add "X-Amz-Security-Token", valid_609657
  var valid_609658 = header.getOrDefault("X-Amz-Algorithm")
  valid_609658 = validateParameter(valid_609658, JString, required = false,
                                 default = nil)
  if valid_609658 != nil:
    section.add "X-Amz-Algorithm", valid_609658
  var valid_609659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609659 = validateParameter(valid_609659, JString, required = false,
                                 default = nil)
  if valid_609659 != nil:
    section.add "X-Amz-SignedHeaders", valid_609659
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609660: Call_GetFailoverDBCluster_609646; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609660.validator(path, query, header, formData, body)
  let scheme = call_609660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609660.url(scheme.get, call_609660.host, call_609660.base,
                         call_609660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609660, url, valid)

proc call*(call_609661: Call_GetFailoverDBCluster_609646;
          DBClusterIdentifier: string; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609662 = newJObject()
  add(query_609662, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_609662, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_609662, "Action", newJString(Action))
  add(query_609662, "Version", newJString(Version))
  result = call_609661.call(nil, query_609662, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_609646(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_609647, base: "/",
    url: url_GetFailoverDBCluster_609648, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostImportInstallationMedia_609701 = ref object of OpenApiRestCall_605589
proc url_PostImportInstallationMedia_609703(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostImportInstallationMedia_609702(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609704 = query.getOrDefault("Action")
  valid_609704 = validateParameter(valid_609704, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_609704 != nil:
    section.add "Action", valid_609704
  var valid_609705 = query.getOrDefault("Version")
  valid_609705 = validateParameter(valid_609705, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609705 != nil:
    section.add "Version", valid_609705
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609706 = header.getOrDefault("X-Amz-Signature")
  valid_609706 = validateParameter(valid_609706, JString, required = false,
                                 default = nil)
  if valid_609706 != nil:
    section.add "X-Amz-Signature", valid_609706
  var valid_609707 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609707 = validateParameter(valid_609707, JString, required = false,
                                 default = nil)
  if valid_609707 != nil:
    section.add "X-Amz-Content-Sha256", valid_609707
  var valid_609708 = header.getOrDefault("X-Amz-Date")
  valid_609708 = validateParameter(valid_609708, JString, required = false,
                                 default = nil)
  if valid_609708 != nil:
    section.add "X-Amz-Date", valid_609708
  var valid_609709 = header.getOrDefault("X-Amz-Credential")
  valid_609709 = validateParameter(valid_609709, JString, required = false,
                                 default = nil)
  if valid_609709 != nil:
    section.add "X-Amz-Credential", valid_609709
  var valid_609710 = header.getOrDefault("X-Amz-Security-Token")
  valid_609710 = validateParameter(valid_609710, JString, required = false,
                                 default = nil)
  if valid_609710 != nil:
    section.add "X-Amz-Security-Token", valid_609710
  var valid_609711 = header.getOrDefault("X-Amz-Algorithm")
  valid_609711 = validateParameter(valid_609711, JString, required = false,
                                 default = nil)
  if valid_609711 != nil:
    section.add "X-Amz-Algorithm", valid_609711
  var valid_609712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609712 = validateParameter(valid_609712, JString, required = false,
                                 default = nil)
  if valid_609712 != nil:
    section.add "X-Amz-SignedHeaders", valid_609712
  result.add "header", section
  ## parameters in `formData` object:
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OSInstallationMediaPath` field"
  var valid_609713 = formData.getOrDefault("OSInstallationMediaPath")
  valid_609713 = validateParameter(valid_609713, JString, required = true,
                                 default = nil)
  if valid_609713 != nil:
    section.add "OSInstallationMediaPath", valid_609713
  var valid_609714 = formData.getOrDefault("EngineInstallationMediaPath")
  valid_609714 = validateParameter(valid_609714, JString, required = true,
                                 default = nil)
  if valid_609714 != nil:
    section.add "EngineInstallationMediaPath", valid_609714
  var valid_609715 = formData.getOrDefault("EngineVersion")
  valid_609715 = validateParameter(valid_609715, JString, required = true,
                                 default = nil)
  if valid_609715 != nil:
    section.add "EngineVersion", valid_609715
  var valid_609716 = formData.getOrDefault("Engine")
  valid_609716 = validateParameter(valid_609716, JString, required = true,
                                 default = nil)
  if valid_609716 != nil:
    section.add "Engine", valid_609716
  var valid_609717 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_609717 = validateParameter(valid_609717, JString, required = true,
                                 default = nil)
  if valid_609717 != nil:
    section.add "CustomAvailabilityZoneId", valid_609717
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609718: Call_PostImportInstallationMedia_609701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  let valid = call_609718.validator(path, query, header, formData, body)
  let scheme = call_609718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609718.url(scheme.get, call_609718.host, call_609718.base,
                         call_609718.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609718, url, valid)

proc call*(call_609719: Call_PostImportInstallationMedia_609701;
          OSInstallationMediaPath: string; EngineInstallationMediaPath: string;
          EngineVersion: string; Engine: string; CustomAvailabilityZoneId: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## postImportInstallationMedia
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   Version: string (required)
  var query_609720 = newJObject()
  var formData_609721 = newJObject()
  add(formData_609721, "OSInstallationMediaPath",
      newJString(OSInstallationMediaPath))
  add(formData_609721, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(formData_609721, "EngineVersion", newJString(EngineVersion))
  add(formData_609721, "Engine", newJString(Engine))
  add(query_609720, "Action", newJString(Action))
  add(formData_609721, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_609720, "Version", newJString(Version))
  result = call_609719.call(nil, query_609720, nil, formData_609721, nil)

var postImportInstallationMedia* = Call_PostImportInstallationMedia_609701(
    name: "postImportInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_PostImportInstallationMedia_609702, base: "/",
    url: url_PostImportInstallationMedia_609703,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImportInstallationMedia_609681 = ref object of OpenApiRestCall_605589
proc url_GetImportInstallationMedia_609683(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetImportInstallationMedia_609682(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_609684 = query.getOrDefault("Engine")
  valid_609684 = validateParameter(valid_609684, JString, required = true,
                                 default = nil)
  if valid_609684 != nil:
    section.add "Engine", valid_609684
  var valid_609685 = query.getOrDefault("EngineInstallationMediaPath")
  valid_609685 = validateParameter(valid_609685, JString, required = true,
                                 default = nil)
  if valid_609685 != nil:
    section.add "EngineInstallationMediaPath", valid_609685
  var valid_609686 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_609686 = validateParameter(valid_609686, JString, required = true,
                                 default = nil)
  if valid_609686 != nil:
    section.add "CustomAvailabilityZoneId", valid_609686
  var valid_609687 = query.getOrDefault("EngineVersion")
  valid_609687 = validateParameter(valid_609687, JString, required = true,
                                 default = nil)
  if valid_609687 != nil:
    section.add "EngineVersion", valid_609687
  var valid_609688 = query.getOrDefault("Action")
  valid_609688 = validateParameter(valid_609688, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_609688 != nil:
    section.add "Action", valid_609688
  var valid_609689 = query.getOrDefault("OSInstallationMediaPath")
  valid_609689 = validateParameter(valid_609689, JString, required = true,
                                 default = nil)
  if valid_609689 != nil:
    section.add "OSInstallationMediaPath", valid_609689
  var valid_609690 = query.getOrDefault("Version")
  valid_609690 = validateParameter(valid_609690, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609690 != nil:
    section.add "Version", valid_609690
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609691 = header.getOrDefault("X-Amz-Signature")
  valid_609691 = validateParameter(valid_609691, JString, required = false,
                                 default = nil)
  if valid_609691 != nil:
    section.add "X-Amz-Signature", valid_609691
  var valid_609692 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609692 = validateParameter(valid_609692, JString, required = false,
                                 default = nil)
  if valid_609692 != nil:
    section.add "X-Amz-Content-Sha256", valid_609692
  var valid_609693 = header.getOrDefault("X-Amz-Date")
  valid_609693 = validateParameter(valid_609693, JString, required = false,
                                 default = nil)
  if valid_609693 != nil:
    section.add "X-Amz-Date", valid_609693
  var valid_609694 = header.getOrDefault("X-Amz-Credential")
  valid_609694 = validateParameter(valid_609694, JString, required = false,
                                 default = nil)
  if valid_609694 != nil:
    section.add "X-Amz-Credential", valid_609694
  var valid_609695 = header.getOrDefault("X-Amz-Security-Token")
  valid_609695 = validateParameter(valid_609695, JString, required = false,
                                 default = nil)
  if valid_609695 != nil:
    section.add "X-Amz-Security-Token", valid_609695
  var valid_609696 = header.getOrDefault("X-Amz-Algorithm")
  valid_609696 = validateParameter(valid_609696, JString, required = false,
                                 default = nil)
  if valid_609696 != nil:
    section.add "X-Amz-Algorithm", valid_609696
  var valid_609697 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609697 = validateParameter(valid_609697, JString, required = false,
                                 default = nil)
  if valid_609697 != nil:
    section.add "X-Amz-SignedHeaders", valid_609697
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609698: Call_GetImportInstallationMedia_609681; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  let valid = call_609698.validator(path, query, header, formData, body)
  let scheme = call_609698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609698.url(scheme.get, call_609698.host, call_609698.base,
                         call_609698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609698, url, valid)

proc call*(call_609699: Call_GetImportInstallationMedia_609681; Engine: string;
          EngineInstallationMediaPath: string; CustomAvailabilityZoneId: string;
          EngineVersion: string; OSInstallationMediaPath: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## getImportInstallationMedia
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: string (required)
  var query_609700 = newJObject()
  add(query_609700, "Engine", newJString(Engine))
  add(query_609700, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(query_609700, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_609700, "EngineVersion", newJString(EngineVersion))
  add(query_609700, "Action", newJString(Action))
  add(query_609700, "OSInstallationMediaPath", newJString(OSInstallationMediaPath))
  add(query_609700, "Version", newJString(Version))
  result = call_609699.call(nil, query_609700, nil, nil, nil)

var getImportInstallationMedia* = Call_GetImportInstallationMedia_609681(
    name: "getImportInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_GetImportInstallationMedia_609682, base: "/",
    url: url_GetImportInstallationMedia_609683,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_609739 = ref object of OpenApiRestCall_605589
proc url_PostListTagsForResource_609741(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_609740(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609742 = query.getOrDefault("Action")
  valid_609742 = validateParameter(valid_609742, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_609742 != nil:
    section.add "Action", valid_609742
  var valid_609743 = query.getOrDefault("Version")
  valid_609743 = validateParameter(valid_609743, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609743 != nil:
    section.add "Version", valid_609743
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609744 = header.getOrDefault("X-Amz-Signature")
  valid_609744 = validateParameter(valid_609744, JString, required = false,
                                 default = nil)
  if valid_609744 != nil:
    section.add "X-Amz-Signature", valid_609744
  var valid_609745 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609745 = validateParameter(valid_609745, JString, required = false,
                                 default = nil)
  if valid_609745 != nil:
    section.add "X-Amz-Content-Sha256", valid_609745
  var valid_609746 = header.getOrDefault("X-Amz-Date")
  valid_609746 = validateParameter(valid_609746, JString, required = false,
                                 default = nil)
  if valid_609746 != nil:
    section.add "X-Amz-Date", valid_609746
  var valid_609747 = header.getOrDefault("X-Amz-Credential")
  valid_609747 = validateParameter(valid_609747, JString, required = false,
                                 default = nil)
  if valid_609747 != nil:
    section.add "X-Amz-Credential", valid_609747
  var valid_609748 = header.getOrDefault("X-Amz-Security-Token")
  valid_609748 = validateParameter(valid_609748, JString, required = false,
                                 default = nil)
  if valid_609748 != nil:
    section.add "X-Amz-Security-Token", valid_609748
  var valid_609749 = header.getOrDefault("X-Amz-Algorithm")
  valid_609749 = validateParameter(valid_609749, JString, required = false,
                                 default = nil)
  if valid_609749 != nil:
    section.add "X-Amz-Algorithm", valid_609749
  var valid_609750 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609750 = validateParameter(valid_609750, JString, required = false,
                                 default = nil)
  if valid_609750 != nil:
    section.add "X-Amz-SignedHeaders", valid_609750
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  section = newJObject()
  var valid_609751 = formData.getOrDefault("Filters")
  valid_609751 = validateParameter(valid_609751, JArray, required = false,
                                 default = nil)
  if valid_609751 != nil:
    section.add "Filters", valid_609751
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_609752 = formData.getOrDefault("ResourceName")
  valid_609752 = validateParameter(valid_609752, JString, required = true,
                                 default = nil)
  if valid_609752 != nil:
    section.add "ResourceName", valid_609752
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609753: Call_PostListTagsForResource_609739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_609753.validator(path, query, header, formData, body)
  let scheme = call_609753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609753.url(scheme.get, call_609753.host, call_609753.base,
                         call_609753.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609753, url, valid)

proc call*(call_609754: Call_PostListTagsForResource_609739; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  var query_609755 = newJObject()
  var formData_609756 = newJObject()
  add(query_609755, "Action", newJString(Action))
  if Filters != nil:
    formData_609756.add "Filters", Filters
  add(query_609755, "Version", newJString(Version))
  add(formData_609756, "ResourceName", newJString(ResourceName))
  result = call_609754.call(nil, query_609755, nil, formData_609756, nil)

var postListTagsForResource* = Call_PostListTagsForResource_609739(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_609740, base: "/",
    url: url_PostListTagsForResource_609741, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_609722 = ref object of OpenApiRestCall_605589
proc url_GetListTagsForResource_609724(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_609723(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_609725 = query.getOrDefault("ResourceName")
  valid_609725 = validateParameter(valid_609725, JString, required = true,
                                 default = nil)
  if valid_609725 != nil:
    section.add "ResourceName", valid_609725
  var valid_609726 = query.getOrDefault("Action")
  valid_609726 = validateParameter(valid_609726, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_609726 != nil:
    section.add "Action", valid_609726
  var valid_609727 = query.getOrDefault("Version")
  valid_609727 = validateParameter(valid_609727, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609727 != nil:
    section.add "Version", valid_609727
  var valid_609728 = query.getOrDefault("Filters")
  valid_609728 = validateParameter(valid_609728, JArray, required = false,
                                 default = nil)
  if valid_609728 != nil:
    section.add "Filters", valid_609728
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609729 = header.getOrDefault("X-Amz-Signature")
  valid_609729 = validateParameter(valid_609729, JString, required = false,
                                 default = nil)
  if valid_609729 != nil:
    section.add "X-Amz-Signature", valid_609729
  var valid_609730 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609730 = validateParameter(valid_609730, JString, required = false,
                                 default = nil)
  if valid_609730 != nil:
    section.add "X-Amz-Content-Sha256", valid_609730
  var valid_609731 = header.getOrDefault("X-Amz-Date")
  valid_609731 = validateParameter(valid_609731, JString, required = false,
                                 default = nil)
  if valid_609731 != nil:
    section.add "X-Amz-Date", valid_609731
  var valid_609732 = header.getOrDefault("X-Amz-Credential")
  valid_609732 = validateParameter(valid_609732, JString, required = false,
                                 default = nil)
  if valid_609732 != nil:
    section.add "X-Amz-Credential", valid_609732
  var valid_609733 = header.getOrDefault("X-Amz-Security-Token")
  valid_609733 = validateParameter(valid_609733, JString, required = false,
                                 default = nil)
  if valid_609733 != nil:
    section.add "X-Amz-Security-Token", valid_609733
  var valid_609734 = header.getOrDefault("X-Amz-Algorithm")
  valid_609734 = validateParameter(valid_609734, JString, required = false,
                                 default = nil)
  if valid_609734 != nil:
    section.add "X-Amz-Algorithm", valid_609734
  var valid_609735 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609735 = validateParameter(valid_609735, JString, required = false,
                                 default = nil)
  if valid_609735 != nil:
    section.add "X-Amz-SignedHeaders", valid_609735
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609736: Call_GetListTagsForResource_609722; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_609736.validator(path, query, header, formData, body)
  let scheme = call_609736.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609736.url(scheme.get, call_609736.host, call_609736.base,
                         call_609736.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609736, url, valid)

proc call*(call_609737: Call_GetListTagsForResource_609722; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2014-10-31";
          Filters: JsonNode = nil): Recallable =
  ## getListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  var query_609738 = newJObject()
  add(query_609738, "ResourceName", newJString(ResourceName))
  add(query_609738, "Action", newJString(Action))
  add(query_609738, "Version", newJString(Version))
  if Filters != nil:
    query_609738.add "Filters", Filters
  result = call_609737.call(nil, query_609738, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_609722(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_609723, base: "/",
    url: url_GetListTagsForResource_609724, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCertificates_609774 = ref object of OpenApiRestCall_605589
proc url_PostModifyCertificates_609776(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCertificates_609775(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609777 = query.getOrDefault("Action")
  valid_609777 = validateParameter(valid_609777, JString, required = true,
                                 default = newJString("ModifyCertificates"))
  if valid_609777 != nil:
    section.add "Action", valid_609777
  var valid_609778 = query.getOrDefault("Version")
  valid_609778 = validateParameter(valid_609778, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609778 != nil:
    section.add "Version", valid_609778
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609779 = header.getOrDefault("X-Amz-Signature")
  valid_609779 = validateParameter(valid_609779, JString, required = false,
                                 default = nil)
  if valid_609779 != nil:
    section.add "X-Amz-Signature", valid_609779
  var valid_609780 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609780 = validateParameter(valid_609780, JString, required = false,
                                 default = nil)
  if valid_609780 != nil:
    section.add "X-Amz-Content-Sha256", valid_609780
  var valid_609781 = header.getOrDefault("X-Amz-Date")
  valid_609781 = validateParameter(valid_609781, JString, required = false,
                                 default = nil)
  if valid_609781 != nil:
    section.add "X-Amz-Date", valid_609781
  var valid_609782 = header.getOrDefault("X-Amz-Credential")
  valid_609782 = validateParameter(valid_609782, JString, required = false,
                                 default = nil)
  if valid_609782 != nil:
    section.add "X-Amz-Credential", valid_609782
  var valid_609783 = header.getOrDefault("X-Amz-Security-Token")
  valid_609783 = validateParameter(valid_609783, JString, required = false,
                                 default = nil)
  if valid_609783 != nil:
    section.add "X-Amz-Security-Token", valid_609783
  var valid_609784 = header.getOrDefault("X-Amz-Algorithm")
  valid_609784 = validateParameter(valid_609784, JString, required = false,
                                 default = nil)
  if valid_609784 != nil:
    section.add "X-Amz-Algorithm", valid_609784
  var valid_609785 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609785 = validateParameter(valid_609785, JString, required = false,
                                 default = nil)
  if valid_609785 != nil:
    section.add "X-Amz-SignedHeaders", valid_609785
  result.add "header", section
  ## parameters in `formData` object:
  ##   RemoveCustomerOverride: JBool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   CertificateIdentifier: JString
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  section = newJObject()
  var valid_609786 = formData.getOrDefault("RemoveCustomerOverride")
  valid_609786 = validateParameter(valid_609786, JBool, required = false, default = nil)
  if valid_609786 != nil:
    section.add "RemoveCustomerOverride", valid_609786
  var valid_609787 = formData.getOrDefault("CertificateIdentifier")
  valid_609787 = validateParameter(valid_609787, JString, required = false,
                                 default = nil)
  if valid_609787 != nil:
    section.add "CertificateIdentifier", valid_609787
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609788: Call_PostModifyCertificates_609774; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_609788.validator(path, query, header, formData, body)
  let scheme = call_609788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609788.url(scheme.get, call_609788.host, call_609788.base,
                         call_609788.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609788, url, valid)

proc call*(call_609789: Call_PostModifyCertificates_609774;
          RemoveCustomerOverride: bool = false; CertificateIdentifier: string = "";
          Action: string = "ModifyCertificates"; Version: string = "2014-10-31"): Recallable =
  ## postModifyCertificates
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   RemoveCustomerOverride: bool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   CertificateIdentifier: string
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609790 = newJObject()
  var formData_609791 = newJObject()
  add(formData_609791, "RemoveCustomerOverride", newJBool(RemoveCustomerOverride))
  add(formData_609791, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(query_609790, "Action", newJString(Action))
  add(query_609790, "Version", newJString(Version))
  result = call_609789.call(nil, query_609790, nil, formData_609791, nil)

var postModifyCertificates* = Call_PostModifyCertificates_609774(
    name: "postModifyCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCertificates",
    validator: validate_PostModifyCertificates_609775, base: "/",
    url: url_PostModifyCertificates_609776, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCertificates_609757 = ref object of OpenApiRestCall_605589
proc url_GetModifyCertificates_609759(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCertificates_609758(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RemoveCustomerOverride: JBool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateIdentifier: JString
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  section = newJObject()
  var valid_609760 = query.getOrDefault("RemoveCustomerOverride")
  valid_609760 = validateParameter(valid_609760, JBool, required = false, default = nil)
  if valid_609760 != nil:
    section.add "RemoveCustomerOverride", valid_609760
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609761 = query.getOrDefault("Action")
  valid_609761 = validateParameter(valid_609761, JString, required = true,
                                 default = newJString("ModifyCertificates"))
  if valid_609761 != nil:
    section.add "Action", valid_609761
  var valid_609762 = query.getOrDefault("Version")
  valid_609762 = validateParameter(valid_609762, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609762 != nil:
    section.add "Version", valid_609762
  var valid_609763 = query.getOrDefault("CertificateIdentifier")
  valid_609763 = validateParameter(valid_609763, JString, required = false,
                                 default = nil)
  if valid_609763 != nil:
    section.add "CertificateIdentifier", valid_609763
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609764 = header.getOrDefault("X-Amz-Signature")
  valid_609764 = validateParameter(valid_609764, JString, required = false,
                                 default = nil)
  if valid_609764 != nil:
    section.add "X-Amz-Signature", valid_609764
  var valid_609765 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609765 = validateParameter(valid_609765, JString, required = false,
                                 default = nil)
  if valid_609765 != nil:
    section.add "X-Amz-Content-Sha256", valid_609765
  var valid_609766 = header.getOrDefault("X-Amz-Date")
  valid_609766 = validateParameter(valid_609766, JString, required = false,
                                 default = nil)
  if valid_609766 != nil:
    section.add "X-Amz-Date", valid_609766
  var valid_609767 = header.getOrDefault("X-Amz-Credential")
  valid_609767 = validateParameter(valid_609767, JString, required = false,
                                 default = nil)
  if valid_609767 != nil:
    section.add "X-Amz-Credential", valid_609767
  var valid_609768 = header.getOrDefault("X-Amz-Security-Token")
  valid_609768 = validateParameter(valid_609768, JString, required = false,
                                 default = nil)
  if valid_609768 != nil:
    section.add "X-Amz-Security-Token", valid_609768
  var valid_609769 = header.getOrDefault("X-Amz-Algorithm")
  valid_609769 = validateParameter(valid_609769, JString, required = false,
                                 default = nil)
  if valid_609769 != nil:
    section.add "X-Amz-Algorithm", valid_609769
  var valid_609770 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609770 = validateParameter(valid_609770, JString, required = false,
                                 default = nil)
  if valid_609770 != nil:
    section.add "X-Amz-SignedHeaders", valid_609770
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609771: Call_GetModifyCertificates_609757; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_609771.validator(path, query, header, formData, body)
  let scheme = call_609771.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609771.url(scheme.get, call_609771.host, call_609771.base,
                         call_609771.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609771, url, valid)

proc call*(call_609772: Call_GetModifyCertificates_609757;
          RemoveCustomerOverride: bool = false;
          Action: string = "ModifyCertificates"; Version: string = "2014-10-31";
          CertificateIdentifier: string = ""): Recallable =
  ## getModifyCertificates
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   RemoveCustomerOverride: bool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateIdentifier: string
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  var query_609773 = newJObject()
  add(query_609773, "RemoveCustomerOverride", newJBool(RemoveCustomerOverride))
  add(query_609773, "Action", newJString(Action))
  add(query_609773, "Version", newJString(Version))
  add(query_609773, "CertificateIdentifier", newJString(CertificateIdentifier))
  result = call_609772.call(nil, query_609773, nil, nil, nil)

var getModifyCertificates* = Call_GetModifyCertificates_609757(
    name: "getModifyCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCertificates",
    validator: validate_GetModifyCertificates_609758, base: "/",
    url: url_GetModifyCertificates_609759, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCurrentDBClusterCapacity_609811 = ref object of OpenApiRestCall_605589
proc url_PostModifyCurrentDBClusterCapacity_609813(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCurrentDBClusterCapacity_609812(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609814 = query.getOrDefault("Action")
  valid_609814 = validateParameter(valid_609814, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_609814 != nil:
    section.add "Action", valid_609814
  var valid_609815 = query.getOrDefault("Version")
  valid_609815 = validateParameter(valid_609815, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609815 != nil:
    section.add "Version", valid_609815
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609816 = header.getOrDefault("X-Amz-Signature")
  valid_609816 = validateParameter(valid_609816, JString, required = false,
                                 default = nil)
  if valid_609816 != nil:
    section.add "X-Amz-Signature", valid_609816
  var valid_609817 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609817 = validateParameter(valid_609817, JString, required = false,
                                 default = nil)
  if valid_609817 != nil:
    section.add "X-Amz-Content-Sha256", valid_609817
  var valid_609818 = header.getOrDefault("X-Amz-Date")
  valid_609818 = validateParameter(valid_609818, JString, required = false,
                                 default = nil)
  if valid_609818 != nil:
    section.add "X-Amz-Date", valid_609818
  var valid_609819 = header.getOrDefault("X-Amz-Credential")
  valid_609819 = validateParameter(valid_609819, JString, required = false,
                                 default = nil)
  if valid_609819 != nil:
    section.add "X-Amz-Credential", valid_609819
  var valid_609820 = header.getOrDefault("X-Amz-Security-Token")
  valid_609820 = validateParameter(valid_609820, JString, required = false,
                                 default = nil)
  if valid_609820 != nil:
    section.add "X-Amz-Security-Token", valid_609820
  var valid_609821 = header.getOrDefault("X-Amz-Algorithm")
  valid_609821 = validateParameter(valid_609821, JString, required = false,
                                 default = nil)
  if valid_609821 != nil:
    section.add "X-Amz-Algorithm", valid_609821
  var valid_609822 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609822 = validateParameter(valid_609822, JString, required = false,
                                 default = nil)
  if valid_609822 != nil:
    section.add "X-Amz-SignedHeaders", valid_609822
  result.add "header", section
  ## parameters in `formData` object:
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  section = newJObject()
  var valid_609823 = formData.getOrDefault("TimeoutAction")
  valid_609823 = validateParameter(valid_609823, JString, required = false,
                                 default = nil)
  if valid_609823 != nil:
    section.add "TimeoutAction", valid_609823
  var valid_609824 = formData.getOrDefault("SecondsBeforeTimeout")
  valid_609824 = validateParameter(valid_609824, JInt, required = false, default = nil)
  if valid_609824 != nil:
    section.add "SecondsBeforeTimeout", valid_609824
  var valid_609825 = formData.getOrDefault("Capacity")
  valid_609825 = validateParameter(valid_609825, JInt, required = false, default = nil)
  if valid_609825 != nil:
    section.add "Capacity", valid_609825
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_609826 = formData.getOrDefault("DBClusterIdentifier")
  valid_609826 = validateParameter(valid_609826, JString, required = true,
                                 default = nil)
  if valid_609826 != nil:
    section.add "DBClusterIdentifier", valid_609826
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609827: Call_PostModifyCurrentDBClusterCapacity_609811;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609827.validator(path, query, header, formData, body)
  let scheme = call_609827.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609827.url(scheme.get, call_609827.host, call_609827.base,
                         call_609827.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609827, url, valid)

proc call*(call_609828: Call_PostModifyCurrentDBClusterCapacity_609811;
          DBClusterIdentifier: string; TimeoutAction: string = "";
          Action: string = "ModifyCurrentDBClusterCapacity";
          SecondsBeforeTimeout: int = 0; Version: string = "2014-10-31";
          Capacity: int = 0): Recallable =
  ## postModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   Action: string (required)
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Version: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  var query_609829 = newJObject()
  var formData_609830 = newJObject()
  add(formData_609830, "TimeoutAction", newJString(TimeoutAction))
  add(query_609829, "Action", newJString(Action))
  add(formData_609830, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_609829, "Version", newJString(Version))
  add(formData_609830, "Capacity", newJInt(Capacity))
  add(formData_609830, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_609828.call(nil, query_609829, nil, formData_609830, nil)

var postModifyCurrentDBClusterCapacity* = Call_PostModifyCurrentDBClusterCapacity_609811(
    name: "postModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_PostModifyCurrentDBClusterCapacity_609812, base: "/",
    url: url_PostModifyCurrentDBClusterCapacity_609813,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCurrentDBClusterCapacity_609792 = ref object of OpenApiRestCall_605589
proc url_GetModifyCurrentDBClusterCapacity_609794(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCurrentDBClusterCapacity_609793(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609795 = query.getOrDefault("Capacity")
  valid_609795 = validateParameter(valid_609795, JInt, required = false, default = nil)
  if valid_609795 != nil:
    section.add "Capacity", valid_609795
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_609796 = query.getOrDefault("DBClusterIdentifier")
  valid_609796 = validateParameter(valid_609796, JString, required = true,
                                 default = nil)
  if valid_609796 != nil:
    section.add "DBClusterIdentifier", valid_609796
  var valid_609797 = query.getOrDefault("TimeoutAction")
  valid_609797 = validateParameter(valid_609797, JString, required = false,
                                 default = nil)
  if valid_609797 != nil:
    section.add "TimeoutAction", valid_609797
  var valid_609798 = query.getOrDefault("SecondsBeforeTimeout")
  valid_609798 = validateParameter(valid_609798, JInt, required = false, default = nil)
  if valid_609798 != nil:
    section.add "SecondsBeforeTimeout", valid_609798
  var valid_609799 = query.getOrDefault("Action")
  valid_609799 = validateParameter(valid_609799, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_609799 != nil:
    section.add "Action", valid_609799
  var valid_609800 = query.getOrDefault("Version")
  valid_609800 = validateParameter(valid_609800, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609800 != nil:
    section.add "Version", valid_609800
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609801 = header.getOrDefault("X-Amz-Signature")
  valid_609801 = validateParameter(valid_609801, JString, required = false,
                                 default = nil)
  if valid_609801 != nil:
    section.add "X-Amz-Signature", valid_609801
  var valid_609802 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609802 = validateParameter(valid_609802, JString, required = false,
                                 default = nil)
  if valid_609802 != nil:
    section.add "X-Amz-Content-Sha256", valid_609802
  var valid_609803 = header.getOrDefault("X-Amz-Date")
  valid_609803 = validateParameter(valid_609803, JString, required = false,
                                 default = nil)
  if valid_609803 != nil:
    section.add "X-Amz-Date", valid_609803
  var valid_609804 = header.getOrDefault("X-Amz-Credential")
  valid_609804 = validateParameter(valid_609804, JString, required = false,
                                 default = nil)
  if valid_609804 != nil:
    section.add "X-Amz-Credential", valid_609804
  var valid_609805 = header.getOrDefault("X-Amz-Security-Token")
  valid_609805 = validateParameter(valid_609805, JString, required = false,
                                 default = nil)
  if valid_609805 != nil:
    section.add "X-Amz-Security-Token", valid_609805
  var valid_609806 = header.getOrDefault("X-Amz-Algorithm")
  valid_609806 = validateParameter(valid_609806, JString, required = false,
                                 default = nil)
  if valid_609806 != nil:
    section.add "X-Amz-Algorithm", valid_609806
  var valid_609807 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609807 = validateParameter(valid_609807, JString, required = false,
                                 default = nil)
  if valid_609807 != nil:
    section.add "X-Amz-SignedHeaders", valid_609807
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609808: Call_GetModifyCurrentDBClusterCapacity_609792;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609808.validator(path, query, header, formData, body)
  let scheme = call_609808.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609808.url(scheme.get, call_609808.host, call_609808.base,
                         call_609808.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609808, url, valid)

proc call*(call_609809: Call_GetModifyCurrentDBClusterCapacity_609792;
          DBClusterIdentifier: string; Capacity: int = 0; TimeoutAction: string = "";
          SecondsBeforeTimeout: int = 0;
          Action: string = "ModifyCurrentDBClusterCapacity";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609810 = newJObject()
  add(query_609810, "Capacity", newJInt(Capacity))
  add(query_609810, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_609810, "TimeoutAction", newJString(TimeoutAction))
  add(query_609810, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_609810, "Action", newJString(Action))
  add(query_609810, "Version", newJString(Version))
  result = call_609809.call(nil, query_609810, nil, nil, nil)

var getModifyCurrentDBClusterCapacity* = Call_GetModifyCurrentDBClusterCapacity_609792(
    name: "getModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_GetModifyCurrentDBClusterCapacity_609793, base: "/",
    url: url_GetModifyCurrentDBClusterCapacity_609794,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_609872 = ref object of OpenApiRestCall_605589
proc url_PostModifyDBCluster_609874(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBCluster_609873(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609875 = query.getOrDefault("Action")
  valid_609875 = validateParameter(valid_609875, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_609875 != nil:
    section.add "Action", valid_609875
  var valid_609876 = query.getOrDefault("Version")
  valid_609876 = validateParameter(valid_609876, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609876 != nil:
    section.add "Version", valid_609876
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609877 = header.getOrDefault("X-Amz-Signature")
  valid_609877 = validateParameter(valid_609877, JString, required = false,
                                 default = nil)
  if valid_609877 != nil:
    section.add "X-Amz-Signature", valid_609877
  var valid_609878 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609878 = validateParameter(valid_609878, JString, required = false,
                                 default = nil)
  if valid_609878 != nil:
    section.add "X-Amz-Content-Sha256", valid_609878
  var valid_609879 = header.getOrDefault("X-Amz-Date")
  valid_609879 = validateParameter(valid_609879, JString, required = false,
                                 default = nil)
  if valid_609879 != nil:
    section.add "X-Amz-Date", valid_609879
  var valid_609880 = header.getOrDefault("X-Amz-Credential")
  valid_609880 = validateParameter(valid_609880, JString, required = false,
                                 default = nil)
  if valid_609880 != nil:
    section.add "X-Amz-Credential", valid_609880
  var valid_609881 = header.getOrDefault("X-Amz-Security-Token")
  valid_609881 = validateParameter(valid_609881, JString, required = false,
                                 default = nil)
  if valid_609881 != nil:
    section.add "X-Amz-Security-Token", valid_609881
  var valid_609882 = header.getOrDefault("X-Amz-Algorithm")
  valid_609882 = validateParameter(valid_609882, JString, required = false,
                                 default = nil)
  if valid_609882 != nil:
    section.add "X-Amz-Algorithm", valid_609882
  var valid_609883 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609883 = validateParameter(valid_609883, JString, required = false,
                                 default = nil)
  if valid_609883 != nil:
    section.add "X-Amz-SignedHeaders", valid_609883
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_609884 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_609884 = validateParameter(valid_609884, JString, required = false,
                                 default = nil)
  if valid_609884 != nil:
    section.add "NewDBClusterIdentifier", valid_609884
  var valid_609885 = formData.getOrDefault("Port")
  valid_609885 = validateParameter(valid_609885, JInt, required = false, default = nil)
  if valid_609885 != nil:
    section.add "Port", valid_609885
  var valid_609886 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_609886 = validateParameter(valid_609886, JString, required = false,
                                 default = nil)
  if valid_609886 != nil:
    section.add "PreferredMaintenanceWindow", valid_609886
  var valid_609887 = formData.getOrDefault("PreferredBackupWindow")
  valid_609887 = validateParameter(valid_609887, JString, required = false,
                                 default = nil)
  if valid_609887 != nil:
    section.add "PreferredBackupWindow", valid_609887
  var valid_609888 = formData.getOrDefault("MasterUserPassword")
  valid_609888 = validateParameter(valid_609888, JString, required = false,
                                 default = nil)
  if valid_609888 != nil:
    section.add "MasterUserPassword", valid_609888
  var valid_609889 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_609889 = validateParameter(valid_609889, JArray, required = false,
                                 default = nil)
  if valid_609889 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_609889
  var valid_609890 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_609890 = validateParameter(valid_609890, JString, required = false,
                                 default = nil)
  if valid_609890 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_609890
  var valid_609891 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_609891 = validateParameter(valid_609891, JArray, required = false,
                                 default = nil)
  if valid_609891 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_609891
  var valid_609892 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_609892 = validateParameter(valid_609892, JString, required = false,
                                 default = nil)
  if valid_609892 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_609892
  var valid_609893 = formData.getOrDefault("EngineVersion")
  valid_609893 = validateParameter(valid_609893, JString, required = false,
                                 default = nil)
  if valid_609893 != nil:
    section.add "EngineVersion", valid_609893
  var valid_609894 = formData.getOrDefault("BacktrackWindow")
  valid_609894 = validateParameter(valid_609894, JInt, required = false, default = nil)
  if valid_609894 != nil:
    section.add "BacktrackWindow", valid_609894
  var valid_609895 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_609895 = validateParameter(valid_609895, JArray, required = false,
                                 default = nil)
  if valid_609895 != nil:
    section.add "VpcSecurityGroupIds", valid_609895
  var valid_609896 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_609896 = validateParameter(valid_609896, JBool, required = false, default = nil)
  if valid_609896 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_609896
  var valid_609897 = formData.getOrDefault("BackupRetentionPeriod")
  valid_609897 = validateParameter(valid_609897, JInt, required = false, default = nil)
  if valid_609897 != nil:
    section.add "BackupRetentionPeriod", valid_609897
  var valid_609898 = formData.getOrDefault("ApplyImmediately")
  valid_609898 = validateParameter(valid_609898, JBool, required = false, default = nil)
  if valid_609898 != nil:
    section.add "ApplyImmediately", valid_609898
  var valid_609899 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_609899 = validateParameter(valid_609899, JString, required = false,
                                 default = nil)
  if valid_609899 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_609899
  var valid_609900 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_609900 = validateParameter(valid_609900, JBool, required = false, default = nil)
  if valid_609900 != nil:
    section.add "AllowMajorVersionUpgrade", valid_609900
  var valid_609901 = formData.getOrDefault("EnableHttpEndpoint")
  valid_609901 = validateParameter(valid_609901, JBool, required = false, default = nil)
  if valid_609901 != nil:
    section.add "EnableHttpEndpoint", valid_609901
  var valid_609902 = formData.getOrDefault("OptionGroupName")
  valid_609902 = validateParameter(valid_609902, JString, required = false,
                                 default = nil)
  if valid_609902 != nil:
    section.add "OptionGroupName", valid_609902
  var valid_609903 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_609903 = validateParameter(valid_609903, JString, required = false,
                                 default = nil)
  if valid_609903 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_609903
  var valid_609904 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_609904 = validateParameter(valid_609904, JString, required = false,
                                 default = nil)
  if valid_609904 != nil:
    section.add "DBClusterParameterGroupName", valid_609904
  var valid_609905 = formData.getOrDefault("DBInstanceParameterGroupName")
  valid_609905 = validateParameter(valid_609905, JString, required = false,
                                 default = nil)
  if valid_609905 != nil:
    section.add "DBInstanceParameterGroupName", valid_609905
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_609906 = formData.getOrDefault("DBClusterIdentifier")
  valid_609906 = validateParameter(valid_609906, JString, required = true,
                                 default = nil)
  if valid_609906 != nil:
    section.add "DBClusterIdentifier", valid_609906
  var valid_609907 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_609907 = validateParameter(valid_609907, JString, required = false,
                                 default = nil)
  if valid_609907 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_609907
  var valid_609908 = formData.getOrDefault("DeletionProtection")
  valid_609908 = validateParameter(valid_609908, JBool, required = false, default = nil)
  if valid_609908 != nil:
    section.add "DeletionProtection", valid_609908
  var valid_609909 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_609909 = validateParameter(valid_609909, JBool, required = false, default = nil)
  if valid_609909 != nil:
    section.add "CopyTagsToSnapshot", valid_609909
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609910: Call_PostModifyDBCluster_609872; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609910.validator(path, query, header, formData, body)
  let scheme = call_609910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609910.url(scheme.get, call_609910.host, call_609910.base,
                         call_609910.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609910, url, valid)

proc call*(call_609911: Call_PostModifyDBCluster_609872;
          DBClusterIdentifier: string; NewDBClusterIdentifier: string = "";
          Port: int = 0; PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; ApplyImmediately: bool = false;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "ModifyDBCluster";
          AllowMajorVersionUpgrade: bool = false; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = "";
          DBInstanceParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  var query_609912 = newJObject()
  var formData_609913 = newJObject()
  add(formData_609913, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  add(formData_609913, "Port", newJInt(Port))
  add(formData_609913, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_609913, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_609913, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_609913.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_609913, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_609913.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_609913, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_609913, "EngineVersion", newJString(EngineVersion))
  add(formData_609913, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_609913.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_609913, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_609913, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_609913, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_609913, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_609912, "Action", newJString(Action))
  add(formData_609913, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_609913, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_609913, "OptionGroupName", newJString(OptionGroupName))
  add(formData_609913, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_609913, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_609913, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_609912, "Version", newJString(Version))
  add(formData_609913, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_609913, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_609913, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_609913, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_609911.call(nil, query_609912, nil, formData_609913, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_609872(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_609873, base: "/",
    url: url_PostModifyDBCluster_609874, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_609831 = ref object of OpenApiRestCall_605589
proc url_GetModifyDBCluster_609833(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBCluster_609832(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_609834 = query.getOrDefault("DeletionProtection")
  valid_609834 = validateParameter(valid_609834, JBool, required = false, default = nil)
  if valid_609834 != nil:
    section.add "DeletionProtection", valid_609834
  var valid_609835 = query.getOrDefault("CopyTagsToSnapshot")
  valid_609835 = validateParameter(valid_609835, JBool, required = false, default = nil)
  if valid_609835 != nil:
    section.add "CopyTagsToSnapshot", valid_609835
  var valid_609836 = query.getOrDefault("EnableHttpEndpoint")
  valid_609836 = validateParameter(valid_609836, JBool, required = false, default = nil)
  if valid_609836 != nil:
    section.add "EnableHttpEndpoint", valid_609836
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_609837 = query.getOrDefault("DBClusterIdentifier")
  valid_609837 = validateParameter(valid_609837, JString, required = true,
                                 default = nil)
  if valid_609837 != nil:
    section.add "DBClusterIdentifier", valid_609837
  var valid_609838 = query.getOrDefault("BacktrackWindow")
  valid_609838 = validateParameter(valid_609838, JInt, required = false, default = nil)
  if valid_609838 != nil:
    section.add "BacktrackWindow", valid_609838
  var valid_609839 = query.getOrDefault("DBClusterParameterGroupName")
  valid_609839 = validateParameter(valid_609839, JString, required = false,
                                 default = nil)
  if valid_609839 != nil:
    section.add "DBClusterParameterGroupName", valid_609839
  var valid_609840 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_609840 = validateParameter(valid_609840, JArray, required = false,
                                 default = nil)
  if valid_609840 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_609840
  var valid_609841 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_609841 = validateParameter(valid_609841, JArray, required = false,
                                 default = nil)
  if valid_609841 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_609841
  var valid_609842 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_609842 = validateParameter(valid_609842, JString, required = false,
                                 default = nil)
  if valid_609842 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_609842
  var valid_609843 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_609843 = validateParameter(valid_609843, JString, required = false,
                                 default = nil)
  if valid_609843 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_609843
  var valid_609844 = query.getOrDefault("BackupRetentionPeriod")
  valid_609844 = validateParameter(valid_609844, JInt, required = false, default = nil)
  if valid_609844 != nil:
    section.add "BackupRetentionPeriod", valid_609844
  var valid_609845 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_609845 = validateParameter(valid_609845, JString, required = false,
                                 default = nil)
  if valid_609845 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_609845
  var valid_609846 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_609846 = validateParameter(valid_609846, JBool, required = false, default = nil)
  if valid_609846 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_609846
  var valid_609847 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_609847 = validateParameter(valid_609847, JString, required = false,
                                 default = nil)
  if valid_609847 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_609847
  var valid_609848 = query.getOrDefault("EngineVersion")
  valid_609848 = validateParameter(valid_609848, JString, required = false,
                                 default = nil)
  if valid_609848 != nil:
    section.add "EngineVersion", valid_609848
  var valid_609849 = query.getOrDefault("DBInstanceParameterGroupName")
  valid_609849 = validateParameter(valid_609849, JString, required = false,
                                 default = nil)
  if valid_609849 != nil:
    section.add "DBInstanceParameterGroupName", valid_609849
  var valid_609850 = query.getOrDefault("Action")
  valid_609850 = validateParameter(valid_609850, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_609850 != nil:
    section.add "Action", valid_609850
  var valid_609851 = query.getOrDefault("ApplyImmediately")
  valid_609851 = validateParameter(valid_609851, JBool, required = false, default = nil)
  if valid_609851 != nil:
    section.add "ApplyImmediately", valid_609851
  var valid_609852 = query.getOrDefault("NewDBClusterIdentifier")
  valid_609852 = validateParameter(valid_609852, JString, required = false,
                                 default = nil)
  if valid_609852 != nil:
    section.add "NewDBClusterIdentifier", valid_609852
  var valid_609853 = query.getOrDefault("Port")
  valid_609853 = validateParameter(valid_609853, JInt, required = false, default = nil)
  if valid_609853 != nil:
    section.add "Port", valid_609853
  var valid_609854 = query.getOrDefault("VpcSecurityGroupIds")
  valid_609854 = validateParameter(valid_609854, JArray, required = false,
                                 default = nil)
  if valid_609854 != nil:
    section.add "VpcSecurityGroupIds", valid_609854
  var valid_609855 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_609855 = validateParameter(valid_609855, JBool, required = false, default = nil)
  if valid_609855 != nil:
    section.add "AllowMajorVersionUpgrade", valid_609855
  var valid_609856 = query.getOrDefault("MasterUserPassword")
  valid_609856 = validateParameter(valid_609856, JString, required = false,
                                 default = nil)
  if valid_609856 != nil:
    section.add "MasterUserPassword", valid_609856
  var valid_609857 = query.getOrDefault("OptionGroupName")
  valid_609857 = validateParameter(valid_609857, JString, required = false,
                                 default = nil)
  if valid_609857 != nil:
    section.add "OptionGroupName", valid_609857
  var valid_609858 = query.getOrDefault("Version")
  valid_609858 = validateParameter(valid_609858, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609858 != nil:
    section.add "Version", valid_609858
  var valid_609859 = query.getOrDefault("PreferredBackupWindow")
  valid_609859 = validateParameter(valid_609859, JString, required = false,
                                 default = nil)
  if valid_609859 != nil:
    section.add "PreferredBackupWindow", valid_609859
  var valid_609860 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_609860 = validateParameter(valid_609860, JString, required = false,
                                 default = nil)
  if valid_609860 != nil:
    section.add "PreferredMaintenanceWindow", valid_609860
  var valid_609861 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_609861 = validateParameter(valid_609861, JString, required = false,
                                 default = nil)
  if valid_609861 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_609861
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609862 = header.getOrDefault("X-Amz-Signature")
  valid_609862 = validateParameter(valid_609862, JString, required = false,
                                 default = nil)
  if valid_609862 != nil:
    section.add "X-Amz-Signature", valid_609862
  var valid_609863 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609863 = validateParameter(valid_609863, JString, required = false,
                                 default = nil)
  if valid_609863 != nil:
    section.add "X-Amz-Content-Sha256", valid_609863
  var valid_609864 = header.getOrDefault("X-Amz-Date")
  valid_609864 = validateParameter(valid_609864, JString, required = false,
                                 default = nil)
  if valid_609864 != nil:
    section.add "X-Amz-Date", valid_609864
  var valid_609865 = header.getOrDefault("X-Amz-Credential")
  valid_609865 = validateParameter(valid_609865, JString, required = false,
                                 default = nil)
  if valid_609865 != nil:
    section.add "X-Amz-Credential", valid_609865
  var valid_609866 = header.getOrDefault("X-Amz-Security-Token")
  valid_609866 = validateParameter(valid_609866, JString, required = false,
                                 default = nil)
  if valid_609866 != nil:
    section.add "X-Amz-Security-Token", valid_609866
  var valid_609867 = header.getOrDefault("X-Amz-Algorithm")
  valid_609867 = validateParameter(valid_609867, JString, required = false,
                                 default = nil)
  if valid_609867 != nil:
    section.add "X-Amz-Algorithm", valid_609867
  var valid_609868 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609868 = validateParameter(valid_609868, JString, required = false,
                                 default = nil)
  if valid_609868 != nil:
    section.add "X-Amz-SignedHeaders", valid_609868
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609869: Call_GetModifyDBCluster_609831; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609869.validator(path, query, header, formData, body)
  let scheme = call_609869.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609869.url(scheme.get, call_609869.host, call_609869.base,
                         call_609869.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609869, url, valid)

proc call*(call_609870: Call_GetModifyDBCluster_609831;
          DBClusterIdentifier: string; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; EnableHttpEndpoint: bool = false;
          BacktrackWindow: int = 0; DBClusterParameterGroupName: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EngineVersion: string = ""; DBInstanceParameterGroupName: string = "";
          Action: string = "ModifyDBCluster"; ApplyImmediately: bool = false;
          NewDBClusterIdentifier: string = ""; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = "";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_609871 = newJObject()
  add(query_609871, "DeletionProtection", newJBool(DeletionProtection))
  add(query_609871, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_609871, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_609871, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_609871, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_609871, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_609871.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_609871.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_609871, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_609871, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_609871, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_609871, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_609871, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_609871, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_609871, "EngineVersion", newJString(EngineVersion))
  add(query_609871, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_609871, "Action", newJString(Action))
  add(query_609871, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_609871, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_609871, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_609871.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_609871, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_609871, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_609871, "OptionGroupName", newJString(OptionGroupName))
  add(query_609871, "Version", newJString(Version))
  add(query_609871, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_609871, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_609871, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_609870.call(nil, query_609871, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_609831(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_609832,
    base: "/", url: url_GetModifyDBCluster_609833,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterEndpoint_609933 = ref object of OpenApiRestCall_605589
proc url_PostModifyDBClusterEndpoint_609935(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterEndpoint_609934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609936 = query.getOrDefault("Action")
  valid_609936 = validateParameter(valid_609936, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_609936 != nil:
    section.add "Action", valid_609936
  var valid_609937 = query.getOrDefault("Version")
  valid_609937 = validateParameter(valid_609937, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609937 != nil:
    section.add "Version", valid_609937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609938 = header.getOrDefault("X-Amz-Signature")
  valid_609938 = validateParameter(valid_609938, JString, required = false,
                                 default = nil)
  if valid_609938 != nil:
    section.add "X-Amz-Signature", valid_609938
  var valid_609939 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609939 = validateParameter(valid_609939, JString, required = false,
                                 default = nil)
  if valid_609939 != nil:
    section.add "X-Amz-Content-Sha256", valid_609939
  var valid_609940 = header.getOrDefault("X-Amz-Date")
  valid_609940 = validateParameter(valid_609940, JString, required = false,
                                 default = nil)
  if valid_609940 != nil:
    section.add "X-Amz-Date", valid_609940
  var valid_609941 = header.getOrDefault("X-Amz-Credential")
  valid_609941 = validateParameter(valid_609941, JString, required = false,
                                 default = nil)
  if valid_609941 != nil:
    section.add "X-Amz-Credential", valid_609941
  var valid_609942 = header.getOrDefault("X-Amz-Security-Token")
  valid_609942 = validateParameter(valid_609942, JString, required = false,
                                 default = nil)
  if valid_609942 != nil:
    section.add "X-Amz-Security-Token", valid_609942
  var valid_609943 = header.getOrDefault("X-Amz-Algorithm")
  valid_609943 = validateParameter(valid_609943, JString, required = false,
                                 default = nil)
  if valid_609943 != nil:
    section.add "X-Amz-Algorithm", valid_609943
  var valid_609944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609944 = validateParameter(valid_609944, JString, required = false,
                                 default = nil)
  if valid_609944 != nil:
    section.add "X-Amz-SignedHeaders", valid_609944
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_609945 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_609945 = validateParameter(valid_609945, JString, required = true,
                                 default = nil)
  if valid_609945 != nil:
    section.add "DBClusterEndpointIdentifier", valid_609945
  var valid_609946 = formData.getOrDefault("StaticMembers")
  valid_609946 = validateParameter(valid_609946, JArray, required = false,
                                 default = nil)
  if valid_609946 != nil:
    section.add "StaticMembers", valid_609946
  var valid_609947 = formData.getOrDefault("EndpointType")
  valid_609947 = validateParameter(valid_609947, JString, required = false,
                                 default = nil)
  if valid_609947 != nil:
    section.add "EndpointType", valid_609947
  var valid_609948 = formData.getOrDefault("ExcludedMembers")
  valid_609948 = validateParameter(valid_609948, JArray, required = false,
                                 default = nil)
  if valid_609948 != nil:
    section.add "ExcludedMembers", valid_609948
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609949: Call_PostModifyDBClusterEndpoint_609933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609949.validator(path, query, header, formData, body)
  let scheme = call_609949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609949.url(scheme.get, call_609949.host, call_609949.base,
                         call_609949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609949, url, valid)

proc call*(call_609950: Call_PostModifyDBClusterEndpoint_609933;
          DBClusterEndpointIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "ModifyDBClusterEndpoint"; EndpointType: string = "";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_609951 = newJObject()
  var formData_609952 = newJObject()
  add(formData_609952, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_609952.add "StaticMembers", StaticMembers
  add(query_609951, "Action", newJString(Action))
  add(formData_609952, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_609952.add "ExcludedMembers", ExcludedMembers
  add(query_609951, "Version", newJString(Version))
  result = call_609950.call(nil, query_609951, nil, formData_609952, nil)

var postModifyDBClusterEndpoint* = Call_PostModifyDBClusterEndpoint_609933(
    name: "postModifyDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_PostModifyDBClusterEndpoint_609934, base: "/",
    url: url_PostModifyDBClusterEndpoint_609935,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterEndpoint_609914 = ref object of OpenApiRestCall_605589
proc url_GetModifyDBClusterEndpoint_609916(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterEndpoint_609915(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609917 = query.getOrDefault("ExcludedMembers")
  valid_609917 = validateParameter(valid_609917, JArray, required = false,
                                 default = nil)
  if valid_609917 != nil:
    section.add "ExcludedMembers", valid_609917
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_609918 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_609918 = validateParameter(valid_609918, JString, required = true,
                                 default = nil)
  if valid_609918 != nil:
    section.add "DBClusterEndpointIdentifier", valid_609918
  var valid_609919 = query.getOrDefault("StaticMembers")
  valid_609919 = validateParameter(valid_609919, JArray, required = false,
                                 default = nil)
  if valid_609919 != nil:
    section.add "StaticMembers", valid_609919
  var valid_609920 = query.getOrDefault("EndpointType")
  valid_609920 = validateParameter(valid_609920, JString, required = false,
                                 default = nil)
  if valid_609920 != nil:
    section.add "EndpointType", valid_609920
  var valid_609921 = query.getOrDefault("Action")
  valid_609921 = validateParameter(valid_609921, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_609921 != nil:
    section.add "Action", valid_609921
  var valid_609922 = query.getOrDefault("Version")
  valid_609922 = validateParameter(valid_609922, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609922 != nil:
    section.add "Version", valid_609922
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609923 = header.getOrDefault("X-Amz-Signature")
  valid_609923 = validateParameter(valid_609923, JString, required = false,
                                 default = nil)
  if valid_609923 != nil:
    section.add "X-Amz-Signature", valid_609923
  var valid_609924 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609924 = validateParameter(valid_609924, JString, required = false,
                                 default = nil)
  if valid_609924 != nil:
    section.add "X-Amz-Content-Sha256", valid_609924
  var valid_609925 = header.getOrDefault("X-Amz-Date")
  valid_609925 = validateParameter(valid_609925, JString, required = false,
                                 default = nil)
  if valid_609925 != nil:
    section.add "X-Amz-Date", valid_609925
  var valid_609926 = header.getOrDefault("X-Amz-Credential")
  valid_609926 = validateParameter(valid_609926, JString, required = false,
                                 default = nil)
  if valid_609926 != nil:
    section.add "X-Amz-Credential", valid_609926
  var valid_609927 = header.getOrDefault("X-Amz-Security-Token")
  valid_609927 = validateParameter(valid_609927, JString, required = false,
                                 default = nil)
  if valid_609927 != nil:
    section.add "X-Amz-Security-Token", valid_609927
  var valid_609928 = header.getOrDefault("X-Amz-Algorithm")
  valid_609928 = validateParameter(valid_609928, JString, required = false,
                                 default = nil)
  if valid_609928 != nil:
    section.add "X-Amz-Algorithm", valid_609928
  var valid_609929 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609929 = validateParameter(valid_609929, JString, required = false,
                                 default = nil)
  if valid_609929 != nil:
    section.add "X-Amz-SignedHeaders", valid_609929
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609930: Call_GetModifyDBClusterEndpoint_609914; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609930.validator(path, query, header, formData, body)
  let scheme = call_609930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609930.url(scheme.get, call_609930.host, call_609930.base,
                         call_609930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609930, url, valid)

proc call*(call_609931: Call_GetModifyDBClusterEndpoint_609914;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          StaticMembers: JsonNode = nil; EndpointType: string = "";
          Action: string = "ModifyDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609932 = newJObject()
  if ExcludedMembers != nil:
    query_609932.add "ExcludedMembers", ExcludedMembers
  add(query_609932, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_609932.add "StaticMembers", StaticMembers
  add(query_609932, "EndpointType", newJString(EndpointType))
  add(query_609932, "Action", newJString(Action))
  add(query_609932, "Version", newJString(Version))
  result = call_609931.call(nil, query_609932, nil, nil, nil)

var getModifyDBClusterEndpoint* = Call_GetModifyDBClusterEndpoint_609914(
    name: "getModifyDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_GetModifyDBClusterEndpoint_609915, base: "/",
    url: url_GetModifyDBClusterEndpoint_609916,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_609970 = ref object of OpenApiRestCall_605589
proc url_PostModifyDBClusterParameterGroup_609972(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_609971(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609973 = query.getOrDefault("Action")
  valid_609973 = validateParameter(valid_609973, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_609973 != nil:
    section.add "Action", valid_609973
  var valid_609974 = query.getOrDefault("Version")
  valid_609974 = validateParameter(valid_609974, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609974 != nil:
    section.add "Version", valid_609974
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609975 = header.getOrDefault("X-Amz-Signature")
  valid_609975 = validateParameter(valid_609975, JString, required = false,
                                 default = nil)
  if valid_609975 != nil:
    section.add "X-Amz-Signature", valid_609975
  var valid_609976 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609976 = validateParameter(valid_609976, JString, required = false,
                                 default = nil)
  if valid_609976 != nil:
    section.add "X-Amz-Content-Sha256", valid_609976
  var valid_609977 = header.getOrDefault("X-Amz-Date")
  valid_609977 = validateParameter(valid_609977, JString, required = false,
                                 default = nil)
  if valid_609977 != nil:
    section.add "X-Amz-Date", valid_609977
  var valid_609978 = header.getOrDefault("X-Amz-Credential")
  valid_609978 = validateParameter(valid_609978, JString, required = false,
                                 default = nil)
  if valid_609978 != nil:
    section.add "X-Amz-Credential", valid_609978
  var valid_609979 = header.getOrDefault("X-Amz-Security-Token")
  valid_609979 = validateParameter(valid_609979, JString, required = false,
                                 default = nil)
  if valid_609979 != nil:
    section.add "X-Amz-Security-Token", valid_609979
  var valid_609980 = header.getOrDefault("X-Amz-Algorithm")
  valid_609980 = validateParameter(valid_609980, JString, required = false,
                                 default = nil)
  if valid_609980 != nil:
    section.add "X-Amz-Algorithm", valid_609980
  var valid_609981 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609981 = validateParameter(valid_609981, JString, required = false,
                                 default = nil)
  if valid_609981 != nil:
    section.add "X-Amz-SignedHeaders", valid_609981
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_609982 = formData.getOrDefault("Parameters")
  valid_609982 = validateParameter(valid_609982, JArray, required = true, default = nil)
  if valid_609982 != nil:
    section.add "Parameters", valid_609982
  var valid_609983 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_609983 = validateParameter(valid_609983, JString, required = true,
                                 default = nil)
  if valid_609983 != nil:
    section.add "DBClusterParameterGroupName", valid_609983
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609984: Call_PostModifyDBClusterParameterGroup_609970;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609984.validator(path, query, header, formData, body)
  let scheme = call_609984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609984.url(scheme.get, call_609984.host, call_609984.base,
                         call_609984.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609984, url, valid)

proc call*(call_609985: Call_PostModifyDBClusterParameterGroup_609970;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_609986 = newJObject()
  var formData_609987 = newJObject()
  add(query_609986, "Action", newJString(Action))
  if Parameters != nil:
    formData_609987.add "Parameters", Parameters
  add(formData_609987, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_609986, "Version", newJString(Version))
  result = call_609985.call(nil, query_609986, nil, formData_609987, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_609970(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_609971, base: "/",
    url: url_PostModifyDBClusterParameterGroup_609972,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_609953 = ref object of OpenApiRestCall_605589
proc url_GetModifyDBClusterParameterGroup_609955(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_609954(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Parameters` field"
  var valid_609956 = query.getOrDefault("Parameters")
  valid_609956 = validateParameter(valid_609956, JArray, required = true, default = nil)
  if valid_609956 != nil:
    section.add "Parameters", valid_609956
  var valid_609957 = query.getOrDefault("DBClusterParameterGroupName")
  valid_609957 = validateParameter(valid_609957, JString, required = true,
                                 default = nil)
  if valid_609957 != nil:
    section.add "DBClusterParameterGroupName", valid_609957
  var valid_609958 = query.getOrDefault("Action")
  valid_609958 = validateParameter(valid_609958, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_609958 != nil:
    section.add "Action", valid_609958
  var valid_609959 = query.getOrDefault("Version")
  valid_609959 = validateParameter(valid_609959, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609959 != nil:
    section.add "Version", valid_609959
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609960 = header.getOrDefault("X-Amz-Signature")
  valid_609960 = validateParameter(valid_609960, JString, required = false,
                                 default = nil)
  if valid_609960 != nil:
    section.add "X-Amz-Signature", valid_609960
  var valid_609961 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609961 = validateParameter(valid_609961, JString, required = false,
                                 default = nil)
  if valid_609961 != nil:
    section.add "X-Amz-Content-Sha256", valid_609961
  var valid_609962 = header.getOrDefault("X-Amz-Date")
  valid_609962 = validateParameter(valid_609962, JString, required = false,
                                 default = nil)
  if valid_609962 != nil:
    section.add "X-Amz-Date", valid_609962
  var valid_609963 = header.getOrDefault("X-Amz-Credential")
  valid_609963 = validateParameter(valid_609963, JString, required = false,
                                 default = nil)
  if valid_609963 != nil:
    section.add "X-Amz-Credential", valid_609963
  var valid_609964 = header.getOrDefault("X-Amz-Security-Token")
  valid_609964 = validateParameter(valid_609964, JString, required = false,
                                 default = nil)
  if valid_609964 != nil:
    section.add "X-Amz-Security-Token", valid_609964
  var valid_609965 = header.getOrDefault("X-Amz-Algorithm")
  valid_609965 = validateParameter(valid_609965, JString, required = false,
                                 default = nil)
  if valid_609965 != nil:
    section.add "X-Amz-Algorithm", valid_609965
  var valid_609966 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609966 = validateParameter(valid_609966, JString, required = false,
                                 default = nil)
  if valid_609966 != nil:
    section.add "X-Amz-SignedHeaders", valid_609966
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609967: Call_GetModifyDBClusterParameterGroup_609953;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609967.validator(path, query, header, formData, body)
  let scheme = call_609967.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609967.url(scheme.get, call_609967.host, call_609967.base,
                         call_609967.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609967, url, valid)

proc call*(call_609968: Call_GetModifyDBClusterParameterGroup_609953;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609969 = newJObject()
  if Parameters != nil:
    query_609969.add "Parameters", Parameters
  add(query_609969, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_609969, "Action", newJString(Action))
  add(query_609969, "Version", newJString(Version))
  result = call_609968.call(nil, query_609969, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_609953(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_609954, base: "/",
    url: url_GetModifyDBClusterParameterGroup_609955,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_610007 = ref object of OpenApiRestCall_605589
proc url_PostModifyDBClusterSnapshotAttribute_610009(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_610008(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610010 = query.getOrDefault("Action")
  valid_610010 = validateParameter(valid_610010, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_610010 != nil:
    section.add "Action", valid_610010
  var valid_610011 = query.getOrDefault("Version")
  valid_610011 = validateParameter(valid_610011, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610011 != nil:
    section.add "Version", valid_610011
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610012 = header.getOrDefault("X-Amz-Signature")
  valid_610012 = validateParameter(valid_610012, JString, required = false,
                                 default = nil)
  if valid_610012 != nil:
    section.add "X-Amz-Signature", valid_610012
  var valid_610013 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610013 = validateParameter(valid_610013, JString, required = false,
                                 default = nil)
  if valid_610013 != nil:
    section.add "X-Amz-Content-Sha256", valid_610013
  var valid_610014 = header.getOrDefault("X-Amz-Date")
  valid_610014 = validateParameter(valid_610014, JString, required = false,
                                 default = nil)
  if valid_610014 != nil:
    section.add "X-Amz-Date", valid_610014
  var valid_610015 = header.getOrDefault("X-Amz-Credential")
  valid_610015 = validateParameter(valid_610015, JString, required = false,
                                 default = nil)
  if valid_610015 != nil:
    section.add "X-Amz-Credential", valid_610015
  var valid_610016 = header.getOrDefault("X-Amz-Security-Token")
  valid_610016 = validateParameter(valid_610016, JString, required = false,
                                 default = nil)
  if valid_610016 != nil:
    section.add "X-Amz-Security-Token", valid_610016
  var valid_610017 = header.getOrDefault("X-Amz-Algorithm")
  valid_610017 = validateParameter(valid_610017, JString, required = false,
                                 default = nil)
  if valid_610017 != nil:
    section.add "X-Amz-Algorithm", valid_610017
  var valid_610018 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610018 = validateParameter(valid_610018, JString, required = false,
                                 default = nil)
  if valid_610018 != nil:
    section.add "X-Amz-SignedHeaders", valid_610018
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_610019 = formData.getOrDefault("AttributeName")
  valid_610019 = validateParameter(valid_610019, JString, required = true,
                                 default = nil)
  if valid_610019 != nil:
    section.add "AttributeName", valid_610019
  var valid_610020 = formData.getOrDefault("ValuesToAdd")
  valid_610020 = validateParameter(valid_610020, JArray, required = false,
                                 default = nil)
  if valid_610020 != nil:
    section.add "ValuesToAdd", valid_610020
  var valid_610021 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_610021 = validateParameter(valid_610021, JString, required = true,
                                 default = nil)
  if valid_610021 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_610021
  var valid_610022 = formData.getOrDefault("ValuesToRemove")
  valid_610022 = validateParameter(valid_610022, JArray, required = false,
                                 default = nil)
  if valid_610022 != nil:
    section.add "ValuesToRemove", valid_610022
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610023: Call_PostModifyDBClusterSnapshotAttribute_610007;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610023.validator(path, query, header, formData, body)
  let scheme = call_610023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610023.url(scheme.get, call_610023.host, call_610023.base,
                         call_610023.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610023, url, valid)

proc call*(call_610024: Call_PostModifyDBClusterSnapshotAttribute_610007;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_610025 = newJObject()
  var formData_610026 = newJObject()
  add(formData_610026, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_610026.add "ValuesToAdd", ValuesToAdd
  add(formData_610026, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_610025, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_610026.add "ValuesToRemove", ValuesToRemove
  add(query_610025, "Version", newJString(Version))
  result = call_610024.call(nil, query_610025, nil, formData_610026, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_610007(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_610008, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_610009,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_609988 = ref object of OpenApiRestCall_605589
proc url_GetModifyDBClusterSnapshotAttribute_609990(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_609989(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_609991 = query.getOrDefault("ValuesToRemove")
  valid_609991 = validateParameter(valid_609991, JArray, required = false,
                                 default = nil)
  if valid_609991 != nil:
    section.add "ValuesToRemove", valid_609991
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_609992 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_609992 = validateParameter(valid_609992, JString, required = true,
                                 default = nil)
  if valid_609992 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_609992
  var valid_609993 = query.getOrDefault("Action")
  valid_609993 = validateParameter(valid_609993, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_609993 != nil:
    section.add "Action", valid_609993
  var valid_609994 = query.getOrDefault("AttributeName")
  valid_609994 = validateParameter(valid_609994, JString, required = true,
                                 default = nil)
  if valid_609994 != nil:
    section.add "AttributeName", valid_609994
  var valid_609995 = query.getOrDefault("ValuesToAdd")
  valid_609995 = validateParameter(valid_609995, JArray, required = false,
                                 default = nil)
  if valid_609995 != nil:
    section.add "ValuesToAdd", valid_609995
  var valid_609996 = query.getOrDefault("Version")
  valid_609996 = validateParameter(valid_609996, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609996 != nil:
    section.add "Version", valid_609996
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609997 = header.getOrDefault("X-Amz-Signature")
  valid_609997 = validateParameter(valid_609997, JString, required = false,
                                 default = nil)
  if valid_609997 != nil:
    section.add "X-Amz-Signature", valid_609997
  var valid_609998 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609998 = validateParameter(valid_609998, JString, required = false,
                                 default = nil)
  if valid_609998 != nil:
    section.add "X-Amz-Content-Sha256", valid_609998
  var valid_609999 = header.getOrDefault("X-Amz-Date")
  valid_609999 = validateParameter(valid_609999, JString, required = false,
                                 default = nil)
  if valid_609999 != nil:
    section.add "X-Amz-Date", valid_609999
  var valid_610000 = header.getOrDefault("X-Amz-Credential")
  valid_610000 = validateParameter(valid_610000, JString, required = false,
                                 default = nil)
  if valid_610000 != nil:
    section.add "X-Amz-Credential", valid_610000
  var valid_610001 = header.getOrDefault("X-Amz-Security-Token")
  valid_610001 = validateParameter(valid_610001, JString, required = false,
                                 default = nil)
  if valid_610001 != nil:
    section.add "X-Amz-Security-Token", valid_610001
  var valid_610002 = header.getOrDefault("X-Amz-Algorithm")
  valid_610002 = validateParameter(valid_610002, JString, required = false,
                                 default = nil)
  if valid_610002 != nil:
    section.add "X-Amz-Algorithm", valid_610002
  var valid_610003 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610003 = validateParameter(valid_610003, JString, required = false,
                                 default = nil)
  if valid_610003 != nil:
    section.add "X-Amz-SignedHeaders", valid_610003
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610004: Call_GetModifyDBClusterSnapshotAttribute_609988;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610004.validator(path, query, header, formData, body)
  let scheme = call_610004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610004.url(scheme.get, call_610004.host, call_610004.base,
                         call_610004.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610004, url, valid)

proc call*(call_610005: Call_GetModifyDBClusterSnapshotAttribute_609988;
          DBClusterSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToAdd: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_610006 = newJObject()
  if ValuesToRemove != nil:
    query_610006.add "ValuesToRemove", ValuesToRemove
  add(query_610006, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_610006, "Action", newJString(Action))
  add(query_610006, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_610006.add "ValuesToAdd", ValuesToAdd
  add(query_610006, "Version", newJString(Version))
  result = call_610005.call(nil, query_610006, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_609988(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_609989, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_609990,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_610085 = ref object of OpenApiRestCall_605589
proc url_PostModifyDBInstance_610087(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBInstance_610086(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610088 = query.getOrDefault("Action")
  valid_610088 = validateParameter(valid_610088, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_610088 != nil:
    section.add "Action", valid_610088
  var valid_610089 = query.getOrDefault("Version")
  valid_610089 = validateParameter(valid_610089, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610089 != nil:
    section.add "Version", valid_610089
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_610090 = header.getOrDefault("X-Amz-Security-Token")
  valid_610090 = validateParameter(valid_610090, JString, required = false,
                                 default = nil)
  if valid_610090 != nil:
    section.add "X-Amz-Security-Token", valid_610090
  var valid_610091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610091 = validateParameter(valid_610091, JString, required = false,
                                 default = nil)
  if valid_610091 != nil:
    section.add "X-Amz-SignedHeaders", valid_610091
  var valid_610092 = header.getOrDefault("X-Amz-Signature")
  valid_610092 = validateParameter(valid_610092, JString, required = false,
                                 default = nil)
  if valid_610092 != nil:
    section.add "X-Amz-Signature", valid_610092
  var valid_610093 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610093 = validateParameter(valid_610093, JString, required = false,
                                 default = nil)
  if valid_610093 != nil:
    section.add "X-Amz-Content-Sha256", valid_610093
  var valid_610094 = header.getOrDefault("X-Amz-Date")
  valid_610094 = validateParameter(valid_610094, JString, required = false,
                                 default = nil)
  if valid_610094 != nil:
    section.add "X-Amz-Date", valid_610094
  var valid_610095 = header.getOrDefault("X-Amz-Credential")
  valid_610095 = validateParameter(valid_610095, JString, required = false,
                                 default = nil)
  if valid_610095 != nil:
    section.add "X-Amz-Credential", valid_610095
  var valid_610096 = header.getOrDefault("X-Amz-Algorithm")
  valid_610096 = validateParameter(valid_610096, JString, required = false,
                                 default = nil)
  if valid_610096 != nil:
    section.add "X-Amz-Algorithm", valid_610096
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   CertificateRotationRestart: JBool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  section = newJObject()
  var valid_610097 = formData.getOrDefault("PromotionTier")
  valid_610097 = validateParameter(valid_610097, JInt, required = false, default = nil)
  if valid_610097 != nil:
    section.add "PromotionTier", valid_610097
  var valid_610098 = formData.getOrDefault("MultiAZ")
  valid_610098 = validateParameter(valid_610098, JBool, required = false, default = nil)
  if valid_610098 != nil:
    section.add "MultiAZ", valid_610098
  var valid_610099 = formData.getOrDefault("MonitoringRoleArn")
  valid_610099 = validateParameter(valid_610099, JString, required = false,
                                 default = nil)
  if valid_610099 != nil:
    section.add "MonitoringRoleArn", valid_610099
  var valid_610100 = formData.getOrDefault("CACertificateIdentifier")
  valid_610100 = validateParameter(valid_610100, JString, required = false,
                                 default = nil)
  if valid_610100 != nil:
    section.add "CACertificateIdentifier", valid_610100
  var valid_610101 = formData.getOrDefault("MonitoringInterval")
  valid_610101 = validateParameter(valid_610101, JInt, required = false, default = nil)
  if valid_610101 != nil:
    section.add "MonitoringInterval", valid_610101
  var valid_610102 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_610102 = validateParameter(valid_610102, JArray, required = false,
                                 default = nil)
  if valid_610102 != nil:
    section.add "VpcSecurityGroupIds", valid_610102
  var valid_610103 = formData.getOrDefault("EnablePerformanceInsights")
  valid_610103 = validateParameter(valid_610103, JBool, required = false, default = nil)
  if valid_610103 != nil:
    section.add "EnablePerformanceInsights", valid_610103
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_610104 = formData.getOrDefault("DBInstanceIdentifier")
  valid_610104 = validateParameter(valid_610104, JString, required = true,
                                 default = nil)
  if valid_610104 != nil:
    section.add "DBInstanceIdentifier", valid_610104
  var valid_610105 = formData.getOrDefault("TdeCredentialArn")
  valid_610105 = validateParameter(valid_610105, JString, required = false,
                                 default = nil)
  if valid_610105 != nil:
    section.add "TdeCredentialArn", valid_610105
  var valid_610106 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_610106 = validateParameter(valid_610106, JInt, required = false, default = nil)
  if valid_610106 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_610106
  var valid_610107 = formData.getOrDefault("DBSubnetGroupName")
  valid_610107 = validateParameter(valid_610107, JString, required = false,
                                 default = nil)
  if valid_610107 != nil:
    section.add "DBSubnetGroupName", valid_610107
  var valid_610108 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_610108 = validateParameter(valid_610108, JBool, required = false, default = nil)
  if valid_610108 != nil:
    section.add "AllowMajorVersionUpgrade", valid_610108
  var valid_610109 = formData.getOrDefault("CertificateRotationRestart")
  valid_610109 = validateParameter(valid_610109, JBool, required = false, default = nil)
  if valid_610109 != nil:
    section.add "CertificateRotationRestart", valid_610109
  var valid_610110 = formData.getOrDefault("StorageType")
  valid_610110 = validateParameter(valid_610110, JString, required = false,
                                 default = nil)
  if valid_610110 != nil:
    section.add "StorageType", valid_610110
  var valid_610111 = formData.getOrDefault("MaxAllocatedStorage")
  valid_610111 = validateParameter(valid_610111, JInt, required = false, default = nil)
  if valid_610111 != nil:
    section.add "MaxAllocatedStorage", valid_610111
  var valid_610112 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_610112 = validateParameter(valid_610112, JBool, required = false, default = nil)
  if valid_610112 != nil:
    section.add "CopyTagsToSnapshot", valid_610112
  var valid_610113 = formData.getOrDefault("DeletionProtection")
  valid_610113 = validateParameter(valid_610113, JBool, required = false, default = nil)
  if valid_610113 != nil:
    section.add "DeletionProtection", valid_610113
  var valid_610114 = formData.getOrDefault("ProcessorFeatures")
  valid_610114 = validateParameter(valid_610114, JArray, required = false,
                                 default = nil)
  if valid_610114 != nil:
    section.add "ProcessorFeatures", valid_610114
  var valid_610115 = formData.getOrDefault("AllocatedStorage")
  valid_610115 = validateParameter(valid_610115, JInt, required = false, default = nil)
  if valid_610115 != nil:
    section.add "AllocatedStorage", valid_610115
  var valid_610116 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_610116 = validateParameter(valid_610116, JString, required = false,
                                 default = nil)
  if valid_610116 != nil:
    section.add "PreferredMaintenanceWindow", valid_610116
  var valid_610117 = formData.getOrDefault("DBInstanceClass")
  valid_610117 = validateParameter(valid_610117, JString, required = false,
                                 default = nil)
  if valid_610117 != nil:
    section.add "DBInstanceClass", valid_610117
  var valid_610118 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_610118 = validateParameter(valid_610118, JBool, required = false, default = nil)
  if valid_610118 != nil:
    section.add "UseDefaultProcessorFeatures", valid_610118
  var valid_610119 = formData.getOrDefault("PreferredBackupWindow")
  valid_610119 = validateParameter(valid_610119, JString, required = false,
                                 default = nil)
  if valid_610119 != nil:
    section.add "PreferredBackupWindow", valid_610119
  var valid_610120 = formData.getOrDefault("MasterUserPassword")
  valid_610120 = validateParameter(valid_610120, JString, required = false,
                                 default = nil)
  if valid_610120 != nil:
    section.add "MasterUserPassword", valid_610120
  var valid_610121 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_610121 = validateParameter(valid_610121, JArray, required = false,
                                 default = nil)
  if valid_610121 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_610121
  var valid_610122 = formData.getOrDefault("Domain")
  valid_610122 = validateParameter(valid_610122, JString, required = false,
                                 default = nil)
  if valid_610122 != nil:
    section.add "Domain", valid_610122
  var valid_610123 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_610123 = validateParameter(valid_610123, JArray, required = false,
                                 default = nil)
  if valid_610123 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_610123
  var valid_610124 = formData.getOrDefault("DBParameterGroupName")
  valid_610124 = validateParameter(valid_610124, JString, required = false,
                                 default = nil)
  if valid_610124 != nil:
    section.add "DBParameterGroupName", valid_610124
  var valid_610125 = formData.getOrDefault("EngineVersion")
  valid_610125 = validateParameter(valid_610125, JString, required = false,
                                 default = nil)
  if valid_610125 != nil:
    section.add "EngineVersion", valid_610125
  var valid_610126 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_610126 = validateParameter(valid_610126, JBool, required = false, default = nil)
  if valid_610126 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_610126
  var valid_610127 = formData.getOrDefault("BackupRetentionPeriod")
  valid_610127 = validateParameter(valid_610127, JInt, required = false, default = nil)
  if valid_610127 != nil:
    section.add "BackupRetentionPeriod", valid_610127
  var valid_610128 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_610128 = validateParameter(valid_610128, JBool, required = false, default = nil)
  if valid_610128 != nil:
    section.add "AutoMinorVersionUpgrade", valid_610128
  var valid_610129 = formData.getOrDefault("TdeCredentialPassword")
  valid_610129 = validateParameter(valid_610129, JString, required = false,
                                 default = nil)
  if valid_610129 != nil:
    section.add "TdeCredentialPassword", valid_610129
  var valid_610130 = formData.getOrDefault("ApplyImmediately")
  valid_610130 = validateParameter(valid_610130, JBool, required = false, default = nil)
  if valid_610130 != nil:
    section.add "ApplyImmediately", valid_610130
  var valid_610131 = formData.getOrDefault("Iops")
  valid_610131 = validateParameter(valid_610131, JInt, required = false, default = nil)
  if valid_610131 != nil:
    section.add "Iops", valid_610131
  var valid_610132 = formData.getOrDefault("PubliclyAccessible")
  valid_610132 = validateParameter(valid_610132, JBool, required = false, default = nil)
  if valid_610132 != nil:
    section.add "PubliclyAccessible", valid_610132
  var valid_610133 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_610133 = validateParameter(valid_610133, JString, required = false,
                                 default = nil)
  if valid_610133 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_610133
  var valid_610134 = formData.getOrDefault("LicenseModel")
  valid_610134 = validateParameter(valid_610134, JString, required = false,
                                 default = nil)
  if valid_610134 != nil:
    section.add "LicenseModel", valid_610134
  var valid_610135 = formData.getOrDefault("DomainIAMRoleName")
  valid_610135 = validateParameter(valid_610135, JString, required = false,
                                 default = nil)
  if valid_610135 != nil:
    section.add "DomainIAMRoleName", valid_610135
  var valid_610136 = formData.getOrDefault("OptionGroupName")
  valid_610136 = validateParameter(valid_610136, JString, required = false,
                                 default = nil)
  if valid_610136 != nil:
    section.add "OptionGroupName", valid_610136
  var valid_610137 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_610137 = validateParameter(valid_610137, JString, required = false,
                                 default = nil)
  if valid_610137 != nil:
    section.add "NewDBInstanceIdentifier", valid_610137
  var valid_610138 = formData.getOrDefault("DBSecurityGroups")
  valid_610138 = validateParameter(valid_610138, JArray, required = false,
                                 default = nil)
  if valid_610138 != nil:
    section.add "DBSecurityGroups", valid_610138
  var valid_610139 = formData.getOrDefault("DBPortNumber")
  valid_610139 = validateParameter(valid_610139, JInt, required = false, default = nil)
  if valid_610139 != nil:
    section.add "DBPortNumber", valid_610139
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610140: Call_PostModifyDBInstance_610085; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_610140.validator(path, query, header, formData, body)
  let scheme = call_610140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610140.url(scheme.get, call_610140.host, call_610140.base,
                         call_610140.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610140, url, valid)

proc call*(call_610141: Call_PostModifyDBInstance_610085;
          DBInstanceIdentifier: string; PromotionTier: int = 0; MultiAZ: bool = false;
          MonitoringRoleArn: string = ""; CACertificateIdentifier: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnablePerformanceInsights: bool = false; TdeCredentialArn: string = "";
          Action: string = "ModifyDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; AllowMajorVersionUpgrade: bool = false;
          CertificateRotationRestart: bool = false; StorageType: string = "";
          MaxAllocatedStorage: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil;
          AllocatedStorage: int = 0; PreferredMaintenanceWindow: string = "";
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Domain: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; AutoMinorVersionUpgrade: bool = false;
          TdeCredentialPassword: string = ""; ApplyImmediately: bool = false;
          Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          DomainIAMRoleName: string = ""; OptionGroupName: string = "";
          NewDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; DBPortNumber: int = 0): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   CertificateRotationRestart: bool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  var query_610142 = newJObject()
  var formData_610143 = newJObject()
  add(formData_610143, "PromotionTier", newJInt(PromotionTier))
  add(formData_610143, "MultiAZ", newJBool(MultiAZ))
  add(formData_610143, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_610143, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_610143, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_610143.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_610143, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_610143, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_610143, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_610142, "Action", newJString(Action))
  add(formData_610143, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_610143, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_610143, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_610143, "CertificateRotationRestart",
      newJBool(CertificateRotationRestart))
  add(formData_610143, "StorageType", newJString(StorageType))
  add(formData_610143, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_610143, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_610143, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_610143.add "ProcessorFeatures", ProcessorFeatures
  add(formData_610143, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_610143, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_610143, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_610143, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_610143, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_610143, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_610143.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_610143, "Domain", newJString(Domain))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_610143.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_610143, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_610143, "EngineVersion", newJString(EngineVersion))
  add(formData_610143, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_610143, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_610143, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_610143, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_610143, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_610143, "Iops", newJInt(Iops))
  add(formData_610143, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_610143, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_610143, "LicenseModel", newJString(LicenseModel))
  add(formData_610143, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_610143, "OptionGroupName", newJString(OptionGroupName))
  add(formData_610143, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(query_610142, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_610143.add "DBSecurityGroups", DBSecurityGroups
  add(formData_610143, "DBPortNumber", newJInt(DBPortNumber))
  result = call_610141.call(nil, query_610142, nil, formData_610143, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_610085(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_610086, base: "/",
    url: url_PostModifyDBInstance_610087, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_610027 = ref object of OpenApiRestCall_605589
proc url_GetModifyDBInstance_610029(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBInstance_610028(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CertificateRotationRestart: JBool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  section = newJObject()
  var valid_610030 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_610030 = validateParameter(valid_610030, JBool, required = false, default = nil)
  if valid_610030 != nil:
    section.add "UseDefaultProcessorFeatures", valid_610030
  var valid_610031 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_610031 = validateParameter(valid_610031, JInt, required = false, default = nil)
  if valid_610031 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_610031
  var valid_610032 = query.getOrDefault("CopyTagsToSnapshot")
  valid_610032 = validateParameter(valid_610032, JBool, required = false, default = nil)
  if valid_610032 != nil:
    section.add "CopyTagsToSnapshot", valid_610032
  var valid_610033 = query.getOrDefault("MonitoringInterval")
  valid_610033 = validateParameter(valid_610033, JInt, required = false, default = nil)
  if valid_610033 != nil:
    section.add "MonitoringInterval", valid_610033
  var valid_610034 = query.getOrDefault("MonitoringRoleArn")
  valid_610034 = validateParameter(valid_610034, JString, required = false,
                                 default = nil)
  if valid_610034 != nil:
    section.add "MonitoringRoleArn", valid_610034
  var valid_610035 = query.getOrDefault("DBPortNumber")
  valid_610035 = validateParameter(valid_610035, JInt, required = false, default = nil)
  if valid_610035 != nil:
    section.add "DBPortNumber", valid_610035
  var valid_610036 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_610036 = validateParameter(valid_610036, JArray, required = false,
                                 default = nil)
  if valid_610036 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_610036
  var valid_610037 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_610037 = validateParameter(valid_610037, JArray, required = false,
                                 default = nil)
  if valid_610037 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_610037
  var valid_610038 = query.getOrDefault("ProcessorFeatures")
  valid_610038 = validateParameter(valid_610038, JArray, required = false,
                                 default = nil)
  if valid_610038 != nil:
    section.add "ProcessorFeatures", valid_610038
  var valid_610039 = query.getOrDefault("BackupRetentionPeriod")
  valid_610039 = validateParameter(valid_610039, JInt, required = false, default = nil)
  if valid_610039 != nil:
    section.add "BackupRetentionPeriod", valid_610039
  var valid_610040 = query.getOrDefault("EngineVersion")
  valid_610040 = validateParameter(valid_610040, JString, required = false,
                                 default = nil)
  if valid_610040 != nil:
    section.add "EngineVersion", valid_610040
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610041 = query.getOrDefault("Action")
  valid_610041 = validateParameter(valid_610041, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_610041 != nil:
    section.add "Action", valid_610041
  var valid_610042 = query.getOrDefault("Domain")
  valid_610042 = validateParameter(valid_610042, JString, required = false,
                                 default = nil)
  if valid_610042 != nil:
    section.add "Domain", valid_610042
  var valid_610043 = query.getOrDefault("VpcSecurityGroupIds")
  valid_610043 = validateParameter(valid_610043, JArray, required = false,
                                 default = nil)
  if valid_610043 != nil:
    section.add "VpcSecurityGroupIds", valid_610043
  var valid_610044 = query.getOrDefault("AllocatedStorage")
  valid_610044 = validateParameter(valid_610044, JInt, required = false, default = nil)
  if valid_610044 != nil:
    section.add "AllocatedStorage", valid_610044
  var valid_610045 = query.getOrDefault("EnablePerformanceInsights")
  valid_610045 = validateParameter(valid_610045, JBool, required = false, default = nil)
  if valid_610045 != nil:
    section.add "EnablePerformanceInsights", valid_610045
  var valid_610046 = query.getOrDefault("PubliclyAccessible")
  valid_610046 = validateParameter(valid_610046, JBool, required = false, default = nil)
  if valid_610046 != nil:
    section.add "PubliclyAccessible", valid_610046
  var valid_610047 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_610047 = validateParameter(valid_610047, JString, required = false,
                                 default = nil)
  if valid_610047 != nil:
    section.add "NewDBInstanceIdentifier", valid_610047
  var valid_610048 = query.getOrDefault("TdeCredentialPassword")
  valid_610048 = validateParameter(valid_610048, JString, required = false,
                                 default = nil)
  if valid_610048 != nil:
    section.add "TdeCredentialPassword", valid_610048
  var valid_610049 = query.getOrDefault("DeletionProtection")
  valid_610049 = validateParameter(valid_610049, JBool, required = false, default = nil)
  if valid_610049 != nil:
    section.add "DeletionProtection", valid_610049
  var valid_610050 = query.getOrDefault("DBParameterGroupName")
  valid_610050 = validateParameter(valid_610050, JString, required = false,
                                 default = nil)
  if valid_610050 != nil:
    section.add "DBParameterGroupName", valid_610050
  var valid_610051 = query.getOrDefault("MaxAllocatedStorage")
  valid_610051 = validateParameter(valid_610051, JInt, required = false, default = nil)
  if valid_610051 != nil:
    section.add "MaxAllocatedStorage", valid_610051
  var valid_610052 = query.getOrDefault("CertificateRotationRestart")
  valid_610052 = validateParameter(valid_610052, JBool, required = false, default = nil)
  if valid_610052 != nil:
    section.add "CertificateRotationRestart", valid_610052
  var valid_610053 = query.getOrDefault("LicenseModel")
  valid_610053 = validateParameter(valid_610053, JString, required = false,
                                 default = nil)
  if valid_610053 != nil:
    section.add "LicenseModel", valid_610053
  var valid_610054 = query.getOrDefault("DBInstanceIdentifier")
  valid_610054 = validateParameter(valid_610054, JString, required = true,
                                 default = nil)
  if valid_610054 != nil:
    section.add "DBInstanceIdentifier", valid_610054
  var valid_610055 = query.getOrDefault("TdeCredentialArn")
  valid_610055 = validateParameter(valid_610055, JString, required = false,
                                 default = nil)
  if valid_610055 != nil:
    section.add "TdeCredentialArn", valid_610055
  var valid_610056 = query.getOrDefault("PromotionTier")
  valid_610056 = validateParameter(valid_610056, JInt, required = false, default = nil)
  if valid_610056 != nil:
    section.add "PromotionTier", valid_610056
  var valid_610057 = query.getOrDefault("CACertificateIdentifier")
  valid_610057 = validateParameter(valid_610057, JString, required = false,
                                 default = nil)
  if valid_610057 != nil:
    section.add "CACertificateIdentifier", valid_610057
  var valid_610058 = query.getOrDefault("StorageType")
  valid_610058 = validateParameter(valid_610058, JString, required = false,
                                 default = nil)
  if valid_610058 != nil:
    section.add "StorageType", valid_610058
  var valid_610059 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_610059 = validateParameter(valid_610059, JBool, required = false, default = nil)
  if valid_610059 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_610059
  var valid_610060 = query.getOrDefault("MultiAZ")
  valid_610060 = validateParameter(valid_610060, JBool, required = false, default = nil)
  if valid_610060 != nil:
    section.add "MultiAZ", valid_610060
  var valid_610061 = query.getOrDefault("DBSecurityGroups")
  valid_610061 = validateParameter(valid_610061, JArray, required = false,
                                 default = nil)
  if valid_610061 != nil:
    section.add "DBSecurityGroups", valid_610061
  var valid_610062 = query.getOrDefault("ApplyImmediately")
  valid_610062 = validateParameter(valid_610062, JBool, required = false, default = nil)
  if valid_610062 != nil:
    section.add "ApplyImmediately", valid_610062
  var valid_610063 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_610063 = validateParameter(valid_610063, JBool, required = false, default = nil)
  if valid_610063 != nil:
    section.add "AllowMajorVersionUpgrade", valid_610063
  var valid_610064 = query.getOrDefault("MasterUserPassword")
  valid_610064 = validateParameter(valid_610064, JString, required = false,
                                 default = nil)
  if valid_610064 != nil:
    section.add "MasterUserPassword", valid_610064
  var valid_610065 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_610065 = validateParameter(valid_610065, JString, required = false,
                                 default = nil)
  if valid_610065 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_610065
  var valid_610066 = query.getOrDefault("OptionGroupName")
  valid_610066 = validateParameter(valid_610066, JString, required = false,
                                 default = nil)
  if valid_610066 != nil:
    section.add "OptionGroupName", valid_610066
  var valid_610067 = query.getOrDefault("DBSubnetGroupName")
  valid_610067 = validateParameter(valid_610067, JString, required = false,
                                 default = nil)
  if valid_610067 != nil:
    section.add "DBSubnetGroupName", valid_610067
  var valid_610068 = query.getOrDefault("PreferredBackupWindow")
  valid_610068 = validateParameter(valid_610068, JString, required = false,
                                 default = nil)
  if valid_610068 != nil:
    section.add "PreferredBackupWindow", valid_610068
  var valid_610069 = query.getOrDefault("DBInstanceClass")
  valid_610069 = validateParameter(valid_610069, JString, required = false,
                                 default = nil)
  if valid_610069 != nil:
    section.add "DBInstanceClass", valid_610069
  var valid_610070 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_610070 = validateParameter(valid_610070, JString, required = false,
                                 default = nil)
  if valid_610070 != nil:
    section.add "PreferredMaintenanceWindow", valid_610070
  var valid_610071 = query.getOrDefault("Version")
  valid_610071 = validateParameter(valid_610071, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610071 != nil:
    section.add "Version", valid_610071
  var valid_610072 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_610072 = validateParameter(valid_610072, JBool, required = false, default = nil)
  if valid_610072 != nil:
    section.add "AutoMinorVersionUpgrade", valid_610072
  var valid_610073 = query.getOrDefault("Iops")
  valid_610073 = validateParameter(valid_610073, JInt, required = false, default = nil)
  if valid_610073 != nil:
    section.add "Iops", valid_610073
  var valid_610074 = query.getOrDefault("DomainIAMRoleName")
  valid_610074 = validateParameter(valid_610074, JString, required = false,
                                 default = nil)
  if valid_610074 != nil:
    section.add "DomainIAMRoleName", valid_610074
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_610075 = header.getOrDefault("X-Amz-Security-Token")
  valid_610075 = validateParameter(valid_610075, JString, required = false,
                                 default = nil)
  if valid_610075 != nil:
    section.add "X-Amz-Security-Token", valid_610075
  var valid_610076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610076 = validateParameter(valid_610076, JString, required = false,
                                 default = nil)
  if valid_610076 != nil:
    section.add "X-Amz-SignedHeaders", valid_610076
  var valid_610077 = header.getOrDefault("X-Amz-Signature")
  valid_610077 = validateParameter(valid_610077, JString, required = false,
                                 default = nil)
  if valid_610077 != nil:
    section.add "X-Amz-Signature", valid_610077
  var valid_610078 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610078 = validateParameter(valid_610078, JString, required = false,
                                 default = nil)
  if valid_610078 != nil:
    section.add "X-Amz-Content-Sha256", valid_610078
  var valid_610079 = header.getOrDefault("X-Amz-Date")
  valid_610079 = validateParameter(valid_610079, JString, required = false,
                                 default = nil)
  if valid_610079 != nil:
    section.add "X-Amz-Date", valid_610079
  var valid_610080 = header.getOrDefault("X-Amz-Credential")
  valid_610080 = validateParameter(valid_610080, JString, required = false,
                                 default = nil)
  if valid_610080 != nil:
    section.add "X-Amz-Credential", valid_610080
  var valid_610081 = header.getOrDefault("X-Amz-Algorithm")
  valid_610081 = validateParameter(valid_610081, JString, required = false,
                                 default = nil)
  if valid_610081 != nil:
    section.add "X-Amz-Algorithm", valid_610081
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610082: Call_GetModifyDBInstance_610027; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_610082.validator(path, query, header, formData, body)
  let scheme = call_610082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610082.url(scheme.get, call_610082.host, call_610082.base,
                         call_610082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610082, url, valid)

proc call*(call_610083: Call_GetModifyDBInstance_610027;
          DBInstanceIdentifier: string; UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0;
          CopyTagsToSnapshot: bool = false; MonitoringInterval: int = 0;
          MonitoringRoleArn: string = ""; DBPortNumber: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ProcessorFeatures: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EngineVersion: string = ""; Action: string = "ModifyDBInstance";
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AllocatedStorage: int = 0; EnablePerformanceInsights: bool = false;
          PubliclyAccessible: bool = false; NewDBInstanceIdentifier: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          DBParameterGroupName: string = ""; MaxAllocatedStorage: int = 0;
          CertificateRotationRestart: bool = false; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          CACertificateIdentifier: string = ""; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; MultiAZ: bool = false;
          DBSecurityGroups: JsonNode = nil; ApplyImmediately: bool = false;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          PerformanceInsightsKMSKeyId: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          DBInstanceClass: string = ""; PreferredMaintenanceWindow: string = "";
          Version: string = "2014-10-31"; AutoMinorVersionUpgrade: bool = false;
          Iops: int = 0; DomainIAMRoleName: string = ""): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CertificateRotationRestart: bool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  var query_610084 = newJObject()
  add(query_610084, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_610084, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_610084, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_610084, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_610084, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_610084, "DBPortNumber", newJInt(DBPortNumber))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_610084.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_610084.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  if ProcessorFeatures != nil:
    query_610084.add "ProcessorFeatures", ProcessorFeatures
  add(query_610084, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_610084, "EngineVersion", newJString(EngineVersion))
  add(query_610084, "Action", newJString(Action))
  add(query_610084, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_610084.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_610084, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_610084, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_610084, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_610084, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_610084, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_610084, "DeletionProtection", newJBool(DeletionProtection))
  add(query_610084, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_610084, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_610084, "CertificateRotationRestart",
      newJBool(CertificateRotationRestart))
  add(query_610084, "LicenseModel", newJString(LicenseModel))
  add(query_610084, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_610084, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_610084, "PromotionTier", newJInt(PromotionTier))
  add(query_610084, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_610084, "StorageType", newJString(StorageType))
  add(query_610084, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_610084, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_610084.add "DBSecurityGroups", DBSecurityGroups
  add(query_610084, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_610084, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_610084, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_610084, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_610084, "OptionGroupName", newJString(OptionGroupName))
  add(query_610084, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_610084, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_610084, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_610084, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_610084, "Version", newJString(Version))
  add(query_610084, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_610084, "Iops", newJInt(Iops))
  add(query_610084, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_610083.call(nil, query_610084, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_610027(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_610028, base: "/",
    url: url_GetModifyDBInstance_610029, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_610161 = ref object of OpenApiRestCall_605589
proc url_PostModifyDBParameterGroup_610163(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBParameterGroup_610162(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610164 = query.getOrDefault("Action")
  valid_610164 = validateParameter(valid_610164, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_610164 != nil:
    section.add "Action", valid_610164
  var valid_610165 = query.getOrDefault("Version")
  valid_610165 = validateParameter(valid_610165, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610165 != nil:
    section.add "Version", valid_610165
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610166 = header.getOrDefault("X-Amz-Signature")
  valid_610166 = validateParameter(valid_610166, JString, required = false,
                                 default = nil)
  if valid_610166 != nil:
    section.add "X-Amz-Signature", valid_610166
  var valid_610167 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610167 = validateParameter(valid_610167, JString, required = false,
                                 default = nil)
  if valid_610167 != nil:
    section.add "X-Amz-Content-Sha256", valid_610167
  var valid_610168 = header.getOrDefault("X-Amz-Date")
  valid_610168 = validateParameter(valid_610168, JString, required = false,
                                 default = nil)
  if valid_610168 != nil:
    section.add "X-Amz-Date", valid_610168
  var valid_610169 = header.getOrDefault("X-Amz-Credential")
  valid_610169 = validateParameter(valid_610169, JString, required = false,
                                 default = nil)
  if valid_610169 != nil:
    section.add "X-Amz-Credential", valid_610169
  var valid_610170 = header.getOrDefault("X-Amz-Security-Token")
  valid_610170 = validateParameter(valid_610170, JString, required = false,
                                 default = nil)
  if valid_610170 != nil:
    section.add "X-Amz-Security-Token", valid_610170
  var valid_610171 = header.getOrDefault("X-Amz-Algorithm")
  valid_610171 = validateParameter(valid_610171, JString, required = false,
                                 default = nil)
  if valid_610171 != nil:
    section.add "X-Amz-Algorithm", valid_610171
  var valid_610172 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610172 = validateParameter(valid_610172, JString, required = false,
                                 default = nil)
  if valid_610172 != nil:
    section.add "X-Amz-SignedHeaders", valid_610172
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_610173 = formData.getOrDefault("DBParameterGroupName")
  valid_610173 = validateParameter(valid_610173, JString, required = true,
                                 default = nil)
  if valid_610173 != nil:
    section.add "DBParameterGroupName", valid_610173
  var valid_610174 = formData.getOrDefault("Parameters")
  valid_610174 = validateParameter(valid_610174, JArray, required = true, default = nil)
  if valid_610174 != nil:
    section.add "Parameters", valid_610174
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610175: Call_PostModifyDBParameterGroup_610161; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_610175.validator(path, query, header, formData, body)
  let scheme = call_610175.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610175.url(scheme.get, call_610175.host, call_610175.base,
                         call_610175.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610175, url, valid)

proc call*(call_610176: Call_PostModifyDBParameterGroup_610161;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Version: string (required)
  var query_610177 = newJObject()
  var formData_610178 = newJObject()
  add(formData_610178, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_610177, "Action", newJString(Action))
  if Parameters != nil:
    formData_610178.add "Parameters", Parameters
  add(query_610177, "Version", newJString(Version))
  result = call_610176.call(nil, query_610177, nil, formData_610178, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_610161(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_610162, base: "/",
    url: url_PostModifyDBParameterGroup_610163,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_610144 = ref object of OpenApiRestCall_605589
proc url_GetModifyDBParameterGroup_610146(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBParameterGroup_610145(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_610147 = query.getOrDefault("DBParameterGroupName")
  valid_610147 = validateParameter(valid_610147, JString, required = true,
                                 default = nil)
  if valid_610147 != nil:
    section.add "DBParameterGroupName", valid_610147
  var valid_610148 = query.getOrDefault("Parameters")
  valid_610148 = validateParameter(valid_610148, JArray, required = true, default = nil)
  if valid_610148 != nil:
    section.add "Parameters", valid_610148
  var valid_610149 = query.getOrDefault("Action")
  valid_610149 = validateParameter(valid_610149, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_610149 != nil:
    section.add "Action", valid_610149
  var valid_610150 = query.getOrDefault("Version")
  valid_610150 = validateParameter(valid_610150, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610150 != nil:
    section.add "Version", valid_610150
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610151 = header.getOrDefault("X-Amz-Signature")
  valid_610151 = validateParameter(valid_610151, JString, required = false,
                                 default = nil)
  if valid_610151 != nil:
    section.add "X-Amz-Signature", valid_610151
  var valid_610152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610152 = validateParameter(valid_610152, JString, required = false,
                                 default = nil)
  if valid_610152 != nil:
    section.add "X-Amz-Content-Sha256", valid_610152
  var valid_610153 = header.getOrDefault("X-Amz-Date")
  valid_610153 = validateParameter(valid_610153, JString, required = false,
                                 default = nil)
  if valid_610153 != nil:
    section.add "X-Amz-Date", valid_610153
  var valid_610154 = header.getOrDefault("X-Amz-Credential")
  valid_610154 = validateParameter(valid_610154, JString, required = false,
                                 default = nil)
  if valid_610154 != nil:
    section.add "X-Amz-Credential", valid_610154
  var valid_610155 = header.getOrDefault("X-Amz-Security-Token")
  valid_610155 = validateParameter(valid_610155, JString, required = false,
                                 default = nil)
  if valid_610155 != nil:
    section.add "X-Amz-Security-Token", valid_610155
  var valid_610156 = header.getOrDefault("X-Amz-Algorithm")
  valid_610156 = validateParameter(valid_610156, JString, required = false,
                                 default = nil)
  if valid_610156 != nil:
    section.add "X-Amz-Algorithm", valid_610156
  var valid_610157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610157 = validateParameter(valid_610157, JString, required = false,
                                 default = nil)
  if valid_610157 != nil:
    section.add "X-Amz-SignedHeaders", valid_610157
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610158: Call_GetModifyDBParameterGroup_610144; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_610158.validator(path, query, header, formData, body)
  let scheme = call_610158.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610158.url(scheme.get, call_610158.host, call_610158.base,
                         call_610158.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610158, url, valid)

proc call*(call_610159: Call_GetModifyDBParameterGroup_610144;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610160 = newJObject()
  add(query_610160, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_610160.add "Parameters", Parameters
  add(query_610160, "Action", newJString(Action))
  add(query_610160, "Version", newJString(Version))
  result = call_610159.call(nil, query_610160, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_610144(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_610145, base: "/",
    url: url_GetModifyDBParameterGroup_610146,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBProxy_610202 = ref object of OpenApiRestCall_605589
proc url_PostModifyDBProxy_610204(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBProxy_610203(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610205 = query.getOrDefault("Action")
  valid_610205 = validateParameter(valid_610205, JString, required = true,
                                 default = newJString("ModifyDBProxy"))
  if valid_610205 != nil:
    section.add "Action", valid_610205
  var valid_610206 = query.getOrDefault("Version")
  valid_610206 = validateParameter(valid_610206, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610206 != nil:
    section.add "Version", valid_610206
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610207 = header.getOrDefault("X-Amz-Signature")
  valid_610207 = validateParameter(valid_610207, JString, required = false,
                                 default = nil)
  if valid_610207 != nil:
    section.add "X-Amz-Signature", valid_610207
  var valid_610208 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610208 = validateParameter(valid_610208, JString, required = false,
                                 default = nil)
  if valid_610208 != nil:
    section.add "X-Amz-Content-Sha256", valid_610208
  var valid_610209 = header.getOrDefault("X-Amz-Date")
  valid_610209 = validateParameter(valid_610209, JString, required = false,
                                 default = nil)
  if valid_610209 != nil:
    section.add "X-Amz-Date", valid_610209
  var valid_610210 = header.getOrDefault("X-Amz-Credential")
  valid_610210 = validateParameter(valid_610210, JString, required = false,
                                 default = nil)
  if valid_610210 != nil:
    section.add "X-Amz-Credential", valid_610210
  var valid_610211 = header.getOrDefault("X-Amz-Security-Token")
  valid_610211 = validateParameter(valid_610211, JString, required = false,
                                 default = nil)
  if valid_610211 != nil:
    section.add "X-Amz-Security-Token", valid_610211
  var valid_610212 = header.getOrDefault("X-Amz-Algorithm")
  valid_610212 = validateParameter(valid_610212, JString, required = false,
                                 default = nil)
  if valid_610212 != nil:
    section.add "X-Amz-Algorithm", valid_610212
  var valid_610213 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610213 = validateParameter(valid_610213, JString, required = false,
                                 default = nil)
  if valid_610213 != nil:
    section.add "X-Amz-SignedHeaders", valid_610213
  result.add "header", section
  ## parameters in `formData` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RequireTLS: JBool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: JString
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   NewDBProxyName: JString
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  section = newJObject()
  var valid_610214 = formData.getOrDefault("IdleClientTimeout")
  valid_610214 = validateParameter(valid_610214, JInt, required = false, default = nil)
  if valid_610214 != nil:
    section.add "IdleClientTimeout", valid_610214
  var valid_610215 = formData.getOrDefault("RequireTLS")
  valid_610215 = validateParameter(valid_610215, JBool, required = false, default = nil)
  if valid_610215 != nil:
    section.add "RequireTLS", valid_610215
  var valid_610216 = formData.getOrDefault("DebugLogging")
  valid_610216 = validateParameter(valid_610216, JBool, required = false, default = nil)
  if valid_610216 != nil:
    section.add "DebugLogging", valid_610216
  var valid_610217 = formData.getOrDefault("RoleArn")
  valid_610217 = validateParameter(valid_610217, JString, required = false,
                                 default = nil)
  if valid_610217 != nil:
    section.add "RoleArn", valid_610217
  var valid_610218 = formData.getOrDefault("SecurityGroups")
  valid_610218 = validateParameter(valid_610218, JArray, required = false,
                                 default = nil)
  if valid_610218 != nil:
    section.add "SecurityGroups", valid_610218
  var valid_610219 = formData.getOrDefault("Auth")
  valid_610219 = validateParameter(valid_610219, JArray, required = false,
                                 default = nil)
  if valid_610219 != nil:
    section.add "Auth", valid_610219
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_610220 = formData.getOrDefault("DBProxyName")
  valid_610220 = validateParameter(valid_610220, JString, required = true,
                                 default = nil)
  if valid_610220 != nil:
    section.add "DBProxyName", valid_610220
  var valid_610221 = formData.getOrDefault("NewDBProxyName")
  valid_610221 = validateParameter(valid_610221, JString, required = false,
                                 default = nil)
  if valid_610221 != nil:
    section.add "NewDBProxyName", valid_610221
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610222: Call_PostModifyDBProxy_610202; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  let valid = call_610222.validator(path, query, header, formData, body)
  let scheme = call_610222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610222.url(scheme.get, call_610222.host, call_610222.base,
                         call_610222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610222, url, valid)

proc call*(call_610223: Call_PostModifyDBProxy_610202; DBProxyName: string;
          IdleClientTimeout: int = 0; RequireTLS: bool = false;
          DebugLogging: bool = false; RoleArn: string = "";
          SecurityGroups: JsonNode = nil; Auth: JsonNode = nil;
          NewDBProxyName: string = ""; Action: string = "ModifyDBProxy";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RequireTLS: bool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: string
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   DBProxyName: string (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   NewDBProxyName: string
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610224 = newJObject()
  var formData_610225 = newJObject()
  add(formData_610225, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(formData_610225, "RequireTLS", newJBool(RequireTLS))
  add(formData_610225, "DebugLogging", newJBool(DebugLogging))
  add(formData_610225, "RoleArn", newJString(RoleArn))
  if SecurityGroups != nil:
    formData_610225.add "SecurityGroups", SecurityGroups
  if Auth != nil:
    formData_610225.add "Auth", Auth
  add(formData_610225, "DBProxyName", newJString(DBProxyName))
  add(formData_610225, "NewDBProxyName", newJString(NewDBProxyName))
  add(query_610224, "Action", newJString(Action))
  add(query_610224, "Version", newJString(Version))
  result = call_610223.call(nil, query_610224, nil, formData_610225, nil)

var postModifyDBProxy* = Call_PostModifyDBProxy_610202(name: "postModifyDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBProxy", validator: validate_PostModifyDBProxy_610203,
    base: "/", url: url_PostModifyDBProxy_610204,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBProxy_610179 = ref object of OpenApiRestCall_605589
proc url_GetModifyDBProxy_610181(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBProxy_610180(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: JString
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   RequireTLS: JBool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   NewDBProxyName: JString
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  section = newJObject()
  var valid_610182 = query.getOrDefault("IdleClientTimeout")
  valid_610182 = validateParameter(valid_610182, JInt, required = false, default = nil)
  if valid_610182 != nil:
    section.add "IdleClientTimeout", valid_610182
  var valid_610183 = query.getOrDefault("RoleArn")
  valid_610183 = validateParameter(valid_610183, JString, required = false,
                                 default = nil)
  if valid_610183 != nil:
    section.add "RoleArn", valid_610183
  var valid_610184 = query.getOrDefault("Auth")
  valid_610184 = validateParameter(valid_610184, JArray, required = false,
                                 default = nil)
  if valid_610184 != nil:
    section.add "Auth", valid_610184
  var valid_610185 = query.getOrDefault("RequireTLS")
  valid_610185 = validateParameter(valid_610185, JBool, required = false, default = nil)
  if valid_610185 != nil:
    section.add "RequireTLS", valid_610185
  var valid_610186 = query.getOrDefault("NewDBProxyName")
  valid_610186 = validateParameter(valid_610186, JString, required = false,
                                 default = nil)
  if valid_610186 != nil:
    section.add "NewDBProxyName", valid_610186
  var valid_610187 = query.getOrDefault("SecurityGroups")
  valid_610187 = validateParameter(valid_610187, JArray, required = false,
                                 default = nil)
  if valid_610187 != nil:
    section.add "SecurityGroups", valid_610187
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610188 = query.getOrDefault("Action")
  valid_610188 = validateParameter(valid_610188, JString, required = true,
                                 default = newJString("ModifyDBProxy"))
  if valid_610188 != nil:
    section.add "Action", valid_610188
  var valid_610189 = query.getOrDefault("Version")
  valid_610189 = validateParameter(valid_610189, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610189 != nil:
    section.add "Version", valid_610189
  var valid_610190 = query.getOrDefault("DebugLogging")
  valid_610190 = validateParameter(valid_610190, JBool, required = false, default = nil)
  if valid_610190 != nil:
    section.add "DebugLogging", valid_610190
  var valid_610191 = query.getOrDefault("DBProxyName")
  valid_610191 = validateParameter(valid_610191, JString, required = true,
                                 default = nil)
  if valid_610191 != nil:
    section.add "DBProxyName", valid_610191
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610192 = header.getOrDefault("X-Amz-Signature")
  valid_610192 = validateParameter(valid_610192, JString, required = false,
                                 default = nil)
  if valid_610192 != nil:
    section.add "X-Amz-Signature", valid_610192
  var valid_610193 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610193 = validateParameter(valid_610193, JString, required = false,
                                 default = nil)
  if valid_610193 != nil:
    section.add "X-Amz-Content-Sha256", valid_610193
  var valid_610194 = header.getOrDefault("X-Amz-Date")
  valid_610194 = validateParameter(valid_610194, JString, required = false,
                                 default = nil)
  if valid_610194 != nil:
    section.add "X-Amz-Date", valid_610194
  var valid_610195 = header.getOrDefault("X-Amz-Credential")
  valid_610195 = validateParameter(valid_610195, JString, required = false,
                                 default = nil)
  if valid_610195 != nil:
    section.add "X-Amz-Credential", valid_610195
  var valid_610196 = header.getOrDefault("X-Amz-Security-Token")
  valid_610196 = validateParameter(valid_610196, JString, required = false,
                                 default = nil)
  if valid_610196 != nil:
    section.add "X-Amz-Security-Token", valid_610196
  var valid_610197 = header.getOrDefault("X-Amz-Algorithm")
  valid_610197 = validateParameter(valid_610197, JString, required = false,
                                 default = nil)
  if valid_610197 != nil:
    section.add "X-Amz-Algorithm", valid_610197
  var valid_610198 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610198 = validateParameter(valid_610198, JString, required = false,
                                 default = nil)
  if valid_610198 != nil:
    section.add "X-Amz-SignedHeaders", valid_610198
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610199: Call_GetModifyDBProxy_610179; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  let valid = call_610199.validator(path, query, header, formData, body)
  let scheme = call_610199.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610199.url(scheme.get, call_610199.host, call_610199.base,
                         call_610199.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610199, url, valid)

proc call*(call_610200: Call_GetModifyDBProxy_610179; DBProxyName: string;
          IdleClientTimeout: int = 0; RoleArn: string = ""; Auth: JsonNode = nil;
          RequireTLS: bool = false; NewDBProxyName: string = "";
          SecurityGroups: JsonNode = nil; Action: string = "ModifyDBProxy";
          Version: string = "2014-10-31"; DebugLogging: bool = false): Recallable =
  ## getModifyDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: string
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   RequireTLS: bool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   NewDBProxyName: string
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: string (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  var query_610201 = newJObject()
  add(query_610201, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(query_610201, "RoleArn", newJString(RoleArn))
  if Auth != nil:
    query_610201.add "Auth", Auth
  add(query_610201, "RequireTLS", newJBool(RequireTLS))
  add(query_610201, "NewDBProxyName", newJString(NewDBProxyName))
  if SecurityGroups != nil:
    query_610201.add "SecurityGroups", SecurityGroups
  add(query_610201, "Action", newJString(Action))
  add(query_610201, "Version", newJString(Version))
  add(query_610201, "DebugLogging", newJBool(DebugLogging))
  add(query_610201, "DBProxyName", newJString(DBProxyName))
  result = call_610200.call(nil, query_610201, nil, nil, nil)

var getModifyDBProxy* = Call_GetModifyDBProxy_610179(name: "getModifyDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBProxy", validator: validate_GetModifyDBProxy_610180,
    base: "/", url: url_GetModifyDBProxy_610181,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBProxyTargetGroup_610249 = ref object of OpenApiRestCall_605589
proc url_PostModifyDBProxyTargetGroup_610251(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBProxyTargetGroup_610250(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610252 = query.getOrDefault("Action")
  valid_610252 = validateParameter(valid_610252, JString, required = true, default = newJString(
      "ModifyDBProxyTargetGroup"))
  if valid_610252 != nil:
    section.add "Action", valid_610252
  var valid_610253 = query.getOrDefault("Version")
  valid_610253 = validateParameter(valid_610253, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610253 != nil:
    section.add "Version", valid_610253
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610254 = header.getOrDefault("X-Amz-Signature")
  valid_610254 = validateParameter(valid_610254, JString, required = false,
                                 default = nil)
  if valid_610254 != nil:
    section.add "X-Amz-Signature", valid_610254
  var valid_610255 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610255 = validateParameter(valid_610255, JString, required = false,
                                 default = nil)
  if valid_610255 != nil:
    section.add "X-Amz-Content-Sha256", valid_610255
  var valid_610256 = header.getOrDefault("X-Amz-Date")
  valid_610256 = validateParameter(valid_610256, JString, required = false,
                                 default = nil)
  if valid_610256 != nil:
    section.add "X-Amz-Date", valid_610256
  var valid_610257 = header.getOrDefault("X-Amz-Credential")
  valid_610257 = validateParameter(valid_610257, JString, required = false,
                                 default = nil)
  if valid_610257 != nil:
    section.add "X-Amz-Credential", valid_610257
  var valid_610258 = header.getOrDefault("X-Amz-Security-Token")
  valid_610258 = validateParameter(valid_610258, JString, required = false,
                                 default = nil)
  if valid_610258 != nil:
    section.add "X-Amz-Security-Token", valid_610258
  var valid_610259 = header.getOrDefault("X-Amz-Algorithm")
  valid_610259 = validateParameter(valid_610259, JString, required = false,
                                 default = nil)
  if valid_610259 != nil:
    section.add "X-Amz-Algorithm", valid_610259
  var valid_610260 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610260 = validateParameter(valid_610260, JString, required = false,
                                 default = nil)
  if valid_610260 != nil:
    section.add "X-Amz-SignedHeaders", valid_610260
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConnectionPoolConfig.MaxConnectionsPercent: JString
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   TargetGroupName: JString (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   NewName: JString
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfig.MaxIdleConnectionsPercent: JString
  ##                                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfig.InitQuery: JString
  ##                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   DBProxyName: JString (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   ConnectionPoolConfig.ConnectionBorrowTimeout: JString
  ##                                               : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   ConnectionPoolConfig.SessionPinningFilters: JArray
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  section = newJObject()
  var valid_610261 = formData.getOrDefault("ConnectionPoolConfig.MaxConnectionsPercent")
  valid_610261 = validateParameter(valid_610261, JString, required = false,
                                 default = nil)
  if valid_610261 != nil:
    section.add "ConnectionPoolConfig.MaxConnectionsPercent", valid_610261
  assert formData != nil, "formData argument is necessary due to required `TargetGroupName` field"
  var valid_610262 = formData.getOrDefault("TargetGroupName")
  valid_610262 = validateParameter(valid_610262, JString, required = true,
                                 default = nil)
  if valid_610262 != nil:
    section.add "TargetGroupName", valid_610262
  var valid_610263 = formData.getOrDefault("NewName")
  valid_610263 = validateParameter(valid_610263, JString, required = false,
                                 default = nil)
  if valid_610263 != nil:
    section.add "NewName", valid_610263
  var valid_610264 = formData.getOrDefault("ConnectionPoolConfig.MaxIdleConnectionsPercent")
  valid_610264 = validateParameter(valid_610264, JString, required = false,
                                 default = nil)
  if valid_610264 != nil:
    section.add "ConnectionPoolConfig.MaxIdleConnectionsPercent", valid_610264
  var valid_610265 = formData.getOrDefault("ConnectionPoolConfig.InitQuery")
  valid_610265 = validateParameter(valid_610265, JString, required = false,
                                 default = nil)
  if valid_610265 != nil:
    section.add "ConnectionPoolConfig.InitQuery", valid_610265
  var valid_610266 = formData.getOrDefault("DBProxyName")
  valid_610266 = validateParameter(valid_610266, JString, required = true,
                                 default = nil)
  if valid_610266 != nil:
    section.add "DBProxyName", valid_610266
  var valid_610267 = formData.getOrDefault("ConnectionPoolConfig.ConnectionBorrowTimeout")
  valid_610267 = validateParameter(valid_610267, JString, required = false,
                                 default = nil)
  if valid_610267 != nil:
    section.add "ConnectionPoolConfig.ConnectionBorrowTimeout", valid_610267
  var valid_610268 = formData.getOrDefault("ConnectionPoolConfig.SessionPinningFilters")
  valid_610268 = validateParameter(valid_610268, JArray, required = false,
                                 default = nil)
  if valid_610268 != nil:
    section.add "ConnectionPoolConfig.SessionPinningFilters", valid_610268
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610269: Call_PostModifyDBProxyTargetGroup_610249; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_610269.validator(path, query, header, formData, body)
  let scheme = call_610269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610269.url(scheme.get, call_610269.host, call_610269.base,
                         call_610269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610269, url, valid)

proc call*(call_610270: Call_PostModifyDBProxyTargetGroup_610249;
          TargetGroupName: string; DBProxyName: string;
          ConnectionPoolConfigMaxConnectionsPercent: string = "";
          NewName: string = "";
          ConnectionPoolConfigMaxIdleConnectionsPercent: string = "";
          ConnectionPoolConfigInitQuery: string = "";
          Action: string = "ModifyDBProxyTargetGroup";
          ConnectionPoolConfigConnectionBorrowTimeout: string = "";
          Version: string = "2014-10-31";
          ConnectionPoolConfigSessionPinningFilters: JsonNode = nil): Recallable =
  ## postModifyDBProxyTargetGroup
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ##   ConnectionPoolConfigMaxConnectionsPercent: string
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   TargetGroupName: string (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   NewName: string
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfigMaxIdleConnectionsPercent: string
  ##                                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfigInitQuery: string
  ##                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   DBProxyName: string (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   Action: string (required)
  ##   ConnectionPoolConfigConnectionBorrowTimeout: string
  ##                                              : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: string (required)
  ##   ConnectionPoolConfigSessionPinningFilters: JArray
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  var query_610271 = newJObject()
  var formData_610272 = newJObject()
  add(formData_610272, "ConnectionPoolConfig.MaxConnectionsPercent",
      newJString(ConnectionPoolConfigMaxConnectionsPercent))
  add(formData_610272, "TargetGroupName", newJString(TargetGroupName))
  add(formData_610272, "NewName", newJString(NewName))
  add(formData_610272, "ConnectionPoolConfig.MaxIdleConnectionsPercent",
      newJString(ConnectionPoolConfigMaxIdleConnectionsPercent))
  add(formData_610272, "ConnectionPoolConfig.InitQuery",
      newJString(ConnectionPoolConfigInitQuery))
  add(formData_610272, "DBProxyName", newJString(DBProxyName))
  add(query_610271, "Action", newJString(Action))
  add(formData_610272, "ConnectionPoolConfig.ConnectionBorrowTimeout",
      newJString(ConnectionPoolConfigConnectionBorrowTimeout))
  add(query_610271, "Version", newJString(Version))
  if ConnectionPoolConfigSessionPinningFilters != nil:
    formData_610272.add "ConnectionPoolConfig.SessionPinningFilters",
                       ConnectionPoolConfigSessionPinningFilters
  result = call_610270.call(nil, query_610271, nil, formData_610272, nil)

var postModifyDBProxyTargetGroup* = Call_PostModifyDBProxyTargetGroup_610249(
    name: "postModifyDBProxyTargetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBProxyTargetGroup",
    validator: validate_PostModifyDBProxyTargetGroup_610250, base: "/",
    url: url_PostModifyDBProxyTargetGroup_610251,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBProxyTargetGroup_610226 = ref object of OpenApiRestCall_605589
proc url_GetModifyDBProxyTargetGroup_610228(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBProxyTargetGroup_610227(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConnectionPoolConfig.SessionPinningFilters: JArray
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   NewName: JString
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfig.MaxIdleConnectionsPercent: JString
  ##                                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfig.InitQuery: JString
  ##                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   TargetGroupName: JString (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   Action: JString (required)
  ##   ConnectionPoolConfig.MaxConnectionsPercent: JString
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   ConnectionPoolConfig.ConnectionBorrowTimeout: JString
  ##                                               : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The name of the new proxy to which to assign the target group.
  section = newJObject()
  var valid_610229 = query.getOrDefault("ConnectionPoolConfig.SessionPinningFilters")
  valid_610229 = validateParameter(valid_610229, JArray, required = false,
                                 default = nil)
  if valid_610229 != nil:
    section.add "ConnectionPoolConfig.SessionPinningFilters", valid_610229
  var valid_610230 = query.getOrDefault("NewName")
  valid_610230 = validateParameter(valid_610230, JString, required = false,
                                 default = nil)
  if valid_610230 != nil:
    section.add "NewName", valid_610230
  var valid_610231 = query.getOrDefault("ConnectionPoolConfig.MaxIdleConnectionsPercent")
  valid_610231 = validateParameter(valid_610231, JString, required = false,
                                 default = nil)
  if valid_610231 != nil:
    section.add "ConnectionPoolConfig.MaxIdleConnectionsPercent", valid_610231
  var valid_610232 = query.getOrDefault("ConnectionPoolConfig.InitQuery")
  valid_610232 = validateParameter(valid_610232, JString, required = false,
                                 default = nil)
  if valid_610232 != nil:
    section.add "ConnectionPoolConfig.InitQuery", valid_610232
  assert query != nil,
        "query argument is necessary due to required `TargetGroupName` field"
  var valid_610233 = query.getOrDefault("TargetGroupName")
  valid_610233 = validateParameter(valid_610233, JString, required = true,
                                 default = nil)
  if valid_610233 != nil:
    section.add "TargetGroupName", valid_610233
  var valid_610234 = query.getOrDefault("Action")
  valid_610234 = validateParameter(valid_610234, JString, required = true, default = newJString(
      "ModifyDBProxyTargetGroup"))
  if valid_610234 != nil:
    section.add "Action", valid_610234
  var valid_610235 = query.getOrDefault("ConnectionPoolConfig.MaxConnectionsPercent")
  valid_610235 = validateParameter(valid_610235, JString, required = false,
                                 default = nil)
  if valid_610235 != nil:
    section.add "ConnectionPoolConfig.MaxConnectionsPercent", valid_610235
  var valid_610236 = query.getOrDefault("ConnectionPoolConfig.ConnectionBorrowTimeout")
  valid_610236 = validateParameter(valid_610236, JString, required = false,
                                 default = nil)
  if valid_610236 != nil:
    section.add "ConnectionPoolConfig.ConnectionBorrowTimeout", valid_610236
  var valid_610237 = query.getOrDefault("Version")
  valid_610237 = validateParameter(valid_610237, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610237 != nil:
    section.add "Version", valid_610237
  var valid_610238 = query.getOrDefault("DBProxyName")
  valid_610238 = validateParameter(valid_610238, JString, required = true,
                                 default = nil)
  if valid_610238 != nil:
    section.add "DBProxyName", valid_610238
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610239 = header.getOrDefault("X-Amz-Signature")
  valid_610239 = validateParameter(valid_610239, JString, required = false,
                                 default = nil)
  if valid_610239 != nil:
    section.add "X-Amz-Signature", valid_610239
  var valid_610240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610240 = validateParameter(valid_610240, JString, required = false,
                                 default = nil)
  if valid_610240 != nil:
    section.add "X-Amz-Content-Sha256", valid_610240
  var valid_610241 = header.getOrDefault("X-Amz-Date")
  valid_610241 = validateParameter(valid_610241, JString, required = false,
                                 default = nil)
  if valid_610241 != nil:
    section.add "X-Amz-Date", valid_610241
  var valid_610242 = header.getOrDefault("X-Amz-Credential")
  valid_610242 = validateParameter(valid_610242, JString, required = false,
                                 default = nil)
  if valid_610242 != nil:
    section.add "X-Amz-Credential", valid_610242
  var valid_610243 = header.getOrDefault("X-Amz-Security-Token")
  valid_610243 = validateParameter(valid_610243, JString, required = false,
                                 default = nil)
  if valid_610243 != nil:
    section.add "X-Amz-Security-Token", valid_610243
  var valid_610244 = header.getOrDefault("X-Amz-Algorithm")
  valid_610244 = validateParameter(valid_610244, JString, required = false,
                                 default = nil)
  if valid_610244 != nil:
    section.add "X-Amz-Algorithm", valid_610244
  var valid_610245 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610245 = validateParameter(valid_610245, JString, required = false,
                                 default = nil)
  if valid_610245 != nil:
    section.add "X-Amz-SignedHeaders", valid_610245
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610246: Call_GetModifyDBProxyTargetGroup_610226; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_610246.validator(path, query, header, formData, body)
  let scheme = call_610246.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610246.url(scheme.get, call_610246.host, call_610246.base,
                         call_610246.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610246, url, valid)

proc call*(call_610247: Call_GetModifyDBProxyTargetGroup_610226;
          TargetGroupName: string; DBProxyName: string;
          ConnectionPoolConfigSessionPinningFilters: JsonNode = nil;
          NewName: string = "";
          ConnectionPoolConfigMaxIdleConnectionsPercent: string = "";
          ConnectionPoolConfigInitQuery: string = "";
          Action: string = "ModifyDBProxyTargetGroup";
          ConnectionPoolConfigMaxConnectionsPercent: string = "";
          ConnectionPoolConfigConnectionBorrowTimeout: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBProxyTargetGroup
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ##   ConnectionPoolConfigSessionPinningFilters: JArray
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   NewName: string
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfigMaxIdleConnectionsPercent: string
  ##                                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfigInitQuery: string
  ##                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   TargetGroupName: string (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   Action: string (required)
  ##   ConnectionPoolConfigMaxConnectionsPercent: string
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   ConnectionPoolConfigConnectionBorrowTimeout: string
  ##                                              : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the new proxy to which to assign the target group.
  var query_610248 = newJObject()
  if ConnectionPoolConfigSessionPinningFilters != nil:
    query_610248.add "ConnectionPoolConfig.SessionPinningFilters",
                    ConnectionPoolConfigSessionPinningFilters
  add(query_610248, "NewName", newJString(NewName))
  add(query_610248, "ConnectionPoolConfig.MaxIdleConnectionsPercent",
      newJString(ConnectionPoolConfigMaxIdleConnectionsPercent))
  add(query_610248, "ConnectionPoolConfig.InitQuery",
      newJString(ConnectionPoolConfigInitQuery))
  add(query_610248, "TargetGroupName", newJString(TargetGroupName))
  add(query_610248, "Action", newJString(Action))
  add(query_610248, "ConnectionPoolConfig.MaxConnectionsPercent",
      newJString(ConnectionPoolConfigMaxConnectionsPercent))
  add(query_610248, "ConnectionPoolConfig.ConnectionBorrowTimeout",
      newJString(ConnectionPoolConfigConnectionBorrowTimeout))
  add(query_610248, "Version", newJString(Version))
  add(query_610248, "DBProxyName", newJString(DBProxyName))
  result = call_610247.call(nil, query_610248, nil, nil, nil)

var getModifyDBProxyTargetGroup* = Call_GetModifyDBProxyTargetGroup_610226(
    name: "getModifyDBProxyTargetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBProxyTargetGroup",
    validator: validate_GetModifyDBProxyTargetGroup_610227, base: "/",
    url: url_GetModifyDBProxyTargetGroup_610228,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshot_610291 = ref object of OpenApiRestCall_605589
proc url_PostModifyDBSnapshot_610293(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSnapshot_610292(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610294 = query.getOrDefault("Action")
  valid_610294 = validateParameter(valid_610294, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_610294 != nil:
    section.add "Action", valid_610294
  var valid_610295 = query.getOrDefault("Version")
  valid_610295 = validateParameter(valid_610295, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610295 != nil:
    section.add "Version", valid_610295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610296 = header.getOrDefault("X-Amz-Signature")
  valid_610296 = validateParameter(valid_610296, JString, required = false,
                                 default = nil)
  if valid_610296 != nil:
    section.add "X-Amz-Signature", valid_610296
  var valid_610297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610297 = validateParameter(valid_610297, JString, required = false,
                                 default = nil)
  if valid_610297 != nil:
    section.add "X-Amz-Content-Sha256", valid_610297
  var valid_610298 = header.getOrDefault("X-Amz-Date")
  valid_610298 = validateParameter(valid_610298, JString, required = false,
                                 default = nil)
  if valid_610298 != nil:
    section.add "X-Amz-Date", valid_610298
  var valid_610299 = header.getOrDefault("X-Amz-Credential")
  valid_610299 = validateParameter(valid_610299, JString, required = false,
                                 default = nil)
  if valid_610299 != nil:
    section.add "X-Amz-Credential", valid_610299
  var valid_610300 = header.getOrDefault("X-Amz-Security-Token")
  valid_610300 = validateParameter(valid_610300, JString, required = false,
                                 default = nil)
  if valid_610300 != nil:
    section.add "X-Amz-Security-Token", valid_610300
  var valid_610301 = header.getOrDefault("X-Amz-Algorithm")
  valid_610301 = validateParameter(valid_610301, JString, required = false,
                                 default = nil)
  if valid_610301 != nil:
    section.add "X-Amz-Algorithm", valid_610301
  var valid_610302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610302 = validateParameter(valid_610302, JString, required = false,
                                 default = nil)
  if valid_610302 != nil:
    section.add "X-Amz-SignedHeaders", valid_610302
  result.add "header", section
  ## parameters in `formData` object:
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_610303 = formData.getOrDefault("EngineVersion")
  valid_610303 = validateParameter(valid_610303, JString, required = false,
                                 default = nil)
  if valid_610303 != nil:
    section.add "EngineVersion", valid_610303
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_610304 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_610304 = validateParameter(valid_610304, JString, required = true,
                                 default = nil)
  if valid_610304 != nil:
    section.add "DBSnapshotIdentifier", valid_610304
  var valid_610305 = formData.getOrDefault("OptionGroupName")
  valid_610305 = validateParameter(valid_610305, JString, required = false,
                                 default = nil)
  if valid_610305 != nil:
    section.add "OptionGroupName", valid_610305
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610306: Call_PostModifyDBSnapshot_610291; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  let valid = call_610306.validator(path, query, header, formData, body)
  let scheme = call_610306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610306.url(scheme.get, call_610306.host, call_610306.base,
                         call_610306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610306, url, valid)

proc call*(call_610307: Call_PostModifyDBSnapshot_610291;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_610308 = newJObject()
  var formData_610309 = newJObject()
  add(formData_610309, "EngineVersion", newJString(EngineVersion))
  add(formData_610309, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_610308, "Action", newJString(Action))
  add(formData_610309, "OptionGroupName", newJString(OptionGroupName))
  add(query_610308, "Version", newJString(Version))
  result = call_610307.call(nil, query_610308, nil, formData_610309, nil)

var postModifyDBSnapshot* = Call_PostModifyDBSnapshot_610291(
    name: "postModifyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_PostModifyDBSnapshot_610292, base: "/",
    url: url_PostModifyDBSnapshot_610293, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshot_610273 = ref object of OpenApiRestCall_605589
proc url_GetModifyDBSnapshot_610275(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSnapshot_610274(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_610276 = query.getOrDefault("DBSnapshotIdentifier")
  valid_610276 = validateParameter(valid_610276, JString, required = true,
                                 default = nil)
  if valid_610276 != nil:
    section.add "DBSnapshotIdentifier", valid_610276
  var valid_610277 = query.getOrDefault("EngineVersion")
  valid_610277 = validateParameter(valid_610277, JString, required = false,
                                 default = nil)
  if valid_610277 != nil:
    section.add "EngineVersion", valid_610277
  var valid_610278 = query.getOrDefault("Action")
  valid_610278 = validateParameter(valid_610278, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_610278 != nil:
    section.add "Action", valid_610278
  var valid_610279 = query.getOrDefault("OptionGroupName")
  valid_610279 = validateParameter(valid_610279, JString, required = false,
                                 default = nil)
  if valid_610279 != nil:
    section.add "OptionGroupName", valid_610279
  var valid_610280 = query.getOrDefault("Version")
  valid_610280 = validateParameter(valid_610280, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610280 != nil:
    section.add "Version", valid_610280
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610281 = header.getOrDefault("X-Amz-Signature")
  valid_610281 = validateParameter(valid_610281, JString, required = false,
                                 default = nil)
  if valid_610281 != nil:
    section.add "X-Amz-Signature", valid_610281
  var valid_610282 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610282 = validateParameter(valid_610282, JString, required = false,
                                 default = nil)
  if valid_610282 != nil:
    section.add "X-Amz-Content-Sha256", valid_610282
  var valid_610283 = header.getOrDefault("X-Amz-Date")
  valid_610283 = validateParameter(valid_610283, JString, required = false,
                                 default = nil)
  if valid_610283 != nil:
    section.add "X-Amz-Date", valid_610283
  var valid_610284 = header.getOrDefault("X-Amz-Credential")
  valid_610284 = validateParameter(valid_610284, JString, required = false,
                                 default = nil)
  if valid_610284 != nil:
    section.add "X-Amz-Credential", valid_610284
  var valid_610285 = header.getOrDefault("X-Amz-Security-Token")
  valid_610285 = validateParameter(valid_610285, JString, required = false,
                                 default = nil)
  if valid_610285 != nil:
    section.add "X-Amz-Security-Token", valid_610285
  var valid_610286 = header.getOrDefault("X-Amz-Algorithm")
  valid_610286 = validateParameter(valid_610286, JString, required = false,
                                 default = nil)
  if valid_610286 != nil:
    section.add "X-Amz-Algorithm", valid_610286
  var valid_610287 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610287 = validateParameter(valid_610287, JString, required = false,
                                 default = nil)
  if valid_610287 != nil:
    section.add "X-Amz-SignedHeaders", valid_610287
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610288: Call_GetModifyDBSnapshot_610273; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  let valid = call_610288.validator(path, query, header, formData, body)
  let scheme = call_610288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610288.url(scheme.get, call_610288.host, call_610288.base,
                         call_610288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610288, url, valid)

proc call*(call_610289: Call_GetModifyDBSnapshot_610273;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_610290 = newJObject()
  add(query_610290, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_610290, "EngineVersion", newJString(EngineVersion))
  add(query_610290, "Action", newJString(Action))
  add(query_610290, "OptionGroupName", newJString(OptionGroupName))
  add(query_610290, "Version", newJString(Version))
  result = call_610289.call(nil, query_610290, nil, nil, nil)

var getModifyDBSnapshot* = Call_GetModifyDBSnapshot_610273(
    name: "getModifyDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_GetModifyDBSnapshot_610274, base: "/",
    url: url_GetModifyDBSnapshot_610275, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshotAttribute_610329 = ref object of OpenApiRestCall_605589
proc url_PostModifyDBSnapshotAttribute_610331(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSnapshotAttribute_610330(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610332 = query.getOrDefault("Action")
  valid_610332 = validateParameter(valid_610332, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_610332 != nil:
    section.add "Action", valid_610332
  var valid_610333 = query.getOrDefault("Version")
  valid_610333 = validateParameter(valid_610333, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610333 != nil:
    section.add "Version", valid_610333
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610334 = header.getOrDefault("X-Amz-Signature")
  valid_610334 = validateParameter(valid_610334, JString, required = false,
                                 default = nil)
  if valid_610334 != nil:
    section.add "X-Amz-Signature", valid_610334
  var valid_610335 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610335 = validateParameter(valid_610335, JString, required = false,
                                 default = nil)
  if valid_610335 != nil:
    section.add "X-Amz-Content-Sha256", valid_610335
  var valid_610336 = header.getOrDefault("X-Amz-Date")
  valid_610336 = validateParameter(valid_610336, JString, required = false,
                                 default = nil)
  if valid_610336 != nil:
    section.add "X-Amz-Date", valid_610336
  var valid_610337 = header.getOrDefault("X-Amz-Credential")
  valid_610337 = validateParameter(valid_610337, JString, required = false,
                                 default = nil)
  if valid_610337 != nil:
    section.add "X-Amz-Credential", valid_610337
  var valid_610338 = header.getOrDefault("X-Amz-Security-Token")
  valid_610338 = validateParameter(valid_610338, JString, required = false,
                                 default = nil)
  if valid_610338 != nil:
    section.add "X-Amz-Security-Token", valid_610338
  var valid_610339 = header.getOrDefault("X-Amz-Algorithm")
  valid_610339 = validateParameter(valid_610339, JString, required = false,
                                 default = nil)
  if valid_610339 != nil:
    section.add "X-Amz-Algorithm", valid_610339
  var valid_610340 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610340 = validateParameter(valid_610340, JString, required = false,
                                 default = nil)
  if valid_610340 != nil:
    section.add "X-Amz-SignedHeaders", valid_610340
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_610341 = formData.getOrDefault("AttributeName")
  valid_610341 = validateParameter(valid_610341, JString, required = true,
                                 default = nil)
  if valid_610341 != nil:
    section.add "AttributeName", valid_610341
  var valid_610342 = formData.getOrDefault("ValuesToAdd")
  valid_610342 = validateParameter(valid_610342, JArray, required = false,
                                 default = nil)
  if valid_610342 != nil:
    section.add "ValuesToAdd", valid_610342
  var valid_610343 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_610343 = validateParameter(valid_610343, JString, required = true,
                                 default = nil)
  if valid_610343 != nil:
    section.add "DBSnapshotIdentifier", valid_610343
  var valid_610344 = formData.getOrDefault("ValuesToRemove")
  valid_610344 = validateParameter(valid_610344, JArray, required = false,
                                 default = nil)
  if valid_610344 != nil:
    section.add "ValuesToRemove", valid_610344
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610345: Call_PostModifyDBSnapshotAttribute_610329; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_610345.validator(path, query, header, formData, body)
  let scheme = call_610345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610345.url(scheme.get, call_610345.host, call_610345.base,
                         call_610345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610345, url, valid)

proc call*(call_610346: Call_PostModifyDBSnapshotAttribute_610329;
          AttributeName: string; DBSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil; Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: string (required)
  var query_610347 = newJObject()
  var formData_610348 = newJObject()
  add(formData_610348, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_610348.add "ValuesToAdd", ValuesToAdd
  add(formData_610348, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_610347, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_610348.add "ValuesToRemove", ValuesToRemove
  add(query_610347, "Version", newJString(Version))
  result = call_610346.call(nil, query_610347, nil, formData_610348, nil)

var postModifyDBSnapshotAttribute* = Call_PostModifyDBSnapshotAttribute_610329(
    name: "postModifyDBSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_PostModifyDBSnapshotAttribute_610330, base: "/",
    url: url_PostModifyDBSnapshotAttribute_610331,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshotAttribute_610310 = ref object of OpenApiRestCall_605589
proc url_GetModifyDBSnapshotAttribute_610312(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSnapshotAttribute_610311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_610313 = query.getOrDefault("ValuesToRemove")
  valid_610313 = validateParameter(valid_610313, JArray, required = false,
                                 default = nil)
  if valid_610313 != nil:
    section.add "ValuesToRemove", valid_610313
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_610314 = query.getOrDefault("DBSnapshotIdentifier")
  valid_610314 = validateParameter(valid_610314, JString, required = true,
                                 default = nil)
  if valid_610314 != nil:
    section.add "DBSnapshotIdentifier", valid_610314
  var valid_610315 = query.getOrDefault("Action")
  valid_610315 = validateParameter(valid_610315, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_610315 != nil:
    section.add "Action", valid_610315
  var valid_610316 = query.getOrDefault("AttributeName")
  valid_610316 = validateParameter(valid_610316, JString, required = true,
                                 default = nil)
  if valid_610316 != nil:
    section.add "AttributeName", valid_610316
  var valid_610317 = query.getOrDefault("ValuesToAdd")
  valid_610317 = validateParameter(valid_610317, JArray, required = false,
                                 default = nil)
  if valid_610317 != nil:
    section.add "ValuesToAdd", valid_610317
  var valid_610318 = query.getOrDefault("Version")
  valid_610318 = validateParameter(valid_610318, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610318 != nil:
    section.add "Version", valid_610318
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610319 = header.getOrDefault("X-Amz-Signature")
  valid_610319 = validateParameter(valid_610319, JString, required = false,
                                 default = nil)
  if valid_610319 != nil:
    section.add "X-Amz-Signature", valid_610319
  var valid_610320 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610320 = validateParameter(valid_610320, JString, required = false,
                                 default = nil)
  if valid_610320 != nil:
    section.add "X-Amz-Content-Sha256", valid_610320
  var valid_610321 = header.getOrDefault("X-Amz-Date")
  valid_610321 = validateParameter(valid_610321, JString, required = false,
                                 default = nil)
  if valid_610321 != nil:
    section.add "X-Amz-Date", valid_610321
  var valid_610322 = header.getOrDefault("X-Amz-Credential")
  valid_610322 = validateParameter(valid_610322, JString, required = false,
                                 default = nil)
  if valid_610322 != nil:
    section.add "X-Amz-Credential", valid_610322
  var valid_610323 = header.getOrDefault("X-Amz-Security-Token")
  valid_610323 = validateParameter(valid_610323, JString, required = false,
                                 default = nil)
  if valid_610323 != nil:
    section.add "X-Amz-Security-Token", valid_610323
  var valid_610324 = header.getOrDefault("X-Amz-Algorithm")
  valid_610324 = validateParameter(valid_610324, JString, required = false,
                                 default = nil)
  if valid_610324 != nil:
    section.add "X-Amz-Algorithm", valid_610324
  var valid_610325 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610325 = validateParameter(valid_610325, JString, required = false,
                                 default = nil)
  if valid_610325 != nil:
    section.add "X-Amz-SignedHeaders", valid_610325
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610326: Call_GetModifyDBSnapshotAttribute_610310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_610326.validator(path, query, header, formData, body)
  let scheme = call_610326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610326.url(scheme.get, call_610326.host, call_610326.base,
                         call_610326.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610326, url, valid)

proc call*(call_610327: Call_GetModifyDBSnapshotAttribute_610310;
          DBSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBSnapshotAttribute"; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_610328 = newJObject()
  if ValuesToRemove != nil:
    query_610328.add "ValuesToRemove", ValuesToRemove
  add(query_610328, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_610328, "Action", newJString(Action))
  add(query_610328, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_610328.add "ValuesToAdd", ValuesToAdd
  add(query_610328, "Version", newJString(Version))
  result = call_610327.call(nil, query_610328, nil, nil, nil)

var getModifyDBSnapshotAttribute* = Call_GetModifyDBSnapshotAttribute_610310(
    name: "getModifyDBSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_GetModifyDBSnapshotAttribute_610311, base: "/",
    url: url_GetModifyDBSnapshotAttribute_610312,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_610367 = ref object of OpenApiRestCall_605589
proc url_PostModifyDBSubnetGroup_610369(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSubnetGroup_610368(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610370 = query.getOrDefault("Action")
  valid_610370 = validateParameter(valid_610370, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_610370 != nil:
    section.add "Action", valid_610370
  var valid_610371 = query.getOrDefault("Version")
  valid_610371 = validateParameter(valid_610371, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610371 != nil:
    section.add "Version", valid_610371
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610372 = header.getOrDefault("X-Amz-Signature")
  valid_610372 = validateParameter(valid_610372, JString, required = false,
                                 default = nil)
  if valid_610372 != nil:
    section.add "X-Amz-Signature", valid_610372
  var valid_610373 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610373 = validateParameter(valid_610373, JString, required = false,
                                 default = nil)
  if valid_610373 != nil:
    section.add "X-Amz-Content-Sha256", valid_610373
  var valid_610374 = header.getOrDefault("X-Amz-Date")
  valid_610374 = validateParameter(valid_610374, JString, required = false,
                                 default = nil)
  if valid_610374 != nil:
    section.add "X-Amz-Date", valid_610374
  var valid_610375 = header.getOrDefault("X-Amz-Credential")
  valid_610375 = validateParameter(valid_610375, JString, required = false,
                                 default = nil)
  if valid_610375 != nil:
    section.add "X-Amz-Credential", valid_610375
  var valid_610376 = header.getOrDefault("X-Amz-Security-Token")
  valid_610376 = validateParameter(valid_610376, JString, required = false,
                                 default = nil)
  if valid_610376 != nil:
    section.add "X-Amz-Security-Token", valid_610376
  var valid_610377 = header.getOrDefault("X-Amz-Algorithm")
  valid_610377 = validateParameter(valid_610377, JString, required = false,
                                 default = nil)
  if valid_610377 != nil:
    section.add "X-Amz-Algorithm", valid_610377
  var valid_610378 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610378 = validateParameter(valid_610378, JString, required = false,
                                 default = nil)
  if valid_610378 != nil:
    section.add "X-Amz-SignedHeaders", valid_610378
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  section = newJObject()
  var valid_610379 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_610379 = validateParameter(valid_610379, JString, required = false,
                                 default = nil)
  if valid_610379 != nil:
    section.add "DBSubnetGroupDescription", valid_610379
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_610380 = formData.getOrDefault("DBSubnetGroupName")
  valid_610380 = validateParameter(valid_610380, JString, required = true,
                                 default = nil)
  if valid_610380 != nil:
    section.add "DBSubnetGroupName", valid_610380
  var valid_610381 = formData.getOrDefault("SubnetIds")
  valid_610381 = validateParameter(valid_610381, JArray, required = true, default = nil)
  if valid_610381 != nil:
    section.add "SubnetIds", valid_610381
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610382: Call_PostModifyDBSubnetGroup_610367; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_610382.validator(path, query, header, formData, body)
  let scheme = call_610382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610382.url(scheme.get, call_610382.host, call_610382.base,
                         call_610382.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610382, url, valid)

proc call*(call_610383: Call_PostModifyDBSubnetGroup_610367;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string = "";
          Action: string = "ModifyDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  var query_610384 = newJObject()
  var formData_610385 = newJObject()
  add(formData_610385, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_610384, "Action", newJString(Action))
  add(formData_610385, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_610384, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_610385.add "SubnetIds", SubnetIds
  result = call_610383.call(nil, query_610384, nil, formData_610385, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_610367(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_610368, base: "/",
    url: url_PostModifyDBSubnetGroup_610369, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_610349 = ref object of OpenApiRestCall_605589
proc url_GetModifyDBSubnetGroup_610351(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSubnetGroup_610350(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_610352 = query.getOrDefault("SubnetIds")
  valid_610352 = validateParameter(valid_610352, JArray, required = true, default = nil)
  if valid_610352 != nil:
    section.add "SubnetIds", valid_610352
  var valid_610353 = query.getOrDefault("Action")
  valid_610353 = validateParameter(valid_610353, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_610353 != nil:
    section.add "Action", valid_610353
  var valid_610354 = query.getOrDefault("DBSubnetGroupDescription")
  valid_610354 = validateParameter(valid_610354, JString, required = false,
                                 default = nil)
  if valid_610354 != nil:
    section.add "DBSubnetGroupDescription", valid_610354
  var valid_610355 = query.getOrDefault("DBSubnetGroupName")
  valid_610355 = validateParameter(valid_610355, JString, required = true,
                                 default = nil)
  if valid_610355 != nil:
    section.add "DBSubnetGroupName", valid_610355
  var valid_610356 = query.getOrDefault("Version")
  valid_610356 = validateParameter(valid_610356, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610356 != nil:
    section.add "Version", valid_610356
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610357 = header.getOrDefault("X-Amz-Signature")
  valid_610357 = validateParameter(valid_610357, JString, required = false,
                                 default = nil)
  if valid_610357 != nil:
    section.add "X-Amz-Signature", valid_610357
  var valid_610358 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610358 = validateParameter(valid_610358, JString, required = false,
                                 default = nil)
  if valid_610358 != nil:
    section.add "X-Amz-Content-Sha256", valid_610358
  var valid_610359 = header.getOrDefault("X-Amz-Date")
  valid_610359 = validateParameter(valid_610359, JString, required = false,
                                 default = nil)
  if valid_610359 != nil:
    section.add "X-Amz-Date", valid_610359
  var valid_610360 = header.getOrDefault("X-Amz-Credential")
  valid_610360 = validateParameter(valid_610360, JString, required = false,
                                 default = nil)
  if valid_610360 != nil:
    section.add "X-Amz-Credential", valid_610360
  var valid_610361 = header.getOrDefault("X-Amz-Security-Token")
  valid_610361 = validateParameter(valid_610361, JString, required = false,
                                 default = nil)
  if valid_610361 != nil:
    section.add "X-Amz-Security-Token", valid_610361
  var valid_610362 = header.getOrDefault("X-Amz-Algorithm")
  valid_610362 = validateParameter(valid_610362, JString, required = false,
                                 default = nil)
  if valid_610362 != nil:
    section.add "X-Amz-Algorithm", valid_610362
  var valid_610363 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610363 = validateParameter(valid_610363, JString, required = false,
                                 default = nil)
  if valid_610363 != nil:
    section.add "X-Amz-SignedHeaders", valid_610363
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610364: Call_GetModifyDBSubnetGroup_610349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_610364.validator(path, query, header, formData, body)
  let scheme = call_610364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610364.url(scheme.get, call_610364.host, call_610364.base,
                         call_610364.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610364, url, valid)

proc call*(call_610365: Call_GetModifyDBSubnetGroup_610349; SubnetIds: JsonNode;
          DBSubnetGroupName: string; Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_610366 = newJObject()
  if SubnetIds != nil:
    query_610366.add "SubnetIds", SubnetIds
  add(query_610366, "Action", newJString(Action))
  add(query_610366, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_610366, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_610366, "Version", newJString(Version))
  result = call_610365.call(nil, query_610366, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_610349(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_610350, base: "/",
    url: url_GetModifyDBSubnetGroup_610351, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_610406 = ref object of OpenApiRestCall_605589
proc url_PostModifyEventSubscription_610408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyEventSubscription_610407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610409 = query.getOrDefault("Action")
  valid_610409 = validateParameter(valid_610409, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_610409 != nil:
    section.add "Action", valid_610409
  var valid_610410 = query.getOrDefault("Version")
  valid_610410 = validateParameter(valid_610410, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610410 != nil:
    section.add "Version", valid_610410
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610411 = header.getOrDefault("X-Amz-Signature")
  valid_610411 = validateParameter(valid_610411, JString, required = false,
                                 default = nil)
  if valid_610411 != nil:
    section.add "X-Amz-Signature", valid_610411
  var valid_610412 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610412 = validateParameter(valid_610412, JString, required = false,
                                 default = nil)
  if valid_610412 != nil:
    section.add "X-Amz-Content-Sha256", valid_610412
  var valid_610413 = header.getOrDefault("X-Amz-Date")
  valid_610413 = validateParameter(valid_610413, JString, required = false,
                                 default = nil)
  if valid_610413 != nil:
    section.add "X-Amz-Date", valid_610413
  var valid_610414 = header.getOrDefault("X-Amz-Credential")
  valid_610414 = validateParameter(valid_610414, JString, required = false,
                                 default = nil)
  if valid_610414 != nil:
    section.add "X-Amz-Credential", valid_610414
  var valid_610415 = header.getOrDefault("X-Amz-Security-Token")
  valid_610415 = validateParameter(valid_610415, JString, required = false,
                                 default = nil)
  if valid_610415 != nil:
    section.add "X-Amz-Security-Token", valid_610415
  var valid_610416 = header.getOrDefault("X-Amz-Algorithm")
  valid_610416 = validateParameter(valid_610416, JString, required = false,
                                 default = nil)
  if valid_610416 != nil:
    section.add "X-Amz-Algorithm", valid_610416
  var valid_610417 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610417 = validateParameter(valid_610417, JString, required = false,
                                 default = nil)
  if valid_610417 != nil:
    section.add "X-Amz-SignedHeaders", valid_610417
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  section = newJObject()
  var valid_610418 = formData.getOrDefault("SnsTopicArn")
  valid_610418 = validateParameter(valid_610418, JString, required = false,
                                 default = nil)
  if valid_610418 != nil:
    section.add "SnsTopicArn", valid_610418
  var valid_610419 = formData.getOrDefault("Enabled")
  valid_610419 = validateParameter(valid_610419, JBool, required = false, default = nil)
  if valid_610419 != nil:
    section.add "Enabled", valid_610419
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_610420 = formData.getOrDefault("SubscriptionName")
  valid_610420 = validateParameter(valid_610420, JString, required = true,
                                 default = nil)
  if valid_610420 != nil:
    section.add "SubscriptionName", valid_610420
  var valid_610421 = formData.getOrDefault("SourceType")
  valid_610421 = validateParameter(valid_610421, JString, required = false,
                                 default = nil)
  if valid_610421 != nil:
    section.add "SourceType", valid_610421
  var valid_610422 = formData.getOrDefault("EventCategories")
  valid_610422 = validateParameter(valid_610422, JArray, required = false,
                                 default = nil)
  if valid_610422 != nil:
    section.add "EventCategories", valid_610422
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610423: Call_PostModifyEventSubscription_610406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_610423.validator(path, query, header, formData, body)
  let scheme = call_610423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610423.url(scheme.get, call_610423.host, call_610423.base,
                         call_610423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610423, url, valid)

proc call*(call_610424: Call_PostModifyEventSubscription_610406;
          SubscriptionName: string; SnsTopicArn: string = ""; Enabled: bool = false;
          SourceType: string = ""; EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610425 = newJObject()
  var formData_610426 = newJObject()
  add(formData_610426, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_610426, "Enabled", newJBool(Enabled))
  add(formData_610426, "SubscriptionName", newJString(SubscriptionName))
  add(formData_610426, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_610426.add "EventCategories", EventCategories
  add(query_610425, "Action", newJString(Action))
  add(query_610425, "Version", newJString(Version))
  result = call_610424.call(nil, query_610425, nil, formData_610426, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_610406(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_610407, base: "/",
    url: url_PostModifyEventSubscription_610408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_610386 = ref object of OpenApiRestCall_605589
proc url_GetModifyEventSubscription_610388(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyEventSubscription_610387(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_610389 = query.getOrDefault("SourceType")
  valid_610389 = validateParameter(valid_610389, JString, required = false,
                                 default = nil)
  if valid_610389 != nil:
    section.add "SourceType", valid_610389
  var valid_610390 = query.getOrDefault("Enabled")
  valid_610390 = validateParameter(valid_610390, JBool, required = false, default = nil)
  if valid_610390 != nil:
    section.add "Enabled", valid_610390
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_610391 = query.getOrDefault("SubscriptionName")
  valid_610391 = validateParameter(valid_610391, JString, required = true,
                                 default = nil)
  if valid_610391 != nil:
    section.add "SubscriptionName", valid_610391
  var valid_610392 = query.getOrDefault("EventCategories")
  valid_610392 = validateParameter(valid_610392, JArray, required = false,
                                 default = nil)
  if valid_610392 != nil:
    section.add "EventCategories", valid_610392
  var valid_610393 = query.getOrDefault("Action")
  valid_610393 = validateParameter(valid_610393, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_610393 != nil:
    section.add "Action", valid_610393
  var valid_610394 = query.getOrDefault("SnsTopicArn")
  valid_610394 = validateParameter(valid_610394, JString, required = false,
                                 default = nil)
  if valid_610394 != nil:
    section.add "SnsTopicArn", valid_610394
  var valid_610395 = query.getOrDefault("Version")
  valid_610395 = validateParameter(valid_610395, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610395 != nil:
    section.add "Version", valid_610395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610396 = header.getOrDefault("X-Amz-Signature")
  valid_610396 = validateParameter(valid_610396, JString, required = false,
                                 default = nil)
  if valid_610396 != nil:
    section.add "X-Amz-Signature", valid_610396
  var valid_610397 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610397 = validateParameter(valid_610397, JString, required = false,
                                 default = nil)
  if valid_610397 != nil:
    section.add "X-Amz-Content-Sha256", valid_610397
  var valid_610398 = header.getOrDefault("X-Amz-Date")
  valid_610398 = validateParameter(valid_610398, JString, required = false,
                                 default = nil)
  if valid_610398 != nil:
    section.add "X-Amz-Date", valid_610398
  var valid_610399 = header.getOrDefault("X-Amz-Credential")
  valid_610399 = validateParameter(valid_610399, JString, required = false,
                                 default = nil)
  if valid_610399 != nil:
    section.add "X-Amz-Credential", valid_610399
  var valid_610400 = header.getOrDefault("X-Amz-Security-Token")
  valid_610400 = validateParameter(valid_610400, JString, required = false,
                                 default = nil)
  if valid_610400 != nil:
    section.add "X-Amz-Security-Token", valid_610400
  var valid_610401 = header.getOrDefault("X-Amz-Algorithm")
  valid_610401 = validateParameter(valid_610401, JString, required = false,
                                 default = nil)
  if valid_610401 != nil:
    section.add "X-Amz-Algorithm", valid_610401
  var valid_610402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610402 = validateParameter(valid_610402, JString, required = false,
                                 default = nil)
  if valid_610402 != nil:
    section.add "X-Amz-SignedHeaders", valid_610402
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610403: Call_GetModifyEventSubscription_610386; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_610403.validator(path, query, header, formData, body)
  let scheme = call_610403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610403.url(scheme.get, call_610403.host, call_610403.base,
                         call_610403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610403, url, valid)

proc call*(call_610404: Call_GetModifyEventSubscription_610386;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_610405 = newJObject()
  add(query_610405, "SourceType", newJString(SourceType))
  add(query_610405, "Enabled", newJBool(Enabled))
  add(query_610405, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_610405.add "EventCategories", EventCategories
  add(query_610405, "Action", newJString(Action))
  add(query_610405, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_610405, "Version", newJString(Version))
  result = call_610404.call(nil, query_610405, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_610386(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_610387, base: "/",
    url: url_GetModifyEventSubscription_610388,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyGlobalCluster_610445 = ref object of OpenApiRestCall_605589
proc url_PostModifyGlobalCluster_610447(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyGlobalCluster_610446(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610448 = query.getOrDefault("Action")
  valid_610448 = validateParameter(valid_610448, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_610448 != nil:
    section.add "Action", valid_610448
  var valid_610449 = query.getOrDefault("Version")
  valid_610449 = validateParameter(valid_610449, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610449 != nil:
    section.add "Version", valid_610449
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610450 = header.getOrDefault("X-Amz-Signature")
  valid_610450 = validateParameter(valid_610450, JString, required = false,
                                 default = nil)
  if valid_610450 != nil:
    section.add "X-Amz-Signature", valid_610450
  var valid_610451 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610451 = validateParameter(valid_610451, JString, required = false,
                                 default = nil)
  if valid_610451 != nil:
    section.add "X-Amz-Content-Sha256", valid_610451
  var valid_610452 = header.getOrDefault("X-Amz-Date")
  valid_610452 = validateParameter(valid_610452, JString, required = false,
                                 default = nil)
  if valid_610452 != nil:
    section.add "X-Amz-Date", valid_610452
  var valid_610453 = header.getOrDefault("X-Amz-Credential")
  valid_610453 = validateParameter(valid_610453, JString, required = false,
                                 default = nil)
  if valid_610453 != nil:
    section.add "X-Amz-Credential", valid_610453
  var valid_610454 = header.getOrDefault("X-Amz-Security-Token")
  valid_610454 = validateParameter(valid_610454, JString, required = false,
                                 default = nil)
  if valid_610454 != nil:
    section.add "X-Amz-Security-Token", valid_610454
  var valid_610455 = header.getOrDefault("X-Amz-Algorithm")
  valid_610455 = validateParameter(valid_610455, JString, required = false,
                                 default = nil)
  if valid_610455 != nil:
    section.add "X-Amz-Algorithm", valid_610455
  var valid_610456 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610456 = validateParameter(valid_610456, JString, required = false,
                                 default = nil)
  if valid_610456 != nil:
    section.add "X-Amz-SignedHeaders", valid_610456
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_610457 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_610457 = validateParameter(valid_610457, JString, required = false,
                                 default = nil)
  if valid_610457 != nil:
    section.add "GlobalClusterIdentifier", valid_610457
  var valid_610458 = formData.getOrDefault("DeletionProtection")
  valid_610458 = validateParameter(valid_610458, JBool, required = false, default = nil)
  if valid_610458 != nil:
    section.add "DeletionProtection", valid_610458
  var valid_610459 = formData.getOrDefault("NewGlobalClusterIdentifier")
  valid_610459 = validateParameter(valid_610459, JString, required = false,
                                 default = nil)
  if valid_610459 != nil:
    section.add "NewGlobalClusterIdentifier", valid_610459
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610460: Call_PostModifyGlobalCluster_610445; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610460.validator(path, query, header, formData, body)
  let scheme = call_610460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610460.url(scheme.get, call_610460.host, call_610460.base,
                         call_610460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610460, url, valid)

proc call*(call_610461: Call_PostModifyGlobalCluster_610445;
          GlobalClusterIdentifier: string = "";
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31";
          DeletionProtection: bool = false; NewGlobalClusterIdentifier: string = ""): Recallable =
  ## postModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  var query_610462 = newJObject()
  var formData_610463 = newJObject()
  add(formData_610463, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_610462, "Action", newJString(Action))
  add(query_610462, "Version", newJString(Version))
  add(formData_610463, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_610463, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  result = call_610461.call(nil, query_610462, nil, formData_610463, nil)

var postModifyGlobalCluster* = Call_PostModifyGlobalCluster_610445(
    name: "postModifyGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_PostModifyGlobalCluster_610446, base: "/",
    url: url_PostModifyGlobalCluster_610447, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyGlobalCluster_610427 = ref object of OpenApiRestCall_605589
proc url_GetModifyGlobalCluster_610429(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyGlobalCluster_610428(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610430 = query.getOrDefault("NewGlobalClusterIdentifier")
  valid_610430 = validateParameter(valid_610430, JString, required = false,
                                 default = nil)
  if valid_610430 != nil:
    section.add "NewGlobalClusterIdentifier", valid_610430
  var valid_610431 = query.getOrDefault("GlobalClusterIdentifier")
  valid_610431 = validateParameter(valid_610431, JString, required = false,
                                 default = nil)
  if valid_610431 != nil:
    section.add "GlobalClusterIdentifier", valid_610431
  var valid_610432 = query.getOrDefault("DeletionProtection")
  valid_610432 = validateParameter(valid_610432, JBool, required = false, default = nil)
  if valid_610432 != nil:
    section.add "DeletionProtection", valid_610432
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610433 = query.getOrDefault("Action")
  valid_610433 = validateParameter(valid_610433, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_610433 != nil:
    section.add "Action", valid_610433
  var valid_610434 = query.getOrDefault("Version")
  valid_610434 = validateParameter(valid_610434, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610434 != nil:
    section.add "Version", valid_610434
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610435 = header.getOrDefault("X-Amz-Signature")
  valid_610435 = validateParameter(valid_610435, JString, required = false,
                                 default = nil)
  if valid_610435 != nil:
    section.add "X-Amz-Signature", valid_610435
  var valid_610436 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610436 = validateParameter(valid_610436, JString, required = false,
                                 default = nil)
  if valid_610436 != nil:
    section.add "X-Amz-Content-Sha256", valid_610436
  var valid_610437 = header.getOrDefault("X-Amz-Date")
  valid_610437 = validateParameter(valid_610437, JString, required = false,
                                 default = nil)
  if valid_610437 != nil:
    section.add "X-Amz-Date", valid_610437
  var valid_610438 = header.getOrDefault("X-Amz-Credential")
  valid_610438 = validateParameter(valid_610438, JString, required = false,
                                 default = nil)
  if valid_610438 != nil:
    section.add "X-Amz-Credential", valid_610438
  var valid_610439 = header.getOrDefault("X-Amz-Security-Token")
  valid_610439 = validateParameter(valid_610439, JString, required = false,
                                 default = nil)
  if valid_610439 != nil:
    section.add "X-Amz-Security-Token", valid_610439
  var valid_610440 = header.getOrDefault("X-Amz-Algorithm")
  valid_610440 = validateParameter(valid_610440, JString, required = false,
                                 default = nil)
  if valid_610440 != nil:
    section.add "X-Amz-Algorithm", valid_610440
  var valid_610441 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610441 = validateParameter(valid_610441, JString, required = false,
                                 default = nil)
  if valid_610441 != nil:
    section.add "X-Amz-SignedHeaders", valid_610441
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610442: Call_GetModifyGlobalCluster_610427; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610442.validator(path, query, header, formData, body)
  let scheme = call_610442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610442.url(scheme.get, call_610442.host, call_610442.base,
                         call_610442.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610442, url, valid)

proc call*(call_610443: Call_GetModifyGlobalCluster_610427;
          NewGlobalClusterIdentifier: string = "";
          GlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610444 = newJObject()
  add(query_610444, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_610444, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_610444, "DeletionProtection", newJBool(DeletionProtection))
  add(query_610444, "Action", newJString(Action))
  add(query_610444, "Version", newJString(Version))
  result = call_610443.call(nil, query_610444, nil, nil, nil)

var getModifyGlobalCluster* = Call_GetModifyGlobalCluster_610427(
    name: "getModifyGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_GetModifyGlobalCluster_610428, base: "/",
    url: url_GetModifyGlobalCluster_610429, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyOptionGroup_610483 = ref object of OpenApiRestCall_605589
proc url_PostModifyOptionGroup_610485(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyOptionGroup_610484(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610486 = query.getOrDefault("Action")
  valid_610486 = validateParameter(valid_610486, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_610486 != nil:
    section.add "Action", valid_610486
  var valid_610487 = query.getOrDefault("Version")
  valid_610487 = validateParameter(valid_610487, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610487 != nil:
    section.add "Version", valid_610487
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610488 = header.getOrDefault("X-Amz-Signature")
  valid_610488 = validateParameter(valid_610488, JString, required = false,
                                 default = nil)
  if valid_610488 != nil:
    section.add "X-Amz-Signature", valid_610488
  var valid_610489 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610489 = validateParameter(valid_610489, JString, required = false,
                                 default = nil)
  if valid_610489 != nil:
    section.add "X-Amz-Content-Sha256", valid_610489
  var valid_610490 = header.getOrDefault("X-Amz-Date")
  valid_610490 = validateParameter(valid_610490, JString, required = false,
                                 default = nil)
  if valid_610490 != nil:
    section.add "X-Amz-Date", valid_610490
  var valid_610491 = header.getOrDefault("X-Amz-Credential")
  valid_610491 = validateParameter(valid_610491, JString, required = false,
                                 default = nil)
  if valid_610491 != nil:
    section.add "X-Amz-Credential", valid_610491
  var valid_610492 = header.getOrDefault("X-Amz-Security-Token")
  valid_610492 = validateParameter(valid_610492, JString, required = false,
                                 default = nil)
  if valid_610492 != nil:
    section.add "X-Amz-Security-Token", valid_610492
  var valid_610493 = header.getOrDefault("X-Amz-Algorithm")
  valid_610493 = validateParameter(valid_610493, JString, required = false,
                                 default = nil)
  if valid_610493 != nil:
    section.add "X-Amz-Algorithm", valid_610493
  var valid_610494 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610494 = validateParameter(valid_610494, JString, required = false,
                                 default = nil)
  if valid_610494 != nil:
    section.add "X-Amz-SignedHeaders", valid_610494
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  section = newJObject()
  var valid_610495 = formData.getOrDefault("OptionsToRemove")
  valid_610495 = validateParameter(valid_610495, JArray, required = false,
                                 default = nil)
  if valid_610495 != nil:
    section.add "OptionsToRemove", valid_610495
  var valid_610496 = formData.getOrDefault("ApplyImmediately")
  valid_610496 = validateParameter(valid_610496, JBool, required = false, default = nil)
  if valid_610496 != nil:
    section.add "ApplyImmediately", valid_610496
  var valid_610497 = formData.getOrDefault("OptionsToInclude")
  valid_610497 = validateParameter(valid_610497, JArray, required = false,
                                 default = nil)
  if valid_610497 != nil:
    section.add "OptionsToInclude", valid_610497
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_610498 = formData.getOrDefault("OptionGroupName")
  valid_610498 = validateParameter(valid_610498, JString, required = true,
                                 default = nil)
  if valid_610498 != nil:
    section.add "OptionGroupName", valid_610498
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610499: Call_PostModifyOptionGroup_610483; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_610499.validator(path, query, header, formData, body)
  let scheme = call_610499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610499.url(scheme.get, call_610499.host, call_610499.base,
                         call_610499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610499, url, valid)

proc call*(call_610500: Call_PostModifyOptionGroup_610483; OptionGroupName: string;
          OptionsToRemove: JsonNode = nil; ApplyImmediately: bool = false;
          OptionsToInclude: JsonNode = nil; Action: string = "ModifyOptionGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_610501 = newJObject()
  var formData_610502 = newJObject()
  if OptionsToRemove != nil:
    formData_610502.add "OptionsToRemove", OptionsToRemove
  add(formData_610502, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToInclude != nil:
    formData_610502.add "OptionsToInclude", OptionsToInclude
  add(query_610501, "Action", newJString(Action))
  add(formData_610502, "OptionGroupName", newJString(OptionGroupName))
  add(query_610501, "Version", newJString(Version))
  result = call_610500.call(nil, query_610501, nil, formData_610502, nil)

var postModifyOptionGroup* = Call_PostModifyOptionGroup_610483(
    name: "postModifyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_PostModifyOptionGroup_610484, base: "/",
    url: url_PostModifyOptionGroup_610485, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyOptionGroup_610464 = ref object of OpenApiRestCall_605589
proc url_GetModifyOptionGroup_610466(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyOptionGroup_610465(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610467 = query.getOrDefault("Action")
  valid_610467 = validateParameter(valid_610467, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_610467 != nil:
    section.add "Action", valid_610467
  var valid_610468 = query.getOrDefault("ApplyImmediately")
  valid_610468 = validateParameter(valid_610468, JBool, required = false, default = nil)
  if valid_610468 != nil:
    section.add "ApplyImmediately", valid_610468
  var valid_610469 = query.getOrDefault("OptionsToRemove")
  valid_610469 = validateParameter(valid_610469, JArray, required = false,
                                 default = nil)
  if valid_610469 != nil:
    section.add "OptionsToRemove", valid_610469
  var valid_610470 = query.getOrDefault("OptionsToInclude")
  valid_610470 = validateParameter(valid_610470, JArray, required = false,
                                 default = nil)
  if valid_610470 != nil:
    section.add "OptionsToInclude", valid_610470
  var valid_610471 = query.getOrDefault("OptionGroupName")
  valid_610471 = validateParameter(valid_610471, JString, required = true,
                                 default = nil)
  if valid_610471 != nil:
    section.add "OptionGroupName", valid_610471
  var valid_610472 = query.getOrDefault("Version")
  valid_610472 = validateParameter(valid_610472, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610472 != nil:
    section.add "Version", valid_610472
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610473 = header.getOrDefault("X-Amz-Signature")
  valid_610473 = validateParameter(valid_610473, JString, required = false,
                                 default = nil)
  if valid_610473 != nil:
    section.add "X-Amz-Signature", valid_610473
  var valid_610474 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610474 = validateParameter(valid_610474, JString, required = false,
                                 default = nil)
  if valid_610474 != nil:
    section.add "X-Amz-Content-Sha256", valid_610474
  var valid_610475 = header.getOrDefault("X-Amz-Date")
  valid_610475 = validateParameter(valid_610475, JString, required = false,
                                 default = nil)
  if valid_610475 != nil:
    section.add "X-Amz-Date", valid_610475
  var valid_610476 = header.getOrDefault("X-Amz-Credential")
  valid_610476 = validateParameter(valid_610476, JString, required = false,
                                 default = nil)
  if valid_610476 != nil:
    section.add "X-Amz-Credential", valid_610476
  var valid_610477 = header.getOrDefault("X-Amz-Security-Token")
  valid_610477 = validateParameter(valid_610477, JString, required = false,
                                 default = nil)
  if valid_610477 != nil:
    section.add "X-Amz-Security-Token", valid_610477
  var valid_610478 = header.getOrDefault("X-Amz-Algorithm")
  valid_610478 = validateParameter(valid_610478, JString, required = false,
                                 default = nil)
  if valid_610478 != nil:
    section.add "X-Amz-Algorithm", valid_610478
  var valid_610479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610479 = validateParameter(valid_610479, JString, required = false,
                                 default = nil)
  if valid_610479 != nil:
    section.add "X-Amz-SignedHeaders", valid_610479
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610480: Call_GetModifyOptionGroup_610464; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_610480.validator(path, query, header, formData, body)
  let scheme = call_610480.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610480.url(scheme.get, call_610480.host, call_610480.base,
                         call_610480.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610480, url, valid)

proc call*(call_610481: Call_GetModifyOptionGroup_610464; OptionGroupName: string;
          Action: string = "ModifyOptionGroup"; ApplyImmediately: bool = false;
          OptionsToRemove: JsonNode = nil; OptionsToInclude: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyOptionGroup
  ## Modifies an existing option group.
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_610482 = newJObject()
  add(query_610482, "Action", newJString(Action))
  add(query_610482, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToRemove != nil:
    query_610482.add "OptionsToRemove", OptionsToRemove
  if OptionsToInclude != nil:
    query_610482.add "OptionsToInclude", OptionsToInclude
  add(query_610482, "OptionGroupName", newJString(OptionGroupName))
  add(query_610482, "Version", newJString(Version))
  result = call_610481.call(nil, query_610482, nil, nil, nil)

var getModifyOptionGroup* = Call_GetModifyOptionGroup_610464(
    name: "getModifyOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_GetModifyOptionGroup_610465, base: "/",
    url: url_GetModifyOptionGroup_610466, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplica_610521 = ref object of OpenApiRestCall_605589
proc url_PostPromoteReadReplica_610523(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplica_610522(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610524 = query.getOrDefault("Action")
  valid_610524 = validateParameter(valid_610524, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_610524 != nil:
    section.add "Action", valid_610524
  var valid_610525 = query.getOrDefault("Version")
  valid_610525 = validateParameter(valid_610525, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610525 != nil:
    section.add "Version", valid_610525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610526 = header.getOrDefault("X-Amz-Signature")
  valid_610526 = validateParameter(valid_610526, JString, required = false,
                                 default = nil)
  if valid_610526 != nil:
    section.add "X-Amz-Signature", valid_610526
  var valid_610527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610527 = validateParameter(valid_610527, JString, required = false,
                                 default = nil)
  if valid_610527 != nil:
    section.add "X-Amz-Content-Sha256", valid_610527
  var valid_610528 = header.getOrDefault("X-Amz-Date")
  valid_610528 = validateParameter(valid_610528, JString, required = false,
                                 default = nil)
  if valid_610528 != nil:
    section.add "X-Amz-Date", valid_610528
  var valid_610529 = header.getOrDefault("X-Amz-Credential")
  valid_610529 = validateParameter(valid_610529, JString, required = false,
                                 default = nil)
  if valid_610529 != nil:
    section.add "X-Amz-Credential", valid_610529
  var valid_610530 = header.getOrDefault("X-Amz-Security-Token")
  valid_610530 = validateParameter(valid_610530, JString, required = false,
                                 default = nil)
  if valid_610530 != nil:
    section.add "X-Amz-Security-Token", valid_610530
  var valid_610531 = header.getOrDefault("X-Amz-Algorithm")
  valid_610531 = validateParameter(valid_610531, JString, required = false,
                                 default = nil)
  if valid_610531 != nil:
    section.add "X-Amz-Algorithm", valid_610531
  var valid_610532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610532 = validateParameter(valid_610532, JString, required = false,
                                 default = nil)
  if valid_610532 != nil:
    section.add "X-Amz-SignedHeaders", valid_610532
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  section = newJObject()
  var valid_610533 = formData.getOrDefault("PreferredBackupWindow")
  valid_610533 = validateParameter(valid_610533, JString, required = false,
                                 default = nil)
  if valid_610533 != nil:
    section.add "PreferredBackupWindow", valid_610533
  var valid_610534 = formData.getOrDefault("BackupRetentionPeriod")
  valid_610534 = validateParameter(valid_610534, JInt, required = false, default = nil)
  if valid_610534 != nil:
    section.add "BackupRetentionPeriod", valid_610534
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_610535 = formData.getOrDefault("DBInstanceIdentifier")
  valid_610535 = validateParameter(valid_610535, JString, required = true,
                                 default = nil)
  if valid_610535 != nil:
    section.add "DBInstanceIdentifier", valid_610535
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610536: Call_PostPromoteReadReplica_610521; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_610536.validator(path, query, header, formData, body)
  let scheme = call_610536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610536.url(scheme.get, call_610536.host, call_610536.base,
                         call_610536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610536, url, valid)

proc call*(call_610537: Call_PostPromoteReadReplica_610521;
          DBInstanceIdentifier: string; PreferredBackupWindow: string = "";
          BackupRetentionPeriod: int = 0; Action: string = "PromoteReadReplica";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610538 = newJObject()
  var formData_610539 = newJObject()
  add(formData_610539, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_610539, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_610539, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_610538, "Action", newJString(Action))
  add(query_610538, "Version", newJString(Version))
  result = call_610537.call(nil, query_610538, nil, formData_610539, nil)

var postPromoteReadReplica* = Call_PostPromoteReadReplica_610521(
    name: "postPromoteReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_PostPromoteReadReplica_610522, base: "/",
    url: url_PostPromoteReadReplica_610523, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplica_610503 = ref object of OpenApiRestCall_605589
proc url_GetPromoteReadReplica_610505(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplica_610504(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_610506 = query.getOrDefault("DBInstanceIdentifier")
  valid_610506 = validateParameter(valid_610506, JString, required = true,
                                 default = nil)
  if valid_610506 != nil:
    section.add "DBInstanceIdentifier", valid_610506
  var valid_610507 = query.getOrDefault("BackupRetentionPeriod")
  valid_610507 = validateParameter(valid_610507, JInt, required = false, default = nil)
  if valid_610507 != nil:
    section.add "BackupRetentionPeriod", valid_610507
  var valid_610508 = query.getOrDefault("Action")
  valid_610508 = validateParameter(valid_610508, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_610508 != nil:
    section.add "Action", valid_610508
  var valid_610509 = query.getOrDefault("Version")
  valid_610509 = validateParameter(valid_610509, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610509 != nil:
    section.add "Version", valid_610509
  var valid_610510 = query.getOrDefault("PreferredBackupWindow")
  valid_610510 = validateParameter(valid_610510, JString, required = false,
                                 default = nil)
  if valid_610510 != nil:
    section.add "PreferredBackupWindow", valid_610510
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610511 = header.getOrDefault("X-Amz-Signature")
  valid_610511 = validateParameter(valid_610511, JString, required = false,
                                 default = nil)
  if valid_610511 != nil:
    section.add "X-Amz-Signature", valid_610511
  var valid_610512 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610512 = validateParameter(valid_610512, JString, required = false,
                                 default = nil)
  if valid_610512 != nil:
    section.add "X-Amz-Content-Sha256", valid_610512
  var valid_610513 = header.getOrDefault("X-Amz-Date")
  valid_610513 = validateParameter(valid_610513, JString, required = false,
                                 default = nil)
  if valid_610513 != nil:
    section.add "X-Amz-Date", valid_610513
  var valid_610514 = header.getOrDefault("X-Amz-Credential")
  valid_610514 = validateParameter(valid_610514, JString, required = false,
                                 default = nil)
  if valid_610514 != nil:
    section.add "X-Amz-Credential", valid_610514
  var valid_610515 = header.getOrDefault("X-Amz-Security-Token")
  valid_610515 = validateParameter(valid_610515, JString, required = false,
                                 default = nil)
  if valid_610515 != nil:
    section.add "X-Amz-Security-Token", valid_610515
  var valid_610516 = header.getOrDefault("X-Amz-Algorithm")
  valid_610516 = validateParameter(valid_610516, JString, required = false,
                                 default = nil)
  if valid_610516 != nil:
    section.add "X-Amz-Algorithm", valid_610516
  var valid_610517 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610517 = validateParameter(valid_610517, JString, required = false,
                                 default = nil)
  if valid_610517 != nil:
    section.add "X-Amz-SignedHeaders", valid_610517
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610518: Call_GetPromoteReadReplica_610503; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_610518.validator(path, query, header, formData, body)
  let scheme = call_610518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610518.url(scheme.get, call_610518.host, call_610518.base,
                         call_610518.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610518, url, valid)

proc call*(call_610519: Call_GetPromoteReadReplica_610503;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; Version: string = "2014-10-31";
          PreferredBackupWindow: string = ""): Recallable =
  ## getPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  var query_610520 = newJObject()
  add(query_610520, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_610520, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_610520, "Action", newJString(Action))
  add(query_610520, "Version", newJString(Version))
  add(query_610520, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  result = call_610519.call(nil, query_610520, nil, nil, nil)

var getPromoteReadReplica* = Call_GetPromoteReadReplica_610503(
    name: "getPromoteReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_GetPromoteReadReplica_610504, base: "/",
    url: url_GetPromoteReadReplica_610505, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_610556 = ref object of OpenApiRestCall_605589
proc url_PostPromoteReadReplicaDBCluster_610558(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_610557(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610559 = query.getOrDefault("Action")
  valid_610559 = validateParameter(valid_610559, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_610559 != nil:
    section.add "Action", valid_610559
  var valid_610560 = query.getOrDefault("Version")
  valid_610560 = validateParameter(valid_610560, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610560 != nil:
    section.add "Version", valid_610560
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610561 = header.getOrDefault("X-Amz-Signature")
  valid_610561 = validateParameter(valid_610561, JString, required = false,
                                 default = nil)
  if valid_610561 != nil:
    section.add "X-Amz-Signature", valid_610561
  var valid_610562 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610562 = validateParameter(valid_610562, JString, required = false,
                                 default = nil)
  if valid_610562 != nil:
    section.add "X-Amz-Content-Sha256", valid_610562
  var valid_610563 = header.getOrDefault("X-Amz-Date")
  valid_610563 = validateParameter(valid_610563, JString, required = false,
                                 default = nil)
  if valid_610563 != nil:
    section.add "X-Amz-Date", valid_610563
  var valid_610564 = header.getOrDefault("X-Amz-Credential")
  valid_610564 = validateParameter(valid_610564, JString, required = false,
                                 default = nil)
  if valid_610564 != nil:
    section.add "X-Amz-Credential", valid_610564
  var valid_610565 = header.getOrDefault("X-Amz-Security-Token")
  valid_610565 = validateParameter(valid_610565, JString, required = false,
                                 default = nil)
  if valid_610565 != nil:
    section.add "X-Amz-Security-Token", valid_610565
  var valid_610566 = header.getOrDefault("X-Amz-Algorithm")
  valid_610566 = validateParameter(valid_610566, JString, required = false,
                                 default = nil)
  if valid_610566 != nil:
    section.add "X-Amz-Algorithm", valid_610566
  var valid_610567 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610567 = validateParameter(valid_610567, JString, required = false,
                                 default = nil)
  if valid_610567 != nil:
    section.add "X-Amz-SignedHeaders", valid_610567
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_610568 = formData.getOrDefault("DBClusterIdentifier")
  valid_610568 = validateParameter(valid_610568, JString, required = true,
                                 default = nil)
  if valid_610568 != nil:
    section.add "DBClusterIdentifier", valid_610568
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610569: Call_PostPromoteReadReplicaDBCluster_610556;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610569.validator(path, query, header, formData, body)
  let scheme = call_610569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610569.url(scheme.get, call_610569.host, call_610569.base,
                         call_610569.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610569, url, valid)

proc call*(call_610570: Call_PostPromoteReadReplicaDBCluster_610556;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  var query_610571 = newJObject()
  var formData_610572 = newJObject()
  add(query_610571, "Action", newJString(Action))
  add(query_610571, "Version", newJString(Version))
  add(formData_610572, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_610570.call(nil, query_610571, nil, formData_610572, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_610556(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_610557, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_610558,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_610540 = ref object of OpenApiRestCall_605589
proc url_GetPromoteReadReplicaDBCluster_610542(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_610541(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_610543 = query.getOrDefault("DBClusterIdentifier")
  valid_610543 = validateParameter(valid_610543, JString, required = true,
                                 default = nil)
  if valid_610543 != nil:
    section.add "DBClusterIdentifier", valid_610543
  var valid_610544 = query.getOrDefault("Action")
  valid_610544 = validateParameter(valid_610544, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_610544 != nil:
    section.add "Action", valid_610544
  var valid_610545 = query.getOrDefault("Version")
  valid_610545 = validateParameter(valid_610545, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610545 != nil:
    section.add "Version", valid_610545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610546 = header.getOrDefault("X-Amz-Signature")
  valid_610546 = validateParameter(valid_610546, JString, required = false,
                                 default = nil)
  if valid_610546 != nil:
    section.add "X-Amz-Signature", valid_610546
  var valid_610547 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610547 = validateParameter(valid_610547, JString, required = false,
                                 default = nil)
  if valid_610547 != nil:
    section.add "X-Amz-Content-Sha256", valid_610547
  var valid_610548 = header.getOrDefault("X-Amz-Date")
  valid_610548 = validateParameter(valid_610548, JString, required = false,
                                 default = nil)
  if valid_610548 != nil:
    section.add "X-Amz-Date", valid_610548
  var valid_610549 = header.getOrDefault("X-Amz-Credential")
  valid_610549 = validateParameter(valid_610549, JString, required = false,
                                 default = nil)
  if valid_610549 != nil:
    section.add "X-Amz-Credential", valid_610549
  var valid_610550 = header.getOrDefault("X-Amz-Security-Token")
  valid_610550 = validateParameter(valid_610550, JString, required = false,
                                 default = nil)
  if valid_610550 != nil:
    section.add "X-Amz-Security-Token", valid_610550
  var valid_610551 = header.getOrDefault("X-Amz-Algorithm")
  valid_610551 = validateParameter(valid_610551, JString, required = false,
                                 default = nil)
  if valid_610551 != nil:
    section.add "X-Amz-Algorithm", valid_610551
  var valid_610552 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610552 = validateParameter(valid_610552, JString, required = false,
                                 default = nil)
  if valid_610552 != nil:
    section.add "X-Amz-SignedHeaders", valid_610552
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610553: Call_GetPromoteReadReplicaDBCluster_610540; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610553.validator(path, query, header, formData, body)
  let scheme = call_610553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610553.url(scheme.get, call_610553.host, call_610553.base,
                         call_610553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610553, url, valid)

proc call*(call_610554: Call_GetPromoteReadReplicaDBCluster_610540;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610555 = newJObject()
  add(query_610555, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_610555, "Action", newJString(Action))
  add(query_610555, "Version", newJString(Version))
  result = call_610554.call(nil, query_610555, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_610540(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_610541, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_610542,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedDBInstancesOffering_610592 = ref object of OpenApiRestCall_605589
proc url_PostPurchaseReservedDBInstancesOffering_610594(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPurchaseReservedDBInstancesOffering_610593(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610595 = query.getOrDefault("Action")
  valid_610595 = validateParameter(valid_610595, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_610595 != nil:
    section.add "Action", valid_610595
  var valid_610596 = query.getOrDefault("Version")
  valid_610596 = validateParameter(valid_610596, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610596 != nil:
    section.add "Version", valid_610596
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610597 = header.getOrDefault("X-Amz-Signature")
  valid_610597 = validateParameter(valid_610597, JString, required = false,
                                 default = nil)
  if valid_610597 != nil:
    section.add "X-Amz-Signature", valid_610597
  var valid_610598 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610598 = validateParameter(valid_610598, JString, required = false,
                                 default = nil)
  if valid_610598 != nil:
    section.add "X-Amz-Content-Sha256", valid_610598
  var valid_610599 = header.getOrDefault("X-Amz-Date")
  valid_610599 = validateParameter(valid_610599, JString, required = false,
                                 default = nil)
  if valid_610599 != nil:
    section.add "X-Amz-Date", valid_610599
  var valid_610600 = header.getOrDefault("X-Amz-Credential")
  valid_610600 = validateParameter(valid_610600, JString, required = false,
                                 default = nil)
  if valid_610600 != nil:
    section.add "X-Amz-Credential", valid_610600
  var valid_610601 = header.getOrDefault("X-Amz-Security-Token")
  valid_610601 = validateParameter(valid_610601, JString, required = false,
                                 default = nil)
  if valid_610601 != nil:
    section.add "X-Amz-Security-Token", valid_610601
  var valid_610602 = header.getOrDefault("X-Amz-Algorithm")
  valid_610602 = validateParameter(valid_610602, JString, required = false,
                                 default = nil)
  if valid_610602 != nil:
    section.add "X-Amz-Algorithm", valid_610602
  var valid_610603 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610603 = validateParameter(valid_610603, JString, required = false,
                                 default = nil)
  if valid_610603 != nil:
    section.add "X-Amz-SignedHeaders", valid_610603
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  section = newJObject()
  var valid_610604 = formData.getOrDefault("ReservedDBInstanceId")
  valid_610604 = validateParameter(valid_610604, JString, required = false,
                                 default = nil)
  if valid_610604 != nil:
    section.add "ReservedDBInstanceId", valid_610604
  var valid_610605 = formData.getOrDefault("Tags")
  valid_610605 = validateParameter(valid_610605, JArray, required = false,
                                 default = nil)
  if valid_610605 != nil:
    section.add "Tags", valid_610605
  assert formData != nil, "formData argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_610606 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_610606 = validateParameter(valid_610606, JString, required = true,
                                 default = nil)
  if valid_610606 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_610606
  var valid_610607 = formData.getOrDefault("DBInstanceCount")
  valid_610607 = validateParameter(valid_610607, JInt, required = false, default = nil)
  if valid_610607 != nil:
    section.add "DBInstanceCount", valid_610607
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610608: Call_PostPurchaseReservedDBInstancesOffering_610592;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_610608.validator(path, query, header, formData, body)
  let scheme = call_610608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610608.url(scheme.get, call_610608.host, call_610608.base,
                         call_610608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610608, url, valid)

proc call*(call_610609: Call_PostPurchaseReservedDBInstancesOffering_610592;
          ReservedDBInstancesOfferingId: string;
          ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Tags: JsonNode = nil; Version: string = "2014-10-31"; DBInstanceCount: int = 0): Recallable =
  ## postPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  var query_610610 = newJObject()
  var formData_610611 = newJObject()
  add(formData_610611, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_610610, "Action", newJString(Action))
  if Tags != nil:
    formData_610611.add "Tags", Tags
  add(formData_610611, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_610610, "Version", newJString(Version))
  add(formData_610611, "DBInstanceCount", newJInt(DBInstanceCount))
  result = call_610609.call(nil, query_610610, nil, formData_610611, nil)

var postPurchaseReservedDBInstancesOffering* = Call_PostPurchaseReservedDBInstancesOffering_610592(
    name: "postPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_PostPurchaseReservedDBInstancesOffering_610593, base: "/",
    url: url_PostPurchaseReservedDBInstancesOffering_610594,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedDBInstancesOffering_610573 = ref object of OpenApiRestCall_605589
proc url_GetPurchaseReservedDBInstancesOffering_610575(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPurchaseReservedDBInstancesOffering_610574(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: JString (required)
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_610576 = query.getOrDefault("Tags")
  valid_610576 = validateParameter(valid_610576, JArray, required = false,
                                 default = nil)
  if valid_610576 != nil:
    section.add "Tags", valid_610576
  var valid_610577 = query.getOrDefault("DBInstanceCount")
  valid_610577 = validateParameter(valid_610577, JInt, required = false, default = nil)
  if valid_610577 != nil:
    section.add "DBInstanceCount", valid_610577
  var valid_610578 = query.getOrDefault("ReservedDBInstanceId")
  valid_610578 = validateParameter(valid_610578, JString, required = false,
                                 default = nil)
  if valid_610578 != nil:
    section.add "ReservedDBInstanceId", valid_610578
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610579 = query.getOrDefault("Action")
  valid_610579 = validateParameter(valid_610579, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_610579 != nil:
    section.add "Action", valid_610579
  var valid_610580 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_610580 = validateParameter(valid_610580, JString, required = true,
                                 default = nil)
  if valid_610580 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_610580
  var valid_610581 = query.getOrDefault("Version")
  valid_610581 = validateParameter(valid_610581, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610581 != nil:
    section.add "Version", valid_610581
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610582 = header.getOrDefault("X-Amz-Signature")
  valid_610582 = validateParameter(valid_610582, JString, required = false,
                                 default = nil)
  if valid_610582 != nil:
    section.add "X-Amz-Signature", valid_610582
  var valid_610583 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610583 = validateParameter(valid_610583, JString, required = false,
                                 default = nil)
  if valid_610583 != nil:
    section.add "X-Amz-Content-Sha256", valid_610583
  var valid_610584 = header.getOrDefault("X-Amz-Date")
  valid_610584 = validateParameter(valid_610584, JString, required = false,
                                 default = nil)
  if valid_610584 != nil:
    section.add "X-Amz-Date", valid_610584
  var valid_610585 = header.getOrDefault("X-Amz-Credential")
  valid_610585 = validateParameter(valid_610585, JString, required = false,
                                 default = nil)
  if valid_610585 != nil:
    section.add "X-Amz-Credential", valid_610585
  var valid_610586 = header.getOrDefault("X-Amz-Security-Token")
  valid_610586 = validateParameter(valid_610586, JString, required = false,
                                 default = nil)
  if valid_610586 != nil:
    section.add "X-Amz-Security-Token", valid_610586
  var valid_610587 = header.getOrDefault("X-Amz-Algorithm")
  valid_610587 = validateParameter(valid_610587, JString, required = false,
                                 default = nil)
  if valid_610587 != nil:
    section.add "X-Amz-Algorithm", valid_610587
  var valid_610588 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610588 = validateParameter(valid_610588, JString, required = false,
                                 default = nil)
  if valid_610588 != nil:
    section.add "X-Amz-SignedHeaders", valid_610588
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610589: Call_GetPurchaseReservedDBInstancesOffering_610573;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_610589.validator(path, query, header, formData, body)
  let scheme = call_610589.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610589.url(scheme.get, call_610589.host, call_610589.base,
                         call_610589.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610589, url, valid)

proc call*(call_610590: Call_GetPurchaseReservedDBInstancesOffering_610573;
          ReservedDBInstancesOfferingId: string; Tags: JsonNode = nil;
          DBInstanceCount: int = 0; ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## getPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  var query_610591 = newJObject()
  if Tags != nil:
    query_610591.add "Tags", Tags
  add(query_610591, "DBInstanceCount", newJInt(DBInstanceCount))
  add(query_610591, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_610591, "Action", newJString(Action))
  add(query_610591, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_610591, "Version", newJString(Version))
  result = call_610590.call(nil, query_610591, nil, nil, nil)

var getPurchaseReservedDBInstancesOffering* = Call_GetPurchaseReservedDBInstancesOffering_610573(
    name: "getPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_GetPurchaseReservedDBInstancesOffering_610574, base: "/",
    url: url_GetPurchaseReservedDBInstancesOffering_610575,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_610629 = ref object of OpenApiRestCall_605589
proc url_PostRebootDBInstance_610631(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootDBInstance_610630(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610632 = query.getOrDefault("Action")
  valid_610632 = validateParameter(valid_610632, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_610632 != nil:
    section.add "Action", valid_610632
  var valid_610633 = query.getOrDefault("Version")
  valid_610633 = validateParameter(valid_610633, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610633 != nil:
    section.add "Version", valid_610633
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610634 = header.getOrDefault("X-Amz-Signature")
  valid_610634 = validateParameter(valid_610634, JString, required = false,
                                 default = nil)
  if valid_610634 != nil:
    section.add "X-Amz-Signature", valid_610634
  var valid_610635 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610635 = validateParameter(valid_610635, JString, required = false,
                                 default = nil)
  if valid_610635 != nil:
    section.add "X-Amz-Content-Sha256", valid_610635
  var valid_610636 = header.getOrDefault("X-Amz-Date")
  valid_610636 = validateParameter(valid_610636, JString, required = false,
                                 default = nil)
  if valid_610636 != nil:
    section.add "X-Amz-Date", valid_610636
  var valid_610637 = header.getOrDefault("X-Amz-Credential")
  valid_610637 = validateParameter(valid_610637, JString, required = false,
                                 default = nil)
  if valid_610637 != nil:
    section.add "X-Amz-Credential", valid_610637
  var valid_610638 = header.getOrDefault("X-Amz-Security-Token")
  valid_610638 = validateParameter(valid_610638, JString, required = false,
                                 default = nil)
  if valid_610638 != nil:
    section.add "X-Amz-Security-Token", valid_610638
  var valid_610639 = header.getOrDefault("X-Amz-Algorithm")
  valid_610639 = validateParameter(valid_610639, JString, required = false,
                                 default = nil)
  if valid_610639 != nil:
    section.add "X-Amz-Algorithm", valid_610639
  var valid_610640 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610640 = validateParameter(valid_610640, JString, required = false,
                                 default = nil)
  if valid_610640 != nil:
    section.add "X-Amz-SignedHeaders", valid_610640
  result.add "header", section
  ## parameters in `formData` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_610641 = formData.getOrDefault("ForceFailover")
  valid_610641 = validateParameter(valid_610641, JBool, required = false, default = nil)
  if valid_610641 != nil:
    section.add "ForceFailover", valid_610641
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_610642 = formData.getOrDefault("DBInstanceIdentifier")
  valid_610642 = validateParameter(valid_610642, JString, required = true,
                                 default = nil)
  if valid_610642 != nil:
    section.add "DBInstanceIdentifier", valid_610642
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610643: Call_PostRebootDBInstance_610629; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_610643.validator(path, query, header, formData, body)
  let scheme = call_610643.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610643.url(scheme.get, call_610643.host, call_610643.base,
                         call_610643.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610643, url, valid)

proc call*(call_610644: Call_PostRebootDBInstance_610629;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610645 = newJObject()
  var formData_610646 = newJObject()
  add(formData_610646, "ForceFailover", newJBool(ForceFailover))
  add(formData_610646, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_610645, "Action", newJString(Action))
  add(query_610645, "Version", newJString(Version))
  result = call_610644.call(nil, query_610645, nil, formData_610646, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_610629(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_610630, base: "/",
    url: url_PostRebootDBInstance_610631, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_610612 = ref object of OpenApiRestCall_605589
proc url_GetRebootDBInstance_610614(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootDBInstance_610613(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610615 = query.getOrDefault("ForceFailover")
  valid_610615 = validateParameter(valid_610615, JBool, required = false, default = nil)
  if valid_610615 != nil:
    section.add "ForceFailover", valid_610615
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_610616 = query.getOrDefault("DBInstanceIdentifier")
  valid_610616 = validateParameter(valid_610616, JString, required = true,
                                 default = nil)
  if valid_610616 != nil:
    section.add "DBInstanceIdentifier", valid_610616
  var valid_610617 = query.getOrDefault("Action")
  valid_610617 = validateParameter(valid_610617, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_610617 != nil:
    section.add "Action", valid_610617
  var valid_610618 = query.getOrDefault("Version")
  valid_610618 = validateParameter(valid_610618, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610618 != nil:
    section.add "Version", valid_610618
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610619 = header.getOrDefault("X-Amz-Signature")
  valid_610619 = validateParameter(valid_610619, JString, required = false,
                                 default = nil)
  if valid_610619 != nil:
    section.add "X-Amz-Signature", valid_610619
  var valid_610620 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610620 = validateParameter(valid_610620, JString, required = false,
                                 default = nil)
  if valid_610620 != nil:
    section.add "X-Amz-Content-Sha256", valid_610620
  var valid_610621 = header.getOrDefault("X-Amz-Date")
  valid_610621 = validateParameter(valid_610621, JString, required = false,
                                 default = nil)
  if valid_610621 != nil:
    section.add "X-Amz-Date", valid_610621
  var valid_610622 = header.getOrDefault("X-Amz-Credential")
  valid_610622 = validateParameter(valid_610622, JString, required = false,
                                 default = nil)
  if valid_610622 != nil:
    section.add "X-Amz-Credential", valid_610622
  var valid_610623 = header.getOrDefault("X-Amz-Security-Token")
  valid_610623 = validateParameter(valid_610623, JString, required = false,
                                 default = nil)
  if valid_610623 != nil:
    section.add "X-Amz-Security-Token", valid_610623
  var valid_610624 = header.getOrDefault("X-Amz-Algorithm")
  valid_610624 = validateParameter(valid_610624, JString, required = false,
                                 default = nil)
  if valid_610624 != nil:
    section.add "X-Amz-Algorithm", valid_610624
  var valid_610625 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610625 = validateParameter(valid_610625, JString, required = false,
                                 default = nil)
  if valid_610625 != nil:
    section.add "X-Amz-SignedHeaders", valid_610625
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610626: Call_GetRebootDBInstance_610612; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_610626.validator(path, query, header, formData, body)
  let scheme = call_610626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610626.url(scheme.get, call_610626.host, call_610626.base,
                         call_610626.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610626, url, valid)

proc call*(call_610627: Call_GetRebootDBInstance_610612;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610628 = newJObject()
  add(query_610628, "ForceFailover", newJBool(ForceFailover))
  add(query_610628, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_610628, "Action", newJString(Action))
  add(query_610628, "Version", newJString(Version))
  result = call_610627.call(nil, query_610628, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_610612(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_610613, base: "/",
    url: url_GetRebootDBInstance_610614, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRegisterDBProxyTargets_610666 = ref object of OpenApiRestCall_605589
proc url_PostRegisterDBProxyTargets_610668(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRegisterDBProxyTargets_610667(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610669 = query.getOrDefault("Action")
  valid_610669 = validateParameter(valid_610669, JString, required = true,
                                 default = newJString("RegisterDBProxyTargets"))
  if valid_610669 != nil:
    section.add "Action", valid_610669
  var valid_610670 = query.getOrDefault("Version")
  valid_610670 = validateParameter(valid_610670, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610670 != nil:
    section.add "Version", valid_610670
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610671 = header.getOrDefault("X-Amz-Signature")
  valid_610671 = validateParameter(valid_610671, JString, required = false,
                                 default = nil)
  if valid_610671 != nil:
    section.add "X-Amz-Signature", valid_610671
  var valid_610672 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610672 = validateParameter(valid_610672, JString, required = false,
                                 default = nil)
  if valid_610672 != nil:
    section.add "X-Amz-Content-Sha256", valid_610672
  var valid_610673 = header.getOrDefault("X-Amz-Date")
  valid_610673 = validateParameter(valid_610673, JString, required = false,
                                 default = nil)
  if valid_610673 != nil:
    section.add "X-Amz-Date", valid_610673
  var valid_610674 = header.getOrDefault("X-Amz-Credential")
  valid_610674 = validateParameter(valid_610674, JString, required = false,
                                 default = nil)
  if valid_610674 != nil:
    section.add "X-Amz-Credential", valid_610674
  var valid_610675 = header.getOrDefault("X-Amz-Security-Token")
  valid_610675 = validateParameter(valid_610675, JString, required = false,
                                 default = nil)
  if valid_610675 != nil:
    section.add "X-Amz-Security-Token", valid_610675
  var valid_610676 = header.getOrDefault("X-Amz-Algorithm")
  valid_610676 = validateParameter(valid_610676, JString, required = false,
                                 default = nil)
  if valid_610676 != nil:
    section.add "X-Amz-Algorithm", valid_610676
  var valid_610677 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610677 = validateParameter(valid_610677, JString, required = false,
                                 default = nil)
  if valid_610677 != nil:
    section.add "X-Amz-SignedHeaders", valid_610677
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_610678 = formData.getOrDefault("TargetGroupName")
  valid_610678 = validateParameter(valid_610678, JString, required = false,
                                 default = nil)
  if valid_610678 != nil:
    section.add "TargetGroupName", valid_610678
  var valid_610679 = formData.getOrDefault("DBInstanceIdentifiers")
  valid_610679 = validateParameter(valid_610679, JArray, required = false,
                                 default = nil)
  if valid_610679 != nil:
    section.add "DBInstanceIdentifiers", valid_610679
  var valid_610680 = formData.getOrDefault("DBClusterIdentifiers")
  valid_610680 = validateParameter(valid_610680, JArray, required = false,
                                 default = nil)
  if valid_610680 != nil:
    section.add "DBClusterIdentifiers", valid_610680
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_610681 = formData.getOrDefault("DBProxyName")
  valid_610681 = validateParameter(valid_610681, JString, required = true,
                                 default = nil)
  if valid_610681 != nil:
    section.add "DBProxyName", valid_610681
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610682: Call_PostRegisterDBProxyTargets_610666; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_610682.validator(path, query, header, formData, body)
  let scheme = call_610682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610682.url(scheme.get, call_610682.host, call_610682.base,
                         call_610682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610682, url, valid)

proc call*(call_610683: Call_PostRegisterDBProxyTargets_610666;
          DBProxyName: string; TargetGroupName: string = "";
          DBInstanceIdentifiers: JsonNode = nil;
          DBClusterIdentifiers: JsonNode = nil;
          Action: string = "RegisterDBProxyTargets"; Version: string = "2014-10-31"): Recallable =
  ## postRegisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610684 = newJObject()
  var formData_610685 = newJObject()
  add(formData_610685, "TargetGroupName", newJString(TargetGroupName))
  if DBInstanceIdentifiers != nil:
    formData_610685.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  if DBClusterIdentifiers != nil:
    formData_610685.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(formData_610685, "DBProxyName", newJString(DBProxyName))
  add(query_610684, "Action", newJString(Action))
  add(query_610684, "Version", newJString(Version))
  result = call_610683.call(nil, query_610684, nil, formData_610685, nil)

var postRegisterDBProxyTargets* = Call_PostRegisterDBProxyTargets_610666(
    name: "postRegisterDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RegisterDBProxyTargets",
    validator: validate_PostRegisterDBProxyTargets_610667, base: "/",
    url: url_PostRegisterDBProxyTargets_610668,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRegisterDBProxyTargets_610647 = ref object of OpenApiRestCall_605589
proc url_GetRegisterDBProxyTargets_610649(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRegisterDBProxyTargets_610648(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_610650 = query.getOrDefault("DBClusterIdentifiers")
  valid_610650 = validateParameter(valid_610650, JArray, required = false,
                                 default = nil)
  if valid_610650 != nil:
    section.add "DBClusterIdentifiers", valid_610650
  var valid_610651 = query.getOrDefault("DBInstanceIdentifiers")
  valid_610651 = validateParameter(valid_610651, JArray, required = false,
                                 default = nil)
  if valid_610651 != nil:
    section.add "DBInstanceIdentifiers", valid_610651
  var valid_610652 = query.getOrDefault("TargetGroupName")
  valid_610652 = validateParameter(valid_610652, JString, required = false,
                                 default = nil)
  if valid_610652 != nil:
    section.add "TargetGroupName", valid_610652
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610653 = query.getOrDefault("Action")
  valid_610653 = validateParameter(valid_610653, JString, required = true,
                                 default = newJString("RegisterDBProxyTargets"))
  if valid_610653 != nil:
    section.add "Action", valid_610653
  var valid_610654 = query.getOrDefault("Version")
  valid_610654 = validateParameter(valid_610654, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610654 != nil:
    section.add "Version", valid_610654
  var valid_610655 = query.getOrDefault("DBProxyName")
  valid_610655 = validateParameter(valid_610655, JString, required = true,
                                 default = nil)
  if valid_610655 != nil:
    section.add "DBProxyName", valid_610655
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610656 = header.getOrDefault("X-Amz-Signature")
  valid_610656 = validateParameter(valid_610656, JString, required = false,
                                 default = nil)
  if valid_610656 != nil:
    section.add "X-Amz-Signature", valid_610656
  var valid_610657 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610657 = validateParameter(valid_610657, JString, required = false,
                                 default = nil)
  if valid_610657 != nil:
    section.add "X-Amz-Content-Sha256", valid_610657
  var valid_610658 = header.getOrDefault("X-Amz-Date")
  valid_610658 = validateParameter(valid_610658, JString, required = false,
                                 default = nil)
  if valid_610658 != nil:
    section.add "X-Amz-Date", valid_610658
  var valid_610659 = header.getOrDefault("X-Amz-Credential")
  valid_610659 = validateParameter(valid_610659, JString, required = false,
                                 default = nil)
  if valid_610659 != nil:
    section.add "X-Amz-Credential", valid_610659
  var valid_610660 = header.getOrDefault("X-Amz-Security-Token")
  valid_610660 = validateParameter(valid_610660, JString, required = false,
                                 default = nil)
  if valid_610660 != nil:
    section.add "X-Amz-Security-Token", valid_610660
  var valid_610661 = header.getOrDefault("X-Amz-Algorithm")
  valid_610661 = validateParameter(valid_610661, JString, required = false,
                                 default = nil)
  if valid_610661 != nil:
    section.add "X-Amz-Algorithm", valid_610661
  var valid_610662 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610662 = validateParameter(valid_610662, JString, required = false,
                                 default = nil)
  if valid_610662 != nil:
    section.add "X-Amz-SignedHeaders", valid_610662
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610663: Call_GetRegisterDBProxyTargets_610647; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_610663.validator(path, query, header, formData, body)
  let scheme = call_610663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610663.url(scheme.get, call_610663.host, call_610663.base,
                         call_610663.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610663, url, valid)

proc call*(call_610664: Call_GetRegisterDBProxyTargets_610647; DBProxyName: string;
          DBClusterIdentifiers: JsonNode = nil;
          DBInstanceIdentifiers: JsonNode = nil; TargetGroupName: string = "";
          Action: string = "RegisterDBProxyTargets"; Version: string = "2014-10-31"): Recallable =
  ## getRegisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  var query_610665 = newJObject()
  if DBClusterIdentifiers != nil:
    query_610665.add "DBClusterIdentifiers", DBClusterIdentifiers
  if DBInstanceIdentifiers != nil:
    query_610665.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  add(query_610665, "TargetGroupName", newJString(TargetGroupName))
  add(query_610665, "Action", newJString(Action))
  add(query_610665, "Version", newJString(Version))
  add(query_610665, "DBProxyName", newJString(DBProxyName))
  result = call_610664.call(nil, query_610665, nil, nil, nil)

var getRegisterDBProxyTargets* = Call_GetRegisterDBProxyTargets_610647(
    name: "getRegisterDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RegisterDBProxyTargets",
    validator: validate_GetRegisterDBProxyTargets_610648, base: "/",
    url: url_GetRegisterDBProxyTargets_610649,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveFromGlobalCluster_610703 = ref object of OpenApiRestCall_605589
proc url_PostRemoveFromGlobalCluster_610705(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveFromGlobalCluster_610704(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610706 = query.getOrDefault("Action")
  valid_610706 = validateParameter(valid_610706, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_610706 != nil:
    section.add "Action", valid_610706
  var valid_610707 = query.getOrDefault("Version")
  valid_610707 = validateParameter(valid_610707, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610707 != nil:
    section.add "Version", valid_610707
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610708 = header.getOrDefault("X-Amz-Signature")
  valid_610708 = validateParameter(valid_610708, JString, required = false,
                                 default = nil)
  if valid_610708 != nil:
    section.add "X-Amz-Signature", valid_610708
  var valid_610709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610709 = validateParameter(valid_610709, JString, required = false,
                                 default = nil)
  if valid_610709 != nil:
    section.add "X-Amz-Content-Sha256", valid_610709
  var valid_610710 = header.getOrDefault("X-Amz-Date")
  valid_610710 = validateParameter(valid_610710, JString, required = false,
                                 default = nil)
  if valid_610710 != nil:
    section.add "X-Amz-Date", valid_610710
  var valid_610711 = header.getOrDefault("X-Amz-Credential")
  valid_610711 = validateParameter(valid_610711, JString, required = false,
                                 default = nil)
  if valid_610711 != nil:
    section.add "X-Amz-Credential", valid_610711
  var valid_610712 = header.getOrDefault("X-Amz-Security-Token")
  valid_610712 = validateParameter(valid_610712, JString, required = false,
                                 default = nil)
  if valid_610712 != nil:
    section.add "X-Amz-Security-Token", valid_610712
  var valid_610713 = header.getOrDefault("X-Amz-Algorithm")
  valid_610713 = validateParameter(valid_610713, JString, required = false,
                                 default = nil)
  if valid_610713 != nil:
    section.add "X-Amz-Algorithm", valid_610713
  var valid_610714 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610714 = validateParameter(valid_610714, JString, required = false,
                                 default = nil)
  if valid_610714 != nil:
    section.add "X-Amz-SignedHeaders", valid_610714
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  section = newJObject()
  var valid_610715 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_610715 = validateParameter(valid_610715, JString, required = false,
                                 default = nil)
  if valid_610715 != nil:
    section.add "GlobalClusterIdentifier", valid_610715
  var valid_610716 = formData.getOrDefault("DbClusterIdentifier")
  valid_610716 = validateParameter(valid_610716, JString, required = false,
                                 default = nil)
  if valid_610716 != nil:
    section.add "DbClusterIdentifier", valid_610716
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610717: Call_PostRemoveFromGlobalCluster_610703; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610717.validator(path, query, header, formData, body)
  let scheme = call_610717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610717.url(scheme.get, call_610717.host, call_610717.base,
                         call_610717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610717, url, valid)

proc call*(call_610718: Call_PostRemoveFromGlobalCluster_610703;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610719 = newJObject()
  var formData_610720 = newJObject()
  add(formData_610720, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_610720, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_610719, "Action", newJString(Action))
  add(query_610719, "Version", newJString(Version))
  result = call_610718.call(nil, query_610719, nil, formData_610720, nil)

var postRemoveFromGlobalCluster* = Call_PostRemoveFromGlobalCluster_610703(
    name: "postRemoveFromGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_PostRemoveFromGlobalCluster_610704, base: "/",
    url: url_PostRemoveFromGlobalCluster_610705,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveFromGlobalCluster_610686 = ref object of OpenApiRestCall_605589
proc url_GetRemoveFromGlobalCluster_610688(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveFromGlobalCluster_610687(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610689 = query.getOrDefault("GlobalClusterIdentifier")
  valid_610689 = validateParameter(valid_610689, JString, required = false,
                                 default = nil)
  if valid_610689 != nil:
    section.add "GlobalClusterIdentifier", valid_610689
  var valid_610690 = query.getOrDefault("DbClusterIdentifier")
  valid_610690 = validateParameter(valid_610690, JString, required = false,
                                 default = nil)
  if valid_610690 != nil:
    section.add "DbClusterIdentifier", valid_610690
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610691 = query.getOrDefault("Action")
  valid_610691 = validateParameter(valid_610691, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_610691 != nil:
    section.add "Action", valid_610691
  var valid_610692 = query.getOrDefault("Version")
  valid_610692 = validateParameter(valid_610692, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610692 != nil:
    section.add "Version", valid_610692
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610693 = header.getOrDefault("X-Amz-Signature")
  valid_610693 = validateParameter(valid_610693, JString, required = false,
                                 default = nil)
  if valid_610693 != nil:
    section.add "X-Amz-Signature", valid_610693
  var valid_610694 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610694 = validateParameter(valid_610694, JString, required = false,
                                 default = nil)
  if valid_610694 != nil:
    section.add "X-Amz-Content-Sha256", valid_610694
  var valid_610695 = header.getOrDefault("X-Amz-Date")
  valid_610695 = validateParameter(valid_610695, JString, required = false,
                                 default = nil)
  if valid_610695 != nil:
    section.add "X-Amz-Date", valid_610695
  var valid_610696 = header.getOrDefault("X-Amz-Credential")
  valid_610696 = validateParameter(valid_610696, JString, required = false,
                                 default = nil)
  if valid_610696 != nil:
    section.add "X-Amz-Credential", valid_610696
  var valid_610697 = header.getOrDefault("X-Amz-Security-Token")
  valid_610697 = validateParameter(valid_610697, JString, required = false,
                                 default = nil)
  if valid_610697 != nil:
    section.add "X-Amz-Security-Token", valid_610697
  var valid_610698 = header.getOrDefault("X-Amz-Algorithm")
  valid_610698 = validateParameter(valid_610698, JString, required = false,
                                 default = nil)
  if valid_610698 != nil:
    section.add "X-Amz-Algorithm", valid_610698
  var valid_610699 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610699 = validateParameter(valid_610699, JString, required = false,
                                 default = nil)
  if valid_610699 != nil:
    section.add "X-Amz-SignedHeaders", valid_610699
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610700: Call_GetRemoveFromGlobalCluster_610686; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610700.validator(path, query, header, formData, body)
  let scheme = call_610700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610700.url(scheme.get, call_610700.host, call_610700.base,
                         call_610700.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610700, url, valid)

proc call*(call_610701: Call_GetRemoveFromGlobalCluster_610686;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610702 = newJObject()
  add(query_610702, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_610702, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_610702, "Action", newJString(Action))
  add(query_610702, "Version", newJString(Version))
  result = call_610701.call(nil, query_610702, nil, nil, nil)

var getRemoveFromGlobalCluster* = Call_GetRemoveFromGlobalCluster_610686(
    name: "getRemoveFromGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_GetRemoveFromGlobalCluster_610687, base: "/",
    url: url_GetRemoveFromGlobalCluster_610688,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_610739 = ref object of OpenApiRestCall_605589
proc url_PostRemoveRoleFromDBCluster_610741(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_610740(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610742 = query.getOrDefault("Action")
  valid_610742 = validateParameter(valid_610742, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_610742 != nil:
    section.add "Action", valid_610742
  var valid_610743 = query.getOrDefault("Version")
  valid_610743 = validateParameter(valid_610743, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610743 != nil:
    section.add "Version", valid_610743
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610744 = header.getOrDefault("X-Amz-Signature")
  valid_610744 = validateParameter(valid_610744, JString, required = false,
                                 default = nil)
  if valid_610744 != nil:
    section.add "X-Amz-Signature", valid_610744
  var valid_610745 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610745 = validateParameter(valid_610745, JString, required = false,
                                 default = nil)
  if valid_610745 != nil:
    section.add "X-Amz-Content-Sha256", valid_610745
  var valid_610746 = header.getOrDefault("X-Amz-Date")
  valid_610746 = validateParameter(valid_610746, JString, required = false,
                                 default = nil)
  if valid_610746 != nil:
    section.add "X-Amz-Date", valid_610746
  var valid_610747 = header.getOrDefault("X-Amz-Credential")
  valid_610747 = validateParameter(valid_610747, JString, required = false,
                                 default = nil)
  if valid_610747 != nil:
    section.add "X-Amz-Credential", valid_610747
  var valid_610748 = header.getOrDefault("X-Amz-Security-Token")
  valid_610748 = validateParameter(valid_610748, JString, required = false,
                                 default = nil)
  if valid_610748 != nil:
    section.add "X-Amz-Security-Token", valid_610748
  var valid_610749 = header.getOrDefault("X-Amz-Algorithm")
  valid_610749 = validateParameter(valid_610749, JString, required = false,
                                 default = nil)
  if valid_610749 != nil:
    section.add "X-Amz-Algorithm", valid_610749
  var valid_610750 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610750 = validateParameter(valid_610750, JString, required = false,
                                 default = nil)
  if valid_610750 != nil:
    section.add "X-Amz-SignedHeaders", valid_610750
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  var valid_610751 = formData.getOrDefault("FeatureName")
  valid_610751 = validateParameter(valid_610751, JString, required = false,
                                 default = nil)
  if valid_610751 != nil:
    section.add "FeatureName", valid_610751
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_610752 = formData.getOrDefault("RoleArn")
  valid_610752 = validateParameter(valid_610752, JString, required = true,
                                 default = nil)
  if valid_610752 != nil:
    section.add "RoleArn", valid_610752
  var valid_610753 = formData.getOrDefault("DBClusterIdentifier")
  valid_610753 = validateParameter(valid_610753, JString, required = true,
                                 default = nil)
  if valid_610753 != nil:
    section.add "DBClusterIdentifier", valid_610753
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610754: Call_PostRemoveRoleFromDBCluster_610739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610754.validator(path, query, header, formData, body)
  let scheme = call_610754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610754.url(scheme.get, call_610754.host, call_610754.base,
                         call_610754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610754, url, valid)

proc call*(call_610755: Call_PostRemoveRoleFromDBCluster_610739; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  var query_610756 = newJObject()
  var formData_610757 = newJObject()
  add(formData_610757, "FeatureName", newJString(FeatureName))
  add(formData_610757, "RoleArn", newJString(RoleArn))
  add(query_610756, "Action", newJString(Action))
  add(query_610756, "Version", newJString(Version))
  add(formData_610757, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_610755.call(nil, query_610756, nil, formData_610757, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_610739(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_610740, base: "/",
    url: url_PostRemoveRoleFromDBCluster_610741,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_610721 = ref object of OpenApiRestCall_605589
proc url_GetRemoveRoleFromDBCluster_610723(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_610722(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_610724 = query.getOrDefault("RoleArn")
  valid_610724 = validateParameter(valid_610724, JString, required = true,
                                 default = nil)
  if valid_610724 != nil:
    section.add "RoleArn", valid_610724
  var valid_610725 = query.getOrDefault("DBClusterIdentifier")
  valid_610725 = validateParameter(valid_610725, JString, required = true,
                                 default = nil)
  if valid_610725 != nil:
    section.add "DBClusterIdentifier", valid_610725
  var valid_610726 = query.getOrDefault("FeatureName")
  valid_610726 = validateParameter(valid_610726, JString, required = false,
                                 default = nil)
  if valid_610726 != nil:
    section.add "FeatureName", valid_610726
  var valid_610727 = query.getOrDefault("Action")
  valid_610727 = validateParameter(valid_610727, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_610727 != nil:
    section.add "Action", valid_610727
  var valid_610728 = query.getOrDefault("Version")
  valid_610728 = validateParameter(valid_610728, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610728 != nil:
    section.add "Version", valid_610728
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610729 = header.getOrDefault("X-Amz-Signature")
  valid_610729 = validateParameter(valid_610729, JString, required = false,
                                 default = nil)
  if valid_610729 != nil:
    section.add "X-Amz-Signature", valid_610729
  var valid_610730 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610730 = validateParameter(valid_610730, JString, required = false,
                                 default = nil)
  if valid_610730 != nil:
    section.add "X-Amz-Content-Sha256", valid_610730
  var valid_610731 = header.getOrDefault("X-Amz-Date")
  valid_610731 = validateParameter(valid_610731, JString, required = false,
                                 default = nil)
  if valid_610731 != nil:
    section.add "X-Amz-Date", valid_610731
  var valid_610732 = header.getOrDefault("X-Amz-Credential")
  valid_610732 = validateParameter(valid_610732, JString, required = false,
                                 default = nil)
  if valid_610732 != nil:
    section.add "X-Amz-Credential", valid_610732
  var valid_610733 = header.getOrDefault("X-Amz-Security-Token")
  valid_610733 = validateParameter(valid_610733, JString, required = false,
                                 default = nil)
  if valid_610733 != nil:
    section.add "X-Amz-Security-Token", valid_610733
  var valid_610734 = header.getOrDefault("X-Amz-Algorithm")
  valid_610734 = validateParameter(valid_610734, JString, required = false,
                                 default = nil)
  if valid_610734 != nil:
    section.add "X-Amz-Algorithm", valid_610734
  var valid_610735 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610735 = validateParameter(valid_610735, JString, required = false,
                                 default = nil)
  if valid_610735 != nil:
    section.add "X-Amz-SignedHeaders", valid_610735
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610736: Call_GetRemoveRoleFromDBCluster_610721; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610736.validator(path, query, header, formData, body)
  let scheme = call_610736.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610736.url(scheme.get, call_610736.host, call_610736.base,
                         call_610736.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610736, url, valid)

proc call*(call_610737: Call_GetRemoveRoleFromDBCluster_610721; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610738 = newJObject()
  add(query_610738, "RoleArn", newJString(RoleArn))
  add(query_610738, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_610738, "FeatureName", newJString(FeatureName))
  add(query_610738, "Action", newJString(Action))
  add(query_610738, "Version", newJString(Version))
  result = call_610737.call(nil, query_610738, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_610721(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_610722, base: "/",
    url: url_GetRemoveRoleFromDBCluster_610723,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBInstance_610776 = ref object of OpenApiRestCall_605589
proc url_PostRemoveRoleFromDBInstance_610778(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBInstance_610777(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610779 = query.getOrDefault("Action")
  valid_610779 = validateParameter(valid_610779, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_610779 != nil:
    section.add "Action", valid_610779
  var valid_610780 = query.getOrDefault("Version")
  valid_610780 = validateParameter(valid_610780, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610780 != nil:
    section.add "Version", valid_610780
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610781 = header.getOrDefault("X-Amz-Signature")
  valid_610781 = validateParameter(valid_610781, JString, required = false,
                                 default = nil)
  if valid_610781 != nil:
    section.add "X-Amz-Signature", valid_610781
  var valid_610782 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610782 = validateParameter(valid_610782, JString, required = false,
                                 default = nil)
  if valid_610782 != nil:
    section.add "X-Amz-Content-Sha256", valid_610782
  var valid_610783 = header.getOrDefault("X-Amz-Date")
  valid_610783 = validateParameter(valid_610783, JString, required = false,
                                 default = nil)
  if valid_610783 != nil:
    section.add "X-Amz-Date", valid_610783
  var valid_610784 = header.getOrDefault("X-Amz-Credential")
  valid_610784 = validateParameter(valid_610784, JString, required = false,
                                 default = nil)
  if valid_610784 != nil:
    section.add "X-Amz-Credential", valid_610784
  var valid_610785 = header.getOrDefault("X-Amz-Security-Token")
  valid_610785 = validateParameter(valid_610785, JString, required = false,
                                 default = nil)
  if valid_610785 != nil:
    section.add "X-Amz-Security-Token", valid_610785
  var valid_610786 = header.getOrDefault("X-Amz-Algorithm")
  valid_610786 = validateParameter(valid_610786, JString, required = false,
                                 default = nil)
  if valid_610786 != nil:
    section.add "X-Amz-Algorithm", valid_610786
  var valid_610787 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610787 = validateParameter(valid_610787, JString, required = false,
                                 default = nil)
  if valid_610787 != nil:
    section.add "X-Amz-SignedHeaders", valid_610787
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_610788 = formData.getOrDefault("FeatureName")
  valid_610788 = validateParameter(valid_610788, JString, required = true,
                                 default = nil)
  if valid_610788 != nil:
    section.add "FeatureName", valid_610788
  var valid_610789 = formData.getOrDefault("RoleArn")
  valid_610789 = validateParameter(valid_610789, JString, required = true,
                                 default = nil)
  if valid_610789 != nil:
    section.add "RoleArn", valid_610789
  var valid_610790 = formData.getOrDefault("DBInstanceIdentifier")
  valid_610790 = validateParameter(valid_610790, JString, required = true,
                                 default = nil)
  if valid_610790 != nil:
    section.add "DBInstanceIdentifier", valid_610790
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610791: Call_PostRemoveRoleFromDBInstance_610776; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_610791.validator(path, query, header, formData, body)
  let scheme = call_610791.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610791.url(scheme.get, call_610791.host, call_610791.base,
                         call_610791.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610791, url, valid)

proc call*(call_610792: Call_PostRemoveRoleFromDBInstance_610776;
          FeatureName: string; RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610793 = newJObject()
  var formData_610794 = newJObject()
  add(formData_610794, "FeatureName", newJString(FeatureName))
  add(formData_610794, "RoleArn", newJString(RoleArn))
  add(formData_610794, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_610793, "Action", newJString(Action))
  add(query_610793, "Version", newJString(Version))
  result = call_610792.call(nil, query_610793, nil, formData_610794, nil)

var postRemoveRoleFromDBInstance* = Call_PostRemoveRoleFromDBInstance_610776(
    name: "postRemoveRoleFromDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_PostRemoveRoleFromDBInstance_610777, base: "/",
    url: url_PostRemoveRoleFromDBInstance_610778,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBInstance_610758 = ref object of OpenApiRestCall_605589
proc url_GetRemoveRoleFromDBInstance_610760(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBInstance_610759(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_610761 = query.getOrDefault("RoleArn")
  valid_610761 = validateParameter(valid_610761, JString, required = true,
                                 default = nil)
  if valid_610761 != nil:
    section.add "RoleArn", valid_610761
  var valid_610762 = query.getOrDefault("FeatureName")
  valid_610762 = validateParameter(valid_610762, JString, required = true,
                                 default = nil)
  if valid_610762 != nil:
    section.add "FeatureName", valid_610762
  var valid_610763 = query.getOrDefault("DBInstanceIdentifier")
  valid_610763 = validateParameter(valid_610763, JString, required = true,
                                 default = nil)
  if valid_610763 != nil:
    section.add "DBInstanceIdentifier", valid_610763
  var valid_610764 = query.getOrDefault("Action")
  valid_610764 = validateParameter(valid_610764, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_610764 != nil:
    section.add "Action", valid_610764
  var valid_610765 = query.getOrDefault("Version")
  valid_610765 = validateParameter(valid_610765, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610765 != nil:
    section.add "Version", valid_610765
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610766 = header.getOrDefault("X-Amz-Signature")
  valid_610766 = validateParameter(valid_610766, JString, required = false,
                                 default = nil)
  if valid_610766 != nil:
    section.add "X-Amz-Signature", valid_610766
  var valid_610767 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610767 = validateParameter(valid_610767, JString, required = false,
                                 default = nil)
  if valid_610767 != nil:
    section.add "X-Amz-Content-Sha256", valid_610767
  var valid_610768 = header.getOrDefault("X-Amz-Date")
  valid_610768 = validateParameter(valid_610768, JString, required = false,
                                 default = nil)
  if valid_610768 != nil:
    section.add "X-Amz-Date", valid_610768
  var valid_610769 = header.getOrDefault("X-Amz-Credential")
  valid_610769 = validateParameter(valid_610769, JString, required = false,
                                 default = nil)
  if valid_610769 != nil:
    section.add "X-Amz-Credential", valid_610769
  var valid_610770 = header.getOrDefault("X-Amz-Security-Token")
  valid_610770 = validateParameter(valid_610770, JString, required = false,
                                 default = nil)
  if valid_610770 != nil:
    section.add "X-Amz-Security-Token", valid_610770
  var valid_610771 = header.getOrDefault("X-Amz-Algorithm")
  valid_610771 = validateParameter(valid_610771, JString, required = false,
                                 default = nil)
  if valid_610771 != nil:
    section.add "X-Amz-Algorithm", valid_610771
  var valid_610772 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610772 = validateParameter(valid_610772, JString, required = false,
                                 default = nil)
  if valid_610772 != nil:
    section.add "X-Amz-SignedHeaders", valid_610772
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610773: Call_GetRemoveRoleFromDBInstance_610758; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_610773.validator(path, query, header, formData, body)
  let scheme = call_610773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610773.url(scheme.get, call_610773.host, call_610773.base,
                         call_610773.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610773, url, valid)

proc call*(call_610774: Call_GetRemoveRoleFromDBInstance_610758; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610775 = newJObject()
  add(query_610775, "RoleArn", newJString(RoleArn))
  add(query_610775, "FeatureName", newJString(FeatureName))
  add(query_610775, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_610775, "Action", newJString(Action))
  add(query_610775, "Version", newJString(Version))
  result = call_610774.call(nil, query_610775, nil, nil, nil)

var getRemoveRoleFromDBInstance* = Call_GetRemoveRoleFromDBInstance_610758(
    name: "getRemoveRoleFromDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_GetRemoveRoleFromDBInstance_610759, base: "/",
    url: url_GetRemoveRoleFromDBInstance_610760,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_610812 = ref object of OpenApiRestCall_605589
proc url_PostRemoveSourceIdentifierFromSubscription_610814(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_610813(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610815 = query.getOrDefault("Action")
  valid_610815 = validateParameter(valid_610815, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_610815 != nil:
    section.add "Action", valid_610815
  var valid_610816 = query.getOrDefault("Version")
  valid_610816 = validateParameter(valid_610816, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610816 != nil:
    section.add "Version", valid_610816
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610817 = header.getOrDefault("X-Amz-Signature")
  valid_610817 = validateParameter(valid_610817, JString, required = false,
                                 default = nil)
  if valid_610817 != nil:
    section.add "X-Amz-Signature", valid_610817
  var valid_610818 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610818 = validateParameter(valid_610818, JString, required = false,
                                 default = nil)
  if valid_610818 != nil:
    section.add "X-Amz-Content-Sha256", valid_610818
  var valid_610819 = header.getOrDefault("X-Amz-Date")
  valid_610819 = validateParameter(valid_610819, JString, required = false,
                                 default = nil)
  if valid_610819 != nil:
    section.add "X-Amz-Date", valid_610819
  var valid_610820 = header.getOrDefault("X-Amz-Credential")
  valid_610820 = validateParameter(valid_610820, JString, required = false,
                                 default = nil)
  if valid_610820 != nil:
    section.add "X-Amz-Credential", valid_610820
  var valid_610821 = header.getOrDefault("X-Amz-Security-Token")
  valid_610821 = validateParameter(valid_610821, JString, required = false,
                                 default = nil)
  if valid_610821 != nil:
    section.add "X-Amz-Security-Token", valid_610821
  var valid_610822 = header.getOrDefault("X-Amz-Algorithm")
  valid_610822 = validateParameter(valid_610822, JString, required = false,
                                 default = nil)
  if valid_610822 != nil:
    section.add "X-Amz-Algorithm", valid_610822
  var valid_610823 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610823 = validateParameter(valid_610823, JString, required = false,
                                 default = nil)
  if valid_610823 != nil:
    section.add "X-Amz-SignedHeaders", valid_610823
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_610824 = formData.getOrDefault("SubscriptionName")
  valid_610824 = validateParameter(valid_610824, JString, required = true,
                                 default = nil)
  if valid_610824 != nil:
    section.add "SubscriptionName", valid_610824
  var valid_610825 = formData.getOrDefault("SourceIdentifier")
  valid_610825 = validateParameter(valid_610825, JString, required = true,
                                 default = nil)
  if valid_610825 != nil:
    section.add "SourceIdentifier", valid_610825
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610826: Call_PostRemoveSourceIdentifierFromSubscription_610812;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_610826.validator(path, query, header, formData, body)
  let scheme = call_610826.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610826.url(scheme.get, call_610826.host, call_610826.base,
                         call_610826.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610826, url, valid)

proc call*(call_610827: Call_PostRemoveSourceIdentifierFromSubscription_610812;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610828 = newJObject()
  var formData_610829 = newJObject()
  add(formData_610829, "SubscriptionName", newJString(SubscriptionName))
  add(formData_610829, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_610828, "Action", newJString(Action))
  add(query_610828, "Version", newJString(Version))
  result = call_610827.call(nil, query_610828, nil, formData_610829, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_610812(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_610813,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_610814,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_610795 = ref object of OpenApiRestCall_605589
proc url_GetRemoveSourceIdentifierFromSubscription_610797(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_610796(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_610798 = query.getOrDefault("SourceIdentifier")
  valid_610798 = validateParameter(valid_610798, JString, required = true,
                                 default = nil)
  if valid_610798 != nil:
    section.add "SourceIdentifier", valid_610798
  var valid_610799 = query.getOrDefault("SubscriptionName")
  valid_610799 = validateParameter(valid_610799, JString, required = true,
                                 default = nil)
  if valid_610799 != nil:
    section.add "SubscriptionName", valid_610799
  var valid_610800 = query.getOrDefault("Action")
  valid_610800 = validateParameter(valid_610800, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_610800 != nil:
    section.add "Action", valid_610800
  var valid_610801 = query.getOrDefault("Version")
  valid_610801 = validateParameter(valid_610801, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610801 != nil:
    section.add "Version", valid_610801
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610802 = header.getOrDefault("X-Amz-Signature")
  valid_610802 = validateParameter(valid_610802, JString, required = false,
                                 default = nil)
  if valid_610802 != nil:
    section.add "X-Amz-Signature", valid_610802
  var valid_610803 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610803 = validateParameter(valid_610803, JString, required = false,
                                 default = nil)
  if valid_610803 != nil:
    section.add "X-Amz-Content-Sha256", valid_610803
  var valid_610804 = header.getOrDefault("X-Amz-Date")
  valid_610804 = validateParameter(valid_610804, JString, required = false,
                                 default = nil)
  if valid_610804 != nil:
    section.add "X-Amz-Date", valid_610804
  var valid_610805 = header.getOrDefault("X-Amz-Credential")
  valid_610805 = validateParameter(valid_610805, JString, required = false,
                                 default = nil)
  if valid_610805 != nil:
    section.add "X-Amz-Credential", valid_610805
  var valid_610806 = header.getOrDefault("X-Amz-Security-Token")
  valid_610806 = validateParameter(valid_610806, JString, required = false,
                                 default = nil)
  if valid_610806 != nil:
    section.add "X-Amz-Security-Token", valid_610806
  var valid_610807 = header.getOrDefault("X-Amz-Algorithm")
  valid_610807 = validateParameter(valid_610807, JString, required = false,
                                 default = nil)
  if valid_610807 != nil:
    section.add "X-Amz-Algorithm", valid_610807
  var valid_610808 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610808 = validateParameter(valid_610808, JString, required = false,
                                 default = nil)
  if valid_610808 != nil:
    section.add "X-Amz-SignedHeaders", valid_610808
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610809: Call_GetRemoveSourceIdentifierFromSubscription_610795;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_610809.validator(path, query, header, formData, body)
  let scheme = call_610809.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610809.url(scheme.get, call_610809.host, call_610809.base,
                         call_610809.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610809, url, valid)

proc call*(call_610810: Call_GetRemoveSourceIdentifierFromSubscription_610795;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610811 = newJObject()
  add(query_610811, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_610811, "SubscriptionName", newJString(SubscriptionName))
  add(query_610811, "Action", newJString(Action))
  add(query_610811, "Version", newJString(Version))
  result = call_610810.call(nil, query_610811, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_610795(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_610796,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_610797,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_610847 = ref object of OpenApiRestCall_605589
proc url_PostRemoveTagsFromResource_610849(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_610848(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610850 = query.getOrDefault("Action")
  valid_610850 = validateParameter(valid_610850, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_610850 != nil:
    section.add "Action", valid_610850
  var valid_610851 = query.getOrDefault("Version")
  valid_610851 = validateParameter(valid_610851, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610851 != nil:
    section.add "Version", valid_610851
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610852 = header.getOrDefault("X-Amz-Signature")
  valid_610852 = validateParameter(valid_610852, JString, required = false,
                                 default = nil)
  if valid_610852 != nil:
    section.add "X-Amz-Signature", valid_610852
  var valid_610853 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610853 = validateParameter(valid_610853, JString, required = false,
                                 default = nil)
  if valid_610853 != nil:
    section.add "X-Amz-Content-Sha256", valid_610853
  var valid_610854 = header.getOrDefault("X-Amz-Date")
  valid_610854 = validateParameter(valid_610854, JString, required = false,
                                 default = nil)
  if valid_610854 != nil:
    section.add "X-Amz-Date", valid_610854
  var valid_610855 = header.getOrDefault("X-Amz-Credential")
  valid_610855 = validateParameter(valid_610855, JString, required = false,
                                 default = nil)
  if valid_610855 != nil:
    section.add "X-Amz-Credential", valid_610855
  var valid_610856 = header.getOrDefault("X-Amz-Security-Token")
  valid_610856 = validateParameter(valid_610856, JString, required = false,
                                 default = nil)
  if valid_610856 != nil:
    section.add "X-Amz-Security-Token", valid_610856
  var valid_610857 = header.getOrDefault("X-Amz-Algorithm")
  valid_610857 = validateParameter(valid_610857, JString, required = false,
                                 default = nil)
  if valid_610857 != nil:
    section.add "X-Amz-Algorithm", valid_610857
  var valid_610858 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610858 = validateParameter(valid_610858, JString, required = false,
                                 default = nil)
  if valid_610858 != nil:
    section.add "X-Amz-SignedHeaders", valid_610858
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_610859 = formData.getOrDefault("TagKeys")
  valid_610859 = validateParameter(valid_610859, JArray, required = true, default = nil)
  if valid_610859 != nil:
    section.add "TagKeys", valid_610859
  var valid_610860 = formData.getOrDefault("ResourceName")
  valid_610860 = validateParameter(valid_610860, JString, required = true,
                                 default = nil)
  if valid_610860 != nil:
    section.add "ResourceName", valid_610860
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610861: Call_PostRemoveTagsFromResource_610847; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_610861.validator(path, query, header, formData, body)
  let scheme = call_610861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610861.url(scheme.get, call_610861.host, call_610861.base,
                         call_610861.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610861, url, valid)

proc call*(call_610862: Call_PostRemoveTagsFromResource_610847; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  var query_610863 = newJObject()
  var formData_610864 = newJObject()
  if TagKeys != nil:
    formData_610864.add "TagKeys", TagKeys
  add(query_610863, "Action", newJString(Action))
  add(query_610863, "Version", newJString(Version))
  add(formData_610864, "ResourceName", newJString(ResourceName))
  result = call_610862.call(nil, query_610863, nil, formData_610864, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_610847(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_610848, base: "/",
    url: url_PostRemoveTagsFromResource_610849,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_610830 = ref object of OpenApiRestCall_605589
proc url_GetRemoveTagsFromResource_610832(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_610831(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_610833 = query.getOrDefault("ResourceName")
  valid_610833 = validateParameter(valid_610833, JString, required = true,
                                 default = nil)
  if valid_610833 != nil:
    section.add "ResourceName", valid_610833
  var valid_610834 = query.getOrDefault("TagKeys")
  valid_610834 = validateParameter(valid_610834, JArray, required = true, default = nil)
  if valid_610834 != nil:
    section.add "TagKeys", valid_610834
  var valid_610835 = query.getOrDefault("Action")
  valid_610835 = validateParameter(valid_610835, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_610835 != nil:
    section.add "Action", valid_610835
  var valid_610836 = query.getOrDefault("Version")
  valid_610836 = validateParameter(valid_610836, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610836 != nil:
    section.add "Version", valid_610836
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610837 = header.getOrDefault("X-Amz-Signature")
  valid_610837 = validateParameter(valid_610837, JString, required = false,
                                 default = nil)
  if valid_610837 != nil:
    section.add "X-Amz-Signature", valid_610837
  var valid_610838 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610838 = validateParameter(valid_610838, JString, required = false,
                                 default = nil)
  if valid_610838 != nil:
    section.add "X-Amz-Content-Sha256", valid_610838
  var valid_610839 = header.getOrDefault("X-Amz-Date")
  valid_610839 = validateParameter(valid_610839, JString, required = false,
                                 default = nil)
  if valid_610839 != nil:
    section.add "X-Amz-Date", valid_610839
  var valid_610840 = header.getOrDefault("X-Amz-Credential")
  valid_610840 = validateParameter(valid_610840, JString, required = false,
                                 default = nil)
  if valid_610840 != nil:
    section.add "X-Amz-Credential", valid_610840
  var valid_610841 = header.getOrDefault("X-Amz-Security-Token")
  valid_610841 = validateParameter(valid_610841, JString, required = false,
                                 default = nil)
  if valid_610841 != nil:
    section.add "X-Amz-Security-Token", valid_610841
  var valid_610842 = header.getOrDefault("X-Amz-Algorithm")
  valid_610842 = validateParameter(valid_610842, JString, required = false,
                                 default = nil)
  if valid_610842 != nil:
    section.add "X-Amz-Algorithm", valid_610842
  var valid_610843 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610843 = validateParameter(valid_610843, JString, required = false,
                                 default = nil)
  if valid_610843 != nil:
    section.add "X-Amz-SignedHeaders", valid_610843
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610844: Call_GetRemoveTagsFromResource_610830; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_610844.validator(path, query, header, formData, body)
  let scheme = call_610844.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610844.url(scheme.get, call_610844.host, call_610844.base,
                         call_610844.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610844, url, valid)

proc call*(call_610845: Call_GetRemoveTagsFromResource_610830;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610846 = newJObject()
  add(query_610846, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_610846.add "TagKeys", TagKeys
  add(query_610846, "Action", newJString(Action))
  add(query_610846, "Version", newJString(Version))
  result = call_610845.call(nil, query_610846, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_610830(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_610831, base: "/",
    url: url_GetRemoveTagsFromResource_610832,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_610883 = ref object of OpenApiRestCall_605589
proc url_PostResetDBClusterParameterGroup_610885(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBClusterParameterGroup_610884(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610886 = query.getOrDefault("Action")
  valid_610886 = validateParameter(valid_610886, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_610886 != nil:
    section.add "Action", valid_610886
  var valid_610887 = query.getOrDefault("Version")
  valid_610887 = validateParameter(valid_610887, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610887 != nil:
    section.add "Version", valid_610887
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610888 = header.getOrDefault("X-Amz-Signature")
  valid_610888 = validateParameter(valid_610888, JString, required = false,
                                 default = nil)
  if valid_610888 != nil:
    section.add "X-Amz-Signature", valid_610888
  var valid_610889 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610889 = validateParameter(valid_610889, JString, required = false,
                                 default = nil)
  if valid_610889 != nil:
    section.add "X-Amz-Content-Sha256", valid_610889
  var valid_610890 = header.getOrDefault("X-Amz-Date")
  valid_610890 = validateParameter(valid_610890, JString, required = false,
                                 default = nil)
  if valid_610890 != nil:
    section.add "X-Amz-Date", valid_610890
  var valid_610891 = header.getOrDefault("X-Amz-Credential")
  valid_610891 = validateParameter(valid_610891, JString, required = false,
                                 default = nil)
  if valid_610891 != nil:
    section.add "X-Amz-Credential", valid_610891
  var valid_610892 = header.getOrDefault("X-Amz-Security-Token")
  valid_610892 = validateParameter(valid_610892, JString, required = false,
                                 default = nil)
  if valid_610892 != nil:
    section.add "X-Amz-Security-Token", valid_610892
  var valid_610893 = header.getOrDefault("X-Amz-Algorithm")
  valid_610893 = validateParameter(valid_610893, JString, required = false,
                                 default = nil)
  if valid_610893 != nil:
    section.add "X-Amz-Algorithm", valid_610893
  var valid_610894 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610894 = validateParameter(valid_610894, JString, required = false,
                                 default = nil)
  if valid_610894 != nil:
    section.add "X-Amz-SignedHeaders", valid_610894
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  section = newJObject()
  var valid_610895 = formData.getOrDefault("ResetAllParameters")
  valid_610895 = validateParameter(valid_610895, JBool, required = false, default = nil)
  if valid_610895 != nil:
    section.add "ResetAllParameters", valid_610895
  var valid_610896 = formData.getOrDefault("Parameters")
  valid_610896 = validateParameter(valid_610896, JArray, required = false,
                                 default = nil)
  if valid_610896 != nil:
    section.add "Parameters", valid_610896
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_610897 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_610897 = validateParameter(valid_610897, JString, required = true,
                                 default = nil)
  if valid_610897 != nil:
    section.add "DBClusterParameterGroupName", valid_610897
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610898: Call_PostResetDBClusterParameterGroup_610883;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610898.validator(path, query, header, formData, body)
  let scheme = call_610898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610898.url(scheme.get, call_610898.host, call_610898.base,
                         call_610898.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610898, url, valid)

proc call*(call_610899: Call_PostResetDBClusterParameterGroup_610883;
          DBClusterParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Parameters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Version: string (required)
  var query_610900 = newJObject()
  var formData_610901 = newJObject()
  add(formData_610901, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_610900, "Action", newJString(Action))
  if Parameters != nil:
    formData_610901.add "Parameters", Parameters
  add(formData_610901, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_610900, "Version", newJString(Version))
  result = call_610899.call(nil, query_610900, nil, formData_610901, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_610883(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_610884, base: "/",
    url: url_PostResetDBClusterParameterGroup_610885,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_610865 = ref object of OpenApiRestCall_605589
proc url_GetResetDBClusterParameterGroup_610867(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBClusterParameterGroup_610866(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610868 = query.getOrDefault("Parameters")
  valid_610868 = validateParameter(valid_610868, JArray, required = false,
                                 default = nil)
  if valid_610868 != nil:
    section.add "Parameters", valid_610868
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_610869 = query.getOrDefault("DBClusterParameterGroupName")
  valid_610869 = validateParameter(valid_610869, JString, required = true,
                                 default = nil)
  if valid_610869 != nil:
    section.add "DBClusterParameterGroupName", valid_610869
  var valid_610870 = query.getOrDefault("ResetAllParameters")
  valid_610870 = validateParameter(valid_610870, JBool, required = false, default = nil)
  if valid_610870 != nil:
    section.add "ResetAllParameters", valid_610870
  var valid_610871 = query.getOrDefault("Action")
  valid_610871 = validateParameter(valid_610871, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_610871 != nil:
    section.add "Action", valid_610871
  var valid_610872 = query.getOrDefault("Version")
  valid_610872 = validateParameter(valid_610872, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610872 != nil:
    section.add "Version", valid_610872
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610873 = header.getOrDefault("X-Amz-Signature")
  valid_610873 = validateParameter(valid_610873, JString, required = false,
                                 default = nil)
  if valid_610873 != nil:
    section.add "X-Amz-Signature", valid_610873
  var valid_610874 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610874 = validateParameter(valid_610874, JString, required = false,
                                 default = nil)
  if valid_610874 != nil:
    section.add "X-Amz-Content-Sha256", valid_610874
  var valid_610875 = header.getOrDefault("X-Amz-Date")
  valid_610875 = validateParameter(valid_610875, JString, required = false,
                                 default = nil)
  if valid_610875 != nil:
    section.add "X-Amz-Date", valid_610875
  var valid_610876 = header.getOrDefault("X-Amz-Credential")
  valid_610876 = validateParameter(valid_610876, JString, required = false,
                                 default = nil)
  if valid_610876 != nil:
    section.add "X-Amz-Credential", valid_610876
  var valid_610877 = header.getOrDefault("X-Amz-Security-Token")
  valid_610877 = validateParameter(valid_610877, JString, required = false,
                                 default = nil)
  if valid_610877 != nil:
    section.add "X-Amz-Security-Token", valid_610877
  var valid_610878 = header.getOrDefault("X-Amz-Algorithm")
  valid_610878 = validateParameter(valid_610878, JString, required = false,
                                 default = nil)
  if valid_610878 != nil:
    section.add "X-Amz-Algorithm", valid_610878
  var valid_610879 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610879 = validateParameter(valid_610879, JString, required = false,
                                 default = nil)
  if valid_610879 != nil:
    section.add "X-Amz-SignedHeaders", valid_610879
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610880: Call_GetResetDBClusterParameterGroup_610865;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610880.validator(path, query, header, formData, body)
  let scheme = call_610880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610880.url(scheme.get, call_610880.host, call_610880.base,
                         call_610880.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610880, url, valid)

proc call*(call_610881: Call_GetResetDBClusterParameterGroup_610865;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610882 = newJObject()
  if Parameters != nil:
    query_610882.add "Parameters", Parameters
  add(query_610882, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_610882, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_610882, "Action", newJString(Action))
  add(query_610882, "Version", newJString(Version))
  result = call_610881.call(nil, query_610882, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_610865(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_610866, base: "/",
    url: url_GetResetDBClusterParameterGroup_610867,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_610920 = ref object of OpenApiRestCall_605589
proc url_PostResetDBParameterGroup_610922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBParameterGroup_610921(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610923 = query.getOrDefault("Action")
  valid_610923 = validateParameter(valid_610923, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_610923 != nil:
    section.add "Action", valid_610923
  var valid_610924 = query.getOrDefault("Version")
  valid_610924 = validateParameter(valid_610924, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610924 != nil:
    section.add "Version", valid_610924
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610925 = header.getOrDefault("X-Amz-Signature")
  valid_610925 = validateParameter(valid_610925, JString, required = false,
                                 default = nil)
  if valid_610925 != nil:
    section.add "X-Amz-Signature", valid_610925
  var valid_610926 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610926 = validateParameter(valid_610926, JString, required = false,
                                 default = nil)
  if valid_610926 != nil:
    section.add "X-Amz-Content-Sha256", valid_610926
  var valid_610927 = header.getOrDefault("X-Amz-Date")
  valid_610927 = validateParameter(valid_610927, JString, required = false,
                                 default = nil)
  if valid_610927 != nil:
    section.add "X-Amz-Date", valid_610927
  var valid_610928 = header.getOrDefault("X-Amz-Credential")
  valid_610928 = validateParameter(valid_610928, JString, required = false,
                                 default = nil)
  if valid_610928 != nil:
    section.add "X-Amz-Credential", valid_610928
  var valid_610929 = header.getOrDefault("X-Amz-Security-Token")
  valid_610929 = validateParameter(valid_610929, JString, required = false,
                                 default = nil)
  if valid_610929 != nil:
    section.add "X-Amz-Security-Token", valid_610929
  var valid_610930 = header.getOrDefault("X-Amz-Algorithm")
  valid_610930 = validateParameter(valid_610930, JString, required = false,
                                 default = nil)
  if valid_610930 != nil:
    section.add "X-Amz-Algorithm", valid_610930
  var valid_610931 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610931 = validateParameter(valid_610931, JString, required = false,
                                 default = nil)
  if valid_610931 != nil:
    section.add "X-Amz-SignedHeaders", valid_610931
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  section = newJObject()
  var valid_610932 = formData.getOrDefault("ResetAllParameters")
  valid_610932 = validateParameter(valid_610932, JBool, required = false, default = nil)
  if valid_610932 != nil:
    section.add "ResetAllParameters", valid_610932
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_610933 = formData.getOrDefault("DBParameterGroupName")
  valid_610933 = validateParameter(valid_610933, JString, required = true,
                                 default = nil)
  if valid_610933 != nil:
    section.add "DBParameterGroupName", valid_610933
  var valid_610934 = formData.getOrDefault("Parameters")
  valid_610934 = validateParameter(valid_610934, JArray, required = false,
                                 default = nil)
  if valid_610934 != nil:
    section.add "Parameters", valid_610934
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610935: Call_PostResetDBParameterGroup_610920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_610935.validator(path, query, header, formData, body)
  let scheme = call_610935.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610935.url(scheme.get, call_610935.host, call_610935.base,
                         call_610935.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610935, url, valid)

proc call*(call_610936: Call_PostResetDBParameterGroup_610920;
          DBParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Parameters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Version: string (required)
  var query_610937 = newJObject()
  var formData_610938 = newJObject()
  add(formData_610938, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_610938, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_610937, "Action", newJString(Action))
  if Parameters != nil:
    formData_610938.add "Parameters", Parameters
  add(query_610937, "Version", newJString(Version))
  result = call_610936.call(nil, query_610937, nil, formData_610938, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_610920(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_610921, base: "/",
    url: url_PostResetDBParameterGroup_610922,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_610902 = ref object of OpenApiRestCall_605589
proc url_GetResetDBParameterGroup_610904(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBParameterGroup_610903(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_610905 = query.getOrDefault("DBParameterGroupName")
  valid_610905 = validateParameter(valid_610905, JString, required = true,
                                 default = nil)
  if valid_610905 != nil:
    section.add "DBParameterGroupName", valid_610905
  var valid_610906 = query.getOrDefault("Parameters")
  valid_610906 = validateParameter(valid_610906, JArray, required = false,
                                 default = nil)
  if valid_610906 != nil:
    section.add "Parameters", valid_610906
  var valid_610907 = query.getOrDefault("ResetAllParameters")
  valid_610907 = validateParameter(valid_610907, JBool, required = false, default = nil)
  if valid_610907 != nil:
    section.add "ResetAllParameters", valid_610907
  var valid_610908 = query.getOrDefault("Action")
  valid_610908 = validateParameter(valid_610908, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_610908 != nil:
    section.add "Action", valid_610908
  var valid_610909 = query.getOrDefault("Version")
  valid_610909 = validateParameter(valid_610909, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610909 != nil:
    section.add "Version", valid_610909
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610910 = header.getOrDefault("X-Amz-Signature")
  valid_610910 = validateParameter(valid_610910, JString, required = false,
                                 default = nil)
  if valid_610910 != nil:
    section.add "X-Amz-Signature", valid_610910
  var valid_610911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610911 = validateParameter(valid_610911, JString, required = false,
                                 default = nil)
  if valid_610911 != nil:
    section.add "X-Amz-Content-Sha256", valid_610911
  var valid_610912 = header.getOrDefault("X-Amz-Date")
  valid_610912 = validateParameter(valid_610912, JString, required = false,
                                 default = nil)
  if valid_610912 != nil:
    section.add "X-Amz-Date", valid_610912
  var valid_610913 = header.getOrDefault("X-Amz-Credential")
  valid_610913 = validateParameter(valid_610913, JString, required = false,
                                 default = nil)
  if valid_610913 != nil:
    section.add "X-Amz-Credential", valid_610913
  var valid_610914 = header.getOrDefault("X-Amz-Security-Token")
  valid_610914 = validateParameter(valid_610914, JString, required = false,
                                 default = nil)
  if valid_610914 != nil:
    section.add "X-Amz-Security-Token", valid_610914
  var valid_610915 = header.getOrDefault("X-Amz-Algorithm")
  valid_610915 = validateParameter(valid_610915, JString, required = false,
                                 default = nil)
  if valid_610915 != nil:
    section.add "X-Amz-Algorithm", valid_610915
  var valid_610916 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610916 = validateParameter(valid_610916, JString, required = false,
                                 default = nil)
  if valid_610916 != nil:
    section.add "X-Amz-SignedHeaders", valid_610916
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610917: Call_GetResetDBParameterGroup_610902; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_610917.validator(path, query, header, formData, body)
  let scheme = call_610917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610917.url(scheme.get, call_610917.host, call_610917.base,
                         call_610917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610917, url, valid)

proc call*(call_610918: Call_GetResetDBParameterGroup_610902;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610919 = newJObject()
  add(query_610919, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_610919.add "Parameters", Parameters
  add(query_610919, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_610919, "Action", newJString(Action))
  add(query_610919, "Version", newJString(Version))
  result = call_610918.call(nil, query_610919, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_610902(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_610903, base: "/",
    url: url_GetResetDBParameterGroup_610904, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromS3_610983 = ref object of OpenApiRestCall_605589
proc url_PostRestoreDBClusterFromS3_610985(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromS3_610984(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610986 = query.getOrDefault("Action")
  valid_610986 = validateParameter(valid_610986, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_610986 != nil:
    section.add "Action", valid_610986
  var valid_610987 = query.getOrDefault("Version")
  valid_610987 = validateParameter(valid_610987, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610987 != nil:
    section.add "Version", valid_610987
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610988 = header.getOrDefault("X-Amz-Signature")
  valid_610988 = validateParameter(valid_610988, JString, required = false,
                                 default = nil)
  if valid_610988 != nil:
    section.add "X-Amz-Signature", valid_610988
  var valid_610989 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610989 = validateParameter(valid_610989, JString, required = false,
                                 default = nil)
  if valid_610989 != nil:
    section.add "X-Amz-Content-Sha256", valid_610989
  var valid_610990 = header.getOrDefault("X-Amz-Date")
  valid_610990 = validateParameter(valid_610990, JString, required = false,
                                 default = nil)
  if valid_610990 != nil:
    section.add "X-Amz-Date", valid_610990
  var valid_610991 = header.getOrDefault("X-Amz-Credential")
  valid_610991 = validateParameter(valid_610991, JString, required = false,
                                 default = nil)
  if valid_610991 != nil:
    section.add "X-Amz-Credential", valid_610991
  var valid_610992 = header.getOrDefault("X-Amz-Security-Token")
  valid_610992 = validateParameter(valid_610992, JString, required = false,
                                 default = nil)
  if valid_610992 != nil:
    section.add "X-Amz-Security-Token", valid_610992
  var valid_610993 = header.getOrDefault("X-Amz-Algorithm")
  valid_610993 = validateParameter(valid_610993, JString, required = false,
                                 default = nil)
  if valid_610993 != nil:
    section.add "X-Amz-Algorithm", valid_610993
  var valid_610994 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610994 = validateParameter(valid_610994, JString, required = false,
                                 default = nil)
  if valid_610994 != nil:
    section.add "X-Amz-SignedHeaders", valid_610994
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_610995 = formData.getOrDefault("S3Prefix")
  valid_610995 = validateParameter(valid_610995, JString, required = false,
                                 default = nil)
  if valid_610995 != nil:
    section.add "S3Prefix", valid_610995
  var valid_610996 = formData.getOrDefault("Port")
  valid_610996 = validateParameter(valid_610996, JInt, required = false, default = nil)
  if valid_610996 != nil:
    section.add "Port", valid_610996
  var valid_610997 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_610997 = validateParameter(valid_610997, JString, required = false,
                                 default = nil)
  if valid_610997 != nil:
    section.add "PreferredMaintenanceWindow", valid_610997
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_610998 = formData.getOrDefault("S3IngestionRoleArn")
  valid_610998 = validateParameter(valid_610998, JString, required = true,
                                 default = nil)
  if valid_610998 != nil:
    section.add "S3IngestionRoleArn", valid_610998
  var valid_610999 = formData.getOrDefault("PreferredBackupWindow")
  valid_610999 = validateParameter(valid_610999, JString, required = false,
                                 default = nil)
  if valid_610999 != nil:
    section.add "PreferredBackupWindow", valid_610999
  var valid_611000 = formData.getOrDefault("MasterUserPassword")
  valid_611000 = validateParameter(valid_611000, JString, required = true,
                                 default = nil)
  if valid_611000 != nil:
    section.add "MasterUserPassword", valid_611000
  var valid_611001 = formData.getOrDefault("MasterUsername")
  valid_611001 = validateParameter(valid_611001, JString, required = true,
                                 default = nil)
  if valid_611001 != nil:
    section.add "MasterUsername", valid_611001
  var valid_611002 = formData.getOrDefault("SourceEngine")
  valid_611002 = validateParameter(valid_611002, JString, required = true,
                                 default = nil)
  if valid_611002 != nil:
    section.add "SourceEngine", valid_611002
  var valid_611003 = formData.getOrDefault("EngineVersion")
  valid_611003 = validateParameter(valid_611003, JString, required = false,
                                 default = nil)
  if valid_611003 != nil:
    section.add "EngineVersion", valid_611003
  var valid_611004 = formData.getOrDefault("BacktrackWindow")
  valid_611004 = validateParameter(valid_611004, JInt, required = false, default = nil)
  if valid_611004 != nil:
    section.add "BacktrackWindow", valid_611004
  var valid_611005 = formData.getOrDefault("DatabaseName")
  valid_611005 = validateParameter(valid_611005, JString, required = false,
                                 default = nil)
  if valid_611005 != nil:
    section.add "DatabaseName", valid_611005
  var valid_611006 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_611006 = validateParameter(valid_611006, JArray, required = false,
                                 default = nil)
  if valid_611006 != nil:
    section.add "VpcSecurityGroupIds", valid_611006
  var valid_611007 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611007 = validateParameter(valid_611007, JBool, required = false, default = nil)
  if valid_611007 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611007
  var valid_611008 = formData.getOrDefault("AvailabilityZones")
  valid_611008 = validateParameter(valid_611008, JArray, required = false,
                                 default = nil)
  if valid_611008 != nil:
    section.add "AvailabilityZones", valid_611008
  var valid_611009 = formData.getOrDefault("BackupRetentionPeriod")
  valid_611009 = validateParameter(valid_611009, JInt, required = false, default = nil)
  if valid_611009 != nil:
    section.add "BackupRetentionPeriod", valid_611009
  var valid_611010 = formData.getOrDefault("Engine")
  valid_611010 = validateParameter(valid_611010, JString, required = true,
                                 default = nil)
  if valid_611010 != nil:
    section.add "Engine", valid_611010
  var valid_611011 = formData.getOrDefault("KmsKeyId")
  valid_611011 = validateParameter(valid_611011, JString, required = false,
                                 default = nil)
  if valid_611011 != nil:
    section.add "KmsKeyId", valid_611011
  var valid_611012 = formData.getOrDefault("S3BucketName")
  valid_611012 = validateParameter(valid_611012, JString, required = true,
                                 default = nil)
  if valid_611012 != nil:
    section.add "S3BucketName", valid_611012
  var valid_611013 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_611013 = validateParameter(valid_611013, JArray, required = false,
                                 default = nil)
  if valid_611013 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611013
  var valid_611014 = formData.getOrDefault("SourceEngineVersion")
  valid_611014 = validateParameter(valid_611014, JString, required = true,
                                 default = nil)
  if valid_611014 != nil:
    section.add "SourceEngineVersion", valid_611014
  var valid_611015 = formData.getOrDefault("Tags")
  valid_611015 = validateParameter(valid_611015, JArray, required = false,
                                 default = nil)
  if valid_611015 != nil:
    section.add "Tags", valid_611015
  var valid_611016 = formData.getOrDefault("DBSubnetGroupName")
  valid_611016 = validateParameter(valid_611016, JString, required = false,
                                 default = nil)
  if valid_611016 != nil:
    section.add "DBSubnetGroupName", valid_611016
  var valid_611017 = formData.getOrDefault("OptionGroupName")
  valid_611017 = validateParameter(valid_611017, JString, required = false,
                                 default = nil)
  if valid_611017 != nil:
    section.add "OptionGroupName", valid_611017
  var valid_611018 = formData.getOrDefault("CharacterSetName")
  valid_611018 = validateParameter(valid_611018, JString, required = false,
                                 default = nil)
  if valid_611018 != nil:
    section.add "CharacterSetName", valid_611018
  var valid_611019 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_611019 = validateParameter(valid_611019, JString, required = false,
                                 default = nil)
  if valid_611019 != nil:
    section.add "DBClusterParameterGroupName", valid_611019
  var valid_611020 = formData.getOrDefault("StorageEncrypted")
  valid_611020 = validateParameter(valid_611020, JBool, required = false, default = nil)
  if valid_611020 != nil:
    section.add "StorageEncrypted", valid_611020
  var valid_611021 = formData.getOrDefault("DBClusterIdentifier")
  valid_611021 = validateParameter(valid_611021, JString, required = true,
                                 default = nil)
  if valid_611021 != nil:
    section.add "DBClusterIdentifier", valid_611021
  var valid_611022 = formData.getOrDefault("DeletionProtection")
  valid_611022 = validateParameter(valid_611022, JBool, required = false, default = nil)
  if valid_611022 != nil:
    section.add "DeletionProtection", valid_611022
  var valid_611023 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_611023 = validateParameter(valid_611023, JBool, required = false, default = nil)
  if valid_611023 != nil:
    section.add "CopyTagsToSnapshot", valid_611023
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611024: Call_PostRestoreDBClusterFromS3_610983; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611024.validator(path, query, header, formData, body)
  let scheme = call_611024.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611024.url(scheme.get, call_611024.host, call_611024.base,
                         call_611024.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611024, url, valid)

proc call*(call_611025: Call_PostRestoreDBClusterFromS3_610983;
          S3IngestionRoleArn: string; MasterUserPassword: string;
          MasterUsername: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string;
          DBClusterIdentifier: string; S3Prefix: string = ""; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          BacktrackWindow: int = 0; DatabaseName: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          KmsKeyId: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterFromS3"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_611026 = newJObject()
  var formData_611027 = newJObject()
  add(formData_611027, "S3Prefix", newJString(S3Prefix))
  add(formData_611027, "Port", newJInt(Port))
  add(formData_611027, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_611027, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_611027, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_611027, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_611027, "MasterUsername", newJString(MasterUsername))
  add(formData_611027, "SourceEngine", newJString(SourceEngine))
  add(formData_611027, "EngineVersion", newJString(EngineVersion))
  add(formData_611027, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_611027, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_611027.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_611027, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_611027.add "AvailabilityZones", AvailabilityZones
  add(formData_611027, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_611027, "Engine", newJString(Engine))
  add(formData_611027, "KmsKeyId", newJString(KmsKeyId))
  add(formData_611027, "S3BucketName", newJString(S3BucketName))
  if EnableCloudwatchLogsExports != nil:
    formData_611027.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_611027, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_611026, "Action", newJString(Action))
  if Tags != nil:
    formData_611027.add "Tags", Tags
  add(formData_611027, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_611027, "OptionGroupName", newJString(OptionGroupName))
  add(formData_611027, "CharacterSetName", newJString(CharacterSetName))
  add(formData_611027, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_611026, "Version", newJString(Version))
  add(formData_611027, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_611027, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_611027, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_611027, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_611025.call(nil, query_611026, nil, formData_611027, nil)

var postRestoreDBClusterFromS3* = Call_PostRestoreDBClusterFromS3_610983(
    name: "postRestoreDBClusterFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_PostRestoreDBClusterFromS3_610984, base: "/",
    url: url_PostRestoreDBClusterFromS3_610985,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromS3_610939 = ref object of OpenApiRestCall_605589
proc url_GetRestoreDBClusterFromS3_610941(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromS3_610940(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: JString (required)
  section = newJObject()
  var valid_610942 = query.getOrDefault("DatabaseName")
  valid_610942 = validateParameter(valid_610942, JString, required = false,
                                 default = nil)
  if valid_610942 != nil:
    section.add "DatabaseName", valid_610942
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_610943 = query.getOrDefault("SourceEngineVersion")
  valid_610943 = validateParameter(valid_610943, JString, required = true,
                                 default = nil)
  if valid_610943 != nil:
    section.add "SourceEngineVersion", valid_610943
  var valid_610944 = query.getOrDefault("StorageEncrypted")
  valid_610944 = validateParameter(valid_610944, JBool, required = false, default = nil)
  if valid_610944 != nil:
    section.add "StorageEncrypted", valid_610944
  var valid_610945 = query.getOrDefault("Engine")
  valid_610945 = validateParameter(valid_610945, JString, required = true,
                                 default = nil)
  if valid_610945 != nil:
    section.add "Engine", valid_610945
  var valid_610946 = query.getOrDefault("SourceEngine")
  valid_610946 = validateParameter(valid_610946, JString, required = true,
                                 default = nil)
  if valid_610946 != nil:
    section.add "SourceEngine", valid_610946
  var valid_610947 = query.getOrDefault("DeletionProtection")
  valid_610947 = validateParameter(valid_610947, JBool, required = false, default = nil)
  if valid_610947 != nil:
    section.add "DeletionProtection", valid_610947
  var valid_610948 = query.getOrDefault("CharacterSetName")
  valid_610948 = validateParameter(valid_610948, JString, required = false,
                                 default = nil)
  if valid_610948 != nil:
    section.add "CharacterSetName", valid_610948
  var valid_610949 = query.getOrDefault("S3Prefix")
  valid_610949 = validateParameter(valid_610949, JString, required = false,
                                 default = nil)
  if valid_610949 != nil:
    section.add "S3Prefix", valid_610949
  var valid_610950 = query.getOrDefault("CopyTagsToSnapshot")
  valid_610950 = validateParameter(valid_610950, JBool, required = false, default = nil)
  if valid_610950 != nil:
    section.add "CopyTagsToSnapshot", valid_610950
  var valid_610951 = query.getOrDefault("Tags")
  valid_610951 = validateParameter(valid_610951, JArray, required = false,
                                 default = nil)
  if valid_610951 != nil:
    section.add "Tags", valid_610951
  var valid_610952 = query.getOrDefault("KmsKeyId")
  valid_610952 = validateParameter(valid_610952, JString, required = false,
                                 default = nil)
  if valid_610952 != nil:
    section.add "KmsKeyId", valid_610952
  var valid_610953 = query.getOrDefault("DBClusterIdentifier")
  valid_610953 = validateParameter(valid_610953, JString, required = true,
                                 default = nil)
  if valid_610953 != nil:
    section.add "DBClusterIdentifier", valid_610953
  var valid_610954 = query.getOrDefault("BacktrackWindow")
  valid_610954 = validateParameter(valid_610954, JInt, required = false, default = nil)
  if valid_610954 != nil:
    section.add "BacktrackWindow", valid_610954
  var valid_610955 = query.getOrDefault("DBClusterParameterGroupName")
  valid_610955 = validateParameter(valid_610955, JString, required = false,
                                 default = nil)
  if valid_610955 != nil:
    section.add "DBClusterParameterGroupName", valid_610955
  var valid_610956 = query.getOrDefault("S3BucketName")
  valid_610956 = validateParameter(valid_610956, JString, required = true,
                                 default = nil)
  if valid_610956 != nil:
    section.add "S3BucketName", valid_610956
  var valid_610957 = query.getOrDefault("AvailabilityZones")
  valid_610957 = validateParameter(valid_610957, JArray, required = false,
                                 default = nil)
  if valid_610957 != nil:
    section.add "AvailabilityZones", valid_610957
  var valid_610958 = query.getOrDefault("MasterUsername")
  valid_610958 = validateParameter(valid_610958, JString, required = true,
                                 default = nil)
  if valid_610958 != nil:
    section.add "MasterUsername", valid_610958
  var valid_610959 = query.getOrDefault("BackupRetentionPeriod")
  valid_610959 = validateParameter(valid_610959, JInt, required = false, default = nil)
  if valid_610959 != nil:
    section.add "BackupRetentionPeriod", valid_610959
  var valid_610960 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_610960 = validateParameter(valid_610960, JBool, required = false, default = nil)
  if valid_610960 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_610960
  var valid_610961 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_610961 = validateParameter(valid_610961, JArray, required = false,
                                 default = nil)
  if valid_610961 != nil:
    section.add "EnableCloudwatchLogsExports", valid_610961
  var valid_610962 = query.getOrDefault("EngineVersion")
  valid_610962 = validateParameter(valid_610962, JString, required = false,
                                 default = nil)
  if valid_610962 != nil:
    section.add "EngineVersion", valid_610962
  var valid_610963 = query.getOrDefault("Action")
  valid_610963 = validateParameter(valid_610963, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_610963 != nil:
    section.add "Action", valid_610963
  var valid_610964 = query.getOrDefault("Port")
  valid_610964 = validateParameter(valid_610964, JInt, required = false, default = nil)
  if valid_610964 != nil:
    section.add "Port", valid_610964
  var valid_610965 = query.getOrDefault("VpcSecurityGroupIds")
  valid_610965 = validateParameter(valid_610965, JArray, required = false,
                                 default = nil)
  if valid_610965 != nil:
    section.add "VpcSecurityGroupIds", valid_610965
  var valid_610966 = query.getOrDefault("MasterUserPassword")
  valid_610966 = validateParameter(valid_610966, JString, required = true,
                                 default = nil)
  if valid_610966 != nil:
    section.add "MasterUserPassword", valid_610966
  var valid_610967 = query.getOrDefault("OptionGroupName")
  valid_610967 = validateParameter(valid_610967, JString, required = false,
                                 default = nil)
  if valid_610967 != nil:
    section.add "OptionGroupName", valid_610967
  var valid_610968 = query.getOrDefault("DBSubnetGroupName")
  valid_610968 = validateParameter(valid_610968, JString, required = false,
                                 default = nil)
  if valid_610968 != nil:
    section.add "DBSubnetGroupName", valid_610968
  var valid_610969 = query.getOrDefault("PreferredBackupWindow")
  valid_610969 = validateParameter(valid_610969, JString, required = false,
                                 default = nil)
  if valid_610969 != nil:
    section.add "PreferredBackupWindow", valid_610969
  var valid_610970 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_610970 = validateParameter(valid_610970, JString, required = false,
                                 default = nil)
  if valid_610970 != nil:
    section.add "PreferredMaintenanceWindow", valid_610970
  var valid_610971 = query.getOrDefault("S3IngestionRoleArn")
  valid_610971 = validateParameter(valid_610971, JString, required = true,
                                 default = nil)
  if valid_610971 != nil:
    section.add "S3IngestionRoleArn", valid_610971
  var valid_610972 = query.getOrDefault("Version")
  valid_610972 = validateParameter(valid_610972, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610972 != nil:
    section.add "Version", valid_610972
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610973 = header.getOrDefault("X-Amz-Signature")
  valid_610973 = validateParameter(valid_610973, JString, required = false,
                                 default = nil)
  if valid_610973 != nil:
    section.add "X-Amz-Signature", valid_610973
  var valid_610974 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610974 = validateParameter(valid_610974, JString, required = false,
                                 default = nil)
  if valid_610974 != nil:
    section.add "X-Amz-Content-Sha256", valid_610974
  var valid_610975 = header.getOrDefault("X-Amz-Date")
  valid_610975 = validateParameter(valid_610975, JString, required = false,
                                 default = nil)
  if valid_610975 != nil:
    section.add "X-Amz-Date", valid_610975
  var valid_610976 = header.getOrDefault("X-Amz-Credential")
  valid_610976 = validateParameter(valid_610976, JString, required = false,
                                 default = nil)
  if valid_610976 != nil:
    section.add "X-Amz-Credential", valid_610976
  var valid_610977 = header.getOrDefault("X-Amz-Security-Token")
  valid_610977 = validateParameter(valid_610977, JString, required = false,
                                 default = nil)
  if valid_610977 != nil:
    section.add "X-Amz-Security-Token", valid_610977
  var valid_610978 = header.getOrDefault("X-Amz-Algorithm")
  valid_610978 = validateParameter(valid_610978, JString, required = false,
                                 default = nil)
  if valid_610978 != nil:
    section.add "X-Amz-Algorithm", valid_610978
  var valid_610979 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610979 = validateParameter(valid_610979, JString, required = false,
                                 default = nil)
  if valid_610979 != nil:
    section.add "X-Amz-SignedHeaders", valid_610979
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610980: Call_GetRestoreDBClusterFromS3_610939; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610980.validator(path, query, header, formData, body)
  let scheme = call_610980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610980.url(scheme.get, call_610980.host, call_610980.base,
                         call_610980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610980, url, valid)

proc call*(call_610981: Call_GetRestoreDBClusterFromS3_610939;
          SourceEngineVersion: string; Engine: string; SourceEngine: string;
          DBClusterIdentifier: string; S3BucketName: string; MasterUsername: string;
          MasterUserPassword: string; S3IngestionRoleArn: string;
          DatabaseName: string = ""; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CharacterSetName: string = "";
          S3Prefix: string = ""; CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil;
          KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromS3"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: string (required)
  var query_610982 = newJObject()
  add(query_610982, "DatabaseName", newJString(DatabaseName))
  add(query_610982, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_610982, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_610982, "Engine", newJString(Engine))
  add(query_610982, "SourceEngine", newJString(SourceEngine))
  add(query_610982, "DeletionProtection", newJBool(DeletionProtection))
  add(query_610982, "CharacterSetName", newJString(CharacterSetName))
  add(query_610982, "S3Prefix", newJString(S3Prefix))
  add(query_610982, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_610982.add "Tags", Tags
  add(query_610982, "KmsKeyId", newJString(KmsKeyId))
  add(query_610982, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_610982, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_610982, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_610982, "S3BucketName", newJString(S3BucketName))
  if AvailabilityZones != nil:
    query_610982.add "AvailabilityZones", AvailabilityZones
  add(query_610982, "MasterUsername", newJString(MasterUsername))
  add(query_610982, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_610982, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_610982.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_610982, "EngineVersion", newJString(EngineVersion))
  add(query_610982, "Action", newJString(Action))
  add(query_610982, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_610982.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_610982, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_610982, "OptionGroupName", newJString(OptionGroupName))
  add(query_610982, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_610982, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_610982, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_610982, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_610982, "Version", newJString(Version))
  result = call_610981.call(nil, query_610982, nil, nil, nil)

var getRestoreDBClusterFromS3* = Call_GetRestoreDBClusterFromS3_610939(
    name: "getRestoreDBClusterFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_GetRestoreDBClusterFromS3_610940, base: "/",
    url: url_GetRestoreDBClusterFromS3_610941,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_611067 = ref object of OpenApiRestCall_605589
proc url_PostRestoreDBClusterFromSnapshot_611069(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_611068(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611070 = query.getOrDefault("Action")
  valid_611070 = validateParameter(valid_611070, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_611070 != nil:
    section.add "Action", valid_611070
  var valid_611071 = query.getOrDefault("Version")
  valid_611071 = validateParameter(valid_611071, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611071 != nil:
    section.add "Version", valid_611071
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611072 = header.getOrDefault("X-Amz-Signature")
  valid_611072 = validateParameter(valid_611072, JString, required = false,
                                 default = nil)
  if valid_611072 != nil:
    section.add "X-Amz-Signature", valid_611072
  var valid_611073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611073 = validateParameter(valid_611073, JString, required = false,
                                 default = nil)
  if valid_611073 != nil:
    section.add "X-Amz-Content-Sha256", valid_611073
  var valid_611074 = header.getOrDefault("X-Amz-Date")
  valid_611074 = validateParameter(valid_611074, JString, required = false,
                                 default = nil)
  if valid_611074 != nil:
    section.add "X-Amz-Date", valid_611074
  var valid_611075 = header.getOrDefault("X-Amz-Credential")
  valid_611075 = validateParameter(valid_611075, JString, required = false,
                                 default = nil)
  if valid_611075 != nil:
    section.add "X-Amz-Credential", valid_611075
  var valid_611076 = header.getOrDefault("X-Amz-Security-Token")
  valid_611076 = validateParameter(valid_611076, JString, required = false,
                                 default = nil)
  if valid_611076 != nil:
    section.add "X-Amz-Security-Token", valid_611076
  var valid_611077 = header.getOrDefault("X-Amz-Algorithm")
  valid_611077 = validateParameter(valid_611077, JString, required = false,
                                 default = nil)
  if valid_611077 != nil:
    section.add "X-Amz-Algorithm", valid_611077
  var valid_611078 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611078 = validateParameter(valid_611078, JString, required = false,
                                 default = nil)
  if valid_611078 != nil:
    section.add "X-Amz-SignedHeaders", valid_611078
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_611079 = formData.getOrDefault("Port")
  valid_611079 = validateParameter(valid_611079, JInt, required = false, default = nil)
  if valid_611079 != nil:
    section.add "Port", valid_611079
  var valid_611080 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_611080 = validateParameter(valid_611080, JString, required = false,
                                 default = nil)
  if valid_611080 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_611080
  var valid_611081 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_611081 = validateParameter(valid_611081, JString, required = false,
                                 default = nil)
  if valid_611081 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_611081
  var valid_611082 = formData.getOrDefault("EngineVersion")
  valid_611082 = validateParameter(valid_611082, JString, required = false,
                                 default = nil)
  if valid_611082 != nil:
    section.add "EngineVersion", valid_611082
  var valid_611083 = formData.getOrDefault("BacktrackWindow")
  valid_611083 = validateParameter(valid_611083, JInt, required = false, default = nil)
  if valid_611083 != nil:
    section.add "BacktrackWindow", valid_611083
  var valid_611084 = formData.getOrDefault("DatabaseName")
  valid_611084 = validateParameter(valid_611084, JString, required = false,
                                 default = nil)
  if valid_611084 != nil:
    section.add "DatabaseName", valid_611084
  var valid_611085 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_611085 = validateParameter(valid_611085, JArray, required = false,
                                 default = nil)
  if valid_611085 != nil:
    section.add "VpcSecurityGroupIds", valid_611085
  var valid_611086 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611086 = validateParameter(valid_611086, JBool, required = false, default = nil)
  if valid_611086 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611086
  var valid_611087 = formData.getOrDefault("AvailabilityZones")
  valid_611087 = validateParameter(valid_611087, JArray, required = false,
                                 default = nil)
  if valid_611087 != nil:
    section.add "AvailabilityZones", valid_611087
  var valid_611088 = formData.getOrDefault("KmsKeyId")
  valid_611088 = validateParameter(valid_611088, JString, required = false,
                                 default = nil)
  if valid_611088 != nil:
    section.add "KmsKeyId", valid_611088
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_611089 = formData.getOrDefault("Engine")
  valid_611089 = validateParameter(valid_611089, JString, required = true,
                                 default = nil)
  if valid_611089 != nil:
    section.add "Engine", valid_611089
  var valid_611090 = formData.getOrDefault("EngineMode")
  valid_611090 = validateParameter(valid_611090, JString, required = false,
                                 default = nil)
  if valid_611090 != nil:
    section.add "EngineMode", valid_611090
  var valid_611091 = formData.getOrDefault("SnapshotIdentifier")
  valid_611091 = validateParameter(valid_611091, JString, required = true,
                                 default = nil)
  if valid_611091 != nil:
    section.add "SnapshotIdentifier", valid_611091
  var valid_611092 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_611092 = validateParameter(valid_611092, JArray, required = false,
                                 default = nil)
  if valid_611092 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611092
  var valid_611093 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_611093 = validateParameter(valid_611093, JString, required = false,
                                 default = nil)
  if valid_611093 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_611093
  var valid_611094 = formData.getOrDefault("Tags")
  valid_611094 = validateParameter(valid_611094, JArray, required = false,
                                 default = nil)
  if valid_611094 != nil:
    section.add "Tags", valid_611094
  var valid_611095 = formData.getOrDefault("DBSubnetGroupName")
  valid_611095 = validateParameter(valid_611095, JString, required = false,
                                 default = nil)
  if valid_611095 != nil:
    section.add "DBSubnetGroupName", valid_611095
  var valid_611096 = formData.getOrDefault("OptionGroupName")
  valid_611096 = validateParameter(valid_611096, JString, required = false,
                                 default = nil)
  if valid_611096 != nil:
    section.add "OptionGroupName", valid_611096
  var valid_611097 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_611097 = validateParameter(valid_611097, JString, required = false,
                                 default = nil)
  if valid_611097 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_611097
  var valid_611098 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_611098 = validateParameter(valid_611098, JString, required = false,
                                 default = nil)
  if valid_611098 != nil:
    section.add "DBClusterParameterGroupName", valid_611098
  var valid_611099 = formData.getOrDefault("DBClusterIdentifier")
  valid_611099 = validateParameter(valid_611099, JString, required = true,
                                 default = nil)
  if valid_611099 != nil:
    section.add "DBClusterIdentifier", valid_611099
  var valid_611100 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_611100 = validateParameter(valid_611100, JString, required = false,
                                 default = nil)
  if valid_611100 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_611100
  var valid_611101 = formData.getOrDefault("DeletionProtection")
  valid_611101 = validateParameter(valid_611101, JBool, required = false, default = nil)
  if valid_611101 != nil:
    section.add "DeletionProtection", valid_611101
  var valid_611102 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_611102 = validateParameter(valid_611102, JBool, required = false, default = nil)
  if valid_611102 != nil:
    section.add "CopyTagsToSnapshot", valid_611102
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611103: Call_PostRestoreDBClusterFromSnapshot_611067;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611103.validator(path, query, header, formData, body)
  let scheme = call_611103.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611103.url(scheme.get, call_611103.host, call_611103.base,
                         call_611103.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611103, url, valid)

proc call*(call_611104: Call_PostRestoreDBClusterFromSnapshot_611067;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; KmsKeyId: string = "";
          EngineMode: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_611105 = newJObject()
  var formData_611106 = newJObject()
  add(formData_611106, "Port", newJInt(Port))
  add(formData_611106, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_611106, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_611106, "EngineVersion", newJString(EngineVersion))
  add(formData_611106, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_611106, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_611106.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_611106, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_611106.add "AvailabilityZones", AvailabilityZones
  add(formData_611106, "KmsKeyId", newJString(KmsKeyId))
  add(formData_611106, "Engine", newJString(Engine))
  add(formData_611106, "EngineMode", newJString(EngineMode))
  add(formData_611106, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_611106.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_611106, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_611105, "Action", newJString(Action))
  if Tags != nil:
    formData_611106.add "Tags", Tags
  add(formData_611106, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_611106, "OptionGroupName", newJString(OptionGroupName))
  add(formData_611106, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_611106, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_611105, "Version", newJString(Version))
  add(formData_611106, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_611106, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_611106, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_611106, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_611104.call(nil, query_611105, nil, formData_611106, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_611067(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_611068, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_611069,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_611028 = ref object of OpenApiRestCall_605589
proc url_GetRestoreDBClusterFromSnapshot_611030(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_611029(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_611031 = query.getOrDefault("DatabaseName")
  valid_611031 = validateParameter(valid_611031, JString, required = false,
                                 default = nil)
  if valid_611031 != nil:
    section.add "DatabaseName", valid_611031
  var valid_611032 = query.getOrDefault("DeletionProtection")
  valid_611032 = validateParameter(valid_611032, JBool, required = false, default = nil)
  if valid_611032 != nil:
    section.add "DeletionProtection", valid_611032
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_611033 = query.getOrDefault("Engine")
  valid_611033 = validateParameter(valid_611033, JString, required = true,
                                 default = nil)
  if valid_611033 != nil:
    section.add "Engine", valid_611033
  var valid_611034 = query.getOrDefault("CopyTagsToSnapshot")
  valid_611034 = validateParameter(valid_611034, JBool, required = false, default = nil)
  if valid_611034 != nil:
    section.add "CopyTagsToSnapshot", valid_611034
  var valid_611035 = query.getOrDefault("SnapshotIdentifier")
  valid_611035 = validateParameter(valid_611035, JString, required = true,
                                 default = nil)
  if valid_611035 != nil:
    section.add "SnapshotIdentifier", valid_611035
  var valid_611036 = query.getOrDefault("Tags")
  valid_611036 = validateParameter(valid_611036, JArray, required = false,
                                 default = nil)
  if valid_611036 != nil:
    section.add "Tags", valid_611036
  var valid_611037 = query.getOrDefault("KmsKeyId")
  valid_611037 = validateParameter(valid_611037, JString, required = false,
                                 default = nil)
  if valid_611037 != nil:
    section.add "KmsKeyId", valid_611037
  var valid_611038 = query.getOrDefault("DBClusterIdentifier")
  valid_611038 = validateParameter(valid_611038, JString, required = true,
                                 default = nil)
  if valid_611038 != nil:
    section.add "DBClusterIdentifier", valid_611038
  var valid_611039 = query.getOrDefault("BacktrackWindow")
  valid_611039 = validateParameter(valid_611039, JInt, required = false, default = nil)
  if valid_611039 != nil:
    section.add "BacktrackWindow", valid_611039
  var valid_611040 = query.getOrDefault("EngineMode")
  valid_611040 = validateParameter(valid_611040, JString, required = false,
                                 default = nil)
  if valid_611040 != nil:
    section.add "EngineMode", valid_611040
  var valid_611041 = query.getOrDefault("DBClusterParameterGroupName")
  valid_611041 = validateParameter(valid_611041, JString, required = false,
                                 default = nil)
  if valid_611041 != nil:
    section.add "DBClusterParameterGroupName", valid_611041
  var valid_611042 = query.getOrDefault("AvailabilityZones")
  valid_611042 = validateParameter(valid_611042, JArray, required = false,
                                 default = nil)
  if valid_611042 != nil:
    section.add "AvailabilityZones", valid_611042
  var valid_611043 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_611043 = validateParameter(valid_611043, JString, required = false,
                                 default = nil)
  if valid_611043 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_611043
  var valid_611044 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_611044 = validateParameter(valid_611044, JString, required = false,
                                 default = nil)
  if valid_611044 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_611044
  var valid_611045 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_611045 = validateParameter(valid_611045, JString, required = false,
                                 default = nil)
  if valid_611045 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_611045
  var valid_611046 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611046 = validateParameter(valid_611046, JBool, required = false, default = nil)
  if valid_611046 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611046
  var valid_611047 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_611047 = validateParameter(valid_611047, JString, required = false,
                                 default = nil)
  if valid_611047 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_611047
  var valid_611048 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_611048 = validateParameter(valid_611048, JArray, required = false,
                                 default = nil)
  if valid_611048 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611048
  var valid_611049 = query.getOrDefault("EngineVersion")
  valid_611049 = validateParameter(valid_611049, JString, required = false,
                                 default = nil)
  if valid_611049 != nil:
    section.add "EngineVersion", valid_611049
  var valid_611050 = query.getOrDefault("Action")
  valid_611050 = validateParameter(valid_611050, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_611050 != nil:
    section.add "Action", valid_611050
  var valid_611051 = query.getOrDefault("Port")
  valid_611051 = validateParameter(valid_611051, JInt, required = false, default = nil)
  if valid_611051 != nil:
    section.add "Port", valid_611051
  var valid_611052 = query.getOrDefault("VpcSecurityGroupIds")
  valid_611052 = validateParameter(valid_611052, JArray, required = false,
                                 default = nil)
  if valid_611052 != nil:
    section.add "VpcSecurityGroupIds", valid_611052
  var valid_611053 = query.getOrDefault("OptionGroupName")
  valid_611053 = validateParameter(valid_611053, JString, required = false,
                                 default = nil)
  if valid_611053 != nil:
    section.add "OptionGroupName", valid_611053
  var valid_611054 = query.getOrDefault("DBSubnetGroupName")
  valid_611054 = validateParameter(valid_611054, JString, required = false,
                                 default = nil)
  if valid_611054 != nil:
    section.add "DBSubnetGroupName", valid_611054
  var valid_611055 = query.getOrDefault("Version")
  valid_611055 = validateParameter(valid_611055, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611055 != nil:
    section.add "Version", valid_611055
  var valid_611056 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_611056 = validateParameter(valid_611056, JString, required = false,
                                 default = nil)
  if valid_611056 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_611056
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611057 = header.getOrDefault("X-Amz-Signature")
  valid_611057 = validateParameter(valid_611057, JString, required = false,
                                 default = nil)
  if valid_611057 != nil:
    section.add "X-Amz-Signature", valid_611057
  var valid_611058 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611058 = validateParameter(valid_611058, JString, required = false,
                                 default = nil)
  if valid_611058 != nil:
    section.add "X-Amz-Content-Sha256", valid_611058
  var valid_611059 = header.getOrDefault("X-Amz-Date")
  valid_611059 = validateParameter(valid_611059, JString, required = false,
                                 default = nil)
  if valid_611059 != nil:
    section.add "X-Amz-Date", valid_611059
  var valid_611060 = header.getOrDefault("X-Amz-Credential")
  valid_611060 = validateParameter(valid_611060, JString, required = false,
                                 default = nil)
  if valid_611060 != nil:
    section.add "X-Amz-Credential", valid_611060
  var valid_611061 = header.getOrDefault("X-Amz-Security-Token")
  valid_611061 = validateParameter(valid_611061, JString, required = false,
                                 default = nil)
  if valid_611061 != nil:
    section.add "X-Amz-Security-Token", valid_611061
  var valid_611062 = header.getOrDefault("X-Amz-Algorithm")
  valid_611062 = validateParameter(valid_611062, JString, required = false,
                                 default = nil)
  if valid_611062 != nil:
    section.add "X-Amz-Algorithm", valid_611062
  var valid_611063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611063 = validateParameter(valid_611063, JString, required = false,
                                 default = nil)
  if valid_611063 != nil:
    section.add "X-Amz-SignedHeaders", valid_611063
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611064: Call_GetRestoreDBClusterFromSnapshot_611028;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611064.validator(path, query, header, formData, body)
  let scheme = call_611064.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611064.url(scheme.get, call_611064.host, call_611064.base,
                         call_611064.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611064, url, valid)

proc call*(call_611065: Call_GetRestoreDBClusterFromSnapshot_611028;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          DatabaseName: string = ""; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil; KmsKeyId: string = "";
          BacktrackWindow: int = 0; EngineMode: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_611066 = newJObject()
  add(query_611066, "DatabaseName", newJString(DatabaseName))
  add(query_611066, "DeletionProtection", newJBool(DeletionProtection))
  add(query_611066, "Engine", newJString(Engine))
  add(query_611066, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_611066, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if Tags != nil:
    query_611066.add "Tags", Tags
  add(query_611066, "KmsKeyId", newJString(KmsKeyId))
  add(query_611066, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_611066, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_611066, "EngineMode", newJString(EngineMode))
  add(query_611066, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_611066.add "AvailabilityZones", AvailabilityZones
  add(query_611066, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_611066, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_611066, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_611066, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_611066, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if EnableCloudwatchLogsExports != nil:
    query_611066.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_611066, "EngineVersion", newJString(EngineVersion))
  add(query_611066, "Action", newJString(Action))
  add(query_611066, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_611066.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_611066, "OptionGroupName", newJString(OptionGroupName))
  add(query_611066, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_611066, "Version", newJString(Version))
  add(query_611066, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_611065.call(nil, query_611066, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_611028(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_611029, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_611030,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_611139 = ref object of OpenApiRestCall_605589
proc url_PostRestoreDBClusterToPointInTime_611141(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_611140(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611142 = query.getOrDefault("Action")
  valid_611142 = validateParameter(valid_611142, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_611142 != nil:
    section.add "Action", valid_611142
  var valid_611143 = query.getOrDefault("Version")
  valid_611143 = validateParameter(valid_611143, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611143 != nil:
    section.add "Version", valid_611143
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611144 = header.getOrDefault("X-Amz-Signature")
  valid_611144 = validateParameter(valid_611144, JString, required = false,
                                 default = nil)
  if valid_611144 != nil:
    section.add "X-Amz-Signature", valid_611144
  var valid_611145 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611145 = validateParameter(valid_611145, JString, required = false,
                                 default = nil)
  if valid_611145 != nil:
    section.add "X-Amz-Content-Sha256", valid_611145
  var valid_611146 = header.getOrDefault("X-Amz-Date")
  valid_611146 = validateParameter(valid_611146, JString, required = false,
                                 default = nil)
  if valid_611146 != nil:
    section.add "X-Amz-Date", valid_611146
  var valid_611147 = header.getOrDefault("X-Amz-Credential")
  valid_611147 = validateParameter(valid_611147, JString, required = false,
                                 default = nil)
  if valid_611147 != nil:
    section.add "X-Amz-Credential", valid_611147
  var valid_611148 = header.getOrDefault("X-Amz-Security-Token")
  valid_611148 = validateParameter(valid_611148, JString, required = false,
                                 default = nil)
  if valid_611148 != nil:
    section.add "X-Amz-Security-Token", valid_611148
  var valid_611149 = header.getOrDefault("X-Amz-Algorithm")
  valid_611149 = validateParameter(valid_611149, JString, required = false,
                                 default = nil)
  if valid_611149 != nil:
    section.add "X-Amz-Algorithm", valid_611149
  var valid_611150 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611150 = validateParameter(valid_611150, JString, required = false,
                                 default = nil)
  if valid_611150 != nil:
    section.add "X-Amz-SignedHeaders", valid_611150
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_611151 = formData.getOrDefault("Port")
  valid_611151 = validateParameter(valid_611151, JInt, required = false, default = nil)
  if valid_611151 != nil:
    section.add "Port", valid_611151
  var valid_611152 = formData.getOrDefault("BacktrackWindow")
  valid_611152 = validateParameter(valid_611152, JInt, required = false, default = nil)
  if valid_611152 != nil:
    section.add "BacktrackWindow", valid_611152
  var valid_611153 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_611153 = validateParameter(valid_611153, JArray, required = false,
                                 default = nil)
  if valid_611153 != nil:
    section.add "VpcSecurityGroupIds", valid_611153
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_611154 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_611154 = validateParameter(valid_611154, JString, required = true,
                                 default = nil)
  if valid_611154 != nil:
    section.add "SourceDBClusterIdentifier", valid_611154
  var valid_611155 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611155 = validateParameter(valid_611155, JBool, required = false, default = nil)
  if valid_611155 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611155
  var valid_611156 = formData.getOrDefault("KmsKeyId")
  valid_611156 = validateParameter(valid_611156, JString, required = false,
                                 default = nil)
  if valid_611156 != nil:
    section.add "KmsKeyId", valid_611156
  var valid_611157 = formData.getOrDefault("RestoreType")
  valid_611157 = validateParameter(valid_611157, JString, required = false,
                                 default = nil)
  if valid_611157 != nil:
    section.add "RestoreType", valid_611157
  var valid_611158 = formData.getOrDefault("UseLatestRestorableTime")
  valid_611158 = validateParameter(valid_611158, JBool, required = false, default = nil)
  if valid_611158 != nil:
    section.add "UseLatestRestorableTime", valid_611158
  var valid_611159 = formData.getOrDefault("RestoreToTime")
  valid_611159 = validateParameter(valid_611159, JString, required = false,
                                 default = nil)
  if valid_611159 != nil:
    section.add "RestoreToTime", valid_611159
  var valid_611160 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_611160 = validateParameter(valid_611160, JArray, required = false,
                                 default = nil)
  if valid_611160 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611160
  var valid_611161 = formData.getOrDefault("Tags")
  valid_611161 = validateParameter(valid_611161, JArray, required = false,
                                 default = nil)
  if valid_611161 != nil:
    section.add "Tags", valid_611161
  var valid_611162 = formData.getOrDefault("DBSubnetGroupName")
  valid_611162 = validateParameter(valid_611162, JString, required = false,
                                 default = nil)
  if valid_611162 != nil:
    section.add "DBSubnetGroupName", valid_611162
  var valid_611163 = formData.getOrDefault("OptionGroupName")
  valid_611163 = validateParameter(valid_611163, JString, required = false,
                                 default = nil)
  if valid_611163 != nil:
    section.add "OptionGroupName", valid_611163
  var valid_611164 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_611164 = validateParameter(valid_611164, JString, required = false,
                                 default = nil)
  if valid_611164 != nil:
    section.add "DBClusterParameterGroupName", valid_611164
  var valid_611165 = formData.getOrDefault("DBClusterIdentifier")
  valid_611165 = validateParameter(valid_611165, JString, required = true,
                                 default = nil)
  if valid_611165 != nil:
    section.add "DBClusterIdentifier", valid_611165
  var valid_611166 = formData.getOrDefault("DeletionProtection")
  valid_611166 = validateParameter(valid_611166, JBool, required = false, default = nil)
  if valid_611166 != nil:
    section.add "DeletionProtection", valid_611166
  var valid_611167 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_611167 = validateParameter(valid_611167, JBool, required = false, default = nil)
  if valid_611167 != nil:
    section.add "CopyTagsToSnapshot", valid_611167
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611168: Call_PostRestoreDBClusterToPointInTime_611139;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611168.validator(path, query, header, formData, body)
  let scheme = call_611168.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611168.url(scheme.get, call_611168.host, call_611168.base,
                         call_611168.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611168, url, valid)

proc call*(call_611169: Call_PostRestoreDBClusterToPointInTime_611139;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; BacktrackWindow: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; UseLatestRestorableTime: bool = false;
          RestoreToTime: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_611170 = newJObject()
  var formData_611171 = newJObject()
  add(formData_611171, "Port", newJInt(Port))
  add(formData_611171, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_611171.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_611171, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_611171, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_611171, "KmsKeyId", newJString(KmsKeyId))
  add(formData_611171, "RestoreType", newJString(RestoreType))
  add(formData_611171, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_611171, "RestoreToTime", newJString(RestoreToTime))
  if EnableCloudwatchLogsExports != nil:
    formData_611171.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_611170, "Action", newJString(Action))
  if Tags != nil:
    formData_611171.add "Tags", Tags
  add(formData_611171, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_611171, "OptionGroupName", newJString(OptionGroupName))
  add(formData_611171, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_611170, "Version", newJString(Version))
  add(formData_611171, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_611171, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_611171, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_611169.call(nil, query_611170, nil, formData_611171, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_611139(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_611140, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_611141,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_611107 = ref object of OpenApiRestCall_605589
proc url_GetRestoreDBClusterToPointInTime_611109(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_611108(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_611110 = query.getOrDefault("DeletionProtection")
  valid_611110 = validateParameter(valid_611110, JBool, required = false, default = nil)
  if valid_611110 != nil:
    section.add "DeletionProtection", valid_611110
  var valid_611111 = query.getOrDefault("RestoreType")
  valid_611111 = validateParameter(valid_611111, JString, required = false,
                                 default = nil)
  if valid_611111 != nil:
    section.add "RestoreType", valid_611111
  var valid_611112 = query.getOrDefault("UseLatestRestorableTime")
  valid_611112 = validateParameter(valid_611112, JBool, required = false, default = nil)
  if valid_611112 != nil:
    section.add "UseLatestRestorableTime", valid_611112
  var valid_611113 = query.getOrDefault("CopyTagsToSnapshot")
  valid_611113 = validateParameter(valid_611113, JBool, required = false, default = nil)
  if valid_611113 != nil:
    section.add "CopyTagsToSnapshot", valid_611113
  var valid_611114 = query.getOrDefault("Tags")
  valid_611114 = validateParameter(valid_611114, JArray, required = false,
                                 default = nil)
  if valid_611114 != nil:
    section.add "Tags", valid_611114
  var valid_611115 = query.getOrDefault("KmsKeyId")
  valid_611115 = validateParameter(valid_611115, JString, required = false,
                                 default = nil)
  if valid_611115 != nil:
    section.add "KmsKeyId", valid_611115
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_611116 = query.getOrDefault("DBClusterIdentifier")
  valid_611116 = validateParameter(valid_611116, JString, required = true,
                                 default = nil)
  if valid_611116 != nil:
    section.add "DBClusterIdentifier", valid_611116
  var valid_611117 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_611117 = validateParameter(valid_611117, JString, required = true,
                                 default = nil)
  if valid_611117 != nil:
    section.add "SourceDBClusterIdentifier", valid_611117
  var valid_611118 = query.getOrDefault("BacktrackWindow")
  valid_611118 = validateParameter(valid_611118, JInt, required = false, default = nil)
  if valid_611118 != nil:
    section.add "BacktrackWindow", valid_611118
  var valid_611119 = query.getOrDefault("DBClusterParameterGroupName")
  valid_611119 = validateParameter(valid_611119, JString, required = false,
                                 default = nil)
  if valid_611119 != nil:
    section.add "DBClusterParameterGroupName", valid_611119
  var valid_611120 = query.getOrDefault("RestoreToTime")
  valid_611120 = validateParameter(valid_611120, JString, required = false,
                                 default = nil)
  if valid_611120 != nil:
    section.add "RestoreToTime", valid_611120
  var valid_611121 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611121 = validateParameter(valid_611121, JBool, required = false, default = nil)
  if valid_611121 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611121
  var valid_611122 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_611122 = validateParameter(valid_611122, JArray, required = false,
                                 default = nil)
  if valid_611122 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611122
  var valid_611123 = query.getOrDefault("Action")
  valid_611123 = validateParameter(valid_611123, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_611123 != nil:
    section.add "Action", valid_611123
  var valid_611124 = query.getOrDefault("Port")
  valid_611124 = validateParameter(valid_611124, JInt, required = false, default = nil)
  if valid_611124 != nil:
    section.add "Port", valid_611124
  var valid_611125 = query.getOrDefault("VpcSecurityGroupIds")
  valid_611125 = validateParameter(valid_611125, JArray, required = false,
                                 default = nil)
  if valid_611125 != nil:
    section.add "VpcSecurityGroupIds", valid_611125
  var valid_611126 = query.getOrDefault("OptionGroupName")
  valid_611126 = validateParameter(valid_611126, JString, required = false,
                                 default = nil)
  if valid_611126 != nil:
    section.add "OptionGroupName", valid_611126
  var valid_611127 = query.getOrDefault("DBSubnetGroupName")
  valid_611127 = validateParameter(valid_611127, JString, required = false,
                                 default = nil)
  if valid_611127 != nil:
    section.add "DBSubnetGroupName", valid_611127
  var valid_611128 = query.getOrDefault("Version")
  valid_611128 = validateParameter(valid_611128, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611128 != nil:
    section.add "Version", valid_611128
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611129 = header.getOrDefault("X-Amz-Signature")
  valid_611129 = validateParameter(valid_611129, JString, required = false,
                                 default = nil)
  if valid_611129 != nil:
    section.add "X-Amz-Signature", valid_611129
  var valid_611130 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611130 = validateParameter(valid_611130, JString, required = false,
                                 default = nil)
  if valid_611130 != nil:
    section.add "X-Amz-Content-Sha256", valid_611130
  var valid_611131 = header.getOrDefault("X-Amz-Date")
  valid_611131 = validateParameter(valid_611131, JString, required = false,
                                 default = nil)
  if valid_611131 != nil:
    section.add "X-Amz-Date", valid_611131
  var valid_611132 = header.getOrDefault("X-Amz-Credential")
  valid_611132 = validateParameter(valid_611132, JString, required = false,
                                 default = nil)
  if valid_611132 != nil:
    section.add "X-Amz-Credential", valid_611132
  var valid_611133 = header.getOrDefault("X-Amz-Security-Token")
  valid_611133 = validateParameter(valid_611133, JString, required = false,
                                 default = nil)
  if valid_611133 != nil:
    section.add "X-Amz-Security-Token", valid_611133
  var valid_611134 = header.getOrDefault("X-Amz-Algorithm")
  valid_611134 = validateParameter(valid_611134, JString, required = false,
                                 default = nil)
  if valid_611134 != nil:
    section.add "X-Amz-Algorithm", valid_611134
  var valid_611135 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611135 = validateParameter(valid_611135, JString, required = false,
                                 default = nil)
  if valid_611135 != nil:
    section.add "X-Amz-SignedHeaders", valid_611135
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611136: Call_GetRestoreDBClusterToPointInTime_611107;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611136.validator(path, query, header, formData, body)
  let scheme = call_611136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611136.url(scheme.get, call_611136.host, call_611136.base,
                         call_611136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611136, url, valid)

proc call*(call_611137: Call_GetRestoreDBClusterToPointInTime_611107;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          DeletionProtection: bool = false; RestoreType: string = "";
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Tags: JsonNode = nil; KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = ""; RestoreToTime: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_611138 = newJObject()
  add(query_611138, "DeletionProtection", newJBool(DeletionProtection))
  add(query_611138, "RestoreType", newJString(RestoreType))
  add(query_611138, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_611138, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_611138.add "Tags", Tags
  add(query_611138, "KmsKeyId", newJString(KmsKeyId))
  add(query_611138, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_611138, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_611138, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_611138, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_611138, "RestoreToTime", newJString(RestoreToTime))
  add(query_611138, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_611138.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_611138, "Action", newJString(Action))
  add(query_611138, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_611138.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_611138, "OptionGroupName", newJString(OptionGroupName))
  add(query_611138, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_611138, "Version", newJString(Version))
  result = call_611137.call(nil, query_611138, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_611107(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_611108, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_611109,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromDBSnapshot_611215 = ref object of OpenApiRestCall_605589
proc url_PostRestoreDBInstanceFromDBSnapshot_611217(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceFromDBSnapshot_611216(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611218 = query.getOrDefault("Action")
  valid_611218 = validateParameter(valid_611218, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_611218 != nil:
    section.add "Action", valid_611218
  var valid_611219 = query.getOrDefault("Version")
  valid_611219 = validateParameter(valid_611219, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611219 != nil:
    section.add "Version", valid_611219
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611220 = header.getOrDefault("X-Amz-Signature")
  valid_611220 = validateParameter(valid_611220, JString, required = false,
                                 default = nil)
  if valid_611220 != nil:
    section.add "X-Amz-Signature", valid_611220
  var valid_611221 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611221 = validateParameter(valid_611221, JString, required = false,
                                 default = nil)
  if valid_611221 != nil:
    section.add "X-Amz-Content-Sha256", valid_611221
  var valid_611222 = header.getOrDefault("X-Amz-Date")
  valid_611222 = validateParameter(valid_611222, JString, required = false,
                                 default = nil)
  if valid_611222 != nil:
    section.add "X-Amz-Date", valid_611222
  var valid_611223 = header.getOrDefault("X-Amz-Credential")
  valid_611223 = validateParameter(valid_611223, JString, required = false,
                                 default = nil)
  if valid_611223 != nil:
    section.add "X-Amz-Credential", valid_611223
  var valid_611224 = header.getOrDefault("X-Amz-Security-Token")
  valid_611224 = validateParameter(valid_611224, JString, required = false,
                                 default = nil)
  if valid_611224 != nil:
    section.add "X-Amz-Security-Token", valid_611224
  var valid_611225 = header.getOrDefault("X-Amz-Algorithm")
  valid_611225 = validateParameter(valid_611225, JString, required = false,
                                 default = nil)
  if valid_611225 != nil:
    section.add "X-Amz-Algorithm", valid_611225
  var valid_611226 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611226 = validateParameter(valid_611226, JString, required = false,
                                 default = nil)
  if valid_611226 != nil:
    section.add "X-Amz-SignedHeaders", valid_611226
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_611227 = formData.getOrDefault("Port")
  valid_611227 = validateParameter(valid_611227, JInt, required = false, default = nil)
  if valid_611227 != nil:
    section.add "Port", valid_611227
  var valid_611228 = formData.getOrDefault("DBInstanceClass")
  valid_611228 = validateParameter(valid_611228, JString, required = false,
                                 default = nil)
  if valid_611228 != nil:
    section.add "DBInstanceClass", valid_611228
  var valid_611229 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_611229 = validateParameter(valid_611229, JBool, required = false, default = nil)
  if valid_611229 != nil:
    section.add "UseDefaultProcessorFeatures", valid_611229
  var valid_611230 = formData.getOrDefault("MultiAZ")
  valid_611230 = validateParameter(valid_611230, JBool, required = false, default = nil)
  if valid_611230 != nil:
    section.add "MultiAZ", valid_611230
  var valid_611231 = formData.getOrDefault("Domain")
  valid_611231 = validateParameter(valid_611231, JString, required = false,
                                 default = nil)
  if valid_611231 != nil:
    section.add "Domain", valid_611231
  var valid_611232 = formData.getOrDefault("DBParameterGroupName")
  valid_611232 = validateParameter(valid_611232, JString, required = false,
                                 default = nil)
  if valid_611232 != nil:
    section.add "DBParameterGroupName", valid_611232
  var valid_611233 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_611233 = validateParameter(valid_611233, JArray, required = false,
                                 default = nil)
  if valid_611233 != nil:
    section.add "VpcSecurityGroupIds", valid_611233
  var valid_611234 = formData.getOrDefault("AvailabilityZone")
  valid_611234 = validateParameter(valid_611234, JString, required = false,
                                 default = nil)
  if valid_611234 != nil:
    section.add "AvailabilityZone", valid_611234
  var valid_611235 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611235 = validateParameter(valid_611235, JBool, required = false, default = nil)
  if valid_611235 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611235
  var valid_611236 = formData.getOrDefault("Engine")
  valid_611236 = validateParameter(valid_611236, JString, required = false,
                                 default = nil)
  if valid_611236 != nil:
    section.add "Engine", valid_611236
  var valid_611237 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_611237 = validateParameter(valid_611237, JBool, required = false, default = nil)
  if valid_611237 != nil:
    section.add "AutoMinorVersionUpgrade", valid_611237
  var valid_611238 = formData.getOrDefault("TdeCredentialPassword")
  valid_611238 = validateParameter(valid_611238, JString, required = false,
                                 default = nil)
  if valid_611238 != nil:
    section.add "TdeCredentialPassword", valid_611238
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_611239 = formData.getOrDefault("DBInstanceIdentifier")
  valid_611239 = validateParameter(valid_611239, JString, required = true,
                                 default = nil)
  if valid_611239 != nil:
    section.add "DBInstanceIdentifier", valid_611239
  var valid_611240 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_611240 = validateParameter(valid_611240, JString, required = true,
                                 default = nil)
  if valid_611240 != nil:
    section.add "DBSnapshotIdentifier", valid_611240
  var valid_611241 = formData.getOrDefault("DBName")
  valid_611241 = validateParameter(valid_611241, JString, required = false,
                                 default = nil)
  if valid_611241 != nil:
    section.add "DBName", valid_611241
  var valid_611242 = formData.getOrDefault("Iops")
  valid_611242 = validateParameter(valid_611242, JInt, required = false, default = nil)
  if valid_611242 != nil:
    section.add "Iops", valid_611242
  var valid_611243 = formData.getOrDefault("TdeCredentialArn")
  valid_611243 = validateParameter(valid_611243, JString, required = false,
                                 default = nil)
  if valid_611243 != nil:
    section.add "TdeCredentialArn", valid_611243
  var valid_611244 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_611244 = validateParameter(valid_611244, JArray, required = false,
                                 default = nil)
  if valid_611244 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611244
  var valid_611245 = formData.getOrDefault("PubliclyAccessible")
  valid_611245 = validateParameter(valid_611245, JBool, required = false, default = nil)
  if valid_611245 != nil:
    section.add "PubliclyAccessible", valid_611245
  var valid_611246 = formData.getOrDefault("LicenseModel")
  valid_611246 = validateParameter(valid_611246, JString, required = false,
                                 default = nil)
  if valid_611246 != nil:
    section.add "LicenseModel", valid_611246
  var valid_611247 = formData.getOrDefault("Tags")
  valid_611247 = validateParameter(valid_611247, JArray, required = false,
                                 default = nil)
  if valid_611247 != nil:
    section.add "Tags", valid_611247
  var valid_611248 = formData.getOrDefault("DBSubnetGroupName")
  valid_611248 = validateParameter(valid_611248, JString, required = false,
                                 default = nil)
  if valid_611248 != nil:
    section.add "DBSubnetGroupName", valid_611248
  var valid_611249 = formData.getOrDefault("DomainIAMRoleName")
  valid_611249 = validateParameter(valid_611249, JString, required = false,
                                 default = nil)
  if valid_611249 != nil:
    section.add "DomainIAMRoleName", valid_611249
  var valid_611250 = formData.getOrDefault("OptionGroupName")
  valid_611250 = validateParameter(valid_611250, JString, required = false,
                                 default = nil)
  if valid_611250 != nil:
    section.add "OptionGroupName", valid_611250
  var valid_611251 = formData.getOrDefault("StorageType")
  valid_611251 = validateParameter(valid_611251, JString, required = false,
                                 default = nil)
  if valid_611251 != nil:
    section.add "StorageType", valid_611251
  var valid_611252 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_611252 = validateParameter(valid_611252, JBool, required = false, default = nil)
  if valid_611252 != nil:
    section.add "CopyTagsToSnapshot", valid_611252
  var valid_611253 = formData.getOrDefault("DeletionProtection")
  valid_611253 = validateParameter(valid_611253, JBool, required = false, default = nil)
  if valid_611253 != nil:
    section.add "DeletionProtection", valid_611253
  var valid_611254 = formData.getOrDefault("ProcessorFeatures")
  valid_611254 = validateParameter(valid_611254, JArray, required = false,
                                 default = nil)
  if valid_611254 != nil:
    section.add "ProcessorFeatures", valid_611254
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611255: Call_PostRestoreDBInstanceFromDBSnapshot_611215;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_611255.validator(path, query, header, formData, body)
  let scheme = call_611255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611255.url(scheme.get, call_611255.host, call_611255.base,
                         call_611255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611255, url, valid)

proc call*(call_611256: Call_PostRestoreDBInstanceFromDBSnapshot_611215;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = ""; DBParameterGroupName: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_611257 = newJObject()
  var formData_611258 = newJObject()
  add(formData_611258, "Port", newJInt(Port))
  add(formData_611258, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_611258, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_611258, "MultiAZ", newJBool(MultiAZ))
  add(formData_611258, "Domain", newJString(Domain))
  add(formData_611258, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_611258.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_611258, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_611258, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_611258, "Engine", newJString(Engine))
  add(formData_611258, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_611258, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_611258, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_611258, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(formData_611258, "DBName", newJString(DBName))
  add(formData_611258, "Iops", newJInt(Iops))
  add(formData_611258, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_611258.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_611258, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_611257, "Action", newJString(Action))
  add(formData_611258, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_611258.add "Tags", Tags
  add(formData_611258, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_611258, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_611258, "OptionGroupName", newJString(OptionGroupName))
  add(query_611257, "Version", newJString(Version))
  add(formData_611258, "StorageType", newJString(StorageType))
  add(formData_611258, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_611258, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_611258.add "ProcessorFeatures", ProcessorFeatures
  result = call_611256.call(nil, query_611257, nil, formData_611258, nil)

var postRestoreDBInstanceFromDBSnapshot* = Call_PostRestoreDBInstanceFromDBSnapshot_611215(
    name: "postRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_PostRestoreDBInstanceFromDBSnapshot_611216, base: "/",
    url: url_PostRestoreDBInstanceFromDBSnapshot_611217,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromDBSnapshot_611172 = ref object of OpenApiRestCall_605589
proc url_GetRestoreDBInstanceFromDBSnapshot_611174(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceFromDBSnapshot_611173(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_611175 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_611175 = validateParameter(valid_611175, JBool, required = false, default = nil)
  if valid_611175 != nil:
    section.add "UseDefaultProcessorFeatures", valid_611175
  var valid_611176 = query.getOrDefault("DBName")
  valid_611176 = validateParameter(valid_611176, JString, required = false,
                                 default = nil)
  if valid_611176 != nil:
    section.add "DBName", valid_611176
  var valid_611177 = query.getOrDefault("TdeCredentialPassword")
  valid_611177 = validateParameter(valid_611177, JString, required = false,
                                 default = nil)
  if valid_611177 != nil:
    section.add "TdeCredentialPassword", valid_611177
  var valid_611178 = query.getOrDefault("DeletionProtection")
  valid_611178 = validateParameter(valid_611178, JBool, required = false, default = nil)
  if valid_611178 != nil:
    section.add "DeletionProtection", valid_611178
  var valid_611179 = query.getOrDefault("Engine")
  valid_611179 = validateParameter(valid_611179, JString, required = false,
                                 default = nil)
  if valid_611179 != nil:
    section.add "Engine", valid_611179
  var valid_611180 = query.getOrDefault("CopyTagsToSnapshot")
  valid_611180 = validateParameter(valid_611180, JBool, required = false, default = nil)
  if valid_611180 != nil:
    section.add "CopyTagsToSnapshot", valid_611180
  var valid_611181 = query.getOrDefault("DBParameterGroupName")
  valid_611181 = validateParameter(valid_611181, JString, required = false,
                                 default = nil)
  if valid_611181 != nil:
    section.add "DBParameterGroupName", valid_611181
  var valid_611182 = query.getOrDefault("Tags")
  valid_611182 = validateParameter(valid_611182, JArray, required = false,
                                 default = nil)
  if valid_611182 != nil:
    section.add "Tags", valid_611182
  var valid_611183 = query.getOrDefault("LicenseModel")
  valid_611183 = validateParameter(valid_611183, JString, required = false,
                                 default = nil)
  if valid_611183 != nil:
    section.add "LicenseModel", valid_611183
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_611184 = query.getOrDefault("DBInstanceIdentifier")
  valid_611184 = validateParameter(valid_611184, JString, required = true,
                                 default = nil)
  if valid_611184 != nil:
    section.add "DBInstanceIdentifier", valid_611184
  var valid_611185 = query.getOrDefault("DBSnapshotIdentifier")
  valid_611185 = validateParameter(valid_611185, JString, required = true,
                                 default = nil)
  if valid_611185 != nil:
    section.add "DBSnapshotIdentifier", valid_611185
  var valid_611186 = query.getOrDefault("TdeCredentialArn")
  valid_611186 = validateParameter(valid_611186, JString, required = false,
                                 default = nil)
  if valid_611186 != nil:
    section.add "TdeCredentialArn", valid_611186
  var valid_611187 = query.getOrDefault("ProcessorFeatures")
  valid_611187 = validateParameter(valid_611187, JArray, required = false,
                                 default = nil)
  if valid_611187 != nil:
    section.add "ProcessorFeatures", valid_611187
  var valid_611188 = query.getOrDefault("StorageType")
  valid_611188 = validateParameter(valid_611188, JString, required = false,
                                 default = nil)
  if valid_611188 != nil:
    section.add "StorageType", valid_611188
  var valid_611189 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611189 = validateParameter(valid_611189, JBool, required = false, default = nil)
  if valid_611189 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611189
  var valid_611190 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_611190 = validateParameter(valid_611190, JArray, required = false,
                                 default = nil)
  if valid_611190 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611190
  var valid_611191 = query.getOrDefault("Action")
  valid_611191 = validateParameter(valid_611191, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_611191 != nil:
    section.add "Action", valid_611191
  var valid_611192 = query.getOrDefault("MultiAZ")
  valid_611192 = validateParameter(valid_611192, JBool, required = false, default = nil)
  if valid_611192 != nil:
    section.add "MultiAZ", valid_611192
  var valid_611193 = query.getOrDefault("Port")
  valid_611193 = validateParameter(valid_611193, JInt, required = false, default = nil)
  if valid_611193 != nil:
    section.add "Port", valid_611193
  var valid_611194 = query.getOrDefault("Domain")
  valid_611194 = validateParameter(valid_611194, JString, required = false,
                                 default = nil)
  if valid_611194 != nil:
    section.add "Domain", valid_611194
  var valid_611195 = query.getOrDefault("VpcSecurityGroupIds")
  valid_611195 = validateParameter(valid_611195, JArray, required = false,
                                 default = nil)
  if valid_611195 != nil:
    section.add "VpcSecurityGroupIds", valid_611195
  var valid_611196 = query.getOrDefault("AvailabilityZone")
  valid_611196 = validateParameter(valid_611196, JString, required = false,
                                 default = nil)
  if valid_611196 != nil:
    section.add "AvailabilityZone", valid_611196
  var valid_611197 = query.getOrDefault("OptionGroupName")
  valid_611197 = validateParameter(valid_611197, JString, required = false,
                                 default = nil)
  if valid_611197 != nil:
    section.add "OptionGroupName", valid_611197
  var valid_611198 = query.getOrDefault("DBSubnetGroupName")
  valid_611198 = validateParameter(valid_611198, JString, required = false,
                                 default = nil)
  if valid_611198 != nil:
    section.add "DBSubnetGroupName", valid_611198
  var valid_611199 = query.getOrDefault("Version")
  valid_611199 = validateParameter(valid_611199, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611199 != nil:
    section.add "Version", valid_611199
  var valid_611200 = query.getOrDefault("DBInstanceClass")
  valid_611200 = validateParameter(valid_611200, JString, required = false,
                                 default = nil)
  if valid_611200 != nil:
    section.add "DBInstanceClass", valid_611200
  var valid_611201 = query.getOrDefault("PubliclyAccessible")
  valid_611201 = validateParameter(valid_611201, JBool, required = false, default = nil)
  if valid_611201 != nil:
    section.add "PubliclyAccessible", valid_611201
  var valid_611202 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_611202 = validateParameter(valid_611202, JBool, required = false, default = nil)
  if valid_611202 != nil:
    section.add "AutoMinorVersionUpgrade", valid_611202
  var valid_611203 = query.getOrDefault("Iops")
  valid_611203 = validateParameter(valid_611203, JInt, required = false, default = nil)
  if valid_611203 != nil:
    section.add "Iops", valid_611203
  var valid_611204 = query.getOrDefault("DomainIAMRoleName")
  valid_611204 = validateParameter(valid_611204, JString, required = false,
                                 default = nil)
  if valid_611204 != nil:
    section.add "DomainIAMRoleName", valid_611204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611205 = header.getOrDefault("X-Amz-Signature")
  valid_611205 = validateParameter(valid_611205, JString, required = false,
                                 default = nil)
  if valid_611205 != nil:
    section.add "X-Amz-Signature", valid_611205
  var valid_611206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611206 = validateParameter(valid_611206, JString, required = false,
                                 default = nil)
  if valid_611206 != nil:
    section.add "X-Amz-Content-Sha256", valid_611206
  var valid_611207 = header.getOrDefault("X-Amz-Date")
  valid_611207 = validateParameter(valid_611207, JString, required = false,
                                 default = nil)
  if valid_611207 != nil:
    section.add "X-Amz-Date", valid_611207
  var valid_611208 = header.getOrDefault("X-Amz-Credential")
  valid_611208 = validateParameter(valid_611208, JString, required = false,
                                 default = nil)
  if valid_611208 != nil:
    section.add "X-Amz-Credential", valid_611208
  var valid_611209 = header.getOrDefault("X-Amz-Security-Token")
  valid_611209 = validateParameter(valid_611209, JString, required = false,
                                 default = nil)
  if valid_611209 != nil:
    section.add "X-Amz-Security-Token", valid_611209
  var valid_611210 = header.getOrDefault("X-Amz-Algorithm")
  valid_611210 = validateParameter(valid_611210, JString, required = false,
                                 default = nil)
  if valid_611210 != nil:
    section.add "X-Amz-Algorithm", valid_611210
  var valid_611211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611211 = validateParameter(valid_611211, JString, required = false,
                                 default = nil)
  if valid_611211 != nil:
    section.add "X-Amz-SignedHeaders", valid_611211
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611212: Call_GetRestoreDBInstanceFromDBSnapshot_611172;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_611212.validator(path, query, header, formData, body)
  let scheme = call_611212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611212.url(scheme.get, call_611212.host, call_611212.base,
                         call_611212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611212, url, valid)

proc call*(call_611213: Call_GetRestoreDBInstanceFromDBSnapshot_611172;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; CopyTagsToSnapshot: bool = false;
          DBParameterGroupName: string = ""; Tags: JsonNode = nil;
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromDBSnapshot"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          DBInstanceClass: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_611214 = newJObject()
  add(query_611214, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_611214, "DBName", newJString(DBName))
  add(query_611214, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_611214, "DeletionProtection", newJBool(DeletionProtection))
  add(query_611214, "Engine", newJString(Engine))
  add(query_611214, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_611214, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_611214.add "Tags", Tags
  add(query_611214, "LicenseModel", newJString(LicenseModel))
  add(query_611214, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_611214, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_611214, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_611214.add "ProcessorFeatures", ProcessorFeatures
  add(query_611214, "StorageType", newJString(StorageType))
  add(query_611214, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_611214.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_611214, "Action", newJString(Action))
  add(query_611214, "MultiAZ", newJBool(MultiAZ))
  add(query_611214, "Port", newJInt(Port))
  add(query_611214, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_611214.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_611214, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_611214, "OptionGroupName", newJString(OptionGroupName))
  add(query_611214, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_611214, "Version", newJString(Version))
  add(query_611214, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_611214, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_611214, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_611214, "Iops", newJInt(Iops))
  add(query_611214, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_611213.call(nil, query_611214, nil, nil, nil)

var getRestoreDBInstanceFromDBSnapshot* = Call_GetRestoreDBInstanceFromDBSnapshot_611172(
    name: "getRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_GetRestoreDBInstanceFromDBSnapshot_611173, base: "/",
    url: url_GetRestoreDBInstanceFromDBSnapshot_611174,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromS3_611317 = ref object of OpenApiRestCall_605589
proc url_PostRestoreDBInstanceFromS3_611319(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceFromS3_611318(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611320 = query.getOrDefault("Action")
  valid_611320 = validateParameter(valid_611320, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_611320 != nil:
    section.add "Action", valid_611320
  var valid_611321 = query.getOrDefault("Version")
  valid_611321 = validateParameter(valid_611321, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611321 != nil:
    section.add "Version", valid_611321
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_611322 = header.getOrDefault("X-Amz-Security-Token")
  valid_611322 = validateParameter(valid_611322, JString, required = false,
                                 default = nil)
  if valid_611322 != nil:
    section.add "X-Amz-Security-Token", valid_611322
  var valid_611323 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611323 = validateParameter(valid_611323, JString, required = false,
                                 default = nil)
  if valid_611323 != nil:
    section.add "X-Amz-SignedHeaders", valid_611323
  var valid_611324 = header.getOrDefault("X-Amz-Signature")
  valid_611324 = validateParameter(valid_611324, JString, required = false,
                                 default = nil)
  if valid_611324 != nil:
    section.add "X-Amz-Signature", valid_611324
  var valid_611325 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611325 = validateParameter(valid_611325, JString, required = false,
                                 default = nil)
  if valid_611325 != nil:
    section.add "X-Amz-Content-Sha256", valid_611325
  var valid_611326 = header.getOrDefault("X-Amz-Date")
  valid_611326 = validateParameter(valid_611326, JString, required = false,
                                 default = nil)
  if valid_611326 != nil:
    section.add "X-Amz-Date", valid_611326
  var valid_611327 = header.getOrDefault("X-Amz-Credential")
  valid_611327 = validateParameter(valid_611327, JString, required = false,
                                 default = nil)
  if valid_611327 != nil:
    section.add "X-Amz-Credential", valid_611327
  var valid_611328 = header.getOrDefault("X-Amz-Algorithm")
  valid_611328 = validateParameter(valid_611328, JString, required = false,
                                 default = nil)
  if valid_611328 != nil:
    section.add "X-Amz-Algorithm", valid_611328
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_611329 = formData.getOrDefault("S3IngestionRoleArn")
  valid_611329 = validateParameter(valid_611329, JString, required = true,
                                 default = nil)
  if valid_611329 != nil:
    section.add "S3IngestionRoleArn", valid_611329
  var valid_611330 = formData.getOrDefault("Port")
  valid_611330 = validateParameter(valid_611330, JInt, required = false, default = nil)
  if valid_611330 != nil:
    section.add "Port", valid_611330
  var valid_611331 = formData.getOrDefault("MultiAZ")
  valid_611331 = validateParameter(valid_611331, JBool, required = false, default = nil)
  if valid_611331 != nil:
    section.add "MultiAZ", valid_611331
  var valid_611332 = formData.getOrDefault("MasterUsername")
  valid_611332 = validateParameter(valid_611332, JString, required = false,
                                 default = nil)
  if valid_611332 != nil:
    section.add "MasterUsername", valid_611332
  var valid_611333 = formData.getOrDefault("MonitoringRoleArn")
  valid_611333 = validateParameter(valid_611333, JString, required = false,
                                 default = nil)
  if valid_611333 != nil:
    section.add "MonitoringRoleArn", valid_611333
  var valid_611334 = formData.getOrDefault("MonitoringInterval")
  valid_611334 = validateParameter(valid_611334, JInt, required = false, default = nil)
  if valid_611334 != nil:
    section.add "MonitoringInterval", valid_611334
  var valid_611335 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_611335 = validateParameter(valid_611335, JArray, required = false,
                                 default = nil)
  if valid_611335 != nil:
    section.add "VpcSecurityGroupIds", valid_611335
  var valid_611336 = formData.getOrDefault("AvailabilityZone")
  valid_611336 = validateParameter(valid_611336, JString, required = false,
                                 default = nil)
  if valid_611336 != nil:
    section.add "AvailabilityZone", valid_611336
  var valid_611337 = formData.getOrDefault("EnablePerformanceInsights")
  valid_611337 = validateParameter(valid_611337, JBool, required = false, default = nil)
  if valid_611337 != nil:
    section.add "EnablePerformanceInsights", valid_611337
  var valid_611338 = formData.getOrDefault("DBInstanceIdentifier")
  valid_611338 = validateParameter(valid_611338, JString, required = true,
                                 default = nil)
  if valid_611338 != nil:
    section.add "DBInstanceIdentifier", valid_611338
  var valid_611339 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_611339 = validateParameter(valid_611339, JArray, required = false,
                                 default = nil)
  if valid_611339 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611339
  var valid_611340 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_611340 = validateParameter(valid_611340, JInt, required = false, default = nil)
  if valid_611340 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_611340
  var valid_611341 = formData.getOrDefault("DBSubnetGroupName")
  valid_611341 = validateParameter(valid_611341, JString, required = false,
                                 default = nil)
  if valid_611341 != nil:
    section.add "DBSubnetGroupName", valid_611341
  var valid_611342 = formData.getOrDefault("StorageType")
  valid_611342 = validateParameter(valid_611342, JString, required = false,
                                 default = nil)
  if valid_611342 != nil:
    section.add "StorageType", valid_611342
  var valid_611343 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_611343 = validateParameter(valid_611343, JBool, required = false, default = nil)
  if valid_611343 != nil:
    section.add "CopyTagsToSnapshot", valid_611343
  var valid_611344 = formData.getOrDefault("DeletionProtection")
  valid_611344 = validateParameter(valid_611344, JBool, required = false, default = nil)
  if valid_611344 != nil:
    section.add "DeletionProtection", valid_611344
  var valid_611345 = formData.getOrDefault("ProcessorFeatures")
  valid_611345 = validateParameter(valid_611345, JArray, required = false,
                                 default = nil)
  if valid_611345 != nil:
    section.add "ProcessorFeatures", valid_611345
  var valid_611346 = formData.getOrDefault("AllocatedStorage")
  valid_611346 = validateParameter(valid_611346, JInt, required = false, default = nil)
  if valid_611346 != nil:
    section.add "AllocatedStorage", valid_611346
  var valid_611347 = formData.getOrDefault("S3Prefix")
  valid_611347 = validateParameter(valid_611347, JString, required = false,
                                 default = nil)
  if valid_611347 != nil:
    section.add "S3Prefix", valid_611347
  var valid_611348 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_611348 = validateParameter(valid_611348, JString, required = false,
                                 default = nil)
  if valid_611348 != nil:
    section.add "PreferredMaintenanceWindow", valid_611348
  var valid_611349 = formData.getOrDefault("DBInstanceClass")
  valid_611349 = validateParameter(valid_611349, JString, required = true,
                                 default = nil)
  if valid_611349 != nil:
    section.add "DBInstanceClass", valid_611349
  var valid_611350 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_611350 = validateParameter(valid_611350, JBool, required = false, default = nil)
  if valid_611350 != nil:
    section.add "UseDefaultProcessorFeatures", valid_611350
  var valid_611351 = formData.getOrDefault("PreferredBackupWindow")
  valid_611351 = validateParameter(valid_611351, JString, required = false,
                                 default = nil)
  if valid_611351 != nil:
    section.add "PreferredBackupWindow", valid_611351
  var valid_611352 = formData.getOrDefault("MasterUserPassword")
  valid_611352 = validateParameter(valid_611352, JString, required = false,
                                 default = nil)
  if valid_611352 != nil:
    section.add "MasterUserPassword", valid_611352
  var valid_611353 = formData.getOrDefault("SourceEngine")
  valid_611353 = validateParameter(valid_611353, JString, required = true,
                                 default = nil)
  if valid_611353 != nil:
    section.add "SourceEngine", valid_611353
  var valid_611354 = formData.getOrDefault("DBParameterGroupName")
  valid_611354 = validateParameter(valid_611354, JString, required = false,
                                 default = nil)
  if valid_611354 != nil:
    section.add "DBParameterGroupName", valid_611354
  var valid_611355 = formData.getOrDefault("EngineVersion")
  valid_611355 = validateParameter(valid_611355, JString, required = false,
                                 default = nil)
  if valid_611355 != nil:
    section.add "EngineVersion", valid_611355
  var valid_611356 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611356 = validateParameter(valid_611356, JBool, required = false, default = nil)
  if valid_611356 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611356
  var valid_611357 = formData.getOrDefault("BackupRetentionPeriod")
  valid_611357 = validateParameter(valid_611357, JInt, required = false, default = nil)
  if valid_611357 != nil:
    section.add "BackupRetentionPeriod", valid_611357
  var valid_611358 = formData.getOrDefault("KmsKeyId")
  valid_611358 = validateParameter(valid_611358, JString, required = false,
                                 default = nil)
  if valid_611358 != nil:
    section.add "KmsKeyId", valid_611358
  var valid_611359 = formData.getOrDefault("Engine")
  valid_611359 = validateParameter(valid_611359, JString, required = true,
                                 default = nil)
  if valid_611359 != nil:
    section.add "Engine", valid_611359
  var valid_611360 = formData.getOrDefault("S3BucketName")
  valid_611360 = validateParameter(valid_611360, JString, required = true,
                                 default = nil)
  if valid_611360 != nil:
    section.add "S3BucketName", valid_611360
  var valid_611361 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_611361 = validateParameter(valid_611361, JBool, required = false, default = nil)
  if valid_611361 != nil:
    section.add "AutoMinorVersionUpgrade", valid_611361
  var valid_611362 = formData.getOrDefault("DBName")
  valid_611362 = validateParameter(valid_611362, JString, required = false,
                                 default = nil)
  if valid_611362 != nil:
    section.add "DBName", valid_611362
  var valid_611363 = formData.getOrDefault("Iops")
  valid_611363 = validateParameter(valid_611363, JInt, required = false, default = nil)
  if valid_611363 != nil:
    section.add "Iops", valid_611363
  var valid_611364 = formData.getOrDefault("PubliclyAccessible")
  valid_611364 = validateParameter(valid_611364, JBool, required = false, default = nil)
  if valid_611364 != nil:
    section.add "PubliclyAccessible", valid_611364
  var valid_611365 = formData.getOrDefault("SourceEngineVersion")
  valid_611365 = validateParameter(valid_611365, JString, required = true,
                                 default = nil)
  if valid_611365 != nil:
    section.add "SourceEngineVersion", valid_611365
  var valid_611366 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_611366 = validateParameter(valid_611366, JString, required = false,
                                 default = nil)
  if valid_611366 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_611366
  var valid_611367 = formData.getOrDefault("LicenseModel")
  valid_611367 = validateParameter(valid_611367, JString, required = false,
                                 default = nil)
  if valid_611367 != nil:
    section.add "LicenseModel", valid_611367
  var valid_611368 = formData.getOrDefault("Tags")
  valid_611368 = validateParameter(valid_611368, JArray, required = false,
                                 default = nil)
  if valid_611368 != nil:
    section.add "Tags", valid_611368
  var valid_611369 = formData.getOrDefault("OptionGroupName")
  valid_611369 = validateParameter(valid_611369, JString, required = false,
                                 default = nil)
  if valid_611369 != nil:
    section.add "OptionGroupName", valid_611369
  var valid_611370 = formData.getOrDefault("DBSecurityGroups")
  valid_611370 = validateParameter(valid_611370, JArray, required = false,
                                 default = nil)
  if valid_611370 != nil:
    section.add "DBSecurityGroups", valid_611370
  var valid_611371 = formData.getOrDefault("StorageEncrypted")
  valid_611371 = validateParameter(valid_611371, JBool, required = false, default = nil)
  if valid_611371 != nil:
    section.add "StorageEncrypted", valid_611371
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611372: Call_PostRestoreDBInstanceFromS3_611317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_611372.validator(path, query, header, formData, body)
  let scheme = call_611372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611372.url(scheme.get, call_611372.host, call_611372.base,
                         call_611372.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611372, url, valid)

proc call*(call_611373: Call_PostRestoreDBInstanceFromS3_611317;
          S3IngestionRoleArn: string; DBInstanceIdentifier: string;
          DBInstanceClass: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string; Port: int = 0;
          MultiAZ: bool = false; MasterUsername: string = "";
          MonitoringRoleArn: string = ""; MonitoringInterval: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnablePerformanceInsights: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromS3";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          S3Prefix: string = ""; PreferredMaintenanceWindow: string = "";
          UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; DBName: string = ""; Iops: int = 0;
          PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"; DBSecurityGroups: JsonNode = nil;
          StorageEncrypted: bool = false): Recallable =
  ## postRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  var query_611374 = newJObject()
  var formData_611375 = newJObject()
  add(formData_611375, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_611375, "Port", newJInt(Port))
  add(formData_611375, "MultiAZ", newJBool(MultiAZ))
  add(formData_611375, "MasterUsername", newJString(MasterUsername))
  add(formData_611375, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_611375, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_611375.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_611375, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_611375, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_611375, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_611375.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_611374, "Action", newJString(Action))
  add(formData_611375, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_611375, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_611375, "StorageType", newJString(StorageType))
  add(formData_611375, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_611375, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_611375.add "ProcessorFeatures", ProcessorFeatures
  add(formData_611375, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_611375, "S3Prefix", newJString(S3Prefix))
  add(formData_611375, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_611375, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_611375, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_611375, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_611375, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_611375, "SourceEngine", newJString(SourceEngine))
  add(formData_611375, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_611375, "EngineVersion", newJString(EngineVersion))
  add(formData_611375, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_611375, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_611375, "KmsKeyId", newJString(KmsKeyId))
  add(formData_611375, "Engine", newJString(Engine))
  add(formData_611375, "S3BucketName", newJString(S3BucketName))
  add(formData_611375, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_611375, "DBName", newJString(DBName))
  add(formData_611375, "Iops", newJInt(Iops))
  add(formData_611375, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_611375, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_611375, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_611375, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_611375.add "Tags", Tags
  add(formData_611375, "OptionGroupName", newJString(OptionGroupName))
  add(query_611374, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_611375.add "DBSecurityGroups", DBSecurityGroups
  add(formData_611375, "StorageEncrypted", newJBool(StorageEncrypted))
  result = call_611373.call(nil, query_611374, nil, formData_611375, nil)

var postRestoreDBInstanceFromS3* = Call_PostRestoreDBInstanceFromS3_611317(
    name: "postRestoreDBInstanceFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_PostRestoreDBInstanceFromS3_611318, base: "/",
    url: url_PostRestoreDBInstanceFromS3_611319,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromS3_611259 = ref object of OpenApiRestCall_605589
proc url_GetRestoreDBInstanceFromS3_611261(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceFromS3_611260(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_611262 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_611262 = validateParameter(valid_611262, JBool, required = false, default = nil)
  if valid_611262 != nil:
    section.add "UseDefaultProcessorFeatures", valid_611262
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_611263 = query.getOrDefault("SourceEngineVersion")
  valid_611263 = validateParameter(valid_611263, JString, required = true,
                                 default = nil)
  if valid_611263 != nil:
    section.add "SourceEngineVersion", valid_611263
  var valid_611264 = query.getOrDefault("SourceEngine")
  valid_611264 = validateParameter(valid_611264, JString, required = true,
                                 default = nil)
  if valid_611264 != nil:
    section.add "SourceEngine", valid_611264
  var valid_611265 = query.getOrDefault("Engine")
  valid_611265 = validateParameter(valid_611265, JString, required = true,
                                 default = nil)
  if valid_611265 != nil:
    section.add "Engine", valid_611265
  var valid_611266 = query.getOrDefault("CopyTagsToSnapshot")
  valid_611266 = validateParameter(valid_611266, JBool, required = false, default = nil)
  if valid_611266 != nil:
    section.add "CopyTagsToSnapshot", valid_611266
  var valid_611267 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_611267 = validateParameter(valid_611267, JInt, required = false, default = nil)
  if valid_611267 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_611267
  var valid_611268 = query.getOrDefault("MonitoringInterval")
  valid_611268 = validateParameter(valid_611268, JInt, required = false, default = nil)
  if valid_611268 != nil:
    section.add "MonitoringInterval", valid_611268
  var valid_611269 = query.getOrDefault("KmsKeyId")
  valid_611269 = validateParameter(valid_611269, JString, required = false,
                                 default = nil)
  if valid_611269 != nil:
    section.add "KmsKeyId", valid_611269
  var valid_611270 = query.getOrDefault("MonitoringRoleArn")
  valid_611270 = validateParameter(valid_611270, JString, required = false,
                                 default = nil)
  if valid_611270 != nil:
    section.add "MonitoringRoleArn", valid_611270
  var valid_611271 = query.getOrDefault("S3BucketName")
  valid_611271 = validateParameter(valid_611271, JString, required = true,
                                 default = nil)
  if valid_611271 != nil:
    section.add "S3BucketName", valid_611271
  var valid_611272 = query.getOrDefault("ProcessorFeatures")
  valid_611272 = validateParameter(valid_611272, JArray, required = false,
                                 default = nil)
  if valid_611272 != nil:
    section.add "ProcessorFeatures", valid_611272
  var valid_611273 = query.getOrDefault("MasterUsername")
  valid_611273 = validateParameter(valid_611273, JString, required = false,
                                 default = nil)
  if valid_611273 != nil:
    section.add "MasterUsername", valid_611273
  var valid_611274 = query.getOrDefault("BackupRetentionPeriod")
  valid_611274 = validateParameter(valid_611274, JInt, required = false, default = nil)
  if valid_611274 != nil:
    section.add "BackupRetentionPeriod", valid_611274
  var valid_611275 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_611275 = validateParameter(valid_611275, JArray, required = false,
                                 default = nil)
  if valid_611275 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611275
  var valid_611276 = query.getOrDefault("EngineVersion")
  valid_611276 = validateParameter(valid_611276, JString, required = false,
                                 default = nil)
  if valid_611276 != nil:
    section.add "EngineVersion", valid_611276
  var valid_611277 = query.getOrDefault("Action")
  valid_611277 = validateParameter(valid_611277, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_611277 != nil:
    section.add "Action", valid_611277
  var valid_611278 = query.getOrDefault("VpcSecurityGroupIds")
  valid_611278 = validateParameter(valid_611278, JArray, required = false,
                                 default = nil)
  if valid_611278 != nil:
    section.add "VpcSecurityGroupIds", valid_611278
  var valid_611279 = query.getOrDefault("AllocatedStorage")
  valid_611279 = validateParameter(valid_611279, JInt, required = false, default = nil)
  if valid_611279 != nil:
    section.add "AllocatedStorage", valid_611279
  var valid_611280 = query.getOrDefault("EnablePerformanceInsights")
  valid_611280 = validateParameter(valid_611280, JBool, required = false, default = nil)
  if valid_611280 != nil:
    section.add "EnablePerformanceInsights", valid_611280
  var valid_611281 = query.getOrDefault("PubliclyAccessible")
  valid_611281 = validateParameter(valid_611281, JBool, required = false, default = nil)
  if valid_611281 != nil:
    section.add "PubliclyAccessible", valid_611281
  var valid_611282 = query.getOrDefault("S3IngestionRoleArn")
  valid_611282 = validateParameter(valid_611282, JString, required = true,
                                 default = nil)
  if valid_611282 != nil:
    section.add "S3IngestionRoleArn", valid_611282
  var valid_611283 = query.getOrDefault("DBName")
  valid_611283 = validateParameter(valid_611283, JString, required = false,
                                 default = nil)
  if valid_611283 != nil:
    section.add "DBName", valid_611283
  var valid_611284 = query.getOrDefault("StorageEncrypted")
  valid_611284 = validateParameter(valid_611284, JBool, required = false, default = nil)
  if valid_611284 != nil:
    section.add "StorageEncrypted", valid_611284
  var valid_611285 = query.getOrDefault("DBParameterGroupName")
  valid_611285 = validateParameter(valid_611285, JString, required = false,
                                 default = nil)
  if valid_611285 != nil:
    section.add "DBParameterGroupName", valid_611285
  var valid_611286 = query.getOrDefault("DeletionProtection")
  valid_611286 = validateParameter(valid_611286, JBool, required = false, default = nil)
  if valid_611286 != nil:
    section.add "DeletionProtection", valid_611286
  var valid_611287 = query.getOrDefault("S3Prefix")
  valid_611287 = validateParameter(valid_611287, JString, required = false,
                                 default = nil)
  if valid_611287 != nil:
    section.add "S3Prefix", valid_611287
  var valid_611288 = query.getOrDefault("Tags")
  valid_611288 = validateParameter(valid_611288, JArray, required = false,
                                 default = nil)
  if valid_611288 != nil:
    section.add "Tags", valid_611288
  var valid_611289 = query.getOrDefault("LicenseModel")
  valid_611289 = validateParameter(valid_611289, JString, required = false,
                                 default = nil)
  if valid_611289 != nil:
    section.add "LicenseModel", valid_611289
  var valid_611290 = query.getOrDefault("DBInstanceIdentifier")
  valid_611290 = validateParameter(valid_611290, JString, required = true,
                                 default = nil)
  if valid_611290 != nil:
    section.add "DBInstanceIdentifier", valid_611290
  var valid_611291 = query.getOrDefault("StorageType")
  valid_611291 = validateParameter(valid_611291, JString, required = false,
                                 default = nil)
  if valid_611291 != nil:
    section.add "StorageType", valid_611291
  var valid_611292 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611292 = validateParameter(valid_611292, JBool, required = false, default = nil)
  if valid_611292 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611292
  var valid_611293 = query.getOrDefault("MultiAZ")
  valid_611293 = validateParameter(valid_611293, JBool, required = false, default = nil)
  if valid_611293 != nil:
    section.add "MultiAZ", valid_611293
  var valid_611294 = query.getOrDefault("DBSecurityGroups")
  valid_611294 = validateParameter(valid_611294, JArray, required = false,
                                 default = nil)
  if valid_611294 != nil:
    section.add "DBSecurityGroups", valid_611294
  var valid_611295 = query.getOrDefault("Port")
  valid_611295 = validateParameter(valid_611295, JInt, required = false, default = nil)
  if valid_611295 != nil:
    section.add "Port", valid_611295
  var valid_611296 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_611296 = validateParameter(valid_611296, JString, required = false,
                                 default = nil)
  if valid_611296 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_611296
  var valid_611297 = query.getOrDefault("MasterUserPassword")
  valid_611297 = validateParameter(valid_611297, JString, required = false,
                                 default = nil)
  if valid_611297 != nil:
    section.add "MasterUserPassword", valid_611297
  var valid_611298 = query.getOrDefault("AvailabilityZone")
  valid_611298 = validateParameter(valid_611298, JString, required = false,
                                 default = nil)
  if valid_611298 != nil:
    section.add "AvailabilityZone", valid_611298
  var valid_611299 = query.getOrDefault("OptionGroupName")
  valid_611299 = validateParameter(valid_611299, JString, required = false,
                                 default = nil)
  if valid_611299 != nil:
    section.add "OptionGroupName", valid_611299
  var valid_611300 = query.getOrDefault("DBSubnetGroupName")
  valid_611300 = validateParameter(valid_611300, JString, required = false,
                                 default = nil)
  if valid_611300 != nil:
    section.add "DBSubnetGroupName", valid_611300
  var valid_611301 = query.getOrDefault("PreferredBackupWindow")
  valid_611301 = validateParameter(valid_611301, JString, required = false,
                                 default = nil)
  if valid_611301 != nil:
    section.add "PreferredBackupWindow", valid_611301
  var valid_611302 = query.getOrDefault("DBInstanceClass")
  valid_611302 = validateParameter(valid_611302, JString, required = true,
                                 default = nil)
  if valid_611302 != nil:
    section.add "DBInstanceClass", valid_611302
  var valid_611303 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_611303 = validateParameter(valid_611303, JString, required = false,
                                 default = nil)
  if valid_611303 != nil:
    section.add "PreferredMaintenanceWindow", valid_611303
  var valid_611304 = query.getOrDefault("Version")
  valid_611304 = validateParameter(valid_611304, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611304 != nil:
    section.add "Version", valid_611304
  var valid_611305 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_611305 = validateParameter(valid_611305, JBool, required = false, default = nil)
  if valid_611305 != nil:
    section.add "AutoMinorVersionUpgrade", valid_611305
  var valid_611306 = query.getOrDefault("Iops")
  valid_611306 = validateParameter(valid_611306, JInt, required = false, default = nil)
  if valid_611306 != nil:
    section.add "Iops", valid_611306
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_611307 = header.getOrDefault("X-Amz-Security-Token")
  valid_611307 = validateParameter(valid_611307, JString, required = false,
                                 default = nil)
  if valid_611307 != nil:
    section.add "X-Amz-Security-Token", valid_611307
  var valid_611308 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611308 = validateParameter(valid_611308, JString, required = false,
                                 default = nil)
  if valid_611308 != nil:
    section.add "X-Amz-SignedHeaders", valid_611308
  var valid_611309 = header.getOrDefault("X-Amz-Signature")
  valid_611309 = validateParameter(valid_611309, JString, required = false,
                                 default = nil)
  if valid_611309 != nil:
    section.add "X-Amz-Signature", valid_611309
  var valid_611310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611310 = validateParameter(valid_611310, JString, required = false,
                                 default = nil)
  if valid_611310 != nil:
    section.add "X-Amz-Content-Sha256", valid_611310
  var valid_611311 = header.getOrDefault("X-Amz-Date")
  valid_611311 = validateParameter(valid_611311, JString, required = false,
                                 default = nil)
  if valid_611311 != nil:
    section.add "X-Amz-Date", valid_611311
  var valid_611312 = header.getOrDefault("X-Amz-Credential")
  valid_611312 = validateParameter(valid_611312, JString, required = false,
                                 default = nil)
  if valid_611312 != nil:
    section.add "X-Amz-Credential", valid_611312
  var valid_611313 = header.getOrDefault("X-Amz-Algorithm")
  valid_611313 = validateParameter(valid_611313, JString, required = false,
                                 default = nil)
  if valid_611313 != nil:
    section.add "X-Amz-Algorithm", valid_611313
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611314: Call_GetRestoreDBInstanceFromS3_611259; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_611314.validator(path, query, header, formData, body)
  let scheme = call_611314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611314.url(scheme.get, call_611314.host, call_611314.base,
                         call_611314.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611314, url, valid)

proc call*(call_611315: Call_GetRestoreDBInstanceFromS3_611259;
          SourceEngineVersion: string; SourceEngine: string; Engine: string;
          S3BucketName: string; S3IngestionRoleArn: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          UseDefaultProcessorFeatures: bool = false;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBInstanceFromS3";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; StorageEncrypted: bool = false;
          DBParameterGroupName: string = ""; DeletionProtection: bool = false;
          S3Prefix: string = ""; Tags: JsonNode = nil; LicenseModel: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0): Recallable =
  ## getRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  var query_611316 = newJObject()
  add(query_611316, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_611316, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_611316, "SourceEngine", newJString(SourceEngine))
  add(query_611316, "Engine", newJString(Engine))
  add(query_611316, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_611316, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_611316, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_611316, "KmsKeyId", newJString(KmsKeyId))
  add(query_611316, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_611316, "S3BucketName", newJString(S3BucketName))
  if ProcessorFeatures != nil:
    query_611316.add "ProcessorFeatures", ProcessorFeatures
  add(query_611316, "MasterUsername", newJString(MasterUsername))
  add(query_611316, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_611316.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_611316, "EngineVersion", newJString(EngineVersion))
  add(query_611316, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_611316.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_611316, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_611316, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_611316, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_611316, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_611316, "DBName", newJString(DBName))
  add(query_611316, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_611316, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_611316, "DeletionProtection", newJBool(DeletionProtection))
  add(query_611316, "S3Prefix", newJString(S3Prefix))
  if Tags != nil:
    query_611316.add "Tags", Tags
  add(query_611316, "LicenseModel", newJString(LicenseModel))
  add(query_611316, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_611316, "StorageType", newJString(StorageType))
  add(query_611316, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_611316, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_611316.add "DBSecurityGroups", DBSecurityGroups
  add(query_611316, "Port", newJInt(Port))
  add(query_611316, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_611316, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_611316, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_611316, "OptionGroupName", newJString(OptionGroupName))
  add(query_611316, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_611316, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_611316, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_611316, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_611316, "Version", newJString(Version))
  add(query_611316, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_611316, "Iops", newJInt(Iops))
  result = call_611315.call(nil, query_611316, nil, nil, nil)

var getRestoreDBInstanceFromS3* = Call_GetRestoreDBInstanceFromS3_611259(
    name: "getRestoreDBInstanceFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_GetRestoreDBInstanceFromS3_611260, base: "/",
    url: url_GetRestoreDBInstanceFromS3_611261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceToPointInTime_611422 = ref object of OpenApiRestCall_605589
proc url_PostRestoreDBInstanceToPointInTime_611424(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceToPointInTime_611423(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611425 = query.getOrDefault("Action")
  valid_611425 = validateParameter(valid_611425, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_611425 != nil:
    section.add "Action", valid_611425
  var valid_611426 = query.getOrDefault("Version")
  valid_611426 = validateParameter(valid_611426, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611426 != nil:
    section.add "Version", valid_611426
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611427 = header.getOrDefault("X-Amz-Signature")
  valid_611427 = validateParameter(valid_611427, JString, required = false,
                                 default = nil)
  if valid_611427 != nil:
    section.add "X-Amz-Signature", valid_611427
  var valid_611428 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611428 = validateParameter(valid_611428, JString, required = false,
                                 default = nil)
  if valid_611428 != nil:
    section.add "X-Amz-Content-Sha256", valid_611428
  var valid_611429 = header.getOrDefault("X-Amz-Date")
  valid_611429 = validateParameter(valid_611429, JString, required = false,
                                 default = nil)
  if valid_611429 != nil:
    section.add "X-Amz-Date", valid_611429
  var valid_611430 = header.getOrDefault("X-Amz-Credential")
  valid_611430 = validateParameter(valid_611430, JString, required = false,
                                 default = nil)
  if valid_611430 != nil:
    section.add "X-Amz-Credential", valid_611430
  var valid_611431 = header.getOrDefault("X-Amz-Security-Token")
  valid_611431 = validateParameter(valid_611431, JString, required = false,
                                 default = nil)
  if valid_611431 != nil:
    section.add "X-Amz-Security-Token", valid_611431
  var valid_611432 = header.getOrDefault("X-Amz-Algorithm")
  valid_611432 = validateParameter(valid_611432, JString, required = false,
                                 default = nil)
  if valid_611432 != nil:
    section.add "X-Amz-Algorithm", valid_611432
  var valid_611433 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611433 = validateParameter(valid_611433, JString, required = false,
                                 default = nil)
  if valid_611433 != nil:
    section.add "X-Amz-SignedHeaders", valid_611433
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_611434 = formData.getOrDefault("Port")
  valid_611434 = validateParameter(valid_611434, JInt, required = false, default = nil)
  if valid_611434 != nil:
    section.add "Port", valid_611434
  var valid_611435 = formData.getOrDefault("DBInstanceClass")
  valid_611435 = validateParameter(valid_611435, JString, required = false,
                                 default = nil)
  if valid_611435 != nil:
    section.add "DBInstanceClass", valid_611435
  var valid_611436 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_611436 = validateParameter(valid_611436, JBool, required = false, default = nil)
  if valid_611436 != nil:
    section.add "UseDefaultProcessorFeatures", valid_611436
  var valid_611437 = formData.getOrDefault("MultiAZ")
  valid_611437 = validateParameter(valid_611437, JBool, required = false, default = nil)
  if valid_611437 != nil:
    section.add "MultiAZ", valid_611437
  var valid_611438 = formData.getOrDefault("Domain")
  valid_611438 = validateParameter(valid_611438, JString, required = false,
                                 default = nil)
  if valid_611438 != nil:
    section.add "Domain", valid_611438
  var valid_611439 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_611439 = validateParameter(valid_611439, JString, required = false,
                                 default = nil)
  if valid_611439 != nil:
    section.add "SourceDBInstanceIdentifier", valid_611439
  var valid_611440 = formData.getOrDefault("DBParameterGroupName")
  valid_611440 = validateParameter(valid_611440, JString, required = false,
                                 default = nil)
  if valid_611440 != nil:
    section.add "DBParameterGroupName", valid_611440
  var valid_611441 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_611441 = validateParameter(valid_611441, JArray, required = false,
                                 default = nil)
  if valid_611441 != nil:
    section.add "VpcSecurityGroupIds", valid_611441
  var valid_611442 = formData.getOrDefault("AvailabilityZone")
  valid_611442 = validateParameter(valid_611442, JString, required = false,
                                 default = nil)
  if valid_611442 != nil:
    section.add "AvailabilityZone", valid_611442
  var valid_611443 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611443 = validateParameter(valid_611443, JBool, required = false, default = nil)
  if valid_611443 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611443
  var valid_611444 = formData.getOrDefault("Engine")
  valid_611444 = validateParameter(valid_611444, JString, required = false,
                                 default = nil)
  if valid_611444 != nil:
    section.add "Engine", valid_611444
  var valid_611445 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_611445 = validateParameter(valid_611445, JBool, required = false, default = nil)
  if valid_611445 != nil:
    section.add "AutoMinorVersionUpgrade", valid_611445
  var valid_611446 = formData.getOrDefault("TdeCredentialPassword")
  valid_611446 = validateParameter(valid_611446, JString, required = false,
                                 default = nil)
  if valid_611446 != nil:
    section.add "TdeCredentialPassword", valid_611446
  var valid_611447 = formData.getOrDefault("UseLatestRestorableTime")
  valid_611447 = validateParameter(valid_611447, JBool, required = false, default = nil)
  if valid_611447 != nil:
    section.add "UseLatestRestorableTime", valid_611447
  var valid_611448 = formData.getOrDefault("DBName")
  valid_611448 = validateParameter(valid_611448, JString, required = false,
                                 default = nil)
  if valid_611448 != nil:
    section.add "DBName", valid_611448
  var valid_611449 = formData.getOrDefault("Iops")
  valid_611449 = validateParameter(valid_611449, JInt, required = false, default = nil)
  if valid_611449 != nil:
    section.add "Iops", valid_611449
  var valid_611450 = formData.getOrDefault("TdeCredentialArn")
  valid_611450 = validateParameter(valid_611450, JString, required = false,
                                 default = nil)
  if valid_611450 != nil:
    section.add "TdeCredentialArn", valid_611450
  var valid_611451 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_611451 = validateParameter(valid_611451, JArray, required = false,
                                 default = nil)
  if valid_611451 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611451
  var valid_611452 = formData.getOrDefault("PubliclyAccessible")
  valid_611452 = validateParameter(valid_611452, JBool, required = false, default = nil)
  if valid_611452 != nil:
    section.add "PubliclyAccessible", valid_611452
  var valid_611453 = formData.getOrDefault("LicenseModel")
  valid_611453 = validateParameter(valid_611453, JString, required = false,
                                 default = nil)
  if valid_611453 != nil:
    section.add "LicenseModel", valid_611453
  var valid_611454 = formData.getOrDefault("Tags")
  valid_611454 = validateParameter(valid_611454, JArray, required = false,
                                 default = nil)
  if valid_611454 != nil:
    section.add "Tags", valid_611454
  var valid_611455 = formData.getOrDefault("DBSubnetGroupName")
  valid_611455 = validateParameter(valid_611455, JString, required = false,
                                 default = nil)
  if valid_611455 != nil:
    section.add "DBSubnetGroupName", valid_611455
  var valid_611456 = formData.getOrDefault("DomainIAMRoleName")
  valid_611456 = validateParameter(valid_611456, JString, required = false,
                                 default = nil)
  if valid_611456 != nil:
    section.add "DomainIAMRoleName", valid_611456
  var valid_611457 = formData.getOrDefault("OptionGroupName")
  valid_611457 = validateParameter(valid_611457, JString, required = false,
                                 default = nil)
  if valid_611457 != nil:
    section.add "OptionGroupName", valid_611457
  var valid_611458 = formData.getOrDefault("RestoreTime")
  valid_611458 = validateParameter(valid_611458, JString, required = false,
                                 default = nil)
  if valid_611458 != nil:
    section.add "RestoreTime", valid_611458
  assert formData != nil, "formData argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_611459 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_611459 = validateParameter(valid_611459, JString, required = true,
                                 default = nil)
  if valid_611459 != nil:
    section.add "TargetDBInstanceIdentifier", valid_611459
  var valid_611460 = formData.getOrDefault("StorageType")
  valid_611460 = validateParameter(valid_611460, JString, required = false,
                                 default = nil)
  if valid_611460 != nil:
    section.add "StorageType", valid_611460
  var valid_611461 = formData.getOrDefault("SourceDbiResourceId")
  valid_611461 = validateParameter(valid_611461, JString, required = false,
                                 default = nil)
  if valid_611461 != nil:
    section.add "SourceDbiResourceId", valid_611461
  var valid_611462 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_611462 = validateParameter(valid_611462, JBool, required = false, default = nil)
  if valid_611462 != nil:
    section.add "CopyTagsToSnapshot", valid_611462
  var valid_611463 = formData.getOrDefault("DeletionProtection")
  valid_611463 = validateParameter(valid_611463, JBool, required = false, default = nil)
  if valid_611463 != nil:
    section.add "DeletionProtection", valid_611463
  var valid_611464 = formData.getOrDefault("ProcessorFeatures")
  valid_611464 = validateParameter(valid_611464, JArray, required = false,
                                 default = nil)
  if valid_611464 != nil:
    section.add "ProcessorFeatures", valid_611464
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611465: Call_PostRestoreDBInstanceToPointInTime_611422;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_611465.validator(path, query, header, formData, body)
  let scheme = call_611465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611465.url(scheme.get, call_611465.host, call_611465.base,
                         call_611465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611465, url, valid)

proc call*(call_611466: Call_PostRestoreDBInstanceToPointInTime_611422;
          TargetDBInstanceIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = "";
          SourceDBInstanceIdentifier: string = "";
          DBParameterGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          UseLatestRestorableTime: bool = false; DBName: string = ""; Iops: int = 0;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceToPointInTime";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; RestoreTime: string = "";
          Version: string = "2014-10-31"; StorageType: string = "";
          SourceDbiResourceId: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_611467 = newJObject()
  var formData_611468 = newJObject()
  add(formData_611468, "Port", newJInt(Port))
  add(formData_611468, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_611468, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_611468, "MultiAZ", newJBool(MultiAZ))
  add(formData_611468, "Domain", newJString(Domain))
  add(formData_611468, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_611468, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_611468.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_611468, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_611468, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_611468, "Engine", newJString(Engine))
  add(formData_611468, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_611468, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_611468, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_611468, "DBName", newJString(DBName))
  add(formData_611468, "Iops", newJInt(Iops))
  add(formData_611468, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_611468.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_611468, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_611467, "Action", newJString(Action))
  add(formData_611468, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_611468.add "Tags", Tags
  add(formData_611468, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_611468, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_611468, "OptionGroupName", newJString(OptionGroupName))
  add(formData_611468, "RestoreTime", newJString(RestoreTime))
  add(formData_611468, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_611467, "Version", newJString(Version))
  add(formData_611468, "StorageType", newJString(StorageType))
  add(formData_611468, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(formData_611468, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_611468, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_611468.add "ProcessorFeatures", ProcessorFeatures
  result = call_611466.call(nil, query_611467, nil, formData_611468, nil)

var postRestoreDBInstanceToPointInTime* = Call_PostRestoreDBInstanceToPointInTime_611422(
    name: "postRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_PostRestoreDBInstanceToPointInTime_611423, base: "/",
    url: url_PostRestoreDBInstanceToPointInTime_611424,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceToPointInTime_611376 = ref object of OpenApiRestCall_605589
proc url_GetRestoreDBInstanceToPointInTime_611378(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceToPointInTime_611377(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_611379 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_611379 = validateParameter(valid_611379, JBool, required = false, default = nil)
  if valid_611379 != nil:
    section.add "UseDefaultProcessorFeatures", valid_611379
  var valid_611380 = query.getOrDefault("DBName")
  valid_611380 = validateParameter(valid_611380, JString, required = false,
                                 default = nil)
  if valid_611380 != nil:
    section.add "DBName", valid_611380
  var valid_611381 = query.getOrDefault("TdeCredentialPassword")
  valid_611381 = validateParameter(valid_611381, JString, required = false,
                                 default = nil)
  if valid_611381 != nil:
    section.add "TdeCredentialPassword", valid_611381
  var valid_611382 = query.getOrDefault("DeletionProtection")
  valid_611382 = validateParameter(valid_611382, JBool, required = false, default = nil)
  if valid_611382 != nil:
    section.add "DeletionProtection", valid_611382
  var valid_611383 = query.getOrDefault("Engine")
  valid_611383 = validateParameter(valid_611383, JString, required = false,
                                 default = nil)
  if valid_611383 != nil:
    section.add "Engine", valid_611383
  var valid_611384 = query.getOrDefault("UseLatestRestorableTime")
  valid_611384 = validateParameter(valid_611384, JBool, required = false, default = nil)
  if valid_611384 != nil:
    section.add "UseLatestRestorableTime", valid_611384
  var valid_611385 = query.getOrDefault("CopyTagsToSnapshot")
  valid_611385 = validateParameter(valid_611385, JBool, required = false, default = nil)
  if valid_611385 != nil:
    section.add "CopyTagsToSnapshot", valid_611385
  var valid_611386 = query.getOrDefault("DBParameterGroupName")
  valid_611386 = validateParameter(valid_611386, JString, required = false,
                                 default = nil)
  if valid_611386 != nil:
    section.add "DBParameterGroupName", valid_611386
  var valid_611387 = query.getOrDefault("Tags")
  valid_611387 = validateParameter(valid_611387, JArray, required = false,
                                 default = nil)
  if valid_611387 != nil:
    section.add "Tags", valid_611387
  var valid_611388 = query.getOrDefault("LicenseModel")
  valid_611388 = validateParameter(valid_611388, JString, required = false,
                                 default = nil)
  if valid_611388 != nil:
    section.add "LicenseModel", valid_611388
  var valid_611389 = query.getOrDefault("TdeCredentialArn")
  valid_611389 = validateParameter(valid_611389, JString, required = false,
                                 default = nil)
  if valid_611389 != nil:
    section.add "TdeCredentialArn", valid_611389
  var valid_611390 = query.getOrDefault("ProcessorFeatures")
  valid_611390 = validateParameter(valid_611390, JArray, required = false,
                                 default = nil)
  if valid_611390 != nil:
    section.add "ProcessorFeatures", valid_611390
  var valid_611391 = query.getOrDefault("StorageType")
  valid_611391 = validateParameter(valid_611391, JString, required = false,
                                 default = nil)
  if valid_611391 != nil:
    section.add "StorageType", valid_611391
  assert query != nil, "query argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_611392 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_611392 = validateParameter(valid_611392, JString, required = true,
                                 default = nil)
  if valid_611392 != nil:
    section.add "TargetDBInstanceIdentifier", valid_611392
  var valid_611393 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_611393 = validateParameter(valid_611393, JBool, required = false, default = nil)
  if valid_611393 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_611393
  var valid_611394 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_611394 = validateParameter(valid_611394, JArray, required = false,
                                 default = nil)
  if valid_611394 != nil:
    section.add "EnableCloudwatchLogsExports", valid_611394
  var valid_611395 = query.getOrDefault("Action")
  valid_611395 = validateParameter(valid_611395, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_611395 != nil:
    section.add "Action", valid_611395
  var valid_611396 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_611396 = validateParameter(valid_611396, JString, required = false,
                                 default = nil)
  if valid_611396 != nil:
    section.add "SourceDBInstanceIdentifier", valid_611396
  var valid_611397 = query.getOrDefault("MultiAZ")
  valid_611397 = validateParameter(valid_611397, JBool, required = false, default = nil)
  if valid_611397 != nil:
    section.add "MultiAZ", valid_611397
  var valid_611398 = query.getOrDefault("Port")
  valid_611398 = validateParameter(valid_611398, JInt, required = false, default = nil)
  if valid_611398 != nil:
    section.add "Port", valid_611398
  var valid_611399 = query.getOrDefault("Domain")
  valid_611399 = validateParameter(valid_611399, JString, required = false,
                                 default = nil)
  if valid_611399 != nil:
    section.add "Domain", valid_611399
  var valid_611400 = query.getOrDefault("VpcSecurityGroupIds")
  valid_611400 = validateParameter(valid_611400, JArray, required = false,
                                 default = nil)
  if valid_611400 != nil:
    section.add "VpcSecurityGroupIds", valid_611400
  var valid_611401 = query.getOrDefault("SourceDbiResourceId")
  valid_611401 = validateParameter(valid_611401, JString, required = false,
                                 default = nil)
  if valid_611401 != nil:
    section.add "SourceDbiResourceId", valid_611401
  var valid_611402 = query.getOrDefault("AvailabilityZone")
  valid_611402 = validateParameter(valid_611402, JString, required = false,
                                 default = nil)
  if valid_611402 != nil:
    section.add "AvailabilityZone", valid_611402
  var valid_611403 = query.getOrDefault("OptionGroupName")
  valid_611403 = validateParameter(valid_611403, JString, required = false,
                                 default = nil)
  if valid_611403 != nil:
    section.add "OptionGroupName", valid_611403
  var valid_611404 = query.getOrDefault("DBSubnetGroupName")
  valid_611404 = validateParameter(valid_611404, JString, required = false,
                                 default = nil)
  if valid_611404 != nil:
    section.add "DBSubnetGroupName", valid_611404
  var valid_611405 = query.getOrDefault("RestoreTime")
  valid_611405 = validateParameter(valid_611405, JString, required = false,
                                 default = nil)
  if valid_611405 != nil:
    section.add "RestoreTime", valid_611405
  var valid_611406 = query.getOrDefault("DBInstanceClass")
  valid_611406 = validateParameter(valid_611406, JString, required = false,
                                 default = nil)
  if valid_611406 != nil:
    section.add "DBInstanceClass", valid_611406
  var valid_611407 = query.getOrDefault("PubliclyAccessible")
  valid_611407 = validateParameter(valid_611407, JBool, required = false, default = nil)
  if valid_611407 != nil:
    section.add "PubliclyAccessible", valid_611407
  var valid_611408 = query.getOrDefault("Version")
  valid_611408 = validateParameter(valid_611408, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611408 != nil:
    section.add "Version", valid_611408
  var valid_611409 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_611409 = validateParameter(valid_611409, JBool, required = false, default = nil)
  if valid_611409 != nil:
    section.add "AutoMinorVersionUpgrade", valid_611409
  var valid_611410 = query.getOrDefault("Iops")
  valid_611410 = validateParameter(valid_611410, JInt, required = false, default = nil)
  if valid_611410 != nil:
    section.add "Iops", valid_611410
  var valid_611411 = query.getOrDefault("DomainIAMRoleName")
  valid_611411 = validateParameter(valid_611411, JString, required = false,
                                 default = nil)
  if valid_611411 != nil:
    section.add "DomainIAMRoleName", valid_611411
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611412 = header.getOrDefault("X-Amz-Signature")
  valid_611412 = validateParameter(valid_611412, JString, required = false,
                                 default = nil)
  if valid_611412 != nil:
    section.add "X-Amz-Signature", valid_611412
  var valid_611413 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611413 = validateParameter(valid_611413, JString, required = false,
                                 default = nil)
  if valid_611413 != nil:
    section.add "X-Amz-Content-Sha256", valid_611413
  var valid_611414 = header.getOrDefault("X-Amz-Date")
  valid_611414 = validateParameter(valid_611414, JString, required = false,
                                 default = nil)
  if valid_611414 != nil:
    section.add "X-Amz-Date", valid_611414
  var valid_611415 = header.getOrDefault("X-Amz-Credential")
  valid_611415 = validateParameter(valid_611415, JString, required = false,
                                 default = nil)
  if valid_611415 != nil:
    section.add "X-Amz-Credential", valid_611415
  var valid_611416 = header.getOrDefault("X-Amz-Security-Token")
  valid_611416 = validateParameter(valid_611416, JString, required = false,
                                 default = nil)
  if valid_611416 != nil:
    section.add "X-Amz-Security-Token", valid_611416
  var valid_611417 = header.getOrDefault("X-Amz-Algorithm")
  valid_611417 = validateParameter(valid_611417, JString, required = false,
                                 default = nil)
  if valid_611417 != nil:
    section.add "X-Amz-Algorithm", valid_611417
  var valid_611418 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611418 = validateParameter(valid_611418, JString, required = false,
                                 default = nil)
  if valid_611418 != nil:
    section.add "X-Amz-SignedHeaders", valid_611418
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611419: Call_GetRestoreDBInstanceToPointInTime_611376;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_611419.validator(path, query, header, formData, body)
  let scheme = call_611419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611419.url(scheme.get, call_611419.host, call_611419.base,
                         call_611419.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611419, url, valid)

proc call*(call_611420: Call_GetRestoreDBInstanceToPointInTime_611376;
          TargetDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; UseLatestRestorableTime: bool = false;
          CopyTagsToSnapshot: bool = false; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; LicenseModel: string = "";
          TdeCredentialArn: string = ""; ProcessorFeatures: JsonNode = nil;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceToPointInTime";
          SourceDBInstanceIdentifier: string = ""; MultiAZ: bool = false; Port: int = 0;
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          SourceDbiResourceId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          RestoreTime: string = ""; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_611421 = newJObject()
  add(query_611421, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_611421, "DBName", newJString(DBName))
  add(query_611421, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_611421, "DeletionProtection", newJBool(DeletionProtection))
  add(query_611421, "Engine", newJString(Engine))
  add(query_611421, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_611421, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_611421, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_611421.add "Tags", Tags
  add(query_611421, "LicenseModel", newJString(LicenseModel))
  add(query_611421, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_611421.add "ProcessorFeatures", ProcessorFeatures
  add(query_611421, "StorageType", newJString(StorageType))
  add(query_611421, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_611421, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_611421.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_611421, "Action", newJString(Action))
  add(query_611421, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_611421, "MultiAZ", newJBool(MultiAZ))
  add(query_611421, "Port", newJInt(Port))
  add(query_611421, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_611421.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_611421, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(query_611421, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_611421, "OptionGroupName", newJString(OptionGroupName))
  add(query_611421, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_611421, "RestoreTime", newJString(RestoreTime))
  add(query_611421, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_611421, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_611421, "Version", newJString(Version))
  add(query_611421, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_611421, "Iops", newJInt(Iops))
  add(query_611421, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_611420.call(nil, query_611421, nil, nil, nil)

var getRestoreDBInstanceToPointInTime* = Call_GetRestoreDBInstanceToPointInTime_611376(
    name: "getRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_GetRestoreDBInstanceToPointInTime_611377, base: "/",
    url: url_GetRestoreDBInstanceToPointInTime_611378,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeDBSecurityGroupIngress_611489 = ref object of OpenApiRestCall_605589
proc url_PostRevokeDBSecurityGroupIngress_611491(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRevokeDBSecurityGroupIngress_611490(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611492 = query.getOrDefault("Action")
  valid_611492 = validateParameter(valid_611492, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_611492 != nil:
    section.add "Action", valid_611492
  var valid_611493 = query.getOrDefault("Version")
  valid_611493 = validateParameter(valid_611493, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611493 != nil:
    section.add "Version", valid_611493
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611494 = header.getOrDefault("X-Amz-Signature")
  valid_611494 = validateParameter(valid_611494, JString, required = false,
                                 default = nil)
  if valid_611494 != nil:
    section.add "X-Amz-Signature", valid_611494
  var valid_611495 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611495 = validateParameter(valid_611495, JString, required = false,
                                 default = nil)
  if valid_611495 != nil:
    section.add "X-Amz-Content-Sha256", valid_611495
  var valid_611496 = header.getOrDefault("X-Amz-Date")
  valid_611496 = validateParameter(valid_611496, JString, required = false,
                                 default = nil)
  if valid_611496 != nil:
    section.add "X-Amz-Date", valid_611496
  var valid_611497 = header.getOrDefault("X-Amz-Credential")
  valid_611497 = validateParameter(valid_611497, JString, required = false,
                                 default = nil)
  if valid_611497 != nil:
    section.add "X-Amz-Credential", valid_611497
  var valid_611498 = header.getOrDefault("X-Amz-Security-Token")
  valid_611498 = validateParameter(valid_611498, JString, required = false,
                                 default = nil)
  if valid_611498 != nil:
    section.add "X-Amz-Security-Token", valid_611498
  var valid_611499 = header.getOrDefault("X-Amz-Algorithm")
  valid_611499 = validateParameter(valid_611499, JString, required = false,
                                 default = nil)
  if valid_611499 != nil:
    section.add "X-Amz-Algorithm", valid_611499
  var valid_611500 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611500 = validateParameter(valid_611500, JString, required = false,
                                 default = nil)
  if valid_611500 != nil:
    section.add "X-Amz-SignedHeaders", valid_611500
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_611501 = formData.getOrDefault("DBSecurityGroupName")
  valid_611501 = validateParameter(valid_611501, JString, required = true,
                                 default = nil)
  if valid_611501 != nil:
    section.add "DBSecurityGroupName", valid_611501
  var valid_611502 = formData.getOrDefault("EC2SecurityGroupName")
  valid_611502 = validateParameter(valid_611502, JString, required = false,
                                 default = nil)
  if valid_611502 != nil:
    section.add "EC2SecurityGroupName", valid_611502
  var valid_611503 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_611503 = validateParameter(valid_611503, JString, required = false,
                                 default = nil)
  if valid_611503 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_611503
  var valid_611504 = formData.getOrDefault("EC2SecurityGroupId")
  valid_611504 = validateParameter(valid_611504, JString, required = false,
                                 default = nil)
  if valid_611504 != nil:
    section.add "EC2SecurityGroupId", valid_611504
  var valid_611505 = formData.getOrDefault("CIDRIP")
  valid_611505 = validateParameter(valid_611505, JString, required = false,
                                 default = nil)
  if valid_611505 != nil:
    section.add "CIDRIP", valid_611505
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611506: Call_PostRevokeDBSecurityGroupIngress_611489;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_611506.validator(path, query, header, formData, body)
  let scheme = call_611506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611506.url(scheme.get, call_611506.host, call_611506.base,
                         call_611506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611506, url, valid)

proc call*(call_611507: Call_PostRevokeDBSecurityGroupIngress_611489;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611508 = newJObject()
  var formData_611509 = newJObject()
  add(formData_611509, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_611509, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_611509, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_611509, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_611509, "CIDRIP", newJString(CIDRIP))
  add(query_611508, "Action", newJString(Action))
  add(query_611508, "Version", newJString(Version))
  result = call_611507.call(nil, query_611508, nil, formData_611509, nil)

var postRevokeDBSecurityGroupIngress* = Call_PostRevokeDBSecurityGroupIngress_611489(
    name: "postRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_PostRevokeDBSecurityGroupIngress_611490, base: "/",
    url: url_PostRevokeDBSecurityGroupIngress_611491,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeDBSecurityGroupIngress_611469 = ref object of OpenApiRestCall_605589
proc url_GetRevokeDBSecurityGroupIngress_611471(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRevokeDBSecurityGroupIngress_611470(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  var valid_611472 = query.getOrDefault("EC2SecurityGroupName")
  valid_611472 = validateParameter(valid_611472, JString, required = false,
                                 default = nil)
  if valid_611472 != nil:
    section.add "EC2SecurityGroupName", valid_611472
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_611473 = query.getOrDefault("DBSecurityGroupName")
  valid_611473 = validateParameter(valid_611473, JString, required = true,
                                 default = nil)
  if valid_611473 != nil:
    section.add "DBSecurityGroupName", valid_611473
  var valid_611474 = query.getOrDefault("EC2SecurityGroupId")
  valid_611474 = validateParameter(valid_611474, JString, required = false,
                                 default = nil)
  if valid_611474 != nil:
    section.add "EC2SecurityGroupId", valid_611474
  var valid_611475 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_611475 = validateParameter(valid_611475, JString, required = false,
                                 default = nil)
  if valid_611475 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_611475
  var valid_611476 = query.getOrDefault("Action")
  valid_611476 = validateParameter(valid_611476, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_611476 != nil:
    section.add "Action", valid_611476
  var valid_611477 = query.getOrDefault("Version")
  valid_611477 = validateParameter(valid_611477, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611477 != nil:
    section.add "Version", valid_611477
  var valid_611478 = query.getOrDefault("CIDRIP")
  valid_611478 = validateParameter(valid_611478, JString, required = false,
                                 default = nil)
  if valid_611478 != nil:
    section.add "CIDRIP", valid_611478
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611479 = header.getOrDefault("X-Amz-Signature")
  valid_611479 = validateParameter(valid_611479, JString, required = false,
                                 default = nil)
  if valid_611479 != nil:
    section.add "X-Amz-Signature", valid_611479
  var valid_611480 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611480 = validateParameter(valid_611480, JString, required = false,
                                 default = nil)
  if valid_611480 != nil:
    section.add "X-Amz-Content-Sha256", valid_611480
  var valid_611481 = header.getOrDefault("X-Amz-Date")
  valid_611481 = validateParameter(valid_611481, JString, required = false,
                                 default = nil)
  if valid_611481 != nil:
    section.add "X-Amz-Date", valid_611481
  var valid_611482 = header.getOrDefault("X-Amz-Credential")
  valid_611482 = validateParameter(valid_611482, JString, required = false,
                                 default = nil)
  if valid_611482 != nil:
    section.add "X-Amz-Credential", valid_611482
  var valid_611483 = header.getOrDefault("X-Amz-Security-Token")
  valid_611483 = validateParameter(valid_611483, JString, required = false,
                                 default = nil)
  if valid_611483 != nil:
    section.add "X-Amz-Security-Token", valid_611483
  var valid_611484 = header.getOrDefault("X-Amz-Algorithm")
  valid_611484 = validateParameter(valid_611484, JString, required = false,
                                 default = nil)
  if valid_611484 != nil:
    section.add "X-Amz-Algorithm", valid_611484
  var valid_611485 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611485 = validateParameter(valid_611485, JString, required = false,
                                 default = nil)
  if valid_611485 != nil:
    section.add "X-Amz-SignedHeaders", valid_611485
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611486: Call_GetRevokeDBSecurityGroupIngress_611469;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_611486.validator(path, query, header, formData, body)
  let scheme = call_611486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611486.url(scheme.get, call_611486.host, call_611486.base,
                         call_611486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611486, url, valid)

proc call*(call_611487: Call_GetRevokeDBSecurityGroupIngress_611469;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  var query_611488 = newJObject()
  add(query_611488, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_611488, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_611488, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_611488, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_611488, "Action", newJString(Action))
  add(query_611488, "Version", newJString(Version))
  add(query_611488, "CIDRIP", newJString(CIDRIP))
  result = call_611487.call(nil, query_611488, nil, nil, nil)

var getRevokeDBSecurityGroupIngress* = Call_GetRevokeDBSecurityGroupIngress_611469(
    name: "getRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_GetRevokeDBSecurityGroupIngress_611470, base: "/",
    url: url_GetRevokeDBSecurityGroupIngress_611471,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartActivityStream_611529 = ref object of OpenApiRestCall_605589
proc url_PostStartActivityStream_611531(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartActivityStream_611530(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611532 = query.getOrDefault("Action")
  valid_611532 = validateParameter(valid_611532, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_611532 != nil:
    section.add "Action", valid_611532
  var valid_611533 = query.getOrDefault("Version")
  valid_611533 = validateParameter(valid_611533, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611533 != nil:
    section.add "Version", valid_611533
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611534 = header.getOrDefault("X-Amz-Signature")
  valid_611534 = validateParameter(valid_611534, JString, required = false,
                                 default = nil)
  if valid_611534 != nil:
    section.add "X-Amz-Signature", valid_611534
  var valid_611535 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611535 = validateParameter(valid_611535, JString, required = false,
                                 default = nil)
  if valid_611535 != nil:
    section.add "X-Amz-Content-Sha256", valid_611535
  var valid_611536 = header.getOrDefault("X-Amz-Date")
  valid_611536 = validateParameter(valid_611536, JString, required = false,
                                 default = nil)
  if valid_611536 != nil:
    section.add "X-Amz-Date", valid_611536
  var valid_611537 = header.getOrDefault("X-Amz-Credential")
  valid_611537 = validateParameter(valid_611537, JString, required = false,
                                 default = nil)
  if valid_611537 != nil:
    section.add "X-Amz-Credential", valid_611537
  var valid_611538 = header.getOrDefault("X-Amz-Security-Token")
  valid_611538 = validateParameter(valid_611538, JString, required = false,
                                 default = nil)
  if valid_611538 != nil:
    section.add "X-Amz-Security-Token", valid_611538
  var valid_611539 = header.getOrDefault("X-Amz-Algorithm")
  valid_611539 = validateParameter(valid_611539, JString, required = false,
                                 default = nil)
  if valid_611539 != nil:
    section.add "X-Amz-Algorithm", valid_611539
  var valid_611540 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611540 = validateParameter(valid_611540, JString, required = false,
                                 default = nil)
  if valid_611540 != nil:
    section.add "X-Amz-SignedHeaders", valid_611540
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_611541 = formData.getOrDefault("ResourceArn")
  valid_611541 = validateParameter(valid_611541, JString, required = true,
                                 default = nil)
  if valid_611541 != nil:
    section.add "ResourceArn", valid_611541
  var valid_611542 = formData.getOrDefault("Mode")
  valid_611542 = validateParameter(valid_611542, JString, required = true,
                                 default = newJString("sync"))
  if valid_611542 != nil:
    section.add "Mode", valid_611542
  var valid_611543 = formData.getOrDefault("KmsKeyId")
  valid_611543 = validateParameter(valid_611543, JString, required = true,
                                 default = nil)
  if valid_611543 != nil:
    section.add "KmsKeyId", valid_611543
  var valid_611544 = formData.getOrDefault("ApplyImmediately")
  valid_611544 = validateParameter(valid_611544, JBool, required = false, default = nil)
  if valid_611544 != nil:
    section.add "ApplyImmediately", valid_611544
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611545: Call_PostStartActivityStream_611529; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_611545.validator(path, query, header, formData, body)
  let scheme = call_611545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611545.url(scheme.get, call_611545.host, call_611545.base,
                         call_611545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611545, url, valid)

proc call*(call_611546: Call_PostStartActivityStream_611529; ResourceArn: string;
          KmsKeyId: string; Mode: string = "sync"; ApplyImmediately: bool = false;
          Action: string = "StartActivityStream"; Version: string = "2014-10-31"): Recallable =
  ## postStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611547 = newJObject()
  var formData_611548 = newJObject()
  add(formData_611548, "ResourceArn", newJString(ResourceArn))
  add(formData_611548, "Mode", newJString(Mode))
  add(formData_611548, "KmsKeyId", newJString(KmsKeyId))
  add(formData_611548, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_611547, "Action", newJString(Action))
  add(query_611547, "Version", newJString(Version))
  result = call_611546.call(nil, query_611547, nil, formData_611548, nil)

var postStartActivityStream* = Call_PostStartActivityStream_611529(
    name: "postStartActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_PostStartActivityStream_611530, base: "/",
    url: url_PostStartActivityStream_611531, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartActivityStream_611510 = ref object of OpenApiRestCall_605589
proc url_GetStartActivityStream_611512(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartActivityStream_611511(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `KmsKeyId` field"
  var valid_611513 = query.getOrDefault("KmsKeyId")
  valid_611513 = validateParameter(valid_611513, JString, required = true,
                                 default = nil)
  if valid_611513 != nil:
    section.add "KmsKeyId", valid_611513
  var valid_611514 = query.getOrDefault("ResourceArn")
  valid_611514 = validateParameter(valid_611514, JString, required = true,
                                 default = nil)
  if valid_611514 != nil:
    section.add "ResourceArn", valid_611514
  var valid_611515 = query.getOrDefault("Mode")
  valid_611515 = validateParameter(valid_611515, JString, required = true,
                                 default = newJString("sync"))
  if valid_611515 != nil:
    section.add "Mode", valid_611515
  var valid_611516 = query.getOrDefault("Action")
  valid_611516 = validateParameter(valid_611516, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_611516 != nil:
    section.add "Action", valid_611516
  var valid_611517 = query.getOrDefault("ApplyImmediately")
  valid_611517 = validateParameter(valid_611517, JBool, required = false, default = nil)
  if valid_611517 != nil:
    section.add "ApplyImmediately", valid_611517
  var valid_611518 = query.getOrDefault("Version")
  valid_611518 = validateParameter(valid_611518, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611518 != nil:
    section.add "Version", valid_611518
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611519 = header.getOrDefault("X-Amz-Signature")
  valid_611519 = validateParameter(valid_611519, JString, required = false,
                                 default = nil)
  if valid_611519 != nil:
    section.add "X-Amz-Signature", valid_611519
  var valid_611520 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611520 = validateParameter(valid_611520, JString, required = false,
                                 default = nil)
  if valid_611520 != nil:
    section.add "X-Amz-Content-Sha256", valid_611520
  var valid_611521 = header.getOrDefault("X-Amz-Date")
  valid_611521 = validateParameter(valid_611521, JString, required = false,
                                 default = nil)
  if valid_611521 != nil:
    section.add "X-Amz-Date", valid_611521
  var valid_611522 = header.getOrDefault("X-Amz-Credential")
  valid_611522 = validateParameter(valid_611522, JString, required = false,
                                 default = nil)
  if valid_611522 != nil:
    section.add "X-Amz-Credential", valid_611522
  var valid_611523 = header.getOrDefault("X-Amz-Security-Token")
  valid_611523 = validateParameter(valid_611523, JString, required = false,
                                 default = nil)
  if valid_611523 != nil:
    section.add "X-Amz-Security-Token", valid_611523
  var valid_611524 = header.getOrDefault("X-Amz-Algorithm")
  valid_611524 = validateParameter(valid_611524, JString, required = false,
                                 default = nil)
  if valid_611524 != nil:
    section.add "X-Amz-Algorithm", valid_611524
  var valid_611525 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611525 = validateParameter(valid_611525, JString, required = false,
                                 default = nil)
  if valid_611525 != nil:
    section.add "X-Amz-SignedHeaders", valid_611525
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611526: Call_GetStartActivityStream_611510; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_611526.validator(path, query, header, formData, body)
  let scheme = call_611526.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611526.url(scheme.get, call_611526.host, call_611526.base,
                         call_611526.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611526, url, valid)

proc call*(call_611527: Call_GetStartActivityStream_611510; KmsKeyId: string;
          ResourceArn: string; Mode: string = "sync";
          Action: string = "StartActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_611528 = newJObject()
  add(query_611528, "KmsKeyId", newJString(KmsKeyId))
  add(query_611528, "ResourceArn", newJString(ResourceArn))
  add(query_611528, "Mode", newJString(Mode))
  add(query_611528, "Action", newJString(Action))
  add(query_611528, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_611528, "Version", newJString(Version))
  result = call_611527.call(nil, query_611528, nil, nil, nil)

var getStartActivityStream* = Call_GetStartActivityStream_611510(
    name: "getStartActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_GetStartActivityStream_611511, base: "/",
    url: url_GetStartActivityStream_611512, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBCluster_611565 = ref object of OpenApiRestCall_605589
proc url_PostStartDBCluster_611567(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBCluster_611566(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611568 = query.getOrDefault("Action")
  valid_611568 = validateParameter(valid_611568, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_611568 != nil:
    section.add "Action", valid_611568
  var valid_611569 = query.getOrDefault("Version")
  valid_611569 = validateParameter(valid_611569, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611569 != nil:
    section.add "Version", valid_611569
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611570 = header.getOrDefault("X-Amz-Signature")
  valid_611570 = validateParameter(valid_611570, JString, required = false,
                                 default = nil)
  if valid_611570 != nil:
    section.add "X-Amz-Signature", valid_611570
  var valid_611571 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611571 = validateParameter(valid_611571, JString, required = false,
                                 default = nil)
  if valid_611571 != nil:
    section.add "X-Amz-Content-Sha256", valid_611571
  var valid_611572 = header.getOrDefault("X-Amz-Date")
  valid_611572 = validateParameter(valid_611572, JString, required = false,
                                 default = nil)
  if valid_611572 != nil:
    section.add "X-Amz-Date", valid_611572
  var valid_611573 = header.getOrDefault("X-Amz-Credential")
  valid_611573 = validateParameter(valid_611573, JString, required = false,
                                 default = nil)
  if valid_611573 != nil:
    section.add "X-Amz-Credential", valid_611573
  var valid_611574 = header.getOrDefault("X-Amz-Security-Token")
  valid_611574 = validateParameter(valid_611574, JString, required = false,
                                 default = nil)
  if valid_611574 != nil:
    section.add "X-Amz-Security-Token", valid_611574
  var valid_611575 = header.getOrDefault("X-Amz-Algorithm")
  valid_611575 = validateParameter(valid_611575, JString, required = false,
                                 default = nil)
  if valid_611575 != nil:
    section.add "X-Amz-Algorithm", valid_611575
  var valid_611576 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611576 = validateParameter(valid_611576, JString, required = false,
                                 default = nil)
  if valid_611576 != nil:
    section.add "X-Amz-SignedHeaders", valid_611576
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_611577 = formData.getOrDefault("DBClusterIdentifier")
  valid_611577 = validateParameter(valid_611577, JString, required = true,
                                 default = nil)
  if valid_611577 != nil:
    section.add "DBClusterIdentifier", valid_611577
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611578: Call_PostStartDBCluster_611565; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611578.validator(path, query, header, formData, body)
  let scheme = call_611578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611578.url(scheme.get, call_611578.host, call_611578.base,
                         call_611578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611578, url, valid)

proc call*(call_611579: Call_PostStartDBCluster_611565;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  var query_611580 = newJObject()
  var formData_611581 = newJObject()
  add(query_611580, "Action", newJString(Action))
  add(query_611580, "Version", newJString(Version))
  add(formData_611581, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_611579.call(nil, query_611580, nil, formData_611581, nil)

var postStartDBCluster* = Call_PostStartDBCluster_611565(
    name: "postStartDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBCluster",
    validator: validate_PostStartDBCluster_611566, base: "/",
    url: url_PostStartDBCluster_611567, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBCluster_611549 = ref object of OpenApiRestCall_605589
proc url_GetStartDBCluster_611551(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBCluster_611550(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_611552 = query.getOrDefault("DBClusterIdentifier")
  valid_611552 = validateParameter(valid_611552, JString, required = true,
                                 default = nil)
  if valid_611552 != nil:
    section.add "DBClusterIdentifier", valid_611552
  var valid_611553 = query.getOrDefault("Action")
  valid_611553 = validateParameter(valid_611553, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_611553 != nil:
    section.add "Action", valid_611553
  var valid_611554 = query.getOrDefault("Version")
  valid_611554 = validateParameter(valid_611554, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611554 != nil:
    section.add "Version", valid_611554
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611555 = header.getOrDefault("X-Amz-Signature")
  valid_611555 = validateParameter(valid_611555, JString, required = false,
                                 default = nil)
  if valid_611555 != nil:
    section.add "X-Amz-Signature", valid_611555
  var valid_611556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611556 = validateParameter(valid_611556, JString, required = false,
                                 default = nil)
  if valid_611556 != nil:
    section.add "X-Amz-Content-Sha256", valid_611556
  var valid_611557 = header.getOrDefault("X-Amz-Date")
  valid_611557 = validateParameter(valid_611557, JString, required = false,
                                 default = nil)
  if valid_611557 != nil:
    section.add "X-Amz-Date", valid_611557
  var valid_611558 = header.getOrDefault("X-Amz-Credential")
  valid_611558 = validateParameter(valid_611558, JString, required = false,
                                 default = nil)
  if valid_611558 != nil:
    section.add "X-Amz-Credential", valid_611558
  var valid_611559 = header.getOrDefault("X-Amz-Security-Token")
  valid_611559 = validateParameter(valid_611559, JString, required = false,
                                 default = nil)
  if valid_611559 != nil:
    section.add "X-Amz-Security-Token", valid_611559
  var valid_611560 = header.getOrDefault("X-Amz-Algorithm")
  valid_611560 = validateParameter(valid_611560, JString, required = false,
                                 default = nil)
  if valid_611560 != nil:
    section.add "X-Amz-Algorithm", valid_611560
  var valid_611561 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611561 = validateParameter(valid_611561, JString, required = false,
                                 default = nil)
  if valid_611561 != nil:
    section.add "X-Amz-SignedHeaders", valid_611561
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611562: Call_GetStartDBCluster_611549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611562.validator(path, query, header, formData, body)
  let scheme = call_611562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611562.url(scheme.get, call_611562.host, call_611562.base,
                         call_611562.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611562, url, valid)

proc call*(call_611563: Call_GetStartDBCluster_611549; DBClusterIdentifier: string;
          Action: string = "StartDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611564 = newJObject()
  add(query_611564, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_611564, "Action", newJString(Action))
  add(query_611564, "Version", newJString(Version))
  result = call_611563.call(nil, query_611564, nil, nil, nil)

var getStartDBCluster* = Call_GetStartDBCluster_611549(name: "getStartDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBCluster", validator: validate_GetStartDBCluster_611550,
    base: "/", url: url_GetStartDBCluster_611551,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBInstance_611598 = ref object of OpenApiRestCall_605589
proc url_PostStartDBInstance_611600(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBInstance_611599(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611601 = query.getOrDefault("Action")
  valid_611601 = validateParameter(valid_611601, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_611601 != nil:
    section.add "Action", valid_611601
  var valid_611602 = query.getOrDefault("Version")
  valid_611602 = validateParameter(valid_611602, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611602 != nil:
    section.add "Version", valid_611602
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611603 = header.getOrDefault("X-Amz-Signature")
  valid_611603 = validateParameter(valid_611603, JString, required = false,
                                 default = nil)
  if valid_611603 != nil:
    section.add "X-Amz-Signature", valid_611603
  var valid_611604 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611604 = validateParameter(valid_611604, JString, required = false,
                                 default = nil)
  if valid_611604 != nil:
    section.add "X-Amz-Content-Sha256", valid_611604
  var valid_611605 = header.getOrDefault("X-Amz-Date")
  valid_611605 = validateParameter(valid_611605, JString, required = false,
                                 default = nil)
  if valid_611605 != nil:
    section.add "X-Amz-Date", valid_611605
  var valid_611606 = header.getOrDefault("X-Amz-Credential")
  valid_611606 = validateParameter(valid_611606, JString, required = false,
                                 default = nil)
  if valid_611606 != nil:
    section.add "X-Amz-Credential", valid_611606
  var valid_611607 = header.getOrDefault("X-Amz-Security-Token")
  valid_611607 = validateParameter(valid_611607, JString, required = false,
                                 default = nil)
  if valid_611607 != nil:
    section.add "X-Amz-Security-Token", valid_611607
  var valid_611608 = header.getOrDefault("X-Amz-Algorithm")
  valid_611608 = validateParameter(valid_611608, JString, required = false,
                                 default = nil)
  if valid_611608 != nil:
    section.add "X-Amz-Algorithm", valid_611608
  var valid_611609 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611609 = validateParameter(valid_611609, JString, required = false,
                                 default = nil)
  if valid_611609 != nil:
    section.add "X-Amz-SignedHeaders", valid_611609
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_611610 = formData.getOrDefault("DBInstanceIdentifier")
  valid_611610 = validateParameter(valid_611610, JString, required = true,
                                 default = nil)
  if valid_611610 != nil:
    section.add "DBInstanceIdentifier", valid_611610
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611611: Call_PostStartDBInstance_611598; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_611611.validator(path, query, header, formData, body)
  let scheme = call_611611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611611.url(scheme.get, call_611611.host, call_611611.base,
                         call_611611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611611, url, valid)

proc call*(call_611612: Call_PostStartDBInstance_611598;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611613 = newJObject()
  var formData_611614 = newJObject()
  add(formData_611614, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_611613, "Action", newJString(Action))
  add(query_611613, "Version", newJString(Version))
  result = call_611612.call(nil, query_611613, nil, formData_611614, nil)

var postStartDBInstance* = Call_PostStartDBInstance_611598(
    name: "postStartDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBInstance",
    validator: validate_PostStartDBInstance_611599, base: "/",
    url: url_PostStartDBInstance_611600, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBInstance_611582 = ref object of OpenApiRestCall_605589
proc url_GetStartDBInstance_611584(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBInstance_611583(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_611585 = query.getOrDefault("DBInstanceIdentifier")
  valid_611585 = validateParameter(valid_611585, JString, required = true,
                                 default = nil)
  if valid_611585 != nil:
    section.add "DBInstanceIdentifier", valid_611585
  var valid_611586 = query.getOrDefault("Action")
  valid_611586 = validateParameter(valid_611586, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_611586 != nil:
    section.add "Action", valid_611586
  var valid_611587 = query.getOrDefault("Version")
  valid_611587 = validateParameter(valid_611587, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611587 != nil:
    section.add "Version", valid_611587
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611588 = header.getOrDefault("X-Amz-Signature")
  valid_611588 = validateParameter(valid_611588, JString, required = false,
                                 default = nil)
  if valid_611588 != nil:
    section.add "X-Amz-Signature", valid_611588
  var valid_611589 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611589 = validateParameter(valid_611589, JString, required = false,
                                 default = nil)
  if valid_611589 != nil:
    section.add "X-Amz-Content-Sha256", valid_611589
  var valid_611590 = header.getOrDefault("X-Amz-Date")
  valid_611590 = validateParameter(valid_611590, JString, required = false,
                                 default = nil)
  if valid_611590 != nil:
    section.add "X-Amz-Date", valid_611590
  var valid_611591 = header.getOrDefault("X-Amz-Credential")
  valid_611591 = validateParameter(valid_611591, JString, required = false,
                                 default = nil)
  if valid_611591 != nil:
    section.add "X-Amz-Credential", valid_611591
  var valid_611592 = header.getOrDefault("X-Amz-Security-Token")
  valid_611592 = validateParameter(valid_611592, JString, required = false,
                                 default = nil)
  if valid_611592 != nil:
    section.add "X-Amz-Security-Token", valid_611592
  var valid_611593 = header.getOrDefault("X-Amz-Algorithm")
  valid_611593 = validateParameter(valid_611593, JString, required = false,
                                 default = nil)
  if valid_611593 != nil:
    section.add "X-Amz-Algorithm", valid_611593
  var valid_611594 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611594 = validateParameter(valid_611594, JString, required = false,
                                 default = nil)
  if valid_611594 != nil:
    section.add "X-Amz-SignedHeaders", valid_611594
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611595: Call_GetStartDBInstance_611582; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_611595.validator(path, query, header, formData, body)
  let scheme = call_611595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611595.url(scheme.get, call_611595.host, call_611595.base,
                         call_611595.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611595, url, valid)

proc call*(call_611596: Call_GetStartDBInstance_611582;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611597 = newJObject()
  add(query_611597, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_611597, "Action", newJString(Action))
  add(query_611597, "Version", newJString(Version))
  result = call_611596.call(nil, query_611597, nil, nil, nil)

var getStartDBInstance* = Call_GetStartDBInstance_611582(
    name: "getStartDBInstance", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBInstance", validator: validate_GetStartDBInstance_611583,
    base: "/", url: url_GetStartDBInstance_611584,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopActivityStream_611632 = ref object of OpenApiRestCall_605589
proc url_PostStopActivityStream_611634(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopActivityStream_611633(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611635 = query.getOrDefault("Action")
  valid_611635 = validateParameter(valid_611635, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_611635 != nil:
    section.add "Action", valid_611635
  var valid_611636 = query.getOrDefault("Version")
  valid_611636 = validateParameter(valid_611636, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611636 != nil:
    section.add "Version", valid_611636
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611637 = header.getOrDefault("X-Amz-Signature")
  valid_611637 = validateParameter(valid_611637, JString, required = false,
                                 default = nil)
  if valid_611637 != nil:
    section.add "X-Amz-Signature", valid_611637
  var valid_611638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611638 = validateParameter(valid_611638, JString, required = false,
                                 default = nil)
  if valid_611638 != nil:
    section.add "X-Amz-Content-Sha256", valid_611638
  var valid_611639 = header.getOrDefault("X-Amz-Date")
  valid_611639 = validateParameter(valid_611639, JString, required = false,
                                 default = nil)
  if valid_611639 != nil:
    section.add "X-Amz-Date", valid_611639
  var valid_611640 = header.getOrDefault("X-Amz-Credential")
  valid_611640 = validateParameter(valid_611640, JString, required = false,
                                 default = nil)
  if valid_611640 != nil:
    section.add "X-Amz-Credential", valid_611640
  var valid_611641 = header.getOrDefault("X-Amz-Security-Token")
  valid_611641 = validateParameter(valid_611641, JString, required = false,
                                 default = nil)
  if valid_611641 != nil:
    section.add "X-Amz-Security-Token", valid_611641
  var valid_611642 = header.getOrDefault("X-Amz-Algorithm")
  valid_611642 = validateParameter(valid_611642, JString, required = false,
                                 default = nil)
  if valid_611642 != nil:
    section.add "X-Amz-Algorithm", valid_611642
  var valid_611643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611643 = validateParameter(valid_611643, JString, required = false,
                                 default = nil)
  if valid_611643 != nil:
    section.add "X-Amz-SignedHeaders", valid_611643
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_611644 = formData.getOrDefault("ResourceArn")
  valid_611644 = validateParameter(valid_611644, JString, required = true,
                                 default = nil)
  if valid_611644 != nil:
    section.add "ResourceArn", valid_611644
  var valid_611645 = formData.getOrDefault("ApplyImmediately")
  valid_611645 = validateParameter(valid_611645, JBool, required = false, default = nil)
  if valid_611645 != nil:
    section.add "ApplyImmediately", valid_611645
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611646: Call_PostStopActivityStream_611632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_611646.validator(path, query, header, formData, body)
  let scheme = call_611646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611646.url(scheme.get, call_611646.host, call_611646.base,
                         call_611646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611646, url, valid)

proc call*(call_611647: Call_PostStopActivityStream_611632; ResourceArn: string;
          ApplyImmediately: bool = false; Action: string = "StopActivityStream";
          Version: string = "2014-10-31"): Recallable =
  ## postStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611648 = newJObject()
  var formData_611649 = newJObject()
  add(formData_611649, "ResourceArn", newJString(ResourceArn))
  add(formData_611649, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_611648, "Action", newJString(Action))
  add(query_611648, "Version", newJString(Version))
  result = call_611647.call(nil, query_611648, nil, formData_611649, nil)

var postStopActivityStream* = Call_PostStopActivityStream_611632(
    name: "postStopActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_PostStopActivityStream_611633, base: "/",
    url: url_PostStopActivityStream_611634, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopActivityStream_611615 = ref object of OpenApiRestCall_605589
proc url_GetStopActivityStream_611617(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopActivityStream_611616(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_611618 = query.getOrDefault("ResourceArn")
  valid_611618 = validateParameter(valid_611618, JString, required = true,
                                 default = nil)
  if valid_611618 != nil:
    section.add "ResourceArn", valid_611618
  var valid_611619 = query.getOrDefault("Action")
  valid_611619 = validateParameter(valid_611619, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_611619 != nil:
    section.add "Action", valid_611619
  var valid_611620 = query.getOrDefault("ApplyImmediately")
  valid_611620 = validateParameter(valid_611620, JBool, required = false, default = nil)
  if valid_611620 != nil:
    section.add "ApplyImmediately", valid_611620
  var valid_611621 = query.getOrDefault("Version")
  valid_611621 = validateParameter(valid_611621, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611621 != nil:
    section.add "Version", valid_611621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611622 = header.getOrDefault("X-Amz-Signature")
  valid_611622 = validateParameter(valid_611622, JString, required = false,
                                 default = nil)
  if valid_611622 != nil:
    section.add "X-Amz-Signature", valid_611622
  var valid_611623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611623 = validateParameter(valid_611623, JString, required = false,
                                 default = nil)
  if valid_611623 != nil:
    section.add "X-Amz-Content-Sha256", valid_611623
  var valid_611624 = header.getOrDefault("X-Amz-Date")
  valid_611624 = validateParameter(valid_611624, JString, required = false,
                                 default = nil)
  if valid_611624 != nil:
    section.add "X-Amz-Date", valid_611624
  var valid_611625 = header.getOrDefault("X-Amz-Credential")
  valid_611625 = validateParameter(valid_611625, JString, required = false,
                                 default = nil)
  if valid_611625 != nil:
    section.add "X-Amz-Credential", valid_611625
  var valid_611626 = header.getOrDefault("X-Amz-Security-Token")
  valid_611626 = validateParameter(valid_611626, JString, required = false,
                                 default = nil)
  if valid_611626 != nil:
    section.add "X-Amz-Security-Token", valid_611626
  var valid_611627 = header.getOrDefault("X-Amz-Algorithm")
  valid_611627 = validateParameter(valid_611627, JString, required = false,
                                 default = nil)
  if valid_611627 != nil:
    section.add "X-Amz-Algorithm", valid_611627
  var valid_611628 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611628 = validateParameter(valid_611628, JString, required = false,
                                 default = nil)
  if valid_611628 != nil:
    section.add "X-Amz-SignedHeaders", valid_611628
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611629: Call_GetStopActivityStream_611615; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_611629.validator(path, query, header, formData, body)
  let scheme = call_611629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611629.url(scheme.get, call_611629.host, call_611629.base,
                         call_611629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611629, url, valid)

proc call*(call_611630: Call_GetStopActivityStream_611615; ResourceArn: string;
          Action: string = "StopActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_611631 = newJObject()
  add(query_611631, "ResourceArn", newJString(ResourceArn))
  add(query_611631, "Action", newJString(Action))
  add(query_611631, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_611631, "Version", newJString(Version))
  result = call_611630.call(nil, query_611631, nil, nil, nil)

var getStopActivityStream* = Call_GetStopActivityStream_611615(
    name: "getStopActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_GetStopActivityStream_611616, base: "/",
    url: url_GetStopActivityStream_611617, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBCluster_611666 = ref object of OpenApiRestCall_605589
proc url_PostStopDBCluster_611668(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBCluster_611667(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611669 = query.getOrDefault("Action")
  valid_611669 = validateParameter(valid_611669, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_611669 != nil:
    section.add "Action", valid_611669
  var valid_611670 = query.getOrDefault("Version")
  valid_611670 = validateParameter(valid_611670, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611670 != nil:
    section.add "Version", valid_611670
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611671 = header.getOrDefault("X-Amz-Signature")
  valid_611671 = validateParameter(valid_611671, JString, required = false,
                                 default = nil)
  if valid_611671 != nil:
    section.add "X-Amz-Signature", valid_611671
  var valid_611672 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611672 = validateParameter(valid_611672, JString, required = false,
                                 default = nil)
  if valid_611672 != nil:
    section.add "X-Amz-Content-Sha256", valid_611672
  var valid_611673 = header.getOrDefault("X-Amz-Date")
  valid_611673 = validateParameter(valid_611673, JString, required = false,
                                 default = nil)
  if valid_611673 != nil:
    section.add "X-Amz-Date", valid_611673
  var valid_611674 = header.getOrDefault("X-Amz-Credential")
  valid_611674 = validateParameter(valid_611674, JString, required = false,
                                 default = nil)
  if valid_611674 != nil:
    section.add "X-Amz-Credential", valid_611674
  var valid_611675 = header.getOrDefault("X-Amz-Security-Token")
  valid_611675 = validateParameter(valid_611675, JString, required = false,
                                 default = nil)
  if valid_611675 != nil:
    section.add "X-Amz-Security-Token", valid_611675
  var valid_611676 = header.getOrDefault("X-Amz-Algorithm")
  valid_611676 = validateParameter(valid_611676, JString, required = false,
                                 default = nil)
  if valid_611676 != nil:
    section.add "X-Amz-Algorithm", valid_611676
  var valid_611677 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611677 = validateParameter(valid_611677, JString, required = false,
                                 default = nil)
  if valid_611677 != nil:
    section.add "X-Amz-SignedHeaders", valid_611677
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_611678 = formData.getOrDefault("DBClusterIdentifier")
  valid_611678 = validateParameter(valid_611678, JString, required = true,
                                 default = nil)
  if valid_611678 != nil:
    section.add "DBClusterIdentifier", valid_611678
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611679: Call_PostStopDBCluster_611666; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611679.validator(path, query, header, formData, body)
  let scheme = call_611679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611679.url(scheme.get, call_611679.host, call_611679.base,
                         call_611679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611679, url, valid)

proc call*(call_611680: Call_PostStopDBCluster_611666; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  var query_611681 = newJObject()
  var formData_611682 = newJObject()
  add(query_611681, "Action", newJString(Action))
  add(query_611681, "Version", newJString(Version))
  add(formData_611682, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_611680.call(nil, query_611681, nil, formData_611682, nil)

var postStopDBCluster* = Call_PostStopDBCluster_611666(name: "postStopDBCluster",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_PostStopDBCluster_611667,
    base: "/", url: url_PostStopDBCluster_611668,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBCluster_611650 = ref object of OpenApiRestCall_605589
proc url_GetStopDBCluster_611652(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBCluster_611651(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_611653 = query.getOrDefault("DBClusterIdentifier")
  valid_611653 = validateParameter(valid_611653, JString, required = true,
                                 default = nil)
  if valid_611653 != nil:
    section.add "DBClusterIdentifier", valid_611653
  var valid_611654 = query.getOrDefault("Action")
  valid_611654 = validateParameter(valid_611654, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_611654 != nil:
    section.add "Action", valid_611654
  var valid_611655 = query.getOrDefault("Version")
  valid_611655 = validateParameter(valid_611655, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611655 != nil:
    section.add "Version", valid_611655
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611656 = header.getOrDefault("X-Amz-Signature")
  valid_611656 = validateParameter(valid_611656, JString, required = false,
                                 default = nil)
  if valid_611656 != nil:
    section.add "X-Amz-Signature", valid_611656
  var valid_611657 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611657 = validateParameter(valid_611657, JString, required = false,
                                 default = nil)
  if valid_611657 != nil:
    section.add "X-Amz-Content-Sha256", valid_611657
  var valid_611658 = header.getOrDefault("X-Amz-Date")
  valid_611658 = validateParameter(valid_611658, JString, required = false,
                                 default = nil)
  if valid_611658 != nil:
    section.add "X-Amz-Date", valid_611658
  var valid_611659 = header.getOrDefault("X-Amz-Credential")
  valid_611659 = validateParameter(valid_611659, JString, required = false,
                                 default = nil)
  if valid_611659 != nil:
    section.add "X-Amz-Credential", valid_611659
  var valid_611660 = header.getOrDefault("X-Amz-Security-Token")
  valid_611660 = validateParameter(valid_611660, JString, required = false,
                                 default = nil)
  if valid_611660 != nil:
    section.add "X-Amz-Security-Token", valid_611660
  var valid_611661 = header.getOrDefault("X-Amz-Algorithm")
  valid_611661 = validateParameter(valid_611661, JString, required = false,
                                 default = nil)
  if valid_611661 != nil:
    section.add "X-Amz-Algorithm", valid_611661
  var valid_611662 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611662 = validateParameter(valid_611662, JString, required = false,
                                 default = nil)
  if valid_611662 != nil:
    section.add "X-Amz-SignedHeaders", valid_611662
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611663: Call_GetStopDBCluster_611650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_611663.validator(path, query, header, formData, body)
  let scheme = call_611663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611663.url(scheme.get, call_611663.host, call_611663.base,
                         call_611663.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611663, url, valid)

proc call*(call_611664: Call_GetStopDBCluster_611650; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611665 = newJObject()
  add(query_611665, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_611665, "Action", newJString(Action))
  add(query_611665, "Version", newJString(Version))
  result = call_611664.call(nil, query_611665, nil, nil, nil)

var getStopDBCluster* = Call_GetStopDBCluster_611650(name: "getStopDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_GetStopDBCluster_611651,
    base: "/", url: url_GetStopDBCluster_611652,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBInstance_611700 = ref object of OpenApiRestCall_605589
proc url_PostStopDBInstance_611702(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBInstance_611701(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611703 = query.getOrDefault("Action")
  valid_611703 = validateParameter(valid_611703, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_611703 != nil:
    section.add "Action", valid_611703
  var valid_611704 = query.getOrDefault("Version")
  valid_611704 = validateParameter(valid_611704, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611704 != nil:
    section.add "Version", valid_611704
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611705 = header.getOrDefault("X-Amz-Signature")
  valid_611705 = validateParameter(valid_611705, JString, required = false,
                                 default = nil)
  if valid_611705 != nil:
    section.add "X-Amz-Signature", valid_611705
  var valid_611706 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611706 = validateParameter(valid_611706, JString, required = false,
                                 default = nil)
  if valid_611706 != nil:
    section.add "X-Amz-Content-Sha256", valid_611706
  var valid_611707 = header.getOrDefault("X-Amz-Date")
  valid_611707 = validateParameter(valid_611707, JString, required = false,
                                 default = nil)
  if valid_611707 != nil:
    section.add "X-Amz-Date", valid_611707
  var valid_611708 = header.getOrDefault("X-Amz-Credential")
  valid_611708 = validateParameter(valid_611708, JString, required = false,
                                 default = nil)
  if valid_611708 != nil:
    section.add "X-Amz-Credential", valid_611708
  var valid_611709 = header.getOrDefault("X-Amz-Security-Token")
  valid_611709 = validateParameter(valid_611709, JString, required = false,
                                 default = nil)
  if valid_611709 != nil:
    section.add "X-Amz-Security-Token", valid_611709
  var valid_611710 = header.getOrDefault("X-Amz-Algorithm")
  valid_611710 = validateParameter(valid_611710, JString, required = false,
                                 default = nil)
  if valid_611710 != nil:
    section.add "X-Amz-Algorithm", valid_611710
  var valid_611711 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611711 = validateParameter(valid_611711, JString, required = false,
                                 default = nil)
  if valid_611711 != nil:
    section.add "X-Amz-SignedHeaders", valid_611711
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_611712 = formData.getOrDefault("DBInstanceIdentifier")
  valid_611712 = validateParameter(valid_611712, JString, required = true,
                                 default = nil)
  if valid_611712 != nil:
    section.add "DBInstanceIdentifier", valid_611712
  var valid_611713 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_611713 = validateParameter(valid_611713, JString, required = false,
                                 default = nil)
  if valid_611713 != nil:
    section.add "DBSnapshotIdentifier", valid_611713
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611714: Call_PostStopDBInstance_611700; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_611714.validator(path, query, header, formData, body)
  let scheme = call_611714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611714.url(scheme.get, call_611714.host, call_611714.base,
                         call_611714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611714, url, valid)

proc call*(call_611715: Call_PostStopDBInstance_611700;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611716 = newJObject()
  var formData_611717 = newJObject()
  add(formData_611717, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_611717, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_611716, "Action", newJString(Action))
  add(query_611716, "Version", newJString(Version))
  result = call_611715.call(nil, query_611716, nil, formData_611717, nil)

var postStopDBInstance* = Call_PostStopDBInstance_611700(
    name: "postStopDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopDBInstance",
    validator: validate_PostStopDBInstance_611701, base: "/",
    url: url_PostStopDBInstance_611702, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBInstance_611683 = ref object of OpenApiRestCall_605589
proc url_GetStopDBInstance_611685(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBInstance_611684(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_611686 = query.getOrDefault("DBInstanceIdentifier")
  valid_611686 = validateParameter(valid_611686, JString, required = true,
                                 default = nil)
  if valid_611686 != nil:
    section.add "DBInstanceIdentifier", valid_611686
  var valid_611687 = query.getOrDefault("DBSnapshotIdentifier")
  valid_611687 = validateParameter(valid_611687, JString, required = false,
                                 default = nil)
  if valid_611687 != nil:
    section.add "DBSnapshotIdentifier", valid_611687
  var valid_611688 = query.getOrDefault("Action")
  valid_611688 = validateParameter(valid_611688, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_611688 != nil:
    section.add "Action", valid_611688
  var valid_611689 = query.getOrDefault("Version")
  valid_611689 = validateParameter(valid_611689, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_611689 != nil:
    section.add "Version", valid_611689
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611690 = header.getOrDefault("X-Amz-Signature")
  valid_611690 = validateParameter(valid_611690, JString, required = false,
                                 default = nil)
  if valid_611690 != nil:
    section.add "X-Amz-Signature", valid_611690
  var valid_611691 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611691 = validateParameter(valid_611691, JString, required = false,
                                 default = nil)
  if valid_611691 != nil:
    section.add "X-Amz-Content-Sha256", valid_611691
  var valid_611692 = header.getOrDefault("X-Amz-Date")
  valid_611692 = validateParameter(valid_611692, JString, required = false,
                                 default = nil)
  if valid_611692 != nil:
    section.add "X-Amz-Date", valid_611692
  var valid_611693 = header.getOrDefault("X-Amz-Credential")
  valid_611693 = validateParameter(valid_611693, JString, required = false,
                                 default = nil)
  if valid_611693 != nil:
    section.add "X-Amz-Credential", valid_611693
  var valid_611694 = header.getOrDefault("X-Amz-Security-Token")
  valid_611694 = validateParameter(valid_611694, JString, required = false,
                                 default = nil)
  if valid_611694 != nil:
    section.add "X-Amz-Security-Token", valid_611694
  var valid_611695 = header.getOrDefault("X-Amz-Algorithm")
  valid_611695 = validateParameter(valid_611695, JString, required = false,
                                 default = nil)
  if valid_611695 != nil:
    section.add "X-Amz-Algorithm", valid_611695
  var valid_611696 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611696 = validateParameter(valid_611696, JString, required = false,
                                 default = nil)
  if valid_611696 != nil:
    section.add "X-Amz-SignedHeaders", valid_611696
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611697: Call_GetStopDBInstance_611683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_611697.validator(path, query, header, formData, body)
  let scheme = call_611697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611697.url(scheme.get, call_611697.host, call_611697.base,
                         call_611697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611697, url, valid)

proc call*(call_611698: Call_GetStopDBInstance_611683;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611699 = newJObject()
  add(query_611699, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_611699, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_611699, "Action", newJString(Action))
  add(query_611699, "Version", newJString(Version))
  result = call_611698.call(nil, query_611699, nil, nil, nil)

var getStopDBInstance* = Call_GetStopDBInstance_611683(name: "getStopDBInstance",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBInstance", validator: validate_GetStopDBInstance_611684,
    base: "/", url: url_GetStopDBInstance_611685,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, $input.getOrDefault("body"))
  result.atozSign(input.getOrDefault("query"), SHA256)
